
GrandOlivStm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b410  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  0800b5e0  0800b5e0  0001b5e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b720  0800b720  0002017c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b720  0800b720  0001b720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b728  0800b728  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b728  0800b728  0001b728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b72c  0800b72c  0001b72c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800b730  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005714  2000017c  0800b8ac  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005890  0800b8ac  00025890  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000305fe  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a60  00000000  00000000  000507aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ff0  00000000  00000000  00056210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e10  00000000  00000000  00058200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007c98  00000000  00000000  0005a010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027e98  00000000  00000000  00061ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eeb74  00000000  00000000  00089b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001786b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ac0  00000000  00000000  00178708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000017c 	.word	0x2000017c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b5c8 	.word	0x0800b5c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000180 	.word	0x20000180
 800020c:	0800b5c8 	.word	0x0800b5c8

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fe66 	bl	80011dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f834 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 fabc 	bl	8000a90 <MX_GPIO_Init>
  MX_DMA_Init();
 8000518:	f000 fa9a 	bl	8000a50 <MX_DMA_Init>
  MX_ADC1_Init();
 800051c:	f000 f89a 	bl	8000654 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000520:	f000 f8ea 	bl	80006f8 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000524:	f000 f916 	bl	8000754 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000528:	f000 f96c 	bl	8000804 <MX_TIM2_Init>
  MX_TIM3_Init();
 800052c:	f000 f9be 	bl	80008ac <MX_TIM3_Init>
  MX_TIM4_Init();
 8000530:	f000 fa10 	bl	8000954 <MX_TIM4_Init>
  MX_UART4_Init();
 8000534:	f000 fa62 	bl	80009fc <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000538:	f007 fcca 	bl	8007ed0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800053c:	4a09      	ldr	r2, [pc, #36]	; (8000564 <main+0x5c>)
 800053e:	2100      	movs	r1, #0
 8000540:	4809      	ldr	r0, [pc, #36]	; (8000568 <main+0x60>)
 8000542:	f007 fd0f 	bl	8007f64 <osThreadNew>
 8000546:	4603      	mov	r3, r0
 8000548:	4a08      	ldr	r2, [pc, #32]	; (800056c <main+0x64>)
 800054a:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 800054c:	4a08      	ldr	r2, [pc, #32]	; (8000570 <main+0x68>)
 800054e:	2100      	movs	r1, #0
 8000550:	4808      	ldr	r0, [pc, #32]	; (8000574 <main+0x6c>)
 8000552:	f007 fd07 	bl	8007f64 <osThreadNew>
 8000556:	4603      	mov	r3, r0
 8000558:	4a07      	ldr	r2, [pc, #28]	; (8000578 <main+0x70>)
 800055a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800055c:	f007 fcdc 	bl	8007f18 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000560:	e7fe      	b.n	8000560 <main+0x58>
 8000562:	bf00      	nop
 8000564:	0800b658 	.word	0x0800b658
 8000568:	08000bc1 	.word	0x08000bc1
 800056c:	20004b78 	.word	0x20004b78
 8000570:	0800b67c 	.word	0x0800b67c
 8000574:	08000bd5 	.word	0x08000bd5
 8000578:	20004ca8 	.word	0x20004ca8

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	; 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 031c 	add.w	r3, r7, #28
 8000586:	2234      	movs	r2, #52	; 0x34
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f00a ff4e 	bl	800b42c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 0308 	add.w	r3, r7, #8
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a0:	2300      	movs	r3, #0
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	4b29      	ldr	r3, [pc, #164]	; (800064c <SystemClock_Config+0xd0>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	4a28      	ldr	r2, [pc, #160]	; (800064c <SystemClock_Config+0xd0>)
 80005aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ae:	6413      	str	r3, [r2, #64]	; 0x40
 80005b0:	4b26      	ldr	r3, [pc, #152]	; (800064c <SystemClock_Config+0xd0>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005bc:	2300      	movs	r3, #0
 80005be:	603b      	str	r3, [r7, #0]
 80005c0:	4b23      	ldr	r3, [pc, #140]	; (8000650 <SystemClock_Config+0xd4>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005c8:	4a21      	ldr	r2, [pc, #132]	; (8000650 <SystemClock_Config+0xd4>)
 80005ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <SystemClock_Config+0xd4>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d8:	603b      	str	r3, [r7, #0]
 80005da:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005dc:	2302      	movs	r3, #2
 80005de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e0:	2301      	movs	r3, #1
 80005e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e4:	2310      	movs	r3, #16
 80005e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e8:	2302      	movs	r3, #2
 80005ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005f2:	2304      	movs	r3, #4
 80005f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005f6:	2348      	movs	r3, #72	; 0x48
 80005f8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005fa:	2302      	movs	r3, #2
 80005fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005fe:	2303      	movs	r3, #3
 8000600:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000602:	2302      	movs	r3, #2
 8000604:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000606:	f107 031c 	add.w	r3, r7, #28
 800060a:	4618      	mov	r0, r3
 800060c:	f003 ff48 	bl	80044a0 <HAL_RCC_OscConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000616:	f000 fae5 	bl	8000be4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061a:	230f      	movs	r3, #15
 800061c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800061e:	2300      	movs	r3, #0
 8000620:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800062e:	f107 0308 	add.w	r3, r7, #8
 8000632:	2100      	movs	r1, #0
 8000634:	4618      	mov	r0, r3
 8000636:	f003 f90b 	bl	8003850 <HAL_RCC_ClockConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000640:	f000 fad0 	bl	8000be4 <Error_Handler>
  }
}
 8000644:	bf00      	nop
 8000646:	3750      	adds	r7, #80	; 0x50
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40023800 	.word	0x40023800
 8000650:	40007000 	.word	0x40007000

08000654 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800065a:	463b      	mov	r3, r7
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000666:	4b21      	ldr	r3, [pc, #132]	; (80006ec <MX_ADC1_Init+0x98>)
 8000668:	4a21      	ldr	r2, [pc, #132]	; (80006f0 <MX_ADC1_Init+0x9c>)
 800066a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <MX_ADC1_Init+0x98>)
 800066e:	2200      	movs	r2, #0
 8000670:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000672:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <MX_ADC1_Init+0x98>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000678:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <MX_ADC1_Init+0x98>)
 800067a:	2200      	movs	r2, #0
 800067c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800067e:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <MX_ADC1_Init+0x98>)
 8000680:	2200      	movs	r2, #0
 8000682:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000684:	4b19      	ldr	r3, [pc, #100]	; (80006ec <MX_ADC1_Init+0x98>)
 8000686:	2200      	movs	r2, #0
 8000688:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800068c:	4b17      	ldr	r3, [pc, #92]	; (80006ec <MX_ADC1_Init+0x98>)
 800068e:	2200      	movs	r2, #0
 8000690:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000692:	4b16      	ldr	r3, [pc, #88]	; (80006ec <MX_ADC1_Init+0x98>)
 8000694:	4a17      	ldr	r2, [pc, #92]	; (80006f4 <MX_ADC1_Init+0xa0>)
 8000696:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000698:	4b14      	ldr	r3, [pc, #80]	; (80006ec <MX_ADC1_Init+0x98>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <MX_ADC1_Init+0x98>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_ADC1_Init+0x98>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_ADC1_Init+0x98>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006b2:	480e      	ldr	r0, [pc, #56]	; (80006ec <MX_ADC1_Init+0x98>)
 80006b4:	f000 fde4 	bl	8001280 <HAL_ADC_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80006be:	f000 fa91 	bl	8000be4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80006c2:	2308      	movs	r3, #8
 80006c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006c6:	2301      	movs	r3, #1
 80006c8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ce:	463b      	mov	r3, r7
 80006d0:	4619      	mov	r1, r3
 80006d2:	4806      	ldr	r0, [pc, #24]	; (80006ec <MX_ADC1_Init+0x98>)
 80006d4:	f000 fe18 	bl	8001308 <HAL_ADC_ConfigChannel>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006de:	f000 fa81 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20004c60 	.word	0x20004c60
 80006f0:	40012000 	.word	0x40012000
 80006f4:	0f000001 	.word	0x0f000001

080006f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_I2C1_Init+0x50>)
 80006fe:	4a13      	ldr	r2, [pc, #76]	; (800074c <MX_I2C1_Init+0x54>)
 8000700:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_I2C1_Init+0x50>)
 8000704:	4a12      	ldr	r2, [pc, #72]	; (8000750 <MX_I2C1_Init+0x58>)
 8000706:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_I2C1_Init+0x50>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_I2C1_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_I2C1_Init+0x50>)
 8000716:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800071a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800071c:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <MX_I2C1_Init+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_I2C1_Init+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000728:	4b07      	ldr	r3, [pc, #28]	; (8000748 <MX_I2C1_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_I2C1_Init+0x50>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000734:	4804      	ldr	r0, [pc, #16]	; (8000748 <MX_I2C1_Init+0x50>)
 8000736:	f001 fd8f 	bl	8002258 <HAL_I2C_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000740:	f000 fa50 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20004bc4 	.word	0x20004bc4
 800074c:	40005400 	.word	0x40005400
 8000750:	000186a0 	.word	0x000186a0

08000754 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08c      	sub	sp, #48	; 0x30
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800075a:	f107 030c 	add.w	r3, r7, #12
 800075e:	2224      	movs	r2, #36	; 0x24
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f00a fe62 	bl	800b42c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000770:	4b22      	ldr	r3, [pc, #136]	; (80007fc <MX_TIM1_Init+0xa8>)
 8000772:	4a23      	ldr	r2, [pc, #140]	; (8000800 <MX_TIM1_Init+0xac>)
 8000774:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000776:	4b21      	ldr	r3, [pc, #132]	; (80007fc <MX_TIM1_Init+0xa8>)
 8000778:	2200      	movs	r2, #0
 800077a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800077c:	4b1f      	ldr	r3, [pc, #124]	; (80007fc <MX_TIM1_Init+0xa8>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000782:	4b1e      	ldr	r3, [pc, #120]	; (80007fc <MX_TIM1_Init+0xa8>)
 8000784:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000788:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800078a:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <MX_TIM1_Init+0xa8>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000790:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <MX_TIM1_Init+0xa8>)
 8000792:	2200      	movs	r2, #0
 8000794:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000796:	4b19      	ldr	r3, [pc, #100]	; (80007fc <MX_TIM1_Init+0xa8>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800079c:	2301      	movs	r3, #1
 800079e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80007a0:	2300      	movs	r3, #0
 80007a2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80007a4:	2301      	movs	r3, #1
 80007a6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80007b0:	2300      	movs	r3, #0
 80007b2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80007b4:	2301      	movs	r3, #1
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	4619      	mov	r1, r3
 80007c6:	480d      	ldr	r0, [pc, #52]	; (80007fc <MX_TIM1_Init+0xa8>)
 80007c8:	f004 f9d2 	bl	8004b70 <HAL_TIM_Encoder_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80007d2:	f000 fa07 	bl	8000be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007da:	2300      	movs	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	4619      	mov	r1, r3
 80007e2:	4806      	ldr	r0, [pc, #24]	; (80007fc <MX_TIM1_Init+0xa8>)
 80007e4:	f004 fb0a 	bl	8004dfc <HAL_TIMEx_MasterConfigSynchronization>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80007ee:	f000 f9f9 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	3730      	adds	r7, #48	; 0x30
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20004d0c 	.word	0x20004d0c
 8000800:	40010000 	.word	0x40010000

08000804 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08c      	sub	sp, #48	; 0x30
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800080a:	f107 030c 	add.w	r3, r7, #12
 800080e:	2224      	movs	r2, #36	; 0x24
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f00a fe0a 	bl	800b42c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000820:	4b21      	ldr	r3, [pc, #132]	; (80008a8 <MX_TIM2_Init+0xa4>)
 8000822:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000826:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000828:	4b1f      	ldr	r3, [pc, #124]	; (80008a8 <MX_TIM2_Init+0xa4>)
 800082a:	2200      	movs	r2, #0
 800082c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082e:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <MX_TIM2_Init+0xa4>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000834:	4b1c      	ldr	r3, [pc, #112]	; (80008a8 <MX_TIM2_Init+0xa4>)
 8000836:	f04f 32ff 	mov.w	r2, #4294967295
 800083a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800083c:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <MX_TIM2_Init+0xa4>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000842:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <MX_TIM2_Init+0xa4>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000848:	2301      	movs	r3, #1
 800084a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800084c:	2300      	movs	r3, #0
 800084e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000850:	2301      	movs	r3, #1
 8000852:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000854:	2300      	movs	r3, #0
 8000856:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800085c:	2300      	movs	r3, #0
 800085e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000860:	2301      	movs	r3, #1
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	4619      	mov	r1, r3
 8000872:	480d      	ldr	r0, [pc, #52]	; (80008a8 <MX_TIM2_Init+0xa4>)
 8000874:	f004 f97c 	bl	8004b70 <HAL_TIM_Encoder_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800087e:	f000 f9b1 	bl	8000be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000886:	2300      	movs	r3, #0
 8000888:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	4619      	mov	r1, r3
 800088e:	4806      	ldr	r0, [pc, #24]	; (80008a8 <MX_TIM2_Init+0xa4>)
 8000890:	f004 fab4 	bl	8004dfc <HAL_TIMEx_MasterConfigSynchronization>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800089a:	f000 f9a3 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	3730      	adds	r7, #48	; 0x30
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20004d98 	.word	0x20004d98

080008ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08c      	sub	sp, #48	; 0x30
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008b2:	f107 030c 	add.w	r3, r7, #12
 80008b6:	2224      	movs	r2, #36	; 0x24
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f00a fdb6 	bl	800b42c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008c8:	4b20      	ldr	r3, [pc, #128]	; (800094c <MX_TIM3_Init+0xa0>)
 80008ca:	4a21      	ldr	r2, [pc, #132]	; (8000950 <MX_TIM3_Init+0xa4>)
 80008cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008ce:	4b1f      	ldr	r3, [pc, #124]	; (800094c <MX_TIM3_Init+0xa0>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d4:	4b1d      	ldr	r3, [pc, #116]	; (800094c <MX_TIM3_Init+0xa0>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80008da:	4b1c      	ldr	r3, [pc, #112]	; (800094c <MX_TIM3_Init+0xa0>)
 80008dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e2:	4b1a      	ldr	r3, [pc, #104]	; (800094c <MX_TIM3_Init+0xa0>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e8:	4b18      	ldr	r3, [pc, #96]	; (800094c <MX_TIM3_Init+0xa0>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80008ee:	2301      	movs	r3, #1
 80008f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008f2:	2300      	movs	r3, #0
 80008f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008f6:	2301      	movs	r3, #1
 80008f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000902:	2300      	movs	r3, #0
 8000904:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000906:	2301      	movs	r3, #1
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000912:	f107 030c 	add.w	r3, r7, #12
 8000916:	4619      	mov	r1, r3
 8000918:	480c      	ldr	r0, [pc, #48]	; (800094c <MX_TIM3_Init+0xa0>)
 800091a:	f004 f929 	bl	8004b70 <HAL_TIM_Encoder_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000924:	f000 f95e 	bl	8000be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000928:	2300      	movs	r3, #0
 800092a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800092c:	2300      	movs	r3, #0
 800092e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	4619      	mov	r1, r3
 8000934:	4805      	ldr	r0, [pc, #20]	; (800094c <MX_TIM3_Init+0xa0>)
 8000936:	f004 fa61 	bl	8004dfc <HAL_TIMEx_MasterConfigSynchronization>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000940:	f000 f950 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	3730      	adds	r7, #48	; 0x30
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20004c18 	.word	0x20004c18
 8000950:	40000400 	.word	0x40000400

08000954 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08c      	sub	sp, #48	; 0x30
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800095a:	f107 030c 	add.w	r3, r7, #12
 800095e:	2224      	movs	r2, #36	; 0x24
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f00a fd62 	bl	800b42c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000970:	4b20      	ldr	r3, [pc, #128]	; (80009f4 <MX_TIM4_Init+0xa0>)
 8000972:	4a21      	ldr	r2, [pc, #132]	; (80009f8 <MX_TIM4_Init+0xa4>)
 8000974:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000976:	4b1f      	ldr	r3, [pc, #124]	; (80009f4 <MX_TIM4_Init+0xa0>)
 8000978:	2200      	movs	r2, #0
 800097a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097c:	4b1d      	ldr	r3, [pc, #116]	; (80009f4 <MX_TIM4_Init+0xa0>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000982:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <MX_TIM4_Init+0xa0>)
 8000984:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000988:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800098a:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <MX_TIM4_Init+0xa0>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000990:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <MX_TIM4_Init+0xa0>)
 8000992:	2200      	movs	r2, #0
 8000994:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000996:	2301      	movs	r3, #1
 8000998:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800099e:	2301      	movs	r3, #1
 80009a0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009aa:	2300      	movs	r3, #0
 80009ac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009ae:	2301      	movs	r3, #1
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80009ba:	f107 030c 	add.w	r3, r7, #12
 80009be:	4619      	mov	r1, r3
 80009c0:	480c      	ldr	r0, [pc, #48]	; (80009f4 <MX_TIM4_Init+0xa0>)
 80009c2:	f004 f8d5 	bl	8004b70 <HAL_TIM_Encoder_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80009cc:	f000 f90a 	bl	8000be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d0:	2300      	movs	r3, #0
 80009d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	4619      	mov	r1, r3
 80009dc:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_TIM4_Init+0xa0>)
 80009de:	f004 fa0d 	bl	8004dfc <HAL_TIMEx_MasterConfigSynchronization>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80009e8:	f000 f8fc 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	3730      	adds	r7, #48	; 0x30
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20004b7c 	.word	0x20004b7c
 80009f8:	40000800 	.word	0x40000800

080009fc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <MX_UART4_Init+0x4c>)
 8000a02:	4a12      	ldr	r2, [pc, #72]	; (8000a4c <MX_UART4_Init+0x50>)
 8000a04:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a06:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <MX_UART4_Init+0x4c>)
 8000a08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a0c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <MX_UART4_Init+0x4c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <MX_UART4_Init+0x4c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <MX_UART4_Init+0x4c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_UART4_Init+0x4c>)
 8000a22:	220c      	movs	r2, #12
 8000a24:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a26:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <MX_UART4_Init+0x4c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <MX_UART4_Init+0x4c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_UART4_Init+0x4c>)
 8000a34:	f004 fa5e 	bl	8004ef4 <HAL_UART_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000a3e:	f000 f8d1 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20004d54 	.word	0x20004d54
 8000a4c:	40004c00 	.word	0x40004c00

08000a50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <MX_DMA_Init+0x3c>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a0b      	ldr	r2, [pc, #44]	; (8000a8c <MX_DMA_Init+0x3c>)
 8000a60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <MX_DMA_Init+0x3c>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2105      	movs	r1, #5
 8000a76:	2038      	movs	r0, #56	; 0x38
 8000a78:	f000 ff2c 	bl	80018d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a7c:	2038      	movs	r0, #56	; 0x38
 8000a7e:	f000 ff45 	bl	800190c <HAL_NVIC_EnableIRQ>

}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800

08000a90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	; 0x28
 8000a94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
 8000aa4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
 8000aaa:	4b41      	ldr	r3, [pc, #260]	; (8000bb0 <MX_GPIO_Init+0x120>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a40      	ldr	r2, [pc, #256]	; (8000bb0 <MX_GPIO_Init+0x120>)
 8000ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b3e      	ldr	r3, [pc, #248]	; (8000bb0 <MX_GPIO_Init+0x120>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	4b3a      	ldr	r3, [pc, #232]	; (8000bb0 <MX_GPIO_Init+0x120>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a39      	ldr	r2, [pc, #228]	; (8000bb0 <MX_GPIO_Init+0x120>)
 8000acc:	f043 0304 	orr.w	r3, r3, #4
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b37      	ldr	r3, [pc, #220]	; (8000bb0 <MX_GPIO_Init+0x120>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0304 	and.w	r3, r3, #4
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60bb      	str	r3, [r7, #8]
 8000ae2:	4b33      	ldr	r3, [pc, #204]	; (8000bb0 <MX_GPIO_Init+0x120>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a32      	ldr	r2, [pc, #200]	; (8000bb0 <MX_GPIO_Init+0x120>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b30      	ldr	r3, [pc, #192]	; (8000bb0 <MX_GPIO_Init+0x120>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	4b2c      	ldr	r3, [pc, #176]	; (8000bb0 <MX_GPIO_Init+0x120>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a2b      	ldr	r2, [pc, #172]	; (8000bb0 <MX_GPIO_Init+0x120>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b29      	ldr	r3, [pc, #164]	; (8000bb0 <MX_GPIO_Init+0x120>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_7
 8000b16:	2200      	movs	r2, #0
 8000b18:	f240 31c5 	movw	r1, #965	; 0x3c5
 8000b1c:	4825      	ldr	r0, [pc, #148]	; (8000bb4 <MX_GPIO_Init+0x124>)
 8000b1e:	f001 fb81 	bl	8002224 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_14, GPIO_PIN_RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	f244 011c 	movw	r1, #16412	; 0x401c
 8000b28:	4823      	ldr	r0, [pc, #140]	; (8000bb8 <MX_GPIO_Init+0x128>)
 8000b2a:	f001 fb7b 	bl	8002224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2118      	movs	r1, #24
 8000b32:	4822      	ldr	r0, [pc, #136]	; (8000bbc <MX_GPIO_Init+0x12c>)
 8000b34:	f001 fb76 	bl	8002224 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC2 PC6 PC7
                           PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_7
 8000b38:	f240 33c5 	movw	r3, #965	; 0x3c5
 8000b3c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4818      	ldr	r0, [pc, #96]	; (8000bb4 <MX_GPIO_Init+0x124>)
 8000b52:	f001 f9d3 	bl	8001efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b56:	2302      	movs	r3, #2
 8000b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	4812      	ldr	r0, [pc, #72]	; (8000bb4 <MX_GPIO_Init+0x124>)
 8000b6a:	f001 f9c7 	bl	8001efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_14;
 8000b6e:	f244 031c 	movw	r3, #16412	; 0x401c
 8000b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b74:	2301      	movs	r3, #1
 8000b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	4619      	mov	r1, r3
 8000b86:	480c      	ldr	r0, [pc, #48]	; (8000bb8 <MX_GPIO_Init+0x128>)
 8000b88:	f001 f9b8 	bl	8001efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000b8c:	2318      	movs	r3, #24
 8000b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b90:	2301      	movs	r3, #1
 8000b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4806      	ldr	r0, [pc, #24]	; (8000bbc <MX_GPIO_Init+0x12c>)
 8000ba4:	f001 f9aa 	bl	8001efc <HAL_GPIO_Init>

}
 8000ba8:	bf00      	nop
 8000baa:	3728      	adds	r7, #40	; 0x28
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40020800 	.word	0x40020800
 8000bb8:	40020000 	.word	0x40020000
 8000bbc:	40020400 	.word	0x40020400

08000bc0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000bc8:	f009 ff00 	bl	800a9cc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bcc:	2001      	movs	r0, #1
 8000bce:	f007 fa5b 	bl	8008088 <osDelay>
 8000bd2:	e7fb      	b.n	8000bcc <StartDefaultTask+0xc>

08000bd4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bdc:	2001      	movs	r0, #1
 8000bde:	f007 fa53 	bl	8008088 <osDelay>
 8000be2:	e7fb      	b.n	8000bdc <StartTask02+0x8>

08000be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be8:	b672      	cpsid	i
}
 8000bea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bec:	e7fe      	b.n	8000bec <Error_Handler+0x8>
	...

08000bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <HAL_MspInit+0x54>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	4a11      	ldr	r2, [pc, #68]	; (8000c44 <HAL_MspInit+0x54>)
 8000c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c04:	6453      	str	r3, [r2, #68]	; 0x44
 8000c06:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <HAL_MspInit+0x54>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	603b      	str	r3, [r7, #0]
 8000c16:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <HAL_MspInit+0x54>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <HAL_MspInit+0x54>)
 8000c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c20:	6413      	str	r3, [r2, #64]	; 0x40
 8000c22:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <HAL_MspInit+0x54>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	210f      	movs	r1, #15
 8000c32:	f06f 0001 	mvn.w	r0, #1
 8000c36:	f000 fe4d 	bl	80018d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40023800 	.word	0x40023800

08000c48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a2e      	ldr	r2, [pc, #184]	; (8000d20 <HAL_ADC_MspInit+0xd8>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d156      	bne.n	8000d18 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	4b2d      	ldr	r3, [pc, #180]	; (8000d24 <HAL_ADC_MspInit+0xdc>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	4a2c      	ldr	r2, [pc, #176]	; (8000d24 <HAL_ADC_MspInit+0xdc>)
 8000c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c78:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7a:	4b2a      	ldr	r3, [pc, #168]	; (8000d24 <HAL_ADC_MspInit+0xdc>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	4b26      	ldr	r3, [pc, #152]	; (8000d24 <HAL_ADC_MspInit+0xdc>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a25      	ldr	r2, [pc, #148]	; (8000d24 <HAL_ADC_MspInit+0xdc>)
 8000c90:	f043 0302 	orr.w	r3, r3, #2
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b23      	ldr	r3, [pc, #140]	; (8000d24 <HAL_ADC_MspInit+0xdc>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0302 	and.w	r3, r3, #2
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	481c      	ldr	r0, [pc, #112]	; (8000d28 <HAL_ADC_MspInit+0xe0>)
 8000cb6:	f001 f921 	bl	8001efc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000cba:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <HAL_ADC_MspInit+0xe4>)
 8000cbc:	4a1c      	ldr	r2, [pc, #112]	; (8000d30 <HAL_ADC_MspInit+0xe8>)
 8000cbe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000cc0:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <HAL_ADC_MspInit+0xe4>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cc6:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <HAL_ADC_MspInit+0xe4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ccc:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <HAL_ADC_MspInit+0xe4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000cd2:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <HAL_ADC_MspInit+0xe4>)
 8000cd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cd8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cda:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <HAL_ADC_MspInit+0xe4>)
 8000cdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ce0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ce2:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <HAL_ADC_MspInit+0xe4>)
 8000ce4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ce8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000cea:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <HAL_ADC_MspInit+0xe4>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000cf0:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <HAL_ADC_MspInit+0xe4>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <HAL_ADC_MspInit+0xe4>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cfc:	480b      	ldr	r0, [pc, #44]	; (8000d2c <HAL_ADC_MspInit+0xe4>)
 8000cfe:	f000 fe13 	bl	8001928 <HAL_DMA_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000d08:	f7ff ff6c 	bl	8000be4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a07      	ldr	r2, [pc, #28]	; (8000d2c <HAL_ADC_MspInit+0xe4>)
 8000d10:	639a      	str	r2, [r3, #56]	; 0x38
 8000d12:	4a06      	ldr	r2, [pc, #24]	; (8000d2c <HAL_ADC_MspInit+0xe4>)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d18:	bf00      	nop
 8000d1a:	3728      	adds	r7, #40	; 0x28
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40012000 	.word	0x40012000
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40020400 	.word	0x40020400
 8000d2c:	20004cac 	.word	0x20004cac
 8000d30:	40026410 	.word	0x40026410

08000d34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	; 0x28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a19      	ldr	r2, [pc, #100]	; (8000db8 <HAL_I2C_MspInit+0x84>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d12c      	bne.n	8000db0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <HAL_I2C_MspInit+0x88>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a17      	ldr	r2, [pc, #92]	; (8000dbc <HAL_I2C_MspInit+0x88>)
 8000d60:	f043 0302 	orr.w	r3, r3, #2
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <HAL_I2C_MspInit+0x88>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0302 	and.w	r3, r3, #2
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d78:	2312      	movs	r3, #18
 8000d7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d80:	2303      	movs	r3, #3
 8000d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d84:	2304      	movs	r3, #4
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	480c      	ldr	r0, [pc, #48]	; (8000dc0 <HAL_I2C_MspInit+0x8c>)
 8000d90:	f001 f8b4 	bl	8001efc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d94:	2300      	movs	r3, #0
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <HAL_I2C_MspInit+0x88>)
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9c:	4a07      	ldr	r2, [pc, #28]	; (8000dbc <HAL_I2C_MspInit+0x88>)
 8000d9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000da2:	6413      	str	r3, [r2, #64]	; 0x40
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <HAL_I2C_MspInit+0x88>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000db0:	bf00      	nop
 8000db2:	3728      	adds	r7, #40	; 0x28
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40005400 	.word	0x40005400
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020400 	.word	0x40020400

08000dc4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b090      	sub	sp, #64	; 0x40
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a64      	ldr	r2, [pc, #400]	; (8000f74 <HAL_TIM_Encoder_MspInit+0x1b0>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d12d      	bne.n	8000e42 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000dea:	4b63      	ldr	r3, [pc, #396]	; (8000f78 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	4a62      	ldr	r2, [pc, #392]	; (8000f78 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6453      	str	r3, [r2, #68]	; 0x44
 8000df6:	4b60      	ldr	r3, [pc, #384]	; (8000f78 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e00:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
 8000e06:	4b5c      	ldr	r3, [pc, #368]	; (8000f78 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a5b      	ldr	r2, [pc, #364]	; (8000f78 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b59      	ldr	r3, [pc, #356]	; (8000f78 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8000e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e24:	2302      	movs	r3, #2
 8000e26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e30:	2301      	movs	r3, #1
 8000e32:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4850      	ldr	r0, [pc, #320]	; (8000f7c <HAL_TIM_Encoder_MspInit+0x1b8>)
 8000e3c:	f001 f85e 	bl	8001efc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000e40:	e094      	b.n	8000f6c <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM2)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e4a:	d12c      	bne.n	8000ea6 <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	623b      	str	r3, [r7, #32]
 8000e50:	4b49      	ldr	r3, [pc, #292]	; (8000f78 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e54:	4a48      	ldr	r2, [pc, #288]	; (8000f78 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000e56:	f043 0301 	orr.w	r3, r3, #1
 8000e5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5c:	4b46      	ldr	r3, [pc, #280]	; (8000f78 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	623b      	str	r3, [r7, #32]
 8000e66:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61fb      	str	r3, [r7, #28]
 8000e6c:	4b42      	ldr	r3, [pc, #264]	; (8000f78 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e70:	4a41      	ldr	r2, [pc, #260]	; (8000f78 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000e72:	f043 0301 	orr.w	r3, r3, #1
 8000e76:	6313      	str	r3, [r2, #48]	; 0x30
 8000e78:	4b3f      	ldr	r3, [pc, #252]	; (8000f78 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	61fb      	str	r3, [r7, #28]
 8000e82:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8000e84:	2322      	movs	r3, #34	; 0x22
 8000e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e90:	2300      	movs	r3, #0
 8000e92:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e94:	2301      	movs	r3, #1
 8000e96:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4837      	ldr	r0, [pc, #220]	; (8000f7c <HAL_TIM_Encoder_MspInit+0x1b8>)
 8000ea0:	f001 f82c 	bl	8001efc <HAL_GPIO_Init>
}
 8000ea4:	e062      	b.n	8000f6c <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM3)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a35      	ldr	r2, [pc, #212]	; (8000f80 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d12c      	bne.n	8000f0a <HAL_TIM_Encoder_MspInit+0x146>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61bb      	str	r3, [r7, #24]
 8000eb4:	4b30      	ldr	r3, [pc, #192]	; (8000f78 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb8:	4a2f      	ldr	r2, [pc, #188]	; (8000f78 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000eba:	f043 0302 	orr.w	r3, r3, #2
 8000ebe:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec0:	4b2d      	ldr	r3, [pc, #180]	; (8000f78 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	f003 0302 	and.w	r3, r3, #2
 8000ec8:	61bb      	str	r3, [r7, #24]
 8000eca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	4b29      	ldr	r3, [pc, #164]	; (8000f78 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed4:	4a28      	ldr	r2, [pc, #160]	; (8000f78 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000ed6:	f043 0301 	orr.w	r3, r3, #1
 8000eda:	6313      	str	r3, [r2, #48]	; 0x30
 8000edc:	4b26      	ldr	r3, [pc, #152]	; (8000f78 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	617b      	str	r3, [r7, #20]
 8000ee6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ee8:	23c0      	movs	r3, #192	; 0xc0
 8000eea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f00:	4619      	mov	r1, r3
 8000f02:	481e      	ldr	r0, [pc, #120]	; (8000f7c <HAL_TIM_Encoder_MspInit+0x1b8>)
 8000f04:	f000 fffa 	bl	8001efc <HAL_GPIO_Init>
}
 8000f08:	e030      	b.n	8000f6c <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM4)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a1d      	ldr	r2, [pc, #116]	; (8000f84 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d12b      	bne.n	8000f6c <HAL_TIM_Encoder_MspInit+0x1a8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f14:	2300      	movs	r3, #0
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1c:	4a16      	ldr	r2, [pc, #88]	; (8000f78 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000f1e:	f043 0304 	orr.w	r3, r3, #4
 8000f22:	6413      	str	r3, [r2, #64]	; 0x40
 8000f24:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f28:	f003 0304 	and.w	r3, r3, #4
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f30:	2300      	movs	r3, #0
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f38:	4a0f      	ldr	r2, [pc, #60]	; (8000f78 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000f3a:	f043 0302 	orr.w	r3, r3, #2
 8000f3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f40:	4b0d      	ldr	r3, [pc, #52]	; (8000f78 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f44:	f003 0302 	and.w	r3, r3, #2
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f4c:	23c0      	movs	r3, #192	; 0xc0
 8000f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f50:	2302      	movs	r3, #2
 8000f52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f64:	4619      	mov	r1, r3
 8000f66:	4808      	ldr	r0, [pc, #32]	; (8000f88 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000f68:	f000 ffc8 	bl	8001efc <HAL_GPIO_Init>
}
 8000f6c:	bf00      	nop
 8000f6e:	3740      	adds	r7, #64	; 0x40
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40010000 	.word	0x40010000
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40020000 	.word	0x40020000
 8000f80:	40000400 	.word	0x40000400
 8000f84:	40000800 	.word	0x40000800
 8000f88:	40020400 	.word	0x40020400

08000f8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a28      	ldr	r2, [pc, #160]	; (800104c <HAL_UART_MspInit+0xc0>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d14a      	bne.n	8001044 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
 8000fb2:	4b27      	ldr	r3, [pc, #156]	; (8001050 <HAL_UART_MspInit+0xc4>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	4a26      	ldr	r2, [pc, #152]	; (8001050 <HAL_UART_MspInit+0xc4>)
 8000fb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fbe:	4b24      	ldr	r3, [pc, #144]	; (8001050 <HAL_UART_MspInit+0xc4>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	4b20      	ldr	r3, [pc, #128]	; (8001050 <HAL_UART_MspInit+0xc4>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a1f      	ldr	r2, [pc, #124]	; (8001050 <HAL_UART_MspInit+0xc4>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <HAL_UART_MspInit+0xc4>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	4b19      	ldr	r3, [pc, #100]	; (8001050 <HAL_UART_MspInit+0xc4>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a18      	ldr	r2, [pc, #96]	; (8001050 <HAL_UART_MspInit+0xc4>)
 8000ff0:	f043 0304 	orr.w	r3, r3, #4
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b16      	ldr	r3, [pc, #88]	; (8001050 <HAL_UART_MspInit+0xc4>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0304 	and.w	r3, r3, #4
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001002:	2301      	movs	r3, #1
 8001004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100e:	2303      	movs	r3, #3
 8001010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001012:	2308      	movs	r3, #8
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	480d      	ldr	r0, [pc, #52]	; (8001054 <HAL_UART_MspInit+0xc8>)
 800101e:	f000 ff6d 	bl	8001efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001022:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001028:	2302      	movs	r3, #2
 800102a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001030:	2303      	movs	r3, #3
 8001032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001034:	2308      	movs	r3, #8
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	4619      	mov	r1, r3
 800103e:	4806      	ldr	r0, [pc, #24]	; (8001058 <HAL_UART_MspInit+0xcc>)
 8001040:	f000 ff5c 	bl	8001efc <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001044:	bf00      	nop
 8001046:	3728      	adds	r7, #40	; 0x28
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40004c00 	.word	0x40004c00
 8001050:	40023800 	.word	0x40023800
 8001054:	40020000 	.word	0x40020000
 8001058:	40020800 	.word	0x40020800

0800105c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08c      	sub	sp, #48	; 0x30
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 800106c:	2200      	movs	r2, #0
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f000 fc2e 	bl	80018d4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(SysTick_IRQn);
 8001078:	f04f 30ff 	mov.w	r0, #4294967295
 800107c:	f000 fc46 	bl	800190c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001080:	2300      	movs	r3, #0
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <HAL_InitTick+0xa4>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001088:	4a1d      	ldr	r2, [pc, #116]	; (8001100 <HAL_InitTick+0xa4>)
 800108a:	f043 0310 	orr.w	r3, r3, #16
 800108e:	6413      	str	r3, [r2, #64]	; 0x40
 8001090:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <HAL_InitTick+0xa4>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	f003 0310 	and.w	r3, r3, #16
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800109c:	f107 0210 	add.w	r2, r7, #16
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	4611      	mov	r1, r2
 80010a6:	4618      	mov	r0, r3
 80010a8:	f002 fcec 	bl	8003a84 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80010ac:	f002 fcc2 	bl	8003a34 <HAL_RCC_GetPCLK1Freq>
 80010b0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010b4:	4a13      	ldr	r2, [pc, #76]	; (8001104 <HAL_InitTick+0xa8>)
 80010b6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ba:	0c9b      	lsrs	r3, r3, #18
 80010bc:	3b01      	subs	r3, #1
 80010be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <HAL_InitTick+0xac>)
 80010c2:	4a12      	ldr	r2, [pc, #72]	; (800110c <HAL_InitTick+0xb0>)
 80010c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <HAL_InitTick+0xac>)
 80010c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010cc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80010ce:	4a0e      	ldr	r2, [pc, #56]	; (8001108 <HAL_InitTick+0xac>)
 80010d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <HAL_InitTick+0xac>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <HAL_InitTick+0xac>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80010e0:	4809      	ldr	r0, [pc, #36]	; (8001108 <HAL_InitTick+0xac>)
 80010e2:	f003 fc7b 	bl	80049dc <HAL_TIM_Base_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d104      	bne.n	80010f6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80010ec:	4806      	ldr	r0, [pc, #24]	; (8001108 <HAL_InitTick+0xac>)
 80010ee:	f003 fccf 	bl	8004a90 <HAL_TIM_Base_Start_IT>
 80010f2:	4603      	mov	r3, r0
 80010f4:	e000      	b.n	80010f8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3730      	adds	r7, #48	; 0x30
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40023800 	.word	0x40023800
 8001104:	431bde83 	.word	0x431bde83
 8001108:	20004de0 	.word	0x20004de0
 800110c:	40001000 	.word	0x40001000

08001110 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <NMI_Handler+0x4>

08001116 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111a:	e7fe      	b.n	800111a <HardFault_Handler+0x4>

0800111c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001120:	e7fe      	b.n	8001120 <MemManage_Handler+0x4>

08001122 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001126:	e7fe      	b.n	8001126 <BusFault_Handler+0x4>

08001128 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800112c:	e7fe      	b.n	800112c <UsageFault_Handler+0x4>

0800112e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001140:	4802      	ldr	r0, [pc, #8]	; (800114c <DMA2_Stream0_IRQHandler+0x10>)
 8001142:	f000 fc9f 	bl	8001a84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20004cac 	.word	0x20004cac

08001150 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001154:	4802      	ldr	r0, [pc, #8]	; (8001160 <OTG_FS_IRQHandler+0x10>)
 8001156:	f001 fb1a 	bl	800278e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	2000547c 	.word	0x2000547c

08001164 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <SystemInit+0x20>)
 800116a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800116e:	4a05      	ldr	r2, [pc, #20]	; (8001184 <SystemInit+0x20>)
 8001170:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001174:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001188:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800118c:	480d      	ldr	r0, [pc, #52]	; (80011c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800118e:	490e      	ldr	r1, [pc, #56]	; (80011c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001190:	4a0e      	ldr	r2, [pc, #56]	; (80011cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001194:	e002      	b.n	800119c <LoopCopyDataInit>

08001196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119a:	3304      	adds	r3, #4

0800119c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800119c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a0:	d3f9      	bcc.n	8001196 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a2:	4a0b      	ldr	r2, [pc, #44]	; (80011d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011a4:	4c0b      	ldr	r4, [pc, #44]	; (80011d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a8:	e001      	b.n	80011ae <LoopFillZerobss>

080011aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ac:	3204      	adds	r2, #4

080011ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b0:	d3fb      	bcc.n	80011aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011b2:	f7ff ffd7 	bl	8001164 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011b6:	f00a f905 	bl	800b3c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ba:	f7ff f9a5 	bl	8000508 <main>
  bx  lr    
 80011be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c8:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80011cc:	0800b730 	.word	0x0800b730
  ldr r2, =_sbss
 80011d0:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80011d4:	20005890 	.word	0x20005890

080011d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011d8:	e7fe      	b.n	80011d8 <ADC_IRQHandler>
	...

080011dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011e0:	4b0e      	ldr	r3, [pc, #56]	; (800121c <HAL_Init+0x40>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a0d      	ldr	r2, [pc, #52]	; (800121c <HAL_Init+0x40>)
 80011e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011ec:	4b0b      	ldr	r3, [pc, #44]	; (800121c <HAL_Init+0x40>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a0a      	ldr	r2, [pc, #40]	; (800121c <HAL_Init+0x40>)
 80011f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011f8:	4b08      	ldr	r3, [pc, #32]	; (800121c <HAL_Init+0x40>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a07      	ldr	r2, [pc, #28]	; (800121c <HAL_Init+0x40>)
 80011fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001202:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001204:	2003      	movs	r0, #3
 8001206:	f000 fb5a 	bl	80018be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800120a:	200f      	movs	r0, #15
 800120c:	f7ff ff26 	bl	800105c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001210:	f7ff fcee 	bl	8000bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40023c00 	.word	0x40023c00

08001220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  return uwTick;
 8001224:	4b03      	ldr	r3, [pc, #12]	; (8001234 <HAL_GetTick+0x14>)
 8001226:	681b      	ldr	r3, [r3, #0]
}
 8001228:	4618      	mov	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	20004e28 	.word	0x20004e28

08001238 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001240:	f7ff ffee 	bl	8001220 <HAL_GetTick>
 8001244:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001250:	d005      	beq.n	800125e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001252:	4b0a      	ldr	r3, [pc, #40]	; (800127c <HAL_Delay+0x44>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	461a      	mov	r2, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4413      	add	r3, r2
 800125c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800125e:	bf00      	nop
 8001260:	f7ff ffde 	bl	8001220 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	429a      	cmp	r2, r3
 800126e:	d8f7      	bhi.n	8001260 <HAL_Delay+0x28>
  {
  }
}
 8001270:	bf00      	nop
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000008 	.word	0x20000008

08001280 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001288:	2300      	movs	r3, #0
 800128a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e033      	b.n	80012fe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	2b00      	cmp	r3, #0
 800129c:	d109      	bne.n	80012b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff fcd2 	bl	8000c48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	f003 0310 	and.w	r3, r3, #16
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d118      	bne.n	80012f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012c6:	f023 0302 	bic.w	r3, r3, #2
 80012ca:	f043 0202 	orr.w	r2, r3, #2
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f000 f94a 	bl	800156c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	f023 0303 	bic.w	r3, r3, #3
 80012e6:	f043 0201 	orr.w	r2, r3, #1
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	641a      	str	r2, [r3, #64]	; 0x40
 80012ee:	e001      	b.n	80012f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800131c:	2b01      	cmp	r3, #1
 800131e:	d101      	bne.n	8001324 <HAL_ADC_ConfigChannel+0x1c>
 8001320:	2302      	movs	r3, #2
 8001322:	e113      	b.n	800154c <HAL_ADC_ConfigChannel+0x244>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2201      	movs	r2, #1
 8001328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b09      	cmp	r3, #9
 8001332:	d925      	bls.n	8001380 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	68d9      	ldr	r1, [r3, #12]
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	b29b      	uxth	r3, r3
 8001340:	461a      	mov	r2, r3
 8001342:	4613      	mov	r3, r2
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	4413      	add	r3, r2
 8001348:	3b1e      	subs	r3, #30
 800134a:	2207      	movs	r2, #7
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43da      	mvns	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	400a      	ands	r2, r1
 8001358:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	68d9      	ldr	r1, [r3, #12]
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	b29b      	uxth	r3, r3
 800136a:	4618      	mov	r0, r3
 800136c:	4603      	mov	r3, r0
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	4403      	add	r3, r0
 8001372:	3b1e      	subs	r3, #30
 8001374:	409a      	lsls	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	430a      	orrs	r2, r1
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	e022      	b.n	80013c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6919      	ldr	r1, [r3, #16]
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	b29b      	uxth	r3, r3
 800138c:	461a      	mov	r2, r3
 800138e:	4613      	mov	r3, r2
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	4413      	add	r3, r2
 8001394:	2207      	movs	r2, #7
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43da      	mvns	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	400a      	ands	r2, r1
 80013a2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6919      	ldr	r1, [r3, #16]
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	4618      	mov	r0, r3
 80013b6:	4603      	mov	r3, r0
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	4403      	add	r3, r0
 80013bc:	409a      	lsls	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	430a      	orrs	r2, r1
 80013c4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b06      	cmp	r3, #6
 80013cc:	d824      	bhi.n	8001418 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	3b05      	subs	r3, #5
 80013e0:	221f      	movs	r2, #31
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43da      	mvns	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	400a      	ands	r2, r1
 80013ee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	4618      	mov	r0, r3
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	4613      	mov	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	3b05      	subs	r3, #5
 800140a:	fa00 f203 	lsl.w	r2, r0, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	430a      	orrs	r2, r1
 8001414:	635a      	str	r2, [r3, #52]	; 0x34
 8001416:	e04c      	b.n	80014b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b0c      	cmp	r3, #12
 800141e:	d824      	bhi.n	800146a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	4613      	mov	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4413      	add	r3, r2
 8001430:	3b23      	subs	r3, #35	; 0x23
 8001432:	221f      	movs	r2, #31
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43da      	mvns	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	400a      	ands	r2, r1
 8001440:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	b29b      	uxth	r3, r3
 800144e:	4618      	mov	r0, r3
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	4613      	mov	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	3b23      	subs	r3, #35	; 0x23
 800145c:	fa00 f203 	lsl.w	r2, r0, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	430a      	orrs	r2, r1
 8001466:	631a      	str	r2, [r3, #48]	; 0x30
 8001468:	e023      	b.n	80014b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	4613      	mov	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4413      	add	r3, r2
 800147a:	3b41      	subs	r3, #65	; 0x41
 800147c:	221f      	movs	r2, #31
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43da      	mvns	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	400a      	ands	r2, r1
 800148a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	b29b      	uxth	r3, r3
 8001498:	4618      	mov	r0, r3
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	3b41      	subs	r3, #65	; 0x41
 80014a6:	fa00 f203 	lsl.w	r2, r0, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	430a      	orrs	r2, r1
 80014b0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014b2:	4b29      	ldr	r3, [pc, #164]	; (8001558 <HAL_ADC_ConfigChannel+0x250>)
 80014b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a28      	ldr	r2, [pc, #160]	; (800155c <HAL_ADC_ConfigChannel+0x254>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d10f      	bne.n	80014e0 <HAL_ADC_ConfigChannel+0x1d8>
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b12      	cmp	r3, #18
 80014c6:	d10b      	bne.n	80014e0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a1d      	ldr	r2, [pc, #116]	; (800155c <HAL_ADC_ConfigChannel+0x254>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d12b      	bne.n	8001542 <HAL_ADC_ConfigChannel+0x23a>
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a1c      	ldr	r2, [pc, #112]	; (8001560 <HAL_ADC_ConfigChannel+0x258>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d003      	beq.n	80014fc <HAL_ADC_ConfigChannel+0x1f4>
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b11      	cmp	r3, #17
 80014fa:	d122      	bne.n	8001542 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a11      	ldr	r2, [pc, #68]	; (8001560 <HAL_ADC_ConfigChannel+0x258>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d111      	bne.n	8001542 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <HAL_ADC_ConfigChannel+0x25c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a11      	ldr	r2, [pc, #68]	; (8001568 <HAL_ADC_ConfigChannel+0x260>)
 8001524:	fba2 2303 	umull	r2, r3, r2, r3
 8001528:	0c9a      	lsrs	r2, r3, #18
 800152a:	4613      	mov	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001534:	e002      	b.n	800153c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	3b01      	subs	r3, #1
 800153a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1f9      	bne.n	8001536 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	40012300 	.word	0x40012300
 800155c:	40012000 	.word	0x40012000
 8001560:	10000012 	.word	0x10000012
 8001564:	20000000 	.word	0x20000000
 8001568:	431bde83 	.word	0x431bde83

0800156c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001574:	4b79      	ldr	r3, [pc, #484]	; (800175c <ADC_Init+0x1f0>)
 8001576:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	685a      	ldr	r2, [r3, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	431a      	orrs	r2, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6859      	ldr	r1, [r3, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	021a      	lsls	r2, r3, #8
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	430a      	orrs	r2, r1
 80015b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80015c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6859      	ldr	r1, [r3, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	430a      	orrs	r2, r1
 80015d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6899      	ldr	r1, [r3, #8]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	68da      	ldr	r2, [r3, #12]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	430a      	orrs	r2, r1
 80015f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fe:	4a58      	ldr	r2, [pc, #352]	; (8001760 <ADC_Init+0x1f4>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d022      	beq.n	800164a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	689a      	ldr	r2, [r3, #8]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001612:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6899      	ldr	r1, [r3, #8]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001634:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6899      	ldr	r1, [r3, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	e00f      	b.n	800166a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001658:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001668:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 0202 	bic.w	r2, r2, #2
 8001678:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6899      	ldr	r1, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	7e1b      	ldrb	r3, [r3, #24]
 8001684:	005a      	lsls	r2, r3, #1
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	430a      	orrs	r2, r1
 800168c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d01b      	beq.n	80016d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80016b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6859      	ldr	r1, [r3, #4]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c2:	3b01      	subs	r3, #1
 80016c4:	035a      	lsls	r2, r3, #13
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	e007      	b.n	80016e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	685a      	ldr	r2, [r3, #4]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80016ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	051a      	lsls	r2, r3, #20
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	430a      	orrs	r2, r1
 8001704:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001714:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6899      	ldr	r1, [r3, #8]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001722:	025a      	lsls	r2, r3, #9
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	430a      	orrs	r2, r1
 800172a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	689a      	ldr	r2, [r3, #8]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800173a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6899      	ldr	r1, [r3, #8]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	029a      	lsls	r2, r3, #10
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	430a      	orrs	r2, r1
 800174e:	609a      	str	r2, [r3, #8]
}
 8001750:	bf00      	nop
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	40012300 	.word	0x40012300
 8001760:	0f000001 	.word	0x0f000001

08001764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001780:	4013      	ands	r3, r2
 8001782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800178c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001796:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	60d3      	str	r3, [r2, #12]
}
 800179c:	bf00      	nop
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b0:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <__NVIC_GetPriorityGrouping+0x18>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	0a1b      	lsrs	r3, r3, #8
 80017b6:	f003 0307 	and.w	r3, r3, #7
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	db0b      	blt.n	80017f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	f003 021f 	and.w	r2, r3, #31
 80017e0:	4907      	ldr	r1, [pc, #28]	; (8001800 <__NVIC_EnableIRQ+0x38>)
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	095b      	lsrs	r3, r3, #5
 80017e8:	2001      	movs	r0, #1
 80017ea:	fa00 f202 	lsl.w	r2, r0, r2
 80017ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	e000e100 	.word	0xe000e100

08001804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	6039      	str	r1, [r7, #0]
 800180e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001814:	2b00      	cmp	r3, #0
 8001816:	db0a      	blt.n	800182e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	b2da      	uxtb	r2, r3
 800181c:	490c      	ldr	r1, [pc, #48]	; (8001850 <__NVIC_SetPriority+0x4c>)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	0112      	lsls	r2, r2, #4
 8001824:	b2d2      	uxtb	r2, r2
 8001826:	440b      	add	r3, r1
 8001828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800182c:	e00a      	b.n	8001844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	b2da      	uxtb	r2, r3
 8001832:	4908      	ldr	r1, [pc, #32]	; (8001854 <__NVIC_SetPriority+0x50>)
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	f003 030f 	and.w	r3, r3, #15
 800183a:	3b04      	subs	r3, #4
 800183c:	0112      	lsls	r2, r2, #4
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	440b      	add	r3, r1
 8001842:	761a      	strb	r2, [r3, #24]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000e100 	.word	0xe000e100
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001858:	b480      	push	{r7}
 800185a:	b089      	sub	sp, #36	; 0x24
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	f1c3 0307 	rsb	r3, r3, #7
 8001872:	2b04      	cmp	r3, #4
 8001874:	bf28      	it	cs
 8001876:	2304      	movcs	r3, #4
 8001878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3304      	adds	r3, #4
 800187e:	2b06      	cmp	r3, #6
 8001880:	d902      	bls.n	8001888 <NVIC_EncodePriority+0x30>
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	3b03      	subs	r3, #3
 8001886:	e000      	b.n	800188a <NVIC_EncodePriority+0x32>
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800188c:	f04f 32ff 	mov.w	r2, #4294967295
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43da      	mvns	r2, r3
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	401a      	ands	r2, r3
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a0:	f04f 31ff 	mov.w	r1, #4294967295
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	fa01 f303 	lsl.w	r3, r1, r3
 80018aa:	43d9      	mvns	r1, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b0:	4313      	orrs	r3, r2
         );
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3724      	adds	r7, #36	; 0x24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b082      	sub	sp, #8
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff ff4c 	bl	8001764 <__NVIC_SetPriorityGrouping>
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
 80018e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018e6:	f7ff ff61 	bl	80017ac <__NVIC_GetPriorityGrouping>
 80018ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	68b9      	ldr	r1, [r7, #8]
 80018f0:	6978      	ldr	r0, [r7, #20]
 80018f2:	f7ff ffb1 	bl	8001858 <NVIC_EncodePriority>
 80018f6:	4602      	mov	r2, r0
 80018f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018fc:	4611      	mov	r1, r2
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff ff80 	bl	8001804 <__NVIC_SetPriority>
}
 8001904:	bf00      	nop
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff ff54 	bl	80017c8 <__NVIC_EnableIRQ>
}
 8001920:	bf00      	nop
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001934:	f7ff fc74 	bl	8001220 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d101      	bne.n	8001944 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e099      	b.n	8001a78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2202      	movs	r2, #2
 8001948:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f022 0201 	bic.w	r2, r2, #1
 8001962:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001964:	e00f      	b.n	8001986 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001966:	f7ff fc5b 	bl	8001220 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b05      	cmp	r3, #5
 8001972:	d908      	bls.n	8001986 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2220      	movs	r2, #32
 8001978:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2203      	movs	r2, #3
 800197e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e078      	b.n	8001a78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1e8      	bne.n	8001966 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800199c:	697a      	ldr	r2, [r7, #20]
 800199e:	4b38      	ldr	r3, [pc, #224]	; (8001a80 <HAL_DMA_Init+0x158>)
 80019a0:	4013      	ands	r3, r2
 80019a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685a      	ldr	r2, [r3, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019dc:	2b04      	cmp	r3, #4
 80019de:	d107      	bne.n	80019f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e8:	4313      	orrs	r3, r2
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	f023 0307 	bic.w	r3, r3, #7
 8001a06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a16:	2b04      	cmp	r3, #4
 8001a18:	d117      	bne.n	8001a4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d00e      	beq.n	8001a4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 f9e9 	bl	8001e04 <DMA_CheckFifoParam>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d008      	beq.n	8001a4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2240      	movs	r2, #64	; 0x40
 8001a3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a46:	2301      	movs	r3, #1
 8001a48:	e016      	b.n	8001a78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 f9a0 	bl	8001d98 <DMA_CalcBaseAndBitshift>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a60:	223f      	movs	r2, #63	; 0x3f
 8001a62:	409a      	lsls	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2201      	movs	r2, #1
 8001a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	f010803f 	.word	0xf010803f

08001a84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a90:	4b92      	ldr	r3, [pc, #584]	; (8001cdc <HAL_DMA_IRQHandler+0x258>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a92      	ldr	r2, [pc, #584]	; (8001ce0 <HAL_DMA_IRQHandler+0x25c>)
 8001a96:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9a:	0a9b      	lsrs	r3, r3, #10
 8001a9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aae:	2208      	movs	r2, #8
 8001ab0:	409a      	lsls	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d01a      	beq.n	8001af0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d013      	beq.n	8001af0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0204 	bic.w	r2, r2, #4
 8001ad6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001adc:	2208      	movs	r2, #8
 8001ade:	409a      	lsls	r2, r3
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae8:	f043 0201 	orr.w	r2, r3, #1
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af4:	2201      	movs	r2, #1
 8001af6:	409a      	lsls	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4013      	ands	r3, r2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d012      	beq.n	8001b26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00b      	beq.n	8001b26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b12:	2201      	movs	r2, #1
 8001b14:	409a      	lsls	r2, r3
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b1e:	f043 0202 	orr.w	r2, r3, #2
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b2a:	2204      	movs	r2, #4
 8001b2c:	409a      	lsls	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	4013      	ands	r3, r2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d012      	beq.n	8001b5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d00b      	beq.n	8001b5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b48:	2204      	movs	r2, #4
 8001b4a:	409a      	lsls	r2, r3
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b54:	f043 0204 	orr.w	r2, r3, #4
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b60:	2210      	movs	r2, #16
 8001b62:	409a      	lsls	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4013      	ands	r3, r2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d043      	beq.n	8001bf4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d03c      	beq.n	8001bf4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7e:	2210      	movs	r2, #16
 8001b80:	409a      	lsls	r2, r3
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d018      	beq.n	8001bc6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d108      	bne.n	8001bb4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d024      	beq.n	8001bf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	4798      	blx	r3
 8001bb2:	e01f      	b.n	8001bf4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d01b      	beq.n	8001bf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	4798      	blx	r3
 8001bc4:	e016      	b.n	8001bf4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d107      	bne.n	8001be4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0208 	bic.w	r2, r2, #8
 8001be2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf8:	2220      	movs	r2, #32
 8001bfa:	409a      	lsls	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 808e 	beq.w	8001d22 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0310 	and.w	r3, r3, #16
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 8086 	beq.w	8001d22 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	409a      	lsls	r2, r3
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b05      	cmp	r3, #5
 8001c2c:	d136      	bne.n	8001c9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 0216 	bic.w	r2, r2, #22
 8001c3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	695a      	ldr	r2, [r3, #20]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d103      	bne.n	8001c5e <HAL_DMA_IRQHandler+0x1da>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d007      	beq.n	8001c6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 0208 	bic.w	r2, r2, #8
 8001c6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c72:	223f      	movs	r2, #63	; 0x3f
 8001c74:	409a      	lsls	r2, r3
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d07d      	beq.n	8001d8e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	4798      	blx	r3
        }
        return;
 8001c9a:	e078      	b.n	8001d8e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d01c      	beq.n	8001ce4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d108      	bne.n	8001cca <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d030      	beq.n	8001d22 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	4798      	blx	r3
 8001cc8:	e02b      	b.n	8001d22 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d027      	beq.n	8001d22 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	4798      	blx	r3
 8001cda:	e022      	b.n	8001d22 <HAL_DMA_IRQHandler+0x29e>
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10f      	bne.n	8001d12 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 0210 	bic.w	r2, r2, #16
 8001d00:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d032      	beq.n	8001d90 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d022      	beq.n	8001d7c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2205      	movs	r2, #5
 8001d3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f022 0201 	bic.w	r2, r2, #1
 8001d4c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	3301      	adds	r3, #1
 8001d52:	60bb      	str	r3, [r7, #8]
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d307      	bcc.n	8001d6a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1f2      	bne.n	8001d4e <HAL_DMA_IRQHandler+0x2ca>
 8001d68:	e000      	b.n	8001d6c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001d6a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d005      	beq.n	8001d90 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	4798      	blx	r3
 8001d8c:	e000      	b.n	8001d90 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001d8e:	bf00      	nop
    }
  }
}
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop

08001d98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	3b10      	subs	r3, #16
 8001da8:	4a14      	ldr	r2, [pc, #80]	; (8001dfc <DMA_CalcBaseAndBitshift+0x64>)
 8001daa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dae:	091b      	lsrs	r3, r3, #4
 8001db0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001db2:	4a13      	ldr	r2, [pc, #76]	; (8001e00 <DMA_CalcBaseAndBitshift+0x68>)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	4413      	add	r3, r2
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2b03      	cmp	r3, #3
 8001dc4:	d909      	bls.n	8001dda <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001dce:	f023 0303 	bic.w	r3, r3, #3
 8001dd2:	1d1a      	adds	r2, r3, #4
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	659a      	str	r2, [r3, #88]	; 0x58
 8001dd8:	e007      	b.n	8001dea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001de2:	f023 0303 	bic.w	r3, r3, #3
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	aaaaaaab 	.word	0xaaaaaaab
 8001e00:	0800b6b8 	.word	0x0800b6b8

08001e04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d11f      	bne.n	8001e5e <DMA_CheckFifoParam+0x5a>
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	d856      	bhi.n	8001ed2 <DMA_CheckFifoParam+0xce>
 8001e24:	a201      	add	r2, pc, #4	; (adr r2, 8001e2c <DMA_CheckFifoParam+0x28>)
 8001e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e2a:	bf00      	nop
 8001e2c:	08001e3d 	.word	0x08001e3d
 8001e30:	08001e4f 	.word	0x08001e4f
 8001e34:	08001e3d 	.word	0x08001e3d
 8001e38:	08001ed3 	.word	0x08001ed3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d046      	beq.n	8001ed6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e4c:	e043      	b.n	8001ed6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e56:	d140      	bne.n	8001eda <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e5c:	e03d      	b.n	8001eda <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e66:	d121      	bne.n	8001eac <DMA_CheckFifoParam+0xa8>
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	2b03      	cmp	r3, #3
 8001e6c:	d837      	bhi.n	8001ede <DMA_CheckFifoParam+0xda>
 8001e6e:	a201      	add	r2, pc, #4	; (adr r2, 8001e74 <DMA_CheckFifoParam+0x70>)
 8001e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e74:	08001e85 	.word	0x08001e85
 8001e78:	08001e8b 	.word	0x08001e8b
 8001e7c:	08001e85 	.word	0x08001e85
 8001e80:	08001e9d 	.word	0x08001e9d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	73fb      	strb	r3, [r7, #15]
      break;
 8001e88:	e030      	b.n	8001eec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d025      	beq.n	8001ee2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e9a:	e022      	b.n	8001ee2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ea4:	d11f      	bne.n	8001ee6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001eaa:	e01c      	b.n	8001ee6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d903      	bls.n	8001eba <DMA_CheckFifoParam+0xb6>
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	2b03      	cmp	r3, #3
 8001eb6:	d003      	beq.n	8001ec0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001eb8:	e018      	b.n	8001eec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	73fb      	strb	r3, [r7, #15]
      break;
 8001ebe:	e015      	b.n	8001eec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00e      	beq.n	8001eea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	73fb      	strb	r3, [r7, #15]
      break;
 8001ed0:	e00b      	b.n	8001eea <DMA_CheckFifoParam+0xe6>
      break;
 8001ed2:	bf00      	nop
 8001ed4:	e00a      	b.n	8001eec <DMA_CheckFifoParam+0xe8>
      break;
 8001ed6:	bf00      	nop
 8001ed8:	e008      	b.n	8001eec <DMA_CheckFifoParam+0xe8>
      break;
 8001eda:	bf00      	nop
 8001edc:	e006      	b.n	8001eec <DMA_CheckFifoParam+0xe8>
      break;
 8001ede:	bf00      	nop
 8001ee0:	e004      	b.n	8001eec <DMA_CheckFifoParam+0xe8>
      break;
 8001ee2:	bf00      	nop
 8001ee4:	e002      	b.n	8001eec <DMA_CheckFifoParam+0xe8>
      break;   
 8001ee6:	bf00      	nop
 8001ee8:	e000      	b.n	8001eec <DMA_CheckFifoParam+0xe8>
      break;
 8001eea:	bf00      	nop
    }
  } 
  
  return status; 
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop

08001efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b089      	sub	sp, #36	; 0x24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f12:	2300      	movs	r3, #0
 8001f14:	61fb      	str	r3, [r7, #28]
 8001f16:	e165      	b.n	80021e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f18:	2201      	movs	r2, #1
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	f040 8154 	bne.w	80021de <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d005      	beq.n	8001f4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d130      	bne.n	8001fb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	2203      	movs	r2, #3
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4013      	ands	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	68da      	ldr	r2, [r3, #12]
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f84:	2201      	movs	r2, #1
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	091b      	lsrs	r3, r3, #4
 8001f9a:	f003 0201 	and.w	r2, r3, #1
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 0303 	and.w	r3, r3, #3
 8001fb8:	2b03      	cmp	r3, #3
 8001fba:	d017      	beq.n	8001fec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	2203      	movs	r2, #3
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 0303 	and.w	r3, r3, #3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d123      	bne.n	8002040 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	08da      	lsrs	r2, r3, #3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3208      	adds	r2, #8
 8002000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002004:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	220f      	movs	r2, #15
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	43db      	mvns	r3, r3
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4013      	ands	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	691a      	ldr	r2, [r3, #16]
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4313      	orrs	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	08da      	lsrs	r2, r3, #3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	3208      	adds	r2, #8
 800203a:	69b9      	ldr	r1, [r7, #24]
 800203c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	2203      	movs	r2, #3
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	43db      	mvns	r3, r3
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4013      	ands	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 0203 	and.w	r2, r3, #3
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800207c:	2b00      	cmp	r3, #0
 800207e:	f000 80ae 	beq.w	80021de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	4b5d      	ldr	r3, [pc, #372]	; (80021fc <HAL_GPIO_Init+0x300>)
 8002088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208a:	4a5c      	ldr	r2, [pc, #368]	; (80021fc <HAL_GPIO_Init+0x300>)
 800208c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002090:	6453      	str	r3, [r2, #68]	; 0x44
 8002092:	4b5a      	ldr	r3, [pc, #360]	; (80021fc <HAL_GPIO_Init+0x300>)
 8002094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800209e:	4a58      	ldr	r2, [pc, #352]	; (8002200 <HAL_GPIO_Init+0x304>)
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	089b      	lsrs	r3, r3, #2
 80020a4:	3302      	adds	r3, #2
 80020a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	f003 0303 	and.w	r3, r3, #3
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	220f      	movs	r2, #15
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43db      	mvns	r3, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4013      	ands	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a4f      	ldr	r2, [pc, #316]	; (8002204 <HAL_GPIO_Init+0x308>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d025      	beq.n	8002116 <HAL_GPIO_Init+0x21a>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a4e      	ldr	r2, [pc, #312]	; (8002208 <HAL_GPIO_Init+0x30c>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d01f      	beq.n	8002112 <HAL_GPIO_Init+0x216>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a4d      	ldr	r2, [pc, #308]	; (800220c <HAL_GPIO_Init+0x310>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d019      	beq.n	800210e <HAL_GPIO_Init+0x212>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a4c      	ldr	r2, [pc, #304]	; (8002210 <HAL_GPIO_Init+0x314>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d013      	beq.n	800210a <HAL_GPIO_Init+0x20e>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a4b      	ldr	r2, [pc, #300]	; (8002214 <HAL_GPIO_Init+0x318>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d00d      	beq.n	8002106 <HAL_GPIO_Init+0x20a>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a4a      	ldr	r2, [pc, #296]	; (8002218 <HAL_GPIO_Init+0x31c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d007      	beq.n	8002102 <HAL_GPIO_Init+0x206>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a49      	ldr	r2, [pc, #292]	; (800221c <HAL_GPIO_Init+0x320>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d101      	bne.n	80020fe <HAL_GPIO_Init+0x202>
 80020fa:	2306      	movs	r3, #6
 80020fc:	e00c      	b.n	8002118 <HAL_GPIO_Init+0x21c>
 80020fe:	2307      	movs	r3, #7
 8002100:	e00a      	b.n	8002118 <HAL_GPIO_Init+0x21c>
 8002102:	2305      	movs	r3, #5
 8002104:	e008      	b.n	8002118 <HAL_GPIO_Init+0x21c>
 8002106:	2304      	movs	r3, #4
 8002108:	e006      	b.n	8002118 <HAL_GPIO_Init+0x21c>
 800210a:	2303      	movs	r3, #3
 800210c:	e004      	b.n	8002118 <HAL_GPIO_Init+0x21c>
 800210e:	2302      	movs	r3, #2
 8002110:	e002      	b.n	8002118 <HAL_GPIO_Init+0x21c>
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <HAL_GPIO_Init+0x21c>
 8002116:	2300      	movs	r3, #0
 8002118:	69fa      	ldr	r2, [r7, #28]
 800211a:	f002 0203 	and.w	r2, r2, #3
 800211e:	0092      	lsls	r2, r2, #2
 8002120:	4093      	lsls	r3, r2
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4313      	orrs	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002128:	4935      	ldr	r1, [pc, #212]	; (8002200 <HAL_GPIO_Init+0x304>)
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	089b      	lsrs	r3, r3, #2
 800212e:	3302      	adds	r3, #2
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002136:	4b3a      	ldr	r3, [pc, #232]	; (8002220 <HAL_GPIO_Init+0x324>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	43db      	mvns	r3, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4013      	ands	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	4313      	orrs	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800215a:	4a31      	ldr	r2, [pc, #196]	; (8002220 <HAL_GPIO_Init+0x324>)
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002160:	4b2f      	ldr	r3, [pc, #188]	; (8002220 <HAL_GPIO_Init+0x324>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	43db      	mvns	r3, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4013      	ands	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	4313      	orrs	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002184:	4a26      	ldr	r2, [pc, #152]	; (8002220 <HAL_GPIO_Init+0x324>)
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800218a:	4b25      	ldr	r3, [pc, #148]	; (8002220 <HAL_GPIO_Init+0x324>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	43db      	mvns	r3, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4013      	ands	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021ae:	4a1c      	ldr	r2, [pc, #112]	; (8002220 <HAL_GPIO_Init+0x324>)
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021b4:	4b1a      	ldr	r3, [pc, #104]	; (8002220 <HAL_GPIO_Init+0x324>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021d8:	4a11      	ldr	r2, [pc, #68]	; (8002220 <HAL_GPIO_Init+0x324>)
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	3301      	adds	r3, #1
 80021e2:	61fb      	str	r3, [r7, #28]
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	2b0f      	cmp	r3, #15
 80021e8:	f67f ae96 	bls.w	8001f18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021ec:	bf00      	nop
 80021ee:	bf00      	nop
 80021f0:	3724      	adds	r7, #36	; 0x24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	40023800 	.word	0x40023800
 8002200:	40013800 	.word	0x40013800
 8002204:	40020000 	.word	0x40020000
 8002208:	40020400 	.word	0x40020400
 800220c:	40020800 	.word	0x40020800
 8002210:	40020c00 	.word	0x40020c00
 8002214:	40021000 	.word	0x40021000
 8002218:	40021400 	.word	0x40021400
 800221c:	40021800 	.word	0x40021800
 8002220:	40013c00 	.word	0x40013c00

08002224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	807b      	strh	r3, [r7, #2]
 8002230:	4613      	mov	r3, r2
 8002232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002234:	787b      	ldrb	r3, [r7, #1]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800223a:	887a      	ldrh	r2, [r7, #2]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002240:	e003      	b.n	800224a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002242:	887b      	ldrh	r3, [r7, #2]
 8002244:	041a      	lsls	r2, r3, #16
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	619a      	str	r2, [r3, #24]
}
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
	...

08002258 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e12b      	b.n	80024c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d106      	bne.n	8002284 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7fe fd58 	bl	8000d34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2224      	movs	r2, #36	; 0x24
 8002288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 0201 	bic.w	r2, r2, #1
 800229a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022bc:	f001 fbba 	bl	8003a34 <HAL_RCC_GetPCLK1Freq>
 80022c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	4a81      	ldr	r2, [pc, #516]	; (80024cc <HAL_I2C_Init+0x274>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d807      	bhi.n	80022dc <HAL_I2C_Init+0x84>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	4a80      	ldr	r2, [pc, #512]	; (80024d0 <HAL_I2C_Init+0x278>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	bf94      	ite	ls
 80022d4:	2301      	movls	r3, #1
 80022d6:	2300      	movhi	r3, #0
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	e006      	b.n	80022ea <HAL_I2C_Init+0x92>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	4a7d      	ldr	r2, [pc, #500]	; (80024d4 <HAL_I2C_Init+0x27c>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	bf94      	ite	ls
 80022e4:	2301      	movls	r3, #1
 80022e6:	2300      	movhi	r3, #0
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e0e7      	b.n	80024c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	4a78      	ldr	r2, [pc, #480]	; (80024d8 <HAL_I2C_Init+0x280>)
 80022f6:	fba2 2303 	umull	r2, r3, r2, r3
 80022fa:	0c9b      	lsrs	r3, r3, #18
 80022fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68ba      	ldr	r2, [r7, #8]
 800230e:	430a      	orrs	r2, r1
 8002310:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	4a6a      	ldr	r2, [pc, #424]	; (80024cc <HAL_I2C_Init+0x274>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d802      	bhi.n	800232c <HAL_I2C_Init+0xd4>
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	3301      	adds	r3, #1
 800232a:	e009      	b.n	8002340 <HAL_I2C_Init+0xe8>
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002332:	fb02 f303 	mul.w	r3, r2, r3
 8002336:	4a69      	ldr	r2, [pc, #420]	; (80024dc <HAL_I2C_Init+0x284>)
 8002338:	fba2 2303 	umull	r2, r3, r2, r3
 800233c:	099b      	lsrs	r3, r3, #6
 800233e:	3301      	adds	r3, #1
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6812      	ldr	r2, [r2, #0]
 8002344:	430b      	orrs	r3, r1
 8002346:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002352:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	495c      	ldr	r1, [pc, #368]	; (80024cc <HAL_I2C_Init+0x274>)
 800235c:	428b      	cmp	r3, r1
 800235e:	d819      	bhi.n	8002394 <HAL_I2C_Init+0x13c>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	1e59      	subs	r1, r3, #1
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	fbb1 f3f3 	udiv	r3, r1, r3
 800236e:	1c59      	adds	r1, r3, #1
 8002370:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002374:	400b      	ands	r3, r1
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00a      	beq.n	8002390 <HAL_I2C_Init+0x138>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	1e59      	subs	r1, r3, #1
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	fbb1 f3f3 	udiv	r3, r1, r3
 8002388:	3301      	adds	r3, #1
 800238a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800238e:	e051      	b.n	8002434 <HAL_I2C_Init+0x1dc>
 8002390:	2304      	movs	r3, #4
 8002392:	e04f      	b.n	8002434 <HAL_I2C_Init+0x1dc>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d111      	bne.n	80023c0 <HAL_I2C_Init+0x168>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	1e58      	subs	r0, r3, #1
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6859      	ldr	r1, [r3, #4]
 80023a4:	460b      	mov	r3, r1
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	440b      	add	r3, r1
 80023aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ae:	3301      	adds	r3, #1
 80023b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	bf0c      	ite	eq
 80023b8:	2301      	moveq	r3, #1
 80023ba:	2300      	movne	r3, #0
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	e012      	b.n	80023e6 <HAL_I2C_Init+0x18e>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	1e58      	subs	r0, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6859      	ldr	r1, [r3, #4]
 80023c8:	460b      	mov	r3, r1
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	440b      	add	r3, r1
 80023ce:	0099      	lsls	r1, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023d6:	3301      	adds	r3, #1
 80023d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023dc:	2b00      	cmp	r3, #0
 80023de:	bf0c      	ite	eq
 80023e0:	2301      	moveq	r3, #1
 80023e2:	2300      	movne	r3, #0
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <HAL_I2C_Init+0x196>
 80023ea:	2301      	movs	r3, #1
 80023ec:	e022      	b.n	8002434 <HAL_I2C_Init+0x1dc>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10e      	bne.n	8002414 <HAL_I2C_Init+0x1bc>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	1e58      	subs	r0, r3, #1
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6859      	ldr	r1, [r3, #4]
 80023fe:	460b      	mov	r3, r1
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	440b      	add	r3, r1
 8002404:	fbb0 f3f3 	udiv	r3, r0, r3
 8002408:	3301      	adds	r3, #1
 800240a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800240e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002412:	e00f      	b.n	8002434 <HAL_I2C_Init+0x1dc>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	1e58      	subs	r0, r3, #1
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6859      	ldr	r1, [r3, #4]
 800241c:	460b      	mov	r3, r1
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	440b      	add	r3, r1
 8002422:	0099      	lsls	r1, r3, #2
 8002424:	440b      	add	r3, r1
 8002426:	fbb0 f3f3 	udiv	r3, r0, r3
 800242a:	3301      	adds	r3, #1
 800242c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002430:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	6809      	ldr	r1, [r1, #0]
 8002438:	4313      	orrs	r3, r2
 800243a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69da      	ldr	r2, [r3, #28]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	430a      	orrs	r2, r1
 8002456:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002462:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6911      	ldr	r1, [r2, #16]
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	68d2      	ldr	r2, [r2, #12]
 800246e:	4311      	orrs	r1, r2
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	6812      	ldr	r2, [r2, #0]
 8002474:	430b      	orrs	r3, r1
 8002476:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	695a      	ldr	r2, [r3, #20]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	431a      	orrs	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	430a      	orrs	r2, r1
 8002492:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0201 	orr.w	r2, r2, #1
 80024a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2220      	movs	r2, #32
 80024ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	000186a0 	.word	0x000186a0
 80024d0:	001e847f 	.word	0x001e847f
 80024d4:	003d08ff 	.word	0x003d08ff
 80024d8:	431bde83 	.word	0x431bde83
 80024dc:	10624dd3 	.word	0x10624dd3

080024e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024e2:	b08f      	sub	sp, #60	; 0x3c
 80024e4:	af0a      	add	r7, sp, #40	; 0x28
 80024e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e116      	b.n	8002720 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b00      	cmp	r3, #0
 8002502:	d106      	bne.n	8002512 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f008 fc0b 	bl	800ad28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2203      	movs	r2, #3
 8002516:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002522:	2b00      	cmp	r3, #0
 8002524:	d102      	bne.n	800252c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f003 f80a 	bl	800554a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	603b      	str	r3, [r7, #0]
 800253c:	687e      	ldr	r6, [r7, #4]
 800253e:	466d      	mov	r5, sp
 8002540:	f106 0410 	add.w	r4, r6, #16
 8002544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002546:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002548:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800254a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800254c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002550:	e885 0003 	stmia.w	r5, {r0, r1}
 8002554:	1d33      	adds	r3, r6, #4
 8002556:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002558:	6838      	ldr	r0, [r7, #0]
 800255a:	f002 fee1 	bl	8005320 <USB_CoreInit>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2202      	movs	r2, #2
 8002568:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e0d7      	b.n	8002720 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2100      	movs	r1, #0
 8002576:	4618      	mov	r0, r3
 8002578:	f002 fff8 	bl	800556c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800257c:	2300      	movs	r3, #0
 800257e:	73fb      	strb	r3, [r7, #15]
 8002580:	e04a      	b.n	8002618 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002582:	7bfa      	ldrb	r2, [r7, #15]
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	4613      	mov	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	1a9b      	subs	r3, r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	440b      	add	r3, r1
 8002590:	333d      	adds	r3, #61	; 0x3d
 8002592:	2201      	movs	r2, #1
 8002594:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002596:	7bfa      	ldrb	r2, [r7, #15]
 8002598:	6879      	ldr	r1, [r7, #4]
 800259a:	4613      	mov	r3, r2
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	1a9b      	subs	r3, r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	440b      	add	r3, r1
 80025a4:	333c      	adds	r3, #60	; 0x3c
 80025a6:	7bfa      	ldrb	r2, [r7, #15]
 80025a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80025aa:	7bfa      	ldrb	r2, [r7, #15]
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
 80025ae:	b298      	uxth	r0, r3
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	4613      	mov	r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	1a9b      	subs	r3, r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	440b      	add	r3, r1
 80025bc:	3342      	adds	r3, #66	; 0x42
 80025be:	4602      	mov	r2, r0
 80025c0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025c2:	7bfa      	ldrb	r2, [r7, #15]
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	4613      	mov	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	1a9b      	subs	r3, r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	440b      	add	r3, r1
 80025d0:	333f      	adds	r3, #63	; 0x3f
 80025d2:	2200      	movs	r2, #0
 80025d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025d6:	7bfa      	ldrb	r2, [r7, #15]
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	4613      	mov	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	1a9b      	subs	r3, r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	440b      	add	r3, r1
 80025e4:	3344      	adds	r3, #68	; 0x44
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025ea:	7bfa      	ldrb	r2, [r7, #15]
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	1a9b      	subs	r3, r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	440b      	add	r3, r1
 80025f8:	3348      	adds	r3, #72	; 0x48
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025fe:	7bfa      	ldrb	r2, [r7, #15]
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	4613      	mov	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	1a9b      	subs	r3, r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	440b      	add	r3, r1
 800260c:	3350      	adds	r3, #80	; 0x50
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002612:	7bfb      	ldrb	r3, [r7, #15]
 8002614:	3301      	adds	r3, #1
 8002616:	73fb      	strb	r3, [r7, #15]
 8002618:	7bfa      	ldrb	r2, [r7, #15]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	429a      	cmp	r2, r3
 8002620:	d3af      	bcc.n	8002582 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002622:	2300      	movs	r3, #0
 8002624:	73fb      	strb	r3, [r7, #15]
 8002626:	e044      	b.n	80026b2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002628:	7bfa      	ldrb	r2, [r7, #15]
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	1a9b      	subs	r3, r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800263a:	2200      	movs	r2, #0
 800263c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800263e:	7bfa      	ldrb	r2, [r7, #15]
 8002640:	6879      	ldr	r1, [r7, #4]
 8002642:	4613      	mov	r3, r2
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	1a9b      	subs	r3, r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	440b      	add	r3, r1
 800264c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002650:	7bfa      	ldrb	r2, [r7, #15]
 8002652:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002654:	7bfa      	ldrb	r2, [r7, #15]
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	1a9b      	subs	r3, r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002666:	2200      	movs	r2, #0
 8002668:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800266a:	7bfa      	ldrb	r2, [r7, #15]
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	1a9b      	subs	r3, r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	440b      	add	r3, r1
 8002678:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002680:	7bfa      	ldrb	r2, [r7, #15]
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	1a9b      	subs	r3, r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002696:	7bfa      	ldrb	r2, [r7, #15]
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	4613      	mov	r3, r2
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	1a9b      	subs	r3, r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	440b      	add	r3, r1
 80026a4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
 80026ae:	3301      	adds	r3, #1
 80026b0:	73fb      	strb	r3, [r7, #15]
 80026b2:	7bfa      	ldrb	r2, [r7, #15]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d3b5      	bcc.n	8002628 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	603b      	str	r3, [r7, #0]
 80026c2:	687e      	ldr	r6, [r7, #4]
 80026c4:	466d      	mov	r5, sp
 80026c6:	f106 0410 	add.w	r4, r6, #16
 80026ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80026da:	1d33      	adds	r3, r6, #4
 80026dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026de:	6838      	ldr	r0, [r7, #0]
 80026e0:	f002 ff90 	bl	8005604 <USB_DevInit>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d005      	beq.n	80026f6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2202      	movs	r2, #2
 80026ee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e014      	b.n	8002720 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270a:	2b01      	cmp	r3, #1
 800270c:	d102      	bne.n	8002714 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f001 f87a 	bl	8003808 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f003 ffff 	bl	800671c <USB_DevDisconnect>

  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002728 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800273c:	2b01      	cmp	r3, #1
 800273e:	d101      	bne.n	8002744 <HAL_PCD_Start+0x1c>
 8002740:	2302      	movs	r3, #2
 8002742:	e020      	b.n	8002786 <HAL_PCD_Start+0x5e>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002750:	2b01      	cmp	r3, #1
 8002752:	d109      	bne.n	8002768 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002758:	2b01      	cmp	r3, #1
 800275a:	d005      	beq.n	8002768 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002760:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f002 fedb 	bl	8005528 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f003 ffaf 	bl	80066da <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800278e:	b590      	push	{r4, r7, lr}
 8002790:	b08d      	sub	sp, #52	; 0x34
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800279c:	6a3b      	ldr	r3, [r7, #32]
 800279e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f004 f86d 	bl	8006884 <USB_GetMode>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f040 83ca 	bne.w	8002f46 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f003 ffd1 	bl	800675e <USB_ReadInterrupts>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f000 83c0 	beq.w	8002f44 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f003 ffc8 	bl	800675e <USB_ReadInterrupts>
 80027ce:	4603      	mov	r3, r0
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d107      	bne.n	80027e8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	695a      	ldr	r2, [r3, #20]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f002 0202 	and.w	r2, r2, #2
 80027e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f003 ffb6 	bl	800675e <USB_ReadInterrupts>
 80027f2:	4603      	mov	r3, r0
 80027f4:	f003 0310 	and.w	r3, r3, #16
 80027f8:	2b10      	cmp	r3, #16
 80027fa:	d161      	bne.n	80028c0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	699a      	ldr	r2, [r3, #24]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0210 	bic.w	r2, r2, #16
 800280a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800280c:	6a3b      	ldr	r3, [r7, #32]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	f003 020f 	and.w	r2, r3, #15
 8002818:	4613      	mov	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	1a9b      	subs	r3, r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	4413      	add	r3, r2
 8002828:	3304      	adds	r3, #4
 800282a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	0c5b      	lsrs	r3, r3, #17
 8002830:	f003 030f 	and.w	r3, r3, #15
 8002834:	2b02      	cmp	r3, #2
 8002836:	d124      	bne.n	8002882 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800283e:	4013      	ands	r3, r2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d035      	beq.n	80028b0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	091b      	lsrs	r3, r3, #4
 800284c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800284e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002852:	b29b      	uxth	r3, r3
 8002854:	461a      	mov	r2, r3
 8002856:	6a38      	ldr	r0, [r7, #32]
 8002858:	f003 fded 	bl	8006436 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	68da      	ldr	r2, [r3, #12]
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	091b      	lsrs	r3, r3, #4
 8002864:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002868:	441a      	add	r2, r3
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	699a      	ldr	r2, [r3, #24]
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	091b      	lsrs	r3, r3, #4
 8002876:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800287a:	441a      	add	r2, r3
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	619a      	str	r2, [r3, #24]
 8002880:	e016      	b.n	80028b0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	0c5b      	lsrs	r3, r3, #17
 8002886:	f003 030f 	and.w	r3, r3, #15
 800288a:	2b06      	cmp	r3, #6
 800288c:	d110      	bne.n	80028b0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002894:	2208      	movs	r2, #8
 8002896:	4619      	mov	r1, r3
 8002898:	6a38      	ldr	r0, [r7, #32]
 800289a:	f003 fdcc 	bl	8006436 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	699a      	ldr	r2, [r3, #24]
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	091b      	lsrs	r3, r3, #4
 80028a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028aa:	441a      	add	r2, r3
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	699a      	ldr	r2, [r3, #24]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f042 0210 	orr.w	r2, r2, #16
 80028be:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f003 ff4a 	bl	800675e <USB_ReadInterrupts>
 80028ca:	4603      	mov	r3, r0
 80028cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80028d4:	d16e      	bne.n	80029b4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80028d6:	2300      	movs	r3, #0
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f003 ff50 	bl	8006784 <USB_ReadDevAllOutEpInterrupt>
 80028e4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80028e6:	e062      	b.n	80029ae <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80028e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d057      	beq.n	80029a2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f8:	b2d2      	uxtb	r2, r2
 80028fa:	4611      	mov	r1, r2
 80028fc:	4618      	mov	r0, r3
 80028fe:	f003 ff75 	bl	80067ec <USB_ReadDevOutEPInterrupt>
 8002902:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00c      	beq.n	8002928 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	015a      	lsls	r2, r3, #5
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	4413      	add	r3, r2
 8002916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800291a:	461a      	mov	r2, r3
 800291c:	2301      	movs	r3, #1
 800291e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002920:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 fdc6 	bl	80034b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	f003 0308 	and.w	r3, r3, #8
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00c      	beq.n	800294c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002934:	015a      	lsls	r2, r3, #5
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	4413      	add	r3, r2
 800293a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800293e:	461a      	mov	r2, r3
 8002940:	2308      	movs	r3, #8
 8002942:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002944:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 fec0 	bl	80036cc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	f003 0310 	and.w	r3, r3, #16
 8002952:	2b00      	cmp	r3, #0
 8002954:	d008      	beq.n	8002968 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	015a      	lsls	r2, r3, #5
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	4413      	add	r3, r2
 800295e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002962:	461a      	mov	r2, r3
 8002964:	2310      	movs	r3, #16
 8002966:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	f003 0320 	and.w	r3, r3, #32
 800296e:	2b00      	cmp	r3, #0
 8002970:	d008      	beq.n	8002984 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	015a      	lsls	r2, r3, #5
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	4413      	add	r3, r2
 800297a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800297e:	461a      	mov	r2, r3
 8002980:	2320      	movs	r3, #32
 8002982:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d009      	beq.n	80029a2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	015a      	lsls	r2, r3, #5
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	4413      	add	r3, r2
 8002996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800299a:	461a      	mov	r2, r3
 800299c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029a0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	3301      	adds	r3, #1
 80029a6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80029a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029aa:	085b      	lsrs	r3, r3, #1
 80029ac:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80029ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d199      	bne.n	80028e8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f003 fed0 	bl	800675e <USB_ReadInterrupts>
 80029be:	4603      	mov	r3, r0
 80029c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029c8:	f040 80c0 	bne.w	8002b4c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f003 fef1 	bl	80067b8 <USB_ReadDevAllInEpInterrupt>
 80029d6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80029d8:	2300      	movs	r3, #0
 80029da:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80029dc:	e0b2      	b.n	8002b44 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80029de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 80a7 	beq.w	8002b38 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	4611      	mov	r1, r2
 80029f4:	4618      	mov	r0, r3
 80029f6:	f003 ff17 	bl	8006828 <USB_ReadDevInEPInterrupt>
 80029fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d057      	beq.n	8002ab6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	f003 030f 	and.w	r3, r3, #15
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	69f9      	ldr	r1, [r7, #28]
 8002a22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002a26:	4013      	ands	r3, r2
 8002a28:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	015a      	lsls	r2, r3, #5
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	4413      	add	r3, r2
 8002a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a36:	461a      	mov	r2, r3
 8002a38:	2301      	movs	r3, #1
 8002a3a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d132      	bne.n	8002aaa <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a48:	4613      	mov	r3, r2
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	1a9b      	subs	r3, r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	3348      	adds	r3, #72	; 0x48
 8002a54:	6819      	ldr	r1, [r3, #0]
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	1a9b      	subs	r3, r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4403      	add	r3, r0
 8002a64:	3344      	adds	r3, #68	; 0x44
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4419      	add	r1, r3
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a6e:	4613      	mov	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	1a9b      	subs	r3, r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4403      	add	r3, r0
 8002a78:	3348      	adds	r3, #72	; 0x48
 8002a7a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d113      	bne.n	8002aaa <HAL_PCD_IRQHandler+0x31c>
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a86:	4613      	mov	r3, r2
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	1a9b      	subs	r3, r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	440b      	add	r3, r1
 8002a90:	3350      	adds	r3, #80	; 0x50
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d108      	bne.n	8002aaa <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6818      	ldr	r0, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	f003 ff1f 	bl	80068e8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	4619      	mov	r1, r3
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f008 f9d0 	bl	800ae56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	f003 0308 	and.w	r3, r3, #8
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d008      	beq.n	8002ad2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	015a      	lsls	r2, r3, #5
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002acc:	461a      	mov	r2, r3
 8002ace:	2308      	movs	r3, #8
 8002ad0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	f003 0310 	and.w	r3, r3, #16
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d008      	beq.n	8002aee <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	015a      	lsls	r2, r3, #5
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ae8:	461a      	mov	r2, r3
 8002aea:	2310      	movs	r3, #16
 8002aec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d008      	beq.n	8002b0a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afa:	015a      	lsls	r2, r3, #5
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	4413      	add	r3, r2
 8002b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b04:	461a      	mov	r2, r3
 8002b06:	2340      	movs	r3, #64	; 0x40
 8002b08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d008      	beq.n	8002b26 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	015a      	lsls	r2, r3, #5
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b20:	461a      	mov	r2, r3
 8002b22:	2302      	movs	r3, #2
 8002b24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002b30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 fc30 	bl	8003398 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b40:	085b      	lsrs	r3, r3, #1
 8002b42:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f47f af49 	bne.w	80029de <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f003 fe04 	bl	800675e <USB_ReadInterrupts>
 8002b56:	4603      	mov	r3, r0
 8002b58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b60:	d122      	bne.n	8002ba8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	69fa      	ldr	r2, [r7, #28]
 8002b6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b70:	f023 0301 	bic.w	r3, r3, #1
 8002b74:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d108      	bne.n	8002b92 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b88:	2100      	movs	r1, #0
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f008 fba0 	bl	800b2d0 <HAL_PCDEx_LPM_Callback>
 8002b90:	e002      	b.n	8002b98 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f008 f9d6 	bl	800af44 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	695a      	ldr	r2, [r3, #20]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002ba6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f003 fdd6 	bl	800675e <USB_ReadInterrupts>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bbc:	d112      	bne.n	8002be4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d102      	bne.n	8002bd4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f008 f992 	bl	800aef8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	695a      	ldr	r2, [r3, #20]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002be2:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f003 fdb8 	bl	800675e <USB_ReadInterrupts>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bf4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bf8:	d121      	bne.n	8002c3e <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	695a      	ldr	r2, [r3, #20]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002c08:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d111      	bne.n	8002c38 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c22:	089b      	lsrs	r3, r3, #2
 8002c24:	f003 020f 	and.w	r2, r3, #15
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002c2e:	2101      	movs	r1, #1
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f008 fb4d 	bl	800b2d0 <HAL_PCDEx_LPM_Callback>
 8002c36:	e002      	b.n	8002c3e <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f008 f95d 	bl	800aef8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f003 fd8b 	bl	800675e <USB_ReadInterrupts>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c52:	f040 80c7 	bne.w	8002de4 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	69fa      	ldr	r2, [r7, #28]
 8002c60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c64:	f023 0301 	bic.w	r3, r3, #1
 8002c68:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2110      	movs	r1, #16
 8002c70:	4618      	mov	r0, r3
 8002c72:	f002 fe25 	bl	80058c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c76:	2300      	movs	r3, #0
 8002c78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c7a:	e056      	b.n	8002d2a <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7e:	015a      	lsls	r2, r3, #5
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	4413      	add	r3, r2
 8002c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c88:	461a      	mov	r2, r3
 8002c8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c8e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c92:	015a      	lsls	r2, r3, #5
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	4413      	add	r3, r2
 8002c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ca0:	0151      	lsls	r1, r2, #5
 8002ca2:	69fa      	ldr	r2, [r7, #28]
 8002ca4:	440a      	add	r2, r1
 8002ca6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002caa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002cae:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb2:	015a      	lsls	r2, r3, #5
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cc0:	0151      	lsls	r1, r2, #5
 8002cc2:	69fa      	ldr	r2, [r7, #28]
 8002cc4:	440a      	add	r2, r1
 8002cc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002cca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002cce:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd2:	015a      	lsls	r2, r3, #5
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cdc:	461a      	mov	r2, r3
 8002cde:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002ce2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce6:	015a      	lsls	r2, r3, #5
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	4413      	add	r3, r2
 8002cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cf4:	0151      	lsls	r1, r2, #5
 8002cf6:	69fa      	ldr	r2, [r7, #28]
 8002cf8:	440a      	add	r2, r1
 8002cfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002cfe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d02:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d06:	015a      	lsls	r2, r3, #5
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d14:	0151      	lsls	r1, r2, #5
 8002d16:	69fa      	ldr	r2, [r7, #28]
 8002d18:	440a      	add	r2, r1
 8002d1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002d1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002d22:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d26:	3301      	adds	r3, #1
 8002d28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d3a3      	bcc.n	8002c7c <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d3a:	69db      	ldr	r3, [r3, #28]
 8002d3c:	69fa      	ldr	r2, [r7, #28]
 8002d3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d42:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002d46:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d016      	beq.n	8002d7e <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d5a:	69fa      	ldr	r2, [r7, #28]
 8002d5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d60:	f043 030b 	orr.w	r3, r3, #11
 8002d64:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d70:	69fa      	ldr	r2, [r7, #28]
 8002d72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d76:	f043 030b 	orr.w	r3, r3, #11
 8002d7a:	6453      	str	r3, [r2, #68]	; 0x44
 8002d7c:	e015      	b.n	8002daa <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	69fa      	ldr	r2, [r7, #28]
 8002d88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d90:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002d94:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	69fa      	ldr	r2, [r7, #28]
 8002da0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002da4:	f043 030b 	orr.w	r3, r3, #11
 8002da8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	69fa      	ldr	r2, [r7, #28]
 8002db4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002db8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002dbc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6818      	ldr	r0, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002dce:	461a      	mov	r2, r3
 8002dd0:	f003 fd8a 	bl	80068e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	695a      	ldr	r2, [r3, #20]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002de2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f003 fcb8 	bl	800675e <USB_ReadInterrupts>
 8002dee:	4603      	mov	r3, r0
 8002df0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002df4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002df8:	d124      	bne.n	8002e44 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f003 fd4e 	bl	80068a0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f002 fdb6 	bl	800597a <USB_GetDevSpeed>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	461a      	mov	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681c      	ldr	r4, [r3, #0]
 8002e1a:	f000 fdff 	bl	8003a1c <HAL_RCC_GetHCLKFreq>
 8002e1e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	461a      	mov	r2, r3
 8002e28:	4620      	mov	r0, r4
 8002e2a:	f002 fadb 	bl	80053e4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f008 f839 	bl	800aea6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695a      	ldr	r2, [r3, #20]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002e42:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f003 fc88 	bl	800675e <USB_ReadInterrupts>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	f003 0308 	and.w	r3, r3, #8
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d10a      	bne.n	8002e6e <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f008 f816 	bl	800ae8a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	695a      	ldr	r2, [r3, #20]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f002 0208 	and.w	r2, r2, #8
 8002e6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f003 fc73 	bl	800675e <USB_ReadInterrupts>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e82:	d10f      	bne.n	8002ea4 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f008 f878 	bl	800af84 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	695a      	ldr	r2, [r3, #20]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002ea2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f003 fc58 	bl	800675e <USB_ReadInterrupts>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002eb8:	d10f      	bne.n	8002eda <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f008 f84b 	bl	800af60 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	695a      	ldr	r2, [r3, #20]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002ed8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f003 fc3d 	bl	800675e <USB_ReadInterrupts>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eee:	d10a      	bne.n	8002f06 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f008 f859 	bl	800afa8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695a      	ldr	r2, [r3, #20]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002f04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f003 fc27 	bl	800675e <USB_ReadInterrupts>
 8002f10:	4603      	mov	r3, r0
 8002f12:	f003 0304 	and.w	r3, r3, #4
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d115      	bne.n	8002f46 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d002      	beq.n	8002f32 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f008 f849 	bl	800afc4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6859      	ldr	r1, [r3, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	605a      	str	r2, [r3, #4]
 8002f42:	e000      	b.n	8002f46 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8002f44:	bf00      	nop
    }
  }
}
 8002f46:	3734      	adds	r7, #52	; 0x34
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd90      	pop	{r4, r7, pc}

08002f4c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	460b      	mov	r3, r1
 8002f56:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d101      	bne.n	8002f66 <HAL_PCD_SetAddress+0x1a>
 8002f62:	2302      	movs	r3, #2
 8002f64:	e013      	b.n	8002f8e <HAL_PCD_SetAddress+0x42>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	78fa      	ldrb	r2, [r7, #3]
 8002f72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	78fa      	ldrb	r2, [r7, #3]
 8002f7c:	4611      	mov	r1, r2
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f003 fb85 	bl	800668e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b084      	sub	sp, #16
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
 8002f9e:	4608      	mov	r0, r1
 8002fa0:	4611      	mov	r1, r2
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	70fb      	strb	r3, [r7, #3]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	803b      	strh	r3, [r7, #0]
 8002fac:	4613      	mov	r3, r2
 8002fae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	da0f      	bge.n	8002fdc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fbc:	78fb      	ldrb	r3, [r7, #3]
 8002fbe:	f003 020f 	and.w	r2, r3, #15
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	1a9b      	subs	r3, r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	3338      	adds	r3, #56	; 0x38
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	4413      	add	r3, r2
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	705a      	strb	r2, [r3, #1]
 8002fda:	e00f      	b.n	8002ffc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fdc:	78fb      	ldrb	r3, [r7, #3]
 8002fde:	f003 020f 	and.w	r2, r3, #15
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	1a9b      	subs	r3, r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	3304      	adds	r3, #4
 8002ff4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ffc:	78fb      	ldrb	r3, [r7, #3]
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	b2da      	uxtb	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003008:	883a      	ldrh	r2, [r7, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	78ba      	ldrb	r2, [r7, #2]
 8003012:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	785b      	ldrb	r3, [r3, #1]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d004      	beq.n	8003026 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	b29a      	uxth	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003026:	78bb      	ldrb	r3, [r7, #2]
 8003028:	2b02      	cmp	r3, #2
 800302a:	d102      	bne.n	8003032 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003038:	2b01      	cmp	r3, #1
 800303a:	d101      	bne.n	8003040 <HAL_PCD_EP_Open+0xaa>
 800303c:	2302      	movs	r3, #2
 800303e:	e00e      	b.n	800305e <HAL_PCD_EP_Open+0xc8>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68f9      	ldr	r1, [r7, #12]
 800304e:	4618      	mov	r0, r3
 8003050:	f002 fcb8 	bl	80059c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800305c:	7afb      	ldrb	r3, [r7, #11]
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b084      	sub	sp, #16
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
 800306e:	460b      	mov	r3, r1
 8003070:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003072:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003076:	2b00      	cmp	r3, #0
 8003078:	da0f      	bge.n	800309a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800307a:	78fb      	ldrb	r3, [r7, #3]
 800307c:	f003 020f 	and.w	r2, r3, #15
 8003080:	4613      	mov	r3, r2
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	1a9b      	subs	r3, r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	3338      	adds	r3, #56	; 0x38
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	4413      	add	r3, r2
 800308e:	3304      	adds	r3, #4
 8003090:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2201      	movs	r2, #1
 8003096:	705a      	strb	r2, [r3, #1]
 8003098:	e00f      	b.n	80030ba <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800309a:	78fb      	ldrb	r3, [r7, #3]
 800309c:	f003 020f 	and.w	r2, r3, #15
 80030a0:	4613      	mov	r3, r2
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	1a9b      	subs	r3, r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	4413      	add	r3, r2
 80030b0:	3304      	adds	r3, #4
 80030b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80030ba:	78fb      	ldrb	r3, [r7, #3]
 80030bc:	f003 030f 	and.w	r3, r3, #15
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d101      	bne.n	80030d4 <HAL_PCD_EP_Close+0x6e>
 80030d0:	2302      	movs	r3, #2
 80030d2:	e00e      	b.n	80030f2 <HAL_PCD_EP_Close+0x8c>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68f9      	ldr	r1, [r7, #12]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f002 fcf6 	bl	8005ad4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b086      	sub	sp, #24
 80030fe:	af00      	add	r7, sp, #0
 8003100:	60f8      	str	r0, [r7, #12]
 8003102:	607a      	str	r2, [r7, #4]
 8003104:	603b      	str	r3, [r7, #0]
 8003106:	460b      	mov	r3, r1
 8003108:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800310a:	7afb      	ldrb	r3, [r7, #11]
 800310c:	f003 020f 	and.w	r2, r3, #15
 8003110:	4613      	mov	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	1a9b      	subs	r3, r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	4413      	add	r3, r2
 8003120:	3304      	adds	r3, #4
 8003122:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	2200      	movs	r2, #0
 8003134:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	2200      	movs	r2, #0
 800313a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800313c:	7afb      	ldrb	r3, [r7, #11]
 800313e:	f003 030f 	and.w	r3, r3, #15
 8003142:	b2da      	uxtb	r2, r3
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d102      	bne.n	8003156 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003156:	7afb      	ldrb	r3, [r7, #11]
 8003158:	f003 030f 	and.w	r3, r3, #15
 800315c:	2b00      	cmp	r3, #0
 800315e:	d109      	bne.n	8003174 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6818      	ldr	r0, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	b2db      	uxtb	r3, r3
 800316a:	461a      	mov	r2, r3
 800316c:	6979      	ldr	r1, [r7, #20]
 800316e:	f002 ffd1 	bl	8006114 <USB_EP0StartXfer>
 8003172:	e008      	b.n	8003186 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6818      	ldr	r0, [r3, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	b2db      	uxtb	r3, r3
 800317e:	461a      	mov	r2, r3
 8003180:	6979      	ldr	r1, [r7, #20]
 8003182:	f002 fd83 	bl	8005c8c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3718      	adds	r7, #24
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	607a      	str	r2, [r7, #4]
 800319a:	603b      	str	r3, [r7, #0]
 800319c:	460b      	mov	r3, r1
 800319e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031a0:	7afb      	ldrb	r3, [r7, #11]
 80031a2:	f003 020f 	and.w	r2, r3, #15
 80031a6:	4613      	mov	r3, r2
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	1a9b      	subs	r3, r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	3338      	adds	r3, #56	; 0x38
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	4413      	add	r3, r2
 80031b4:	3304      	adds	r3, #4
 80031b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	2200      	movs	r2, #0
 80031c8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	2201      	movs	r2, #1
 80031ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031d0:	7afb      	ldrb	r3, [r7, #11]
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d102      	bne.n	80031ea <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031ea:	7afb      	ldrb	r3, [r7, #11]
 80031ec:	f003 030f 	and.w	r3, r3, #15
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d109      	bne.n	8003208 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6818      	ldr	r0, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	461a      	mov	r2, r3
 8003200:	6979      	ldr	r1, [r7, #20]
 8003202:	f002 ff87 	bl	8006114 <USB_EP0StartXfer>
 8003206:	e008      	b.n	800321a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6818      	ldr	r0, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	b2db      	uxtb	r3, r3
 8003212:	461a      	mov	r2, r3
 8003214:	6979      	ldr	r1, [r7, #20]
 8003216:	f002 fd39 	bl	8005c8c <USB_EPStartXfer>
  }

  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	460b      	mov	r3, r1
 800322e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003230:	78fb      	ldrb	r3, [r7, #3]
 8003232:	f003 020f 	and.w	r2, r3, #15
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	429a      	cmp	r2, r3
 800323c:	d901      	bls.n	8003242 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e050      	b.n	80032e4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003242:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003246:	2b00      	cmp	r3, #0
 8003248:	da0f      	bge.n	800326a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800324a:	78fb      	ldrb	r3, [r7, #3]
 800324c:	f003 020f 	and.w	r2, r3, #15
 8003250:	4613      	mov	r3, r2
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	1a9b      	subs	r3, r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	3338      	adds	r3, #56	; 0x38
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	4413      	add	r3, r2
 800325e:	3304      	adds	r3, #4
 8003260:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2201      	movs	r2, #1
 8003266:	705a      	strb	r2, [r3, #1]
 8003268:	e00d      	b.n	8003286 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800326a:	78fa      	ldrb	r2, [r7, #3]
 800326c:	4613      	mov	r3, r2
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	1a9b      	subs	r3, r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	4413      	add	r3, r2
 800327c:	3304      	adds	r3, #4
 800327e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2201      	movs	r2, #1
 800328a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800328c:	78fb      	ldrb	r3, [r7, #3]
 800328e:	f003 030f 	and.w	r3, r3, #15
 8003292:	b2da      	uxtb	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d101      	bne.n	80032a6 <HAL_PCD_EP_SetStall+0x82>
 80032a2:	2302      	movs	r3, #2
 80032a4:	e01e      	b.n	80032e4 <HAL_PCD_EP_SetStall+0xc0>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68f9      	ldr	r1, [r7, #12]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f003 f916 	bl	80064e6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032ba:	78fb      	ldrb	r3, [r7, #3]
 80032bc:	f003 030f 	and.w	r3, r3, #15
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10a      	bne.n	80032da <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6818      	ldr	r0, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	b2d9      	uxtb	r1, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80032d4:	461a      	mov	r2, r3
 80032d6:	f003 fb07 	bl	80068e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	460b      	mov	r3, r1
 80032f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80032f8:	78fb      	ldrb	r3, [r7, #3]
 80032fa:	f003 020f 	and.w	r2, r3, #15
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	429a      	cmp	r2, r3
 8003304:	d901      	bls.n	800330a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e042      	b.n	8003390 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800330a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800330e:	2b00      	cmp	r3, #0
 8003310:	da0f      	bge.n	8003332 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003312:	78fb      	ldrb	r3, [r7, #3]
 8003314:	f003 020f 	and.w	r2, r3, #15
 8003318:	4613      	mov	r3, r2
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	1a9b      	subs	r3, r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	3338      	adds	r3, #56	; 0x38
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	4413      	add	r3, r2
 8003326:	3304      	adds	r3, #4
 8003328:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2201      	movs	r2, #1
 800332e:	705a      	strb	r2, [r3, #1]
 8003330:	e00f      	b.n	8003352 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003332:	78fb      	ldrb	r3, [r7, #3]
 8003334:	f003 020f 	and.w	r2, r3, #15
 8003338:	4613      	mov	r3, r2
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	1a9b      	subs	r3, r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	4413      	add	r3, r2
 8003348:	3304      	adds	r3, #4
 800334a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003358:	78fb      	ldrb	r3, [r7, #3]
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	b2da      	uxtb	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800336a:	2b01      	cmp	r3, #1
 800336c:	d101      	bne.n	8003372 <HAL_PCD_EP_ClrStall+0x86>
 800336e:	2302      	movs	r3, #2
 8003370:	e00e      	b.n	8003390 <HAL_PCD_EP_ClrStall+0xa4>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68f9      	ldr	r1, [r7, #12]
 8003380:	4618      	mov	r0, r3
 8003382:	f003 f91e 	bl	80065c2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b08a      	sub	sp, #40	; 0x28
 800339c:	af02      	add	r7, sp, #8
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	4613      	mov	r3, r2
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	1a9b      	subs	r3, r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	3338      	adds	r3, #56	; 0x38
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	4413      	add	r3, r2
 80033bc:	3304      	adds	r3, #4
 80033be:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	699a      	ldr	r2, [r3, #24]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d901      	bls.n	80033d0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e06c      	b.n	80034aa <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	695a      	ldr	r2, [r3, #20]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	69fa      	ldr	r2, [r7, #28]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d902      	bls.n	80033ec <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	3303      	adds	r3, #3
 80033f0:	089b      	lsrs	r3, r3, #2
 80033f2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033f4:	e02b      	b.n	800344e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	695a      	ldr	r2, [r3, #20]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	69fa      	ldr	r2, [r7, #28]
 8003408:	429a      	cmp	r2, r3
 800340a:	d902      	bls.n	8003412 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	3303      	adds	r3, #3
 8003416:	089b      	lsrs	r3, r3, #2
 8003418:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	68d9      	ldr	r1, [r3, #12]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	b2da      	uxtb	r2, r3
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800342a:	b2db      	uxtb	r3, r3
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	4603      	mov	r3, r0
 8003430:	6978      	ldr	r0, [r7, #20]
 8003432:	f002 ffc2 	bl	80063ba <USB_WritePacket>

    ep->xfer_buff  += len;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	68da      	ldr	r2, [r3, #12]
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	441a      	add	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	699a      	ldr	r2, [r3, #24]
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	441a      	add	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	015a      	lsls	r2, r3, #5
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	4413      	add	r3, r2
 8003456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	b29b      	uxth	r3, r3
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	429a      	cmp	r2, r3
 8003462:	d809      	bhi.n	8003478 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	699a      	ldr	r2, [r3, #24]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800346c:	429a      	cmp	r2, r3
 800346e:	d203      	bcs.n	8003478 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1be      	bne.n	80033f6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	695a      	ldr	r2, [r3, #20]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	429a      	cmp	r2, r3
 8003482:	d811      	bhi.n	80034a8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	2201      	movs	r2, #1
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003498:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	43db      	mvns	r3, r3
 800349e:	6939      	ldr	r1, [r7, #16]
 80034a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034a4:	4013      	ands	r3, r2
 80034a6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3720      	adds	r7, #32
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
	...

080034b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	333c      	adds	r3, #60	; 0x3c
 80034cc:	3304      	adds	r3, #4
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	015a      	lsls	r2, r3, #5
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	4413      	add	r3, r2
 80034da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	f040 80a0 	bne.w	800362c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d015      	beq.n	8003522 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	4a72      	ldr	r2, [pc, #456]	; (80036c4 <PCD_EP_OutXfrComplete_int+0x210>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	f240 80dd 	bls.w	80036ba <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 80d7 	beq.w	80036ba <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	015a      	lsls	r2, r3, #5
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	4413      	add	r3, r2
 8003514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003518:	461a      	mov	r2, r3
 800351a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800351e:	6093      	str	r3, [r2, #8]
 8003520:	e0cb      	b.n	80036ba <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	f003 0320 	and.w	r3, r3, #32
 8003528:	2b00      	cmp	r3, #0
 800352a:	d009      	beq.n	8003540 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	015a      	lsls	r2, r3, #5
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	4413      	add	r3, r2
 8003534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003538:	461a      	mov	r2, r3
 800353a:	2320      	movs	r3, #32
 800353c:	6093      	str	r3, [r2, #8]
 800353e:	e0bc      	b.n	80036ba <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003546:	2b00      	cmp	r3, #0
 8003548:	f040 80b7 	bne.w	80036ba <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4a5d      	ldr	r2, [pc, #372]	; (80036c4 <PCD_EP_OutXfrComplete_int+0x210>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d90f      	bls.n	8003574 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00a      	beq.n	8003574 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	015a      	lsls	r2, r3, #5
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	4413      	add	r3, r2
 8003566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800356a:	461a      	mov	r2, r3
 800356c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003570:	6093      	str	r3, [r2, #8]
 8003572:	e0a2      	b.n	80036ba <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	4613      	mov	r3, r2
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	1a9b      	subs	r3, r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003586:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	0159      	lsls	r1, r3, #5
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	440b      	add	r3, r1
 8003590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800359a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	4613      	mov	r3, r2
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	1a9b      	subs	r3, r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4403      	add	r3, r0
 80035aa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80035ae:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80035b0:	6879      	ldr	r1, [r7, #4]
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	4613      	mov	r3, r2
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	1a9b      	subs	r3, r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	440b      	add	r3, r1
 80035be:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80035c2:	6819      	ldr	r1, [r3, #0]
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	4613      	mov	r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	1a9b      	subs	r3, r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4403      	add	r3, r0
 80035d2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4419      	add	r1, r3
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	4613      	mov	r3, r2
 80035e0:	00db      	lsls	r3, r3, #3
 80035e2:	1a9b      	subs	r3, r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4403      	add	r3, r0
 80035e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80035ec:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d114      	bne.n	800361e <PCD_EP_OutXfrComplete_int+0x16a>
 80035f4:	6879      	ldr	r1, [r7, #4]
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	4613      	mov	r3, r2
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	1a9b      	subs	r3, r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d108      	bne.n	800361e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6818      	ldr	r0, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003616:	461a      	mov	r2, r3
 8003618:	2101      	movs	r1, #1
 800361a:	f003 f965 	bl	80068e8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	b2db      	uxtb	r3, r3
 8003622:	4619      	mov	r1, r3
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f007 fbfb 	bl	800ae20 <HAL_PCD_DataOutStageCallback>
 800362a:	e046      	b.n	80036ba <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	4a26      	ldr	r2, [pc, #152]	; (80036c8 <PCD_EP_OutXfrComplete_int+0x214>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d124      	bne.n	800367e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00a      	beq.n	8003654 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	015a      	lsls	r2, r3, #5
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	4413      	add	r3, r2
 8003646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800364a:	461a      	mov	r2, r3
 800364c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003650:	6093      	str	r3, [r2, #8]
 8003652:	e032      	b.n	80036ba <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	f003 0320 	and.w	r3, r3, #32
 800365a:	2b00      	cmp	r3, #0
 800365c:	d008      	beq.n	8003670 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	015a      	lsls	r2, r3, #5
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	4413      	add	r3, r2
 8003666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800366a:	461a      	mov	r2, r3
 800366c:	2320      	movs	r3, #32
 800366e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	b2db      	uxtb	r3, r3
 8003674:	4619      	mov	r1, r3
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f007 fbd2 	bl	800ae20 <HAL_PCD_DataOutStageCallback>
 800367c:	e01d      	b.n	80036ba <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d114      	bne.n	80036ae <PCD_EP_OutXfrComplete_int+0x1fa>
 8003684:	6879      	ldr	r1, [r7, #4]
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	4613      	mov	r3, r2
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	1a9b      	subs	r3, r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d108      	bne.n	80036ae <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6818      	ldr	r0, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80036a6:	461a      	mov	r2, r3
 80036a8:	2100      	movs	r1, #0
 80036aa:	f003 f91d 	bl	80068e8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	4619      	mov	r1, r3
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f007 fbb3 	bl	800ae20 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3718      	adds	r7, #24
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	4f54300a 	.word	0x4f54300a
 80036c8:	4f54310a 	.word	0x4f54310a

080036cc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	333c      	adds	r3, #60	; 0x3c
 80036e4:	3304      	adds	r3, #4
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	015a      	lsls	r2, r3, #5
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	4413      	add	r3, r2
 80036f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	4a15      	ldr	r2, [pc, #84]	; (8003754 <PCD_EP_OutSetupPacket_int+0x88>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d90e      	bls.n	8003720 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003708:	2b00      	cmp	r3, #0
 800370a:	d009      	beq.n	8003720 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	015a      	lsls	r2, r3, #5
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	4413      	add	r3, r2
 8003714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003718:	461a      	mov	r2, r3
 800371a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800371e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f007 fb6b 	bl	800adfc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	4a0a      	ldr	r2, [pc, #40]	; (8003754 <PCD_EP_OutSetupPacket_int+0x88>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d90c      	bls.n	8003748 <PCD_EP_OutSetupPacket_int+0x7c>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d108      	bne.n	8003748 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6818      	ldr	r0, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003740:	461a      	mov	r2, r3
 8003742:	2101      	movs	r1, #1
 8003744:	f003 f8d0 	bl	80068e8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	4f54300a 	.word	0x4f54300a

08003758 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	460b      	mov	r3, r1
 8003762:	70fb      	strb	r3, [r7, #3]
 8003764:	4613      	mov	r3, r2
 8003766:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003770:	78fb      	ldrb	r3, [r7, #3]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d107      	bne.n	8003786 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003776:	883b      	ldrh	r3, [r7, #0]
 8003778:	0419      	lsls	r1, r3, #16
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	430a      	orrs	r2, r1
 8003782:	629a      	str	r2, [r3, #40]	; 0x28
 8003784:	e028      	b.n	80037d8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378c:	0c1b      	lsrs	r3, r3, #16
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	4413      	add	r3, r2
 8003792:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003794:	2300      	movs	r3, #0
 8003796:	73fb      	strb	r3, [r7, #15]
 8003798:	e00d      	b.n	80037b6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	7bfb      	ldrb	r3, [r7, #15]
 80037a0:	3340      	adds	r3, #64	; 0x40
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4413      	add	r3, r2
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	0c1b      	lsrs	r3, r3, #16
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	4413      	add	r3, r2
 80037ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
 80037b2:	3301      	adds	r3, #1
 80037b4:	73fb      	strb	r3, [r7, #15]
 80037b6:	7bfa      	ldrb	r2, [r7, #15]
 80037b8:	78fb      	ldrb	r3, [r7, #3]
 80037ba:	3b01      	subs	r3, #1
 80037bc:	429a      	cmp	r2, r3
 80037be:	d3ec      	bcc.n	800379a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80037c0:	883b      	ldrh	r3, [r7, #0]
 80037c2:	0418      	lsls	r0, r3, #16
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6819      	ldr	r1, [r3, #0]
 80037c8:	78fb      	ldrb	r3, [r7, #3]
 80037ca:	3b01      	subs	r3, #1
 80037cc:	68ba      	ldr	r2, [r7, #8]
 80037ce:	4302      	orrs	r2, r0
 80037d0:	3340      	adds	r3, #64	; 0x40
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3714      	adds	r7, #20
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80037e6:	b480      	push	{r7}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
 80037ee:	460b      	mov	r3, r1
 80037f0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	887a      	ldrh	r2, [r7, #2]
 80037f8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800383a:	f043 0303 	orr.w	r3, r3, #3
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e0cc      	b.n	80039fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003864:	4b68      	ldr	r3, [pc, #416]	; (8003a08 <HAL_RCC_ClockConfig+0x1b8>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 030f 	and.w	r3, r3, #15
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	429a      	cmp	r2, r3
 8003870:	d90c      	bls.n	800388c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003872:	4b65      	ldr	r3, [pc, #404]	; (8003a08 <HAL_RCC_ClockConfig+0x1b8>)
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	b2d2      	uxtb	r2, r2
 8003878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800387a:	4b63      	ldr	r3, [pc, #396]	; (8003a08 <HAL_RCC_ClockConfig+0x1b8>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	429a      	cmp	r2, r3
 8003886:	d001      	beq.n	800388c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e0b8      	b.n	80039fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d020      	beq.n	80038da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0304 	and.w	r3, r3, #4
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d005      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038a4:	4b59      	ldr	r3, [pc, #356]	; (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	4a58      	ldr	r2, [pc, #352]	; (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80038aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0308 	and.w	r3, r3, #8
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d005      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038bc:	4b53      	ldr	r3, [pc, #332]	; (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	4a52      	ldr	r2, [pc, #328]	; (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80038c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038c8:	4b50      	ldr	r3, [pc, #320]	; (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	494d      	ldr	r1, [pc, #308]	; (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d044      	beq.n	8003970 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d107      	bne.n	80038fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ee:	4b47      	ldr	r3, [pc, #284]	; (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d119      	bne.n	800392e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e07f      	b.n	80039fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b02      	cmp	r3, #2
 8003904:	d003      	beq.n	800390e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800390a:	2b03      	cmp	r3, #3
 800390c:	d107      	bne.n	800391e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800390e:	4b3f      	ldr	r3, [pc, #252]	; (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d109      	bne.n	800392e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e06f      	b.n	80039fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800391e:	4b3b      	ldr	r3, [pc, #236]	; (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e067      	b.n	80039fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800392e:	4b37      	ldr	r3, [pc, #220]	; (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f023 0203 	bic.w	r2, r3, #3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	4934      	ldr	r1, [pc, #208]	; (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 800393c:	4313      	orrs	r3, r2
 800393e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003940:	f7fd fc6e 	bl	8001220 <HAL_GetTick>
 8003944:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003946:	e00a      	b.n	800395e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003948:	f7fd fc6a 	bl	8001220 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	f241 3288 	movw	r2, #5000	; 0x1388
 8003956:	4293      	cmp	r3, r2
 8003958:	d901      	bls.n	800395e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e04f      	b.n	80039fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395e:	4b2b      	ldr	r3, [pc, #172]	; (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f003 020c 	and.w	r2, r3, #12
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	429a      	cmp	r2, r3
 800396e:	d1eb      	bne.n	8003948 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003970:	4b25      	ldr	r3, [pc, #148]	; (8003a08 <HAL_RCC_ClockConfig+0x1b8>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 030f 	and.w	r3, r3, #15
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	429a      	cmp	r2, r3
 800397c:	d20c      	bcs.n	8003998 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800397e:	4b22      	ldr	r3, [pc, #136]	; (8003a08 <HAL_RCC_ClockConfig+0x1b8>)
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003986:	4b20      	ldr	r3, [pc, #128]	; (8003a08 <HAL_RCC_ClockConfig+0x1b8>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	429a      	cmp	r2, r3
 8003992:	d001      	beq.n	8003998 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e032      	b.n	80039fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0304 	and.w	r3, r3, #4
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d008      	beq.n	80039b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039a4:	4b19      	ldr	r3, [pc, #100]	; (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	4916      	ldr	r1, [pc, #88]	; (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d009      	beq.n	80039d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039c2:	4b12      	ldr	r3, [pc, #72]	; (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	490e      	ldr	r1, [pc, #56]	; (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039d6:	f000 fbb1 	bl	800413c <HAL_RCC_GetSysClockFreq>
 80039da:	4602      	mov	r2, r0
 80039dc:	4b0b      	ldr	r3, [pc, #44]	; (8003a0c <HAL_RCC_ClockConfig+0x1bc>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	091b      	lsrs	r3, r3, #4
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	490a      	ldr	r1, [pc, #40]	; (8003a10 <HAL_RCC_ClockConfig+0x1c0>)
 80039e8:	5ccb      	ldrb	r3, [r1, r3]
 80039ea:	fa22 f303 	lsr.w	r3, r2, r3
 80039ee:	4a09      	ldr	r2, [pc, #36]	; (8003a14 <HAL_RCC_ClockConfig+0x1c4>)
 80039f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039f2:	4b09      	ldr	r3, [pc, #36]	; (8003a18 <HAL_RCC_ClockConfig+0x1c8>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fd fb30 	bl	800105c <HAL_InitTick>

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	40023c00 	.word	0x40023c00
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	0800b6a0 	.word	0x0800b6a0
 8003a14:	20000000 	.word	0x20000000
 8003a18:	20000004 	.word	0x20000004

08003a1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a20:	4b03      	ldr	r3, [pc, #12]	; (8003a30 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a22:	681b      	ldr	r3, [r3, #0]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	20000000 	.word	0x20000000

08003a34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a38:	f7ff fff0 	bl	8003a1c <HAL_RCC_GetHCLKFreq>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	4b05      	ldr	r3, [pc, #20]	; (8003a54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	0a9b      	lsrs	r3, r3, #10
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	4903      	ldr	r1, [pc, #12]	; (8003a58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a4a:	5ccb      	ldrb	r3, [r1, r3]
 8003a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	40023800 	.word	0x40023800
 8003a58:	0800b6b0 	.word	0x0800b6b0

08003a5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a60:	f7ff ffdc 	bl	8003a1c <HAL_RCC_GetHCLKFreq>
 8003a64:	4602      	mov	r2, r0
 8003a66:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	0b5b      	lsrs	r3, r3, #13
 8003a6c:	f003 0307 	and.w	r3, r3, #7
 8003a70:	4903      	ldr	r1, [pc, #12]	; (8003a80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a72:	5ccb      	ldrb	r3, [r1, r3]
 8003a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40023800 	.word	0x40023800
 8003a80:	0800b6b0 	.word	0x0800b6b0

08003a84 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	220f      	movs	r2, #15
 8003a92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a94:	4b12      	ldr	r3, [pc, #72]	; (8003ae0 <HAL_RCC_GetClockConfig+0x5c>)
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f003 0203 	and.w	r2, r3, #3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003aa0:	4b0f      	ldr	r3, [pc, #60]	; (8003ae0 <HAL_RCC_GetClockConfig+0x5c>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003aac:	4b0c      	ldr	r3, [pc, #48]	; (8003ae0 <HAL_RCC_GetClockConfig+0x5c>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003ab8:	4b09      	ldr	r3, [pc, #36]	; (8003ae0 <HAL_RCC_GetClockConfig+0x5c>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	08db      	lsrs	r3, r3, #3
 8003abe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ac6:	4b07      	ldr	r3, [pc, #28]	; (8003ae4 <HAL_RCC_GetClockConfig+0x60>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 020f 	and.w	r2, r3, #15
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	601a      	str	r2, [r3, #0]
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	40023800 	.word	0x40023800
 8003ae4:	40023c00 	.word	0x40023c00

08003ae8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b08c      	sub	sp, #48	; 0x30
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003af8:	2300      	movs	r3, #0
 8003afa:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003b04:	2300      	movs	r3, #0
 8003b06:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003b10:	2300      	movs	r3, #0
 8003b12:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d010      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003b20:	4b6f      	ldr	r3, [pc, #444]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b26:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2e:	496c      	ldr	r1, [pc, #432]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d010      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003b4e:	4b64      	ldr	r3, [pc, #400]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b54:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5c:	4960      	ldr	r1, [pc, #384]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d101      	bne.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d017      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b7c:	4b58      	ldr	r3, [pc, #352]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8a:	4955      	ldr	r1, [pc, #340]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b9a:	d101      	bne.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d101      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0308 	and.w	r3, r3, #8
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d017      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003bb8:	4b49      	ldr	r3, [pc, #292]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bbe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc6:	4946      	ldr	r1, [pc, #280]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bd6:	d101      	bne.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003be4:	2301      	movs	r3, #1
 8003be6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0320 	and.w	r3, r3, #32
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 808a 	beq.w	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60bb      	str	r3, [r7, #8]
 8003bfa:	4b39      	ldr	r3, [pc, #228]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	4a38      	ldr	r2, [pc, #224]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c04:	6413      	str	r3, [r2, #64]	; 0x40
 8003c06:	4b36      	ldr	r3, [pc, #216]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c0e:	60bb      	str	r3, [r7, #8]
 8003c10:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003c12:	4b34      	ldr	r3, [pc, #208]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a33      	ldr	r2, [pc, #204]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c1c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c1e:	f7fd faff 	bl	8001220 <HAL_GetTick>
 8003c22:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003c24:	e008      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003c26:	f7fd fafb 	bl	8001220 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d901      	bls.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e278      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003c38:	4b2a      	ldr	r3, [pc, #168]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d0f0      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c44:	4b26      	ldr	r3, [pc, #152]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c4c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c4e:	6a3b      	ldr	r3, [r7, #32]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d02f      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c5c:	6a3a      	ldr	r2, [r7, #32]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d028      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c62:	4b1f      	ldr	r3, [pc, #124]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c6a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c6c:	4b1e      	ldr	r3, [pc, #120]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003c6e:	2201      	movs	r2, #1
 8003c70:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c72:	4b1d      	ldr	r3, [pc, #116]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003c78:	4a19      	ldr	r2, [pc, #100]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c7a:	6a3b      	ldr	r3, [r7, #32]
 8003c7c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c7e:	4b18      	ldr	r3, [pc, #96]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d114      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003c8a:	f7fd fac9 	bl	8001220 <HAL_GetTick>
 8003c8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c90:	e00a      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c92:	f7fd fac5 	bl	8001220 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e240      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca8:	4b0d      	ldr	r3, [pc, #52]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0ee      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cc0:	d114      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003cc2:	4b07      	ldr	r3, [pc, #28]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cd6:	4902      	ldr	r1, [pc, #8]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	608b      	str	r3, [r1, #8]
 8003cdc:	e00c      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003cde:	bf00      	nop
 8003ce0:	40023800 	.word	0x40023800
 8003ce4:	40007000 	.word	0x40007000
 8003ce8:	42470e40 	.word	0x42470e40
 8003cec:	4b4a      	ldr	r3, [pc, #296]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	4a49      	ldr	r2, [pc, #292]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cf2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003cf6:	6093      	str	r3, [r2, #8]
 8003cf8:	4b47      	ldr	r3, [pc, #284]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003cfa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d04:	4944      	ldr	r1, [pc, #272]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0310 	and.w	r3, r3, #16
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d004      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003d1c:	4b3f      	ldr	r3, [pc, #252]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003d1e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00a      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003d2c:	4b3a      	ldr	r3, [pc, #232]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d3a:	4937      	ldr	r1, [pc, #220]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d4e:	4b32      	ldr	r3, [pc, #200]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d54:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d5c:	492e      	ldr	r1, [pc, #184]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d011      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003d70:	4b29      	ldr	r3, [pc, #164]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d76:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d7e:	4926      	ldr	r1, [pc, #152]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d8e:	d101      	bne.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003d90:	2301      	movs	r3, #1
 8003d92:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00a      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003da0:	4b1d      	ldr	r3, [pc, #116]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003da6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dae:	491a      	ldr	r1, [pc, #104]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d011      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003dc2:	4b15      	ldr	r3, [pc, #84]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003dc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dc8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd0:	4911      	ldr	r1, [pc, #68]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ddc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003de0:	d101      	bne.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003de2:	2301      	movs	r3, #1
 8003de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d005      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003df4:	f040 80ff 	bne.w	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003df8:	4b09      	ldr	r3, [pc, #36]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003dfe:	f7fd fa0f 	bl	8001220 <HAL_GetTick>
 8003e02:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e04:	e00e      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e06:	f7fd fa0b 	bl	8001220 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d907      	bls.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e188      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	424711e0 	.word	0x424711e0
 8003e20:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e24:	4b7e      	ldr	r3, [pc, #504]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1ea      	bne.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d003      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d009      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d028      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d124      	bne.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003e58:	4b71      	ldr	r3, [pc, #452]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e5e:	0c1b      	lsrs	r3, r3, #16
 8003e60:	f003 0303 	and.w	r3, r3, #3
 8003e64:	3301      	adds	r3, #1
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e6a:	4b6d      	ldr	r3, [pc, #436]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e70:	0e1b      	lsrs	r3, r3, #24
 8003e72:	f003 030f 	and.w	r3, r3, #15
 8003e76:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	019b      	lsls	r3, r3, #6
 8003e82:	431a      	orrs	r2, r3
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	085b      	lsrs	r3, r3, #1
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	041b      	lsls	r3, r3, #16
 8003e8c:	431a      	orrs	r2, r3
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	061b      	lsls	r3, r3, #24
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	071b      	lsls	r3, r3, #28
 8003e9a:	4961      	ldr	r1, [pc, #388]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0304 	and.w	r3, r3, #4
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d004      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eb6:	d00a      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d035      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ecc:	d130      	bne.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003ece:	4b54      	ldr	r3, [pc, #336]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ed4:	0c1b      	lsrs	r3, r3, #16
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	3301      	adds	r3, #1
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ee0:	4b4f      	ldr	r3, [pc, #316]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ee6:	0f1b      	lsrs	r3, r3, #28
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	019b      	lsls	r3, r3, #6
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	085b      	lsrs	r3, r3, #1
 8003efe:	3b01      	subs	r3, #1
 8003f00:	041b      	lsls	r3, r3, #16
 8003f02:	431a      	orrs	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	061b      	lsls	r3, r3, #24
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	071b      	lsls	r3, r3, #28
 8003f10:	4943      	ldr	r1, [pc, #268]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003f18:	4b41      	ldr	r3, [pc, #260]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f1e:	f023 021f 	bic.w	r2, r3, #31
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f26:	3b01      	subs	r3, #1
 8003f28:	493d      	ldr	r1, [pc, #244]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d029      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f44:	d124      	bne.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003f46:	4b36      	ldr	r3, [pc, #216]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f4c:	0c1b      	lsrs	r3, r3, #16
 8003f4e:	f003 0303 	and.w	r3, r3, #3
 8003f52:	3301      	adds	r3, #1
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f58:	4b31      	ldr	r3, [pc, #196]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f5e:	0f1b      	lsrs	r3, r3, #28
 8003f60:	f003 0307 	and.w	r3, r3, #7
 8003f64:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	019b      	lsls	r3, r3, #6
 8003f70:	431a      	orrs	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	085b      	lsrs	r3, r3, #1
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	041b      	lsls	r3, r3, #16
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	061b      	lsls	r3, r3, #24
 8003f82:	431a      	orrs	r2, r3
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	071b      	lsls	r3, r3, #28
 8003f88:	4925      	ldr	r1, [pc, #148]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d016      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	019b      	lsls	r3, r3, #6
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	085b      	lsrs	r3, r3, #1
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	041b      	lsls	r3, r3, #16
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	061b      	lsls	r3, r3, #24
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	071b      	lsls	r3, r3, #28
 8003fc2:	4917      	ldr	r1, [pc, #92]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003fca:	4b16      	ldr	r3, [pc, #88]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003fcc:	2201      	movs	r2, #1
 8003fce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003fd0:	f7fd f926 	bl	8001220 <HAL_GetTick>
 8003fd4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fd6:	e008      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003fd8:	f7fd f922 	bl	8001220 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e09f      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fea:	4b0d      	ldr	r3, [pc, #52]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d0f0      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	f040 8095 	bne.w	8004128 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003ffe:	4b0a      	ldr	r3, [pc, #40]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004000:	2200      	movs	r2, #0
 8004002:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004004:	f7fd f90c 	bl	8001220 <HAL_GetTick>
 8004008:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800400a:	e00f      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800400c:	f7fd f908 	bl	8001220 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d908      	bls.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e085      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800401e:	bf00      	nop
 8004020:	40023800 	.word	0x40023800
 8004024:	42470068 	.word	0x42470068
 8004028:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800402c:	4b41      	ldr	r3, [pc, #260]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004034:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004038:	d0e8      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0304 	and.w	r3, r3, #4
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404a:	2b00      	cmp	r3, #0
 800404c:	d009      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004056:	2b00      	cmp	r3, #0
 8004058:	d02b      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800405e:	2b00      	cmp	r3, #0
 8004060:	d127      	bne.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8004062:	4b34      	ldr	r3, [pc, #208]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004068:	0c1b      	lsrs	r3, r3, #16
 800406a:	f003 0303 	and.w	r3, r3, #3
 800406e:	3301      	adds	r3, #1
 8004070:	005b      	lsls	r3, r3, #1
 8004072:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	699a      	ldr	r2, [r3, #24]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	69db      	ldr	r3, [r3, #28]
 800407c:	019b      	lsls	r3, r3, #6
 800407e:	431a      	orrs	r2, r3
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	085b      	lsrs	r3, r3, #1
 8004084:	3b01      	subs	r3, #1
 8004086:	041b      	lsls	r3, r3, #16
 8004088:	431a      	orrs	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408e:	061b      	lsls	r3, r3, #24
 8004090:	4928      	ldr	r1, [pc, #160]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004092:	4313      	orrs	r3, r2
 8004094:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004098:	4b26      	ldr	r3, [pc, #152]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800409a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800409e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a6:	3b01      	subs	r3, #1
 80040a8:	021b      	lsls	r3, r3, #8
 80040aa:	4922      	ldr	r1, [pc, #136]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d01d      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x612>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040c6:	d118      	bne.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80040c8:	4b1a      	ldr	r3, [pc, #104]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80040ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ce:	0e1b      	lsrs	r3, r3, #24
 80040d0:	f003 030f 	and.w	r3, r3, #15
 80040d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	699a      	ldr	r2, [r3, #24]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	019b      	lsls	r3, r3, #6
 80040e0:	431a      	orrs	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	085b      	lsrs	r3, r3, #1
 80040e8:	3b01      	subs	r3, #1
 80040ea:	041b      	lsls	r3, r3, #16
 80040ec:	431a      	orrs	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	061b      	lsls	r3, r3, #24
 80040f2:	4910      	ldr	r1, [pc, #64]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80040fa:	4b0f      	ldr	r3, [pc, #60]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80040fc:	2201      	movs	r2, #1
 80040fe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004100:	f7fd f88e 	bl	8001220 <HAL_GetTick>
 8004104:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004106:	e008      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004108:	f7fd f88a 	bl	8001220 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e007      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800411a:	4b06      	ldr	r3, [pc, #24]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004122:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004126:	d1ef      	bne.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3730      	adds	r7, #48	; 0x30
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	40023800 	.word	0x40023800
 8004138:	42470070 	.word	0x42470070

0800413c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800413c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004140:	b088      	sub	sp, #32
 8004142:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800414c:	2300      	movs	r3, #0
 800414e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8004150:	2300      	movs	r3, #0
 8004152:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8004154:	2300      	movs	r3, #0
 8004156:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004158:	4bce      	ldr	r3, [pc, #824]	; (8004494 <HAL_RCC_GetSysClockFreq+0x358>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f003 030c 	and.w	r3, r3, #12
 8004160:	2b0c      	cmp	r3, #12
 8004162:	f200 818d 	bhi.w	8004480 <HAL_RCC_GetSysClockFreq+0x344>
 8004166:	a201      	add	r2, pc, #4	; (adr r2, 800416c <HAL_RCC_GetSysClockFreq+0x30>)
 8004168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416c:	080041a1 	.word	0x080041a1
 8004170:	08004481 	.word	0x08004481
 8004174:	08004481 	.word	0x08004481
 8004178:	08004481 	.word	0x08004481
 800417c:	080041a7 	.word	0x080041a7
 8004180:	08004481 	.word	0x08004481
 8004184:	08004481 	.word	0x08004481
 8004188:	08004481 	.word	0x08004481
 800418c:	080041ad 	.word	0x080041ad
 8004190:	08004481 	.word	0x08004481
 8004194:	08004481 	.word	0x08004481
 8004198:	08004481 	.word	0x08004481
 800419c:	08004321 	.word	0x08004321
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041a0:	4bbd      	ldr	r3, [pc, #756]	; (8004498 <HAL_RCC_GetSysClockFreq+0x35c>)
 80041a2:	61bb      	str	r3, [r7, #24]
       break;
 80041a4:	e16f      	b.n	8004486 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041a6:	4bbd      	ldr	r3, [pc, #756]	; (800449c <HAL_RCC_GetSysClockFreq+0x360>)
 80041a8:	61bb      	str	r3, [r7, #24]
      break;
 80041aa:	e16c      	b.n	8004486 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041ac:	4bb9      	ldr	r3, [pc, #740]	; (8004494 <HAL_RCC_GetSysClockFreq+0x358>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041b4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041b6:	4bb7      	ldr	r3, [pc, #732]	; (8004494 <HAL_RCC_GetSysClockFreq+0x358>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d053      	beq.n	800426a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041c2:	4bb4      	ldr	r3, [pc, #720]	; (8004494 <HAL_RCC_GetSysClockFreq+0x358>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	099b      	lsrs	r3, r3, #6
 80041c8:	461a      	mov	r2, r3
 80041ca:	f04f 0300 	mov.w	r3, #0
 80041ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80041d2:	f04f 0100 	mov.w	r1, #0
 80041d6:	ea02 0400 	and.w	r4, r2, r0
 80041da:	603c      	str	r4, [r7, #0]
 80041dc:	400b      	ands	r3, r1
 80041de:	607b      	str	r3, [r7, #4]
 80041e0:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041e4:	4620      	mov	r0, r4
 80041e6:	4629      	mov	r1, r5
 80041e8:	f04f 0200 	mov.w	r2, #0
 80041ec:	f04f 0300 	mov.w	r3, #0
 80041f0:	014b      	lsls	r3, r1, #5
 80041f2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80041f6:	0142      	lsls	r2, r0, #5
 80041f8:	4610      	mov	r0, r2
 80041fa:	4619      	mov	r1, r3
 80041fc:	4623      	mov	r3, r4
 80041fe:	1ac0      	subs	r0, r0, r3
 8004200:	462b      	mov	r3, r5
 8004202:	eb61 0103 	sbc.w	r1, r1, r3
 8004206:	f04f 0200 	mov.w	r2, #0
 800420a:	f04f 0300 	mov.w	r3, #0
 800420e:	018b      	lsls	r3, r1, #6
 8004210:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004214:	0182      	lsls	r2, r0, #6
 8004216:	1a12      	subs	r2, r2, r0
 8004218:	eb63 0301 	sbc.w	r3, r3, r1
 800421c:	f04f 0000 	mov.w	r0, #0
 8004220:	f04f 0100 	mov.w	r1, #0
 8004224:	00d9      	lsls	r1, r3, #3
 8004226:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800422a:	00d0      	lsls	r0, r2, #3
 800422c:	4602      	mov	r2, r0
 800422e:	460b      	mov	r3, r1
 8004230:	4621      	mov	r1, r4
 8004232:	1852      	adds	r2, r2, r1
 8004234:	4629      	mov	r1, r5
 8004236:	eb43 0101 	adc.w	r1, r3, r1
 800423a:	460b      	mov	r3, r1
 800423c:	f04f 0000 	mov.w	r0, #0
 8004240:	f04f 0100 	mov.w	r1, #0
 8004244:	0259      	lsls	r1, r3, #9
 8004246:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800424a:	0250      	lsls	r0, r2, #9
 800424c:	4602      	mov	r2, r0
 800424e:	460b      	mov	r3, r1
 8004250:	4610      	mov	r0, r2
 8004252:	4619      	mov	r1, r3
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	461a      	mov	r2, r3
 8004258:	f04f 0300 	mov.w	r3, #0
 800425c:	f7fb ffd8 	bl	8000210 <__aeabi_uldivmod>
 8004260:	4602      	mov	r2, r0
 8004262:	460b      	mov	r3, r1
 8004264:	4613      	mov	r3, r2
 8004266:	61fb      	str	r3, [r7, #28]
 8004268:	e04c      	b.n	8004304 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800426a:	4b8a      	ldr	r3, [pc, #552]	; (8004494 <HAL_RCC_GetSysClockFreq+0x358>)
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	099b      	lsrs	r3, r3, #6
 8004270:	461a      	mov	r2, r3
 8004272:	f04f 0300 	mov.w	r3, #0
 8004276:	f240 10ff 	movw	r0, #511	; 0x1ff
 800427a:	f04f 0100 	mov.w	r1, #0
 800427e:	ea02 0a00 	and.w	sl, r2, r0
 8004282:	ea03 0b01 	and.w	fp, r3, r1
 8004286:	4650      	mov	r0, sl
 8004288:	4659      	mov	r1, fp
 800428a:	f04f 0200 	mov.w	r2, #0
 800428e:	f04f 0300 	mov.w	r3, #0
 8004292:	014b      	lsls	r3, r1, #5
 8004294:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004298:	0142      	lsls	r2, r0, #5
 800429a:	4610      	mov	r0, r2
 800429c:	4619      	mov	r1, r3
 800429e:	ebb0 000a 	subs.w	r0, r0, sl
 80042a2:	eb61 010b 	sbc.w	r1, r1, fp
 80042a6:	f04f 0200 	mov.w	r2, #0
 80042aa:	f04f 0300 	mov.w	r3, #0
 80042ae:	018b      	lsls	r3, r1, #6
 80042b0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80042b4:	0182      	lsls	r2, r0, #6
 80042b6:	1a12      	subs	r2, r2, r0
 80042b8:	eb63 0301 	sbc.w	r3, r3, r1
 80042bc:	f04f 0000 	mov.w	r0, #0
 80042c0:	f04f 0100 	mov.w	r1, #0
 80042c4:	00d9      	lsls	r1, r3, #3
 80042c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042ca:	00d0      	lsls	r0, r2, #3
 80042cc:	4602      	mov	r2, r0
 80042ce:	460b      	mov	r3, r1
 80042d0:	eb12 020a 	adds.w	r2, r2, sl
 80042d4:	eb43 030b 	adc.w	r3, r3, fp
 80042d8:	f04f 0000 	mov.w	r0, #0
 80042dc:	f04f 0100 	mov.w	r1, #0
 80042e0:	0299      	lsls	r1, r3, #10
 80042e2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80042e6:	0290      	lsls	r0, r2, #10
 80042e8:	4602      	mov	r2, r0
 80042ea:	460b      	mov	r3, r1
 80042ec:	4610      	mov	r0, r2
 80042ee:	4619      	mov	r1, r3
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	461a      	mov	r2, r3
 80042f4:	f04f 0300 	mov.w	r3, #0
 80042f8:	f7fb ff8a 	bl	8000210 <__aeabi_uldivmod>
 80042fc:	4602      	mov	r2, r0
 80042fe:	460b      	mov	r3, r1
 8004300:	4613      	mov	r3, r2
 8004302:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004304:	4b63      	ldr	r3, [pc, #396]	; (8004494 <HAL_RCC_GetSysClockFreq+0x358>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	0c1b      	lsrs	r3, r3, #16
 800430a:	f003 0303 	and.w	r3, r3, #3
 800430e:	3301      	adds	r3, #1
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8004314:	69fa      	ldr	r2, [r7, #28]
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	fbb2 f3f3 	udiv	r3, r2, r3
 800431c:	61bb      	str	r3, [r7, #24]
      break;
 800431e:	e0b2      	b.n	8004486 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004320:	4b5c      	ldr	r3, [pc, #368]	; (8004494 <HAL_RCC_GetSysClockFreq+0x358>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004328:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800432a:	4b5a      	ldr	r3, [pc, #360]	; (8004494 <HAL_RCC_GetSysClockFreq+0x358>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d04d      	beq.n	80043d2 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004336:	4b57      	ldr	r3, [pc, #348]	; (8004494 <HAL_RCC_GetSysClockFreq+0x358>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	099b      	lsrs	r3, r3, #6
 800433c:	461a      	mov	r2, r3
 800433e:	f04f 0300 	mov.w	r3, #0
 8004342:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004346:	f04f 0100 	mov.w	r1, #0
 800434a:	ea02 0800 	and.w	r8, r2, r0
 800434e:	ea03 0901 	and.w	r9, r3, r1
 8004352:	4640      	mov	r0, r8
 8004354:	4649      	mov	r1, r9
 8004356:	f04f 0200 	mov.w	r2, #0
 800435a:	f04f 0300 	mov.w	r3, #0
 800435e:	014b      	lsls	r3, r1, #5
 8004360:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004364:	0142      	lsls	r2, r0, #5
 8004366:	4610      	mov	r0, r2
 8004368:	4619      	mov	r1, r3
 800436a:	ebb0 0008 	subs.w	r0, r0, r8
 800436e:	eb61 0109 	sbc.w	r1, r1, r9
 8004372:	f04f 0200 	mov.w	r2, #0
 8004376:	f04f 0300 	mov.w	r3, #0
 800437a:	018b      	lsls	r3, r1, #6
 800437c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004380:	0182      	lsls	r2, r0, #6
 8004382:	1a12      	subs	r2, r2, r0
 8004384:	eb63 0301 	sbc.w	r3, r3, r1
 8004388:	f04f 0000 	mov.w	r0, #0
 800438c:	f04f 0100 	mov.w	r1, #0
 8004390:	00d9      	lsls	r1, r3, #3
 8004392:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004396:	00d0      	lsls	r0, r2, #3
 8004398:	4602      	mov	r2, r0
 800439a:	460b      	mov	r3, r1
 800439c:	eb12 0208 	adds.w	r2, r2, r8
 80043a0:	eb43 0309 	adc.w	r3, r3, r9
 80043a4:	f04f 0000 	mov.w	r0, #0
 80043a8:	f04f 0100 	mov.w	r1, #0
 80043ac:	0259      	lsls	r1, r3, #9
 80043ae:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80043b2:	0250      	lsls	r0, r2, #9
 80043b4:	4602      	mov	r2, r0
 80043b6:	460b      	mov	r3, r1
 80043b8:	4610      	mov	r0, r2
 80043ba:	4619      	mov	r1, r3
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	461a      	mov	r2, r3
 80043c0:	f04f 0300 	mov.w	r3, #0
 80043c4:	f7fb ff24 	bl	8000210 <__aeabi_uldivmod>
 80043c8:	4602      	mov	r2, r0
 80043ca:	460b      	mov	r3, r1
 80043cc:	4613      	mov	r3, r2
 80043ce:	61fb      	str	r3, [r7, #28]
 80043d0:	e04a      	b.n	8004468 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043d2:	4b30      	ldr	r3, [pc, #192]	; (8004494 <HAL_RCC_GetSysClockFreq+0x358>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	099b      	lsrs	r3, r3, #6
 80043d8:	461a      	mov	r2, r3
 80043da:	f04f 0300 	mov.w	r3, #0
 80043de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80043e2:	f04f 0100 	mov.w	r1, #0
 80043e6:	ea02 0400 	and.w	r4, r2, r0
 80043ea:	ea03 0501 	and.w	r5, r3, r1
 80043ee:	4620      	mov	r0, r4
 80043f0:	4629      	mov	r1, r5
 80043f2:	f04f 0200 	mov.w	r2, #0
 80043f6:	f04f 0300 	mov.w	r3, #0
 80043fa:	014b      	lsls	r3, r1, #5
 80043fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004400:	0142      	lsls	r2, r0, #5
 8004402:	4610      	mov	r0, r2
 8004404:	4619      	mov	r1, r3
 8004406:	1b00      	subs	r0, r0, r4
 8004408:	eb61 0105 	sbc.w	r1, r1, r5
 800440c:	f04f 0200 	mov.w	r2, #0
 8004410:	f04f 0300 	mov.w	r3, #0
 8004414:	018b      	lsls	r3, r1, #6
 8004416:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800441a:	0182      	lsls	r2, r0, #6
 800441c:	1a12      	subs	r2, r2, r0
 800441e:	eb63 0301 	sbc.w	r3, r3, r1
 8004422:	f04f 0000 	mov.w	r0, #0
 8004426:	f04f 0100 	mov.w	r1, #0
 800442a:	00d9      	lsls	r1, r3, #3
 800442c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004430:	00d0      	lsls	r0, r2, #3
 8004432:	4602      	mov	r2, r0
 8004434:	460b      	mov	r3, r1
 8004436:	1912      	adds	r2, r2, r4
 8004438:	eb45 0303 	adc.w	r3, r5, r3
 800443c:	f04f 0000 	mov.w	r0, #0
 8004440:	f04f 0100 	mov.w	r1, #0
 8004444:	0299      	lsls	r1, r3, #10
 8004446:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800444a:	0290      	lsls	r0, r2, #10
 800444c:	4602      	mov	r2, r0
 800444e:	460b      	mov	r3, r1
 8004450:	4610      	mov	r0, r2
 8004452:	4619      	mov	r1, r3
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	461a      	mov	r2, r3
 8004458:	f04f 0300 	mov.w	r3, #0
 800445c:	f7fb fed8 	bl	8000210 <__aeabi_uldivmod>
 8004460:	4602      	mov	r2, r0
 8004462:	460b      	mov	r3, r1
 8004464:	4613      	mov	r3, r2
 8004466:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004468:	4b0a      	ldr	r3, [pc, #40]	; (8004494 <HAL_RCC_GetSysClockFreq+0x358>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	0f1b      	lsrs	r3, r3, #28
 800446e:	f003 0307 	and.w	r3, r3, #7
 8004472:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8004474:	69fa      	ldr	r2, [r7, #28]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	fbb2 f3f3 	udiv	r3, r2, r3
 800447c:	61bb      	str	r3, [r7, #24]
      break;
 800447e:	e002      	b.n	8004486 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004480:	4b05      	ldr	r3, [pc, #20]	; (8004498 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004482:	61bb      	str	r3, [r7, #24]
      break;
 8004484:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004486:	69bb      	ldr	r3, [r7, #24]
}
 8004488:	4618      	mov	r0, r3
 800448a:	3720      	adds	r7, #32
 800448c:	46bd      	mov	sp, r7
 800448e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004492:	bf00      	nop
 8004494:	40023800 	.word	0x40023800
 8004498:	00f42400 	.word	0x00f42400
 800449c:	007a1200 	.word	0x007a1200

080044a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e28d      	b.n	80049ce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f000 8083 	beq.w	80045c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80044c0:	4b94      	ldr	r3, [pc, #592]	; (8004714 <HAL_RCC_OscConfig+0x274>)
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f003 030c 	and.w	r3, r3, #12
 80044c8:	2b04      	cmp	r3, #4
 80044ca:	d019      	beq.n	8004500 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80044cc:	4b91      	ldr	r3, [pc, #580]	; (8004714 <HAL_RCC_OscConfig+0x274>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80044d4:	2b08      	cmp	r3, #8
 80044d6:	d106      	bne.n	80044e6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80044d8:	4b8e      	ldr	r3, [pc, #568]	; (8004714 <HAL_RCC_OscConfig+0x274>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044e4:	d00c      	beq.n	8004500 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044e6:	4b8b      	ldr	r3, [pc, #556]	; (8004714 <HAL_RCC_OscConfig+0x274>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80044ee:	2b0c      	cmp	r3, #12
 80044f0:	d112      	bne.n	8004518 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044f2:	4b88      	ldr	r3, [pc, #544]	; (8004714 <HAL_RCC_OscConfig+0x274>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044fe:	d10b      	bne.n	8004518 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004500:	4b84      	ldr	r3, [pc, #528]	; (8004714 <HAL_RCC_OscConfig+0x274>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d05b      	beq.n	80045c4 <HAL_RCC_OscConfig+0x124>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d157      	bne.n	80045c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e25a      	b.n	80049ce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004520:	d106      	bne.n	8004530 <HAL_RCC_OscConfig+0x90>
 8004522:	4b7c      	ldr	r3, [pc, #496]	; (8004714 <HAL_RCC_OscConfig+0x274>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a7b      	ldr	r2, [pc, #492]	; (8004714 <HAL_RCC_OscConfig+0x274>)
 8004528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800452c:	6013      	str	r3, [r2, #0]
 800452e:	e01d      	b.n	800456c <HAL_RCC_OscConfig+0xcc>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004538:	d10c      	bne.n	8004554 <HAL_RCC_OscConfig+0xb4>
 800453a:	4b76      	ldr	r3, [pc, #472]	; (8004714 <HAL_RCC_OscConfig+0x274>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a75      	ldr	r2, [pc, #468]	; (8004714 <HAL_RCC_OscConfig+0x274>)
 8004540:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	4b73      	ldr	r3, [pc, #460]	; (8004714 <HAL_RCC_OscConfig+0x274>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a72      	ldr	r2, [pc, #456]	; (8004714 <HAL_RCC_OscConfig+0x274>)
 800454c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004550:	6013      	str	r3, [r2, #0]
 8004552:	e00b      	b.n	800456c <HAL_RCC_OscConfig+0xcc>
 8004554:	4b6f      	ldr	r3, [pc, #444]	; (8004714 <HAL_RCC_OscConfig+0x274>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a6e      	ldr	r2, [pc, #440]	; (8004714 <HAL_RCC_OscConfig+0x274>)
 800455a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800455e:	6013      	str	r3, [r2, #0]
 8004560:	4b6c      	ldr	r3, [pc, #432]	; (8004714 <HAL_RCC_OscConfig+0x274>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a6b      	ldr	r2, [pc, #428]	; (8004714 <HAL_RCC_OscConfig+0x274>)
 8004566:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800456a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d013      	beq.n	800459c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004574:	f7fc fe54 	bl	8001220 <HAL_GetTick>
 8004578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800457a:	e008      	b.n	800458e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800457c:	f7fc fe50 	bl	8001220 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b64      	cmp	r3, #100	; 0x64
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e21f      	b.n	80049ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800458e:	4b61      	ldr	r3, [pc, #388]	; (8004714 <HAL_RCC_OscConfig+0x274>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0f0      	beq.n	800457c <HAL_RCC_OscConfig+0xdc>
 800459a:	e014      	b.n	80045c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459c:	f7fc fe40 	bl	8001220 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045a4:	f7fc fe3c 	bl	8001220 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b64      	cmp	r3, #100	; 0x64
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e20b      	b.n	80049ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045b6:	4b57      	ldr	r3, [pc, #348]	; (8004714 <HAL_RCC_OscConfig+0x274>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1f0      	bne.n	80045a4 <HAL_RCC_OscConfig+0x104>
 80045c2:	e000      	b.n	80045c6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d06f      	beq.n	80046b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80045d2:	4b50      	ldr	r3, [pc, #320]	; (8004714 <HAL_RCC_OscConfig+0x274>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 030c 	and.w	r3, r3, #12
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d017      	beq.n	800460e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80045de:	4b4d      	ldr	r3, [pc, #308]	; (8004714 <HAL_RCC_OscConfig+0x274>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80045e6:	2b08      	cmp	r3, #8
 80045e8:	d105      	bne.n	80045f6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80045ea:	4b4a      	ldr	r3, [pc, #296]	; (8004714 <HAL_RCC_OscConfig+0x274>)
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00b      	beq.n	800460e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045f6:	4b47      	ldr	r3, [pc, #284]	; (8004714 <HAL_RCC_OscConfig+0x274>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80045fe:	2b0c      	cmp	r3, #12
 8004600:	d11c      	bne.n	800463c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004602:	4b44      	ldr	r3, [pc, #272]	; (8004714 <HAL_RCC_OscConfig+0x274>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d116      	bne.n	800463c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800460e:	4b41      	ldr	r3, [pc, #260]	; (8004714 <HAL_RCC_OscConfig+0x274>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d005      	beq.n	8004626 <HAL_RCC_OscConfig+0x186>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d001      	beq.n	8004626 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e1d3      	b.n	80049ce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004626:	4b3b      	ldr	r3, [pc, #236]	; (8004714 <HAL_RCC_OscConfig+0x274>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	4937      	ldr	r1, [pc, #220]	; (8004714 <HAL_RCC_OscConfig+0x274>)
 8004636:	4313      	orrs	r3, r2
 8004638:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800463a:	e03a      	b.n	80046b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d020      	beq.n	8004686 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004644:	4b34      	ldr	r3, [pc, #208]	; (8004718 <HAL_RCC_OscConfig+0x278>)
 8004646:	2201      	movs	r2, #1
 8004648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464a:	f7fc fde9 	bl	8001220 <HAL_GetTick>
 800464e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004650:	e008      	b.n	8004664 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004652:	f7fc fde5 	bl	8001220 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	2b02      	cmp	r3, #2
 800465e:	d901      	bls.n	8004664 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e1b4      	b.n	80049ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004664:	4b2b      	ldr	r3, [pc, #172]	; (8004714 <HAL_RCC_OscConfig+0x274>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d0f0      	beq.n	8004652 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004670:	4b28      	ldr	r3, [pc, #160]	; (8004714 <HAL_RCC_OscConfig+0x274>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	00db      	lsls	r3, r3, #3
 800467e:	4925      	ldr	r1, [pc, #148]	; (8004714 <HAL_RCC_OscConfig+0x274>)
 8004680:	4313      	orrs	r3, r2
 8004682:	600b      	str	r3, [r1, #0]
 8004684:	e015      	b.n	80046b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004686:	4b24      	ldr	r3, [pc, #144]	; (8004718 <HAL_RCC_OscConfig+0x278>)
 8004688:	2200      	movs	r2, #0
 800468a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468c:	f7fc fdc8 	bl	8001220 <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004694:	f7fc fdc4 	bl	8001220 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e193      	b.n	80049ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046a6:	4b1b      	ldr	r3, [pc, #108]	; (8004714 <HAL_RCC_OscConfig+0x274>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1f0      	bne.n	8004694 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0308 	and.w	r3, r3, #8
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d036      	beq.n	800472c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d016      	beq.n	80046f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046c6:	4b15      	ldr	r3, [pc, #84]	; (800471c <HAL_RCC_OscConfig+0x27c>)
 80046c8:	2201      	movs	r2, #1
 80046ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046cc:	f7fc fda8 	bl	8001220 <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046d4:	f7fc fda4 	bl	8001220 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e173      	b.n	80049ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046e6:	4b0b      	ldr	r3, [pc, #44]	; (8004714 <HAL_RCC_OscConfig+0x274>)
 80046e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d0f0      	beq.n	80046d4 <HAL_RCC_OscConfig+0x234>
 80046f2:	e01b      	b.n	800472c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046f4:	4b09      	ldr	r3, [pc, #36]	; (800471c <HAL_RCC_OscConfig+0x27c>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046fa:	f7fc fd91 	bl	8001220 <HAL_GetTick>
 80046fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004700:	e00e      	b.n	8004720 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004702:	f7fc fd8d 	bl	8001220 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d907      	bls.n	8004720 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e15c      	b.n	80049ce <HAL_RCC_OscConfig+0x52e>
 8004714:	40023800 	.word	0x40023800
 8004718:	42470000 	.word	0x42470000
 800471c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004720:	4b8a      	ldr	r3, [pc, #552]	; (800494c <HAL_RCC_OscConfig+0x4ac>)
 8004722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1ea      	bne.n	8004702 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	2b00      	cmp	r3, #0
 8004736:	f000 8097 	beq.w	8004868 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800473a:	2300      	movs	r3, #0
 800473c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800473e:	4b83      	ldr	r3, [pc, #524]	; (800494c <HAL_RCC_OscConfig+0x4ac>)
 8004740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10f      	bne.n	800476a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800474a:	2300      	movs	r3, #0
 800474c:	60bb      	str	r3, [r7, #8]
 800474e:	4b7f      	ldr	r3, [pc, #508]	; (800494c <HAL_RCC_OscConfig+0x4ac>)
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	4a7e      	ldr	r2, [pc, #504]	; (800494c <HAL_RCC_OscConfig+0x4ac>)
 8004754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004758:	6413      	str	r3, [r2, #64]	; 0x40
 800475a:	4b7c      	ldr	r3, [pc, #496]	; (800494c <HAL_RCC_OscConfig+0x4ac>)
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004762:	60bb      	str	r3, [r7, #8]
 8004764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004766:	2301      	movs	r3, #1
 8004768:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800476a:	4b79      	ldr	r3, [pc, #484]	; (8004950 <HAL_RCC_OscConfig+0x4b0>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004772:	2b00      	cmp	r3, #0
 8004774:	d118      	bne.n	80047a8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004776:	4b76      	ldr	r3, [pc, #472]	; (8004950 <HAL_RCC_OscConfig+0x4b0>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a75      	ldr	r2, [pc, #468]	; (8004950 <HAL_RCC_OscConfig+0x4b0>)
 800477c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004780:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004782:	f7fc fd4d 	bl	8001220 <HAL_GetTick>
 8004786:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004788:	e008      	b.n	800479c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800478a:	f7fc fd49 	bl	8001220 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b02      	cmp	r3, #2
 8004796:	d901      	bls.n	800479c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e118      	b.n	80049ce <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800479c:	4b6c      	ldr	r3, [pc, #432]	; (8004950 <HAL_RCC_OscConfig+0x4b0>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d0f0      	beq.n	800478a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d106      	bne.n	80047be <HAL_RCC_OscConfig+0x31e>
 80047b0:	4b66      	ldr	r3, [pc, #408]	; (800494c <HAL_RCC_OscConfig+0x4ac>)
 80047b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b4:	4a65      	ldr	r2, [pc, #404]	; (800494c <HAL_RCC_OscConfig+0x4ac>)
 80047b6:	f043 0301 	orr.w	r3, r3, #1
 80047ba:	6713      	str	r3, [r2, #112]	; 0x70
 80047bc:	e01c      	b.n	80047f8 <HAL_RCC_OscConfig+0x358>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	2b05      	cmp	r3, #5
 80047c4:	d10c      	bne.n	80047e0 <HAL_RCC_OscConfig+0x340>
 80047c6:	4b61      	ldr	r3, [pc, #388]	; (800494c <HAL_RCC_OscConfig+0x4ac>)
 80047c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ca:	4a60      	ldr	r2, [pc, #384]	; (800494c <HAL_RCC_OscConfig+0x4ac>)
 80047cc:	f043 0304 	orr.w	r3, r3, #4
 80047d0:	6713      	str	r3, [r2, #112]	; 0x70
 80047d2:	4b5e      	ldr	r3, [pc, #376]	; (800494c <HAL_RCC_OscConfig+0x4ac>)
 80047d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d6:	4a5d      	ldr	r2, [pc, #372]	; (800494c <HAL_RCC_OscConfig+0x4ac>)
 80047d8:	f043 0301 	orr.w	r3, r3, #1
 80047dc:	6713      	str	r3, [r2, #112]	; 0x70
 80047de:	e00b      	b.n	80047f8 <HAL_RCC_OscConfig+0x358>
 80047e0:	4b5a      	ldr	r3, [pc, #360]	; (800494c <HAL_RCC_OscConfig+0x4ac>)
 80047e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e4:	4a59      	ldr	r2, [pc, #356]	; (800494c <HAL_RCC_OscConfig+0x4ac>)
 80047e6:	f023 0301 	bic.w	r3, r3, #1
 80047ea:	6713      	str	r3, [r2, #112]	; 0x70
 80047ec:	4b57      	ldr	r3, [pc, #348]	; (800494c <HAL_RCC_OscConfig+0x4ac>)
 80047ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f0:	4a56      	ldr	r2, [pc, #344]	; (800494c <HAL_RCC_OscConfig+0x4ac>)
 80047f2:	f023 0304 	bic.w	r3, r3, #4
 80047f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d015      	beq.n	800482c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004800:	f7fc fd0e 	bl	8001220 <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004806:	e00a      	b.n	800481e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004808:	f7fc fd0a 	bl	8001220 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	f241 3288 	movw	r2, #5000	; 0x1388
 8004816:	4293      	cmp	r3, r2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e0d7      	b.n	80049ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800481e:	4b4b      	ldr	r3, [pc, #300]	; (800494c <HAL_RCC_OscConfig+0x4ac>)
 8004820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0ee      	beq.n	8004808 <HAL_RCC_OscConfig+0x368>
 800482a:	e014      	b.n	8004856 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800482c:	f7fc fcf8 	bl	8001220 <HAL_GetTick>
 8004830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004832:	e00a      	b.n	800484a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004834:	f7fc fcf4 	bl	8001220 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004842:	4293      	cmp	r3, r2
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e0c1      	b.n	80049ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800484a:	4b40      	ldr	r3, [pc, #256]	; (800494c <HAL_RCC_OscConfig+0x4ac>)
 800484c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1ee      	bne.n	8004834 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004856:	7dfb      	ldrb	r3, [r7, #23]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d105      	bne.n	8004868 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800485c:	4b3b      	ldr	r3, [pc, #236]	; (800494c <HAL_RCC_OscConfig+0x4ac>)
 800485e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004860:	4a3a      	ldr	r2, [pc, #232]	; (800494c <HAL_RCC_OscConfig+0x4ac>)
 8004862:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004866:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 80ad 	beq.w	80049cc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004872:	4b36      	ldr	r3, [pc, #216]	; (800494c <HAL_RCC_OscConfig+0x4ac>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f003 030c 	and.w	r3, r3, #12
 800487a:	2b08      	cmp	r3, #8
 800487c:	d060      	beq.n	8004940 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	2b02      	cmp	r3, #2
 8004884:	d145      	bne.n	8004912 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004886:	4b33      	ldr	r3, [pc, #204]	; (8004954 <HAL_RCC_OscConfig+0x4b4>)
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800488c:	f7fc fcc8 	bl	8001220 <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004894:	f7fc fcc4 	bl	8001220 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e093      	b.n	80049ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048a6:	4b29      	ldr	r3, [pc, #164]	; (800494c <HAL_RCC_OscConfig+0x4ac>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1f0      	bne.n	8004894 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	69da      	ldr	r2, [r3, #28]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	019b      	lsls	r3, r3, #6
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c8:	085b      	lsrs	r3, r3, #1
 80048ca:	3b01      	subs	r3, #1
 80048cc:	041b      	lsls	r3, r3, #16
 80048ce:	431a      	orrs	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d4:	061b      	lsls	r3, r3, #24
 80048d6:	431a      	orrs	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048dc:	071b      	lsls	r3, r3, #28
 80048de:	491b      	ldr	r1, [pc, #108]	; (800494c <HAL_RCC_OscConfig+0x4ac>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048e4:	4b1b      	ldr	r3, [pc, #108]	; (8004954 <HAL_RCC_OscConfig+0x4b4>)
 80048e6:	2201      	movs	r2, #1
 80048e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ea:	f7fc fc99 	bl	8001220 <HAL_GetTick>
 80048ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048f0:	e008      	b.n	8004904 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048f2:	f7fc fc95 	bl	8001220 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d901      	bls.n	8004904 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e064      	b.n	80049ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004904:	4b11      	ldr	r3, [pc, #68]	; (800494c <HAL_RCC_OscConfig+0x4ac>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d0f0      	beq.n	80048f2 <HAL_RCC_OscConfig+0x452>
 8004910:	e05c      	b.n	80049cc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004912:	4b10      	ldr	r3, [pc, #64]	; (8004954 <HAL_RCC_OscConfig+0x4b4>)
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004918:	f7fc fc82 	bl	8001220 <HAL_GetTick>
 800491c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800491e:	e008      	b.n	8004932 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004920:	f7fc fc7e 	bl	8001220 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e04d      	b.n	80049ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004932:	4b06      	ldr	r3, [pc, #24]	; (800494c <HAL_RCC_OscConfig+0x4ac>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1f0      	bne.n	8004920 <HAL_RCC_OscConfig+0x480>
 800493e:	e045      	b.n	80049cc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d107      	bne.n	8004958 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e040      	b.n	80049ce <HAL_RCC_OscConfig+0x52e>
 800494c:	40023800 	.word	0x40023800
 8004950:	40007000 	.word	0x40007000
 8004954:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004958:	4b1f      	ldr	r3, [pc, #124]	; (80049d8 <HAL_RCC_OscConfig+0x538>)
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d030      	beq.n	80049c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004970:	429a      	cmp	r2, r3
 8004972:	d129      	bne.n	80049c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800497e:	429a      	cmp	r2, r3
 8004980:	d122      	bne.n	80049c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004988:	4013      	ands	r3, r2
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800498e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004990:	4293      	cmp	r3, r2
 8004992:	d119      	bne.n	80049c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499e:	085b      	lsrs	r3, r3, #1
 80049a0:	3b01      	subs	r3, #1
 80049a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d10f      	bne.n	80049c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d107      	bne.n	80049c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d001      	beq.n	80049cc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e000      	b.n	80049ce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3718      	adds	r7, #24
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	40023800 	.word	0x40023800

080049dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e041      	b.n	8004a72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d106      	bne.n	8004a08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f839 	bl	8004a7a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	3304      	adds	r3, #4
 8004a18:	4619      	mov	r1, r3
 8004a1a:	4610      	mov	r0, r2
 8004a1c:	f000 f94e 	bl	8004cbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3708      	adds	r7, #8
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b083      	sub	sp, #12
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
	...

08004a90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d001      	beq.n	8004aa8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e04e      	b.n	8004b46 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68da      	ldr	r2, [r3, #12]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f042 0201 	orr.w	r2, r2, #1
 8004abe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a23      	ldr	r2, [pc, #140]	; (8004b54 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d022      	beq.n	8004b10 <HAL_TIM_Base_Start_IT+0x80>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ad2:	d01d      	beq.n	8004b10 <HAL_TIM_Base_Start_IT+0x80>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a1f      	ldr	r2, [pc, #124]	; (8004b58 <HAL_TIM_Base_Start_IT+0xc8>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d018      	beq.n	8004b10 <HAL_TIM_Base_Start_IT+0x80>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a1e      	ldr	r2, [pc, #120]	; (8004b5c <HAL_TIM_Base_Start_IT+0xcc>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d013      	beq.n	8004b10 <HAL_TIM_Base_Start_IT+0x80>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a1c      	ldr	r2, [pc, #112]	; (8004b60 <HAL_TIM_Base_Start_IT+0xd0>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d00e      	beq.n	8004b10 <HAL_TIM_Base_Start_IT+0x80>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a1b      	ldr	r2, [pc, #108]	; (8004b64 <HAL_TIM_Base_Start_IT+0xd4>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d009      	beq.n	8004b10 <HAL_TIM_Base_Start_IT+0x80>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a19      	ldr	r2, [pc, #100]	; (8004b68 <HAL_TIM_Base_Start_IT+0xd8>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d004      	beq.n	8004b10 <HAL_TIM_Base_Start_IT+0x80>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a18      	ldr	r2, [pc, #96]	; (8004b6c <HAL_TIM_Base_Start_IT+0xdc>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d111      	bne.n	8004b34 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 0307 	and.w	r3, r3, #7
 8004b1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2b06      	cmp	r3, #6
 8004b20:	d010      	beq.n	8004b44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f042 0201 	orr.w	r2, r2, #1
 8004b30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b32:	e007      	b.n	8004b44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f042 0201 	orr.w	r2, r2, #1
 8004b42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	40010000 	.word	0x40010000
 8004b58:	40000400 	.word	0x40000400
 8004b5c:	40000800 	.word	0x40000800
 8004b60:	40000c00 	.word	0x40000c00
 8004b64:	40010400 	.word	0x40010400
 8004b68:	40014000 	.word	0x40014000
 8004b6c:	40001800 	.word	0x40001800

08004b70 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d101      	bne.n	8004b84 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e097      	b.n	8004cb4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d106      	bne.n	8004b9e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f7fc f913 	bl	8000dc4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2202      	movs	r2, #2
 8004ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6812      	ldr	r2, [r2, #0]
 8004bb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bb4:	f023 0307 	bic.w	r3, r3, #7
 8004bb8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	3304      	adds	r3, #4
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	4610      	mov	r0, r2
 8004bc6:	f000 f879 	bl	8004cbc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bf2:	f023 0303 	bic.w	r3, r3, #3
 8004bf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	689a      	ldr	r2, [r3, #8]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	021b      	lsls	r3, r3, #8
 8004c02:	4313      	orrs	r3, r2
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004c10:	f023 030c 	bic.w	r3, r3, #12
 8004c14:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	68da      	ldr	r2, [r3, #12]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	021b      	lsls	r3, r3, #8
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	693a      	ldr	r2, [r7, #16]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	011a      	lsls	r2, r3, #4
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	031b      	lsls	r3, r3, #12
 8004c40:	4313      	orrs	r3, r2
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004c4e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004c56:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	695b      	ldr	r3, [r3, #20]
 8004c60:	011b      	lsls	r3, r3, #4
 8004c62:	4313      	orrs	r3, r2
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3718      	adds	r7, #24
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a40      	ldr	r2, [pc, #256]	; (8004dd0 <TIM_Base_SetConfig+0x114>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d013      	beq.n	8004cfc <TIM_Base_SetConfig+0x40>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cda:	d00f      	beq.n	8004cfc <TIM_Base_SetConfig+0x40>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a3d      	ldr	r2, [pc, #244]	; (8004dd4 <TIM_Base_SetConfig+0x118>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d00b      	beq.n	8004cfc <TIM_Base_SetConfig+0x40>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a3c      	ldr	r2, [pc, #240]	; (8004dd8 <TIM_Base_SetConfig+0x11c>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d007      	beq.n	8004cfc <TIM_Base_SetConfig+0x40>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a3b      	ldr	r2, [pc, #236]	; (8004ddc <TIM_Base_SetConfig+0x120>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d003      	beq.n	8004cfc <TIM_Base_SetConfig+0x40>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a3a      	ldr	r2, [pc, #232]	; (8004de0 <TIM_Base_SetConfig+0x124>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d108      	bne.n	8004d0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a2f      	ldr	r2, [pc, #188]	; (8004dd0 <TIM_Base_SetConfig+0x114>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d02b      	beq.n	8004d6e <TIM_Base_SetConfig+0xb2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d1c:	d027      	beq.n	8004d6e <TIM_Base_SetConfig+0xb2>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a2c      	ldr	r2, [pc, #176]	; (8004dd4 <TIM_Base_SetConfig+0x118>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d023      	beq.n	8004d6e <TIM_Base_SetConfig+0xb2>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a2b      	ldr	r2, [pc, #172]	; (8004dd8 <TIM_Base_SetConfig+0x11c>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d01f      	beq.n	8004d6e <TIM_Base_SetConfig+0xb2>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a2a      	ldr	r2, [pc, #168]	; (8004ddc <TIM_Base_SetConfig+0x120>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d01b      	beq.n	8004d6e <TIM_Base_SetConfig+0xb2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a29      	ldr	r2, [pc, #164]	; (8004de0 <TIM_Base_SetConfig+0x124>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d017      	beq.n	8004d6e <TIM_Base_SetConfig+0xb2>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a28      	ldr	r2, [pc, #160]	; (8004de4 <TIM_Base_SetConfig+0x128>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d013      	beq.n	8004d6e <TIM_Base_SetConfig+0xb2>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a27      	ldr	r2, [pc, #156]	; (8004de8 <TIM_Base_SetConfig+0x12c>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d00f      	beq.n	8004d6e <TIM_Base_SetConfig+0xb2>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a26      	ldr	r2, [pc, #152]	; (8004dec <TIM_Base_SetConfig+0x130>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d00b      	beq.n	8004d6e <TIM_Base_SetConfig+0xb2>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a25      	ldr	r2, [pc, #148]	; (8004df0 <TIM_Base_SetConfig+0x134>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d007      	beq.n	8004d6e <TIM_Base_SetConfig+0xb2>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a24      	ldr	r2, [pc, #144]	; (8004df4 <TIM_Base_SetConfig+0x138>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d003      	beq.n	8004d6e <TIM_Base_SetConfig+0xb2>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a23      	ldr	r2, [pc, #140]	; (8004df8 <TIM_Base_SetConfig+0x13c>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d108      	bne.n	8004d80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	689a      	ldr	r2, [r3, #8]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a0a      	ldr	r2, [pc, #40]	; (8004dd0 <TIM_Base_SetConfig+0x114>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d003      	beq.n	8004db4 <TIM_Base_SetConfig+0xf8>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a0c      	ldr	r2, [pc, #48]	; (8004de0 <TIM_Base_SetConfig+0x124>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d103      	bne.n	8004dbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	691a      	ldr	r2, [r3, #16]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	615a      	str	r2, [r3, #20]
}
 8004dc2:	bf00      	nop
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	40010000 	.word	0x40010000
 8004dd4:	40000400 	.word	0x40000400
 8004dd8:	40000800 	.word	0x40000800
 8004ddc:	40000c00 	.word	0x40000c00
 8004de0:	40010400 	.word	0x40010400
 8004de4:	40014000 	.word	0x40014000
 8004de8:	40014400 	.word	0x40014400
 8004dec:	40014800 	.word	0x40014800
 8004df0:	40001800 	.word	0x40001800
 8004df4:	40001c00 	.word	0x40001c00
 8004df8:	40002000 	.word	0x40002000

08004dfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d101      	bne.n	8004e14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e10:	2302      	movs	r3, #2
 8004e12:	e05a      	b.n	8004eca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2202      	movs	r2, #2
 8004e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a21      	ldr	r2, [pc, #132]	; (8004ed8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d022      	beq.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e60:	d01d      	beq.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a1d      	ldr	r2, [pc, #116]	; (8004edc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d018      	beq.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a1b      	ldr	r2, [pc, #108]	; (8004ee0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d013      	beq.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a1a      	ldr	r2, [pc, #104]	; (8004ee4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d00e      	beq.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a18      	ldr	r2, [pc, #96]	; (8004ee8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d009      	beq.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a17      	ldr	r2, [pc, #92]	; (8004eec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d004      	beq.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a15      	ldr	r2, [pc, #84]	; (8004ef0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d10c      	bne.n	8004eb8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ea4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	68ba      	ldr	r2, [r7, #8]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3714      	adds	r7, #20
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	40010000 	.word	0x40010000
 8004edc:	40000400 	.word	0x40000400
 8004ee0:	40000800 	.word	0x40000800
 8004ee4:	40000c00 	.word	0x40000c00
 8004ee8:	40010400 	.word	0x40010400
 8004eec:	40014000 	.word	0x40014000
 8004ef0:	40001800 	.word	0x40001800

08004ef4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e03f      	b.n	8004f86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d106      	bne.n	8004f20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7fc f836 	bl	8000f8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2224      	movs	r2, #36	; 0x24
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68da      	ldr	r2, [r3, #12]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 f829 	bl	8004f90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	691a      	ldr	r2, [r3, #16]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	695a      	ldr	r2, [r3, #20]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68da      	ldr	r2, [r3, #12]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2220      	movs	r2, #32
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2220      	movs	r2, #32
 8004f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
	...

08004f90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f94:	b09f      	sub	sp, #124	; 0x7c
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004fa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fa6:	68d9      	ldr	r1, [r3, #12]
 8004fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	ea40 0301 	orr.w	r3, r0, r1
 8004fb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fb4:	689a      	ldr	r2, [r3, #8]
 8004fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fc4:	69db      	ldr	r3, [r3, #28]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004fd4:	f021 010c 	bic.w	r1, r1, #12
 8004fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fde:	430b      	orrs	r3, r1
 8004fe0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fee:	6999      	ldr	r1, [r3, #24]
 8004ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	ea40 0301 	orr.w	r3, r0, r1
 8004ff8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	4bc5      	ldr	r3, [pc, #788]	; (8005314 <UART_SetConfig+0x384>)
 8005000:	429a      	cmp	r2, r3
 8005002:	d004      	beq.n	800500e <UART_SetConfig+0x7e>
 8005004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	4bc3      	ldr	r3, [pc, #780]	; (8005318 <UART_SetConfig+0x388>)
 800500a:	429a      	cmp	r2, r3
 800500c:	d103      	bne.n	8005016 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800500e:	f7fe fd25 	bl	8003a5c <HAL_RCC_GetPCLK2Freq>
 8005012:	6778      	str	r0, [r7, #116]	; 0x74
 8005014:	e002      	b.n	800501c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005016:	f7fe fd0d 	bl	8003a34 <HAL_RCC_GetPCLK1Freq>
 800501a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800501c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800501e:	69db      	ldr	r3, [r3, #28]
 8005020:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005024:	f040 80b6 	bne.w	8005194 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005028:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800502a:	461c      	mov	r4, r3
 800502c:	f04f 0500 	mov.w	r5, #0
 8005030:	4622      	mov	r2, r4
 8005032:	462b      	mov	r3, r5
 8005034:	1891      	adds	r1, r2, r2
 8005036:	6439      	str	r1, [r7, #64]	; 0x40
 8005038:	415b      	adcs	r3, r3
 800503a:	647b      	str	r3, [r7, #68]	; 0x44
 800503c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005040:	1912      	adds	r2, r2, r4
 8005042:	eb45 0303 	adc.w	r3, r5, r3
 8005046:	f04f 0000 	mov.w	r0, #0
 800504a:	f04f 0100 	mov.w	r1, #0
 800504e:	00d9      	lsls	r1, r3, #3
 8005050:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005054:	00d0      	lsls	r0, r2, #3
 8005056:	4602      	mov	r2, r0
 8005058:	460b      	mov	r3, r1
 800505a:	1911      	adds	r1, r2, r4
 800505c:	6639      	str	r1, [r7, #96]	; 0x60
 800505e:	416b      	adcs	r3, r5
 8005060:	667b      	str	r3, [r7, #100]	; 0x64
 8005062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	461a      	mov	r2, r3
 8005068:	f04f 0300 	mov.w	r3, #0
 800506c:	1891      	adds	r1, r2, r2
 800506e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005070:	415b      	adcs	r3, r3
 8005072:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005074:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005078:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800507c:	f7fb f8c8 	bl	8000210 <__aeabi_uldivmod>
 8005080:	4602      	mov	r2, r0
 8005082:	460b      	mov	r3, r1
 8005084:	4ba5      	ldr	r3, [pc, #660]	; (800531c <UART_SetConfig+0x38c>)
 8005086:	fba3 2302 	umull	r2, r3, r3, r2
 800508a:	095b      	lsrs	r3, r3, #5
 800508c:	011e      	lsls	r6, r3, #4
 800508e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005090:	461c      	mov	r4, r3
 8005092:	f04f 0500 	mov.w	r5, #0
 8005096:	4622      	mov	r2, r4
 8005098:	462b      	mov	r3, r5
 800509a:	1891      	adds	r1, r2, r2
 800509c:	6339      	str	r1, [r7, #48]	; 0x30
 800509e:	415b      	adcs	r3, r3
 80050a0:	637b      	str	r3, [r7, #52]	; 0x34
 80050a2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80050a6:	1912      	adds	r2, r2, r4
 80050a8:	eb45 0303 	adc.w	r3, r5, r3
 80050ac:	f04f 0000 	mov.w	r0, #0
 80050b0:	f04f 0100 	mov.w	r1, #0
 80050b4:	00d9      	lsls	r1, r3, #3
 80050b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050ba:	00d0      	lsls	r0, r2, #3
 80050bc:	4602      	mov	r2, r0
 80050be:	460b      	mov	r3, r1
 80050c0:	1911      	adds	r1, r2, r4
 80050c2:	65b9      	str	r1, [r7, #88]	; 0x58
 80050c4:	416b      	adcs	r3, r5
 80050c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	461a      	mov	r2, r3
 80050ce:	f04f 0300 	mov.w	r3, #0
 80050d2:	1891      	adds	r1, r2, r2
 80050d4:	62b9      	str	r1, [r7, #40]	; 0x28
 80050d6:	415b      	adcs	r3, r3
 80050d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050de:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80050e2:	f7fb f895 	bl	8000210 <__aeabi_uldivmod>
 80050e6:	4602      	mov	r2, r0
 80050e8:	460b      	mov	r3, r1
 80050ea:	4b8c      	ldr	r3, [pc, #560]	; (800531c <UART_SetConfig+0x38c>)
 80050ec:	fba3 1302 	umull	r1, r3, r3, r2
 80050f0:	095b      	lsrs	r3, r3, #5
 80050f2:	2164      	movs	r1, #100	; 0x64
 80050f4:	fb01 f303 	mul.w	r3, r1, r3
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	00db      	lsls	r3, r3, #3
 80050fc:	3332      	adds	r3, #50	; 0x32
 80050fe:	4a87      	ldr	r2, [pc, #540]	; (800531c <UART_SetConfig+0x38c>)
 8005100:	fba2 2303 	umull	r2, r3, r2, r3
 8005104:	095b      	lsrs	r3, r3, #5
 8005106:	005b      	lsls	r3, r3, #1
 8005108:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800510c:	441e      	add	r6, r3
 800510e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005110:	4618      	mov	r0, r3
 8005112:	f04f 0100 	mov.w	r1, #0
 8005116:	4602      	mov	r2, r0
 8005118:	460b      	mov	r3, r1
 800511a:	1894      	adds	r4, r2, r2
 800511c:	623c      	str	r4, [r7, #32]
 800511e:	415b      	adcs	r3, r3
 8005120:	627b      	str	r3, [r7, #36]	; 0x24
 8005122:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005126:	1812      	adds	r2, r2, r0
 8005128:	eb41 0303 	adc.w	r3, r1, r3
 800512c:	f04f 0400 	mov.w	r4, #0
 8005130:	f04f 0500 	mov.w	r5, #0
 8005134:	00dd      	lsls	r5, r3, #3
 8005136:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800513a:	00d4      	lsls	r4, r2, #3
 800513c:	4622      	mov	r2, r4
 800513e:	462b      	mov	r3, r5
 8005140:	1814      	adds	r4, r2, r0
 8005142:	653c      	str	r4, [r7, #80]	; 0x50
 8005144:	414b      	adcs	r3, r1
 8005146:	657b      	str	r3, [r7, #84]	; 0x54
 8005148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	461a      	mov	r2, r3
 800514e:	f04f 0300 	mov.w	r3, #0
 8005152:	1891      	adds	r1, r2, r2
 8005154:	61b9      	str	r1, [r7, #24]
 8005156:	415b      	adcs	r3, r3
 8005158:	61fb      	str	r3, [r7, #28]
 800515a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800515e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005162:	f7fb f855 	bl	8000210 <__aeabi_uldivmod>
 8005166:	4602      	mov	r2, r0
 8005168:	460b      	mov	r3, r1
 800516a:	4b6c      	ldr	r3, [pc, #432]	; (800531c <UART_SetConfig+0x38c>)
 800516c:	fba3 1302 	umull	r1, r3, r3, r2
 8005170:	095b      	lsrs	r3, r3, #5
 8005172:	2164      	movs	r1, #100	; 0x64
 8005174:	fb01 f303 	mul.w	r3, r1, r3
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	00db      	lsls	r3, r3, #3
 800517c:	3332      	adds	r3, #50	; 0x32
 800517e:	4a67      	ldr	r2, [pc, #412]	; (800531c <UART_SetConfig+0x38c>)
 8005180:	fba2 2303 	umull	r2, r3, r2, r3
 8005184:	095b      	lsrs	r3, r3, #5
 8005186:	f003 0207 	and.w	r2, r3, #7
 800518a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4432      	add	r2, r6
 8005190:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005192:	e0b9      	b.n	8005308 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005194:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005196:	461c      	mov	r4, r3
 8005198:	f04f 0500 	mov.w	r5, #0
 800519c:	4622      	mov	r2, r4
 800519e:	462b      	mov	r3, r5
 80051a0:	1891      	adds	r1, r2, r2
 80051a2:	6139      	str	r1, [r7, #16]
 80051a4:	415b      	adcs	r3, r3
 80051a6:	617b      	str	r3, [r7, #20]
 80051a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80051ac:	1912      	adds	r2, r2, r4
 80051ae:	eb45 0303 	adc.w	r3, r5, r3
 80051b2:	f04f 0000 	mov.w	r0, #0
 80051b6:	f04f 0100 	mov.w	r1, #0
 80051ba:	00d9      	lsls	r1, r3, #3
 80051bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051c0:	00d0      	lsls	r0, r2, #3
 80051c2:	4602      	mov	r2, r0
 80051c4:	460b      	mov	r3, r1
 80051c6:	eb12 0804 	adds.w	r8, r2, r4
 80051ca:	eb43 0905 	adc.w	r9, r3, r5
 80051ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f04f 0100 	mov.w	r1, #0
 80051d8:	f04f 0200 	mov.w	r2, #0
 80051dc:	f04f 0300 	mov.w	r3, #0
 80051e0:	008b      	lsls	r3, r1, #2
 80051e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80051e6:	0082      	lsls	r2, r0, #2
 80051e8:	4640      	mov	r0, r8
 80051ea:	4649      	mov	r1, r9
 80051ec:	f7fb f810 	bl	8000210 <__aeabi_uldivmod>
 80051f0:	4602      	mov	r2, r0
 80051f2:	460b      	mov	r3, r1
 80051f4:	4b49      	ldr	r3, [pc, #292]	; (800531c <UART_SetConfig+0x38c>)
 80051f6:	fba3 2302 	umull	r2, r3, r3, r2
 80051fa:	095b      	lsrs	r3, r3, #5
 80051fc:	011e      	lsls	r6, r3, #4
 80051fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005200:	4618      	mov	r0, r3
 8005202:	f04f 0100 	mov.w	r1, #0
 8005206:	4602      	mov	r2, r0
 8005208:	460b      	mov	r3, r1
 800520a:	1894      	adds	r4, r2, r2
 800520c:	60bc      	str	r4, [r7, #8]
 800520e:	415b      	adcs	r3, r3
 8005210:	60fb      	str	r3, [r7, #12]
 8005212:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005216:	1812      	adds	r2, r2, r0
 8005218:	eb41 0303 	adc.w	r3, r1, r3
 800521c:	f04f 0400 	mov.w	r4, #0
 8005220:	f04f 0500 	mov.w	r5, #0
 8005224:	00dd      	lsls	r5, r3, #3
 8005226:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800522a:	00d4      	lsls	r4, r2, #3
 800522c:	4622      	mov	r2, r4
 800522e:	462b      	mov	r3, r5
 8005230:	1814      	adds	r4, r2, r0
 8005232:	64bc      	str	r4, [r7, #72]	; 0x48
 8005234:	414b      	adcs	r3, r1
 8005236:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	4618      	mov	r0, r3
 800523e:	f04f 0100 	mov.w	r1, #0
 8005242:	f04f 0200 	mov.w	r2, #0
 8005246:	f04f 0300 	mov.w	r3, #0
 800524a:	008b      	lsls	r3, r1, #2
 800524c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005250:	0082      	lsls	r2, r0, #2
 8005252:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005256:	f7fa ffdb 	bl	8000210 <__aeabi_uldivmod>
 800525a:	4602      	mov	r2, r0
 800525c:	460b      	mov	r3, r1
 800525e:	4b2f      	ldr	r3, [pc, #188]	; (800531c <UART_SetConfig+0x38c>)
 8005260:	fba3 1302 	umull	r1, r3, r3, r2
 8005264:	095b      	lsrs	r3, r3, #5
 8005266:	2164      	movs	r1, #100	; 0x64
 8005268:	fb01 f303 	mul.w	r3, r1, r3
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	011b      	lsls	r3, r3, #4
 8005270:	3332      	adds	r3, #50	; 0x32
 8005272:	4a2a      	ldr	r2, [pc, #168]	; (800531c <UART_SetConfig+0x38c>)
 8005274:	fba2 2303 	umull	r2, r3, r2, r3
 8005278:	095b      	lsrs	r3, r3, #5
 800527a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800527e:	441e      	add	r6, r3
 8005280:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005282:	4618      	mov	r0, r3
 8005284:	f04f 0100 	mov.w	r1, #0
 8005288:	4602      	mov	r2, r0
 800528a:	460b      	mov	r3, r1
 800528c:	1894      	adds	r4, r2, r2
 800528e:	603c      	str	r4, [r7, #0]
 8005290:	415b      	adcs	r3, r3
 8005292:	607b      	str	r3, [r7, #4]
 8005294:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005298:	1812      	adds	r2, r2, r0
 800529a:	eb41 0303 	adc.w	r3, r1, r3
 800529e:	f04f 0400 	mov.w	r4, #0
 80052a2:	f04f 0500 	mov.w	r5, #0
 80052a6:	00dd      	lsls	r5, r3, #3
 80052a8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80052ac:	00d4      	lsls	r4, r2, #3
 80052ae:	4622      	mov	r2, r4
 80052b0:	462b      	mov	r3, r5
 80052b2:	eb12 0a00 	adds.w	sl, r2, r0
 80052b6:	eb43 0b01 	adc.w	fp, r3, r1
 80052ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	4618      	mov	r0, r3
 80052c0:	f04f 0100 	mov.w	r1, #0
 80052c4:	f04f 0200 	mov.w	r2, #0
 80052c8:	f04f 0300 	mov.w	r3, #0
 80052cc:	008b      	lsls	r3, r1, #2
 80052ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80052d2:	0082      	lsls	r2, r0, #2
 80052d4:	4650      	mov	r0, sl
 80052d6:	4659      	mov	r1, fp
 80052d8:	f7fa ff9a 	bl	8000210 <__aeabi_uldivmod>
 80052dc:	4602      	mov	r2, r0
 80052de:	460b      	mov	r3, r1
 80052e0:	4b0e      	ldr	r3, [pc, #56]	; (800531c <UART_SetConfig+0x38c>)
 80052e2:	fba3 1302 	umull	r1, r3, r3, r2
 80052e6:	095b      	lsrs	r3, r3, #5
 80052e8:	2164      	movs	r1, #100	; 0x64
 80052ea:	fb01 f303 	mul.w	r3, r1, r3
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	011b      	lsls	r3, r3, #4
 80052f2:	3332      	adds	r3, #50	; 0x32
 80052f4:	4a09      	ldr	r2, [pc, #36]	; (800531c <UART_SetConfig+0x38c>)
 80052f6:	fba2 2303 	umull	r2, r3, r2, r3
 80052fa:	095b      	lsrs	r3, r3, #5
 80052fc:	f003 020f 	and.w	r2, r3, #15
 8005300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4432      	add	r2, r6
 8005306:	609a      	str	r2, [r3, #8]
}
 8005308:	bf00      	nop
 800530a:	377c      	adds	r7, #124	; 0x7c
 800530c:	46bd      	mov	sp, r7
 800530e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005312:	bf00      	nop
 8005314:	40011000 	.word	0x40011000
 8005318:	40011400 	.word	0x40011400
 800531c:	51eb851f 	.word	0x51eb851f

08005320 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005320:	b084      	sub	sp, #16
 8005322:	b580      	push	{r7, lr}
 8005324:	b084      	sub	sp, #16
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
 800532a:	f107 001c 	add.w	r0, r7, #28
 800532e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005334:	2b01      	cmp	r3, #1
 8005336:	d122      	bne.n	800537e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800534c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005362:	2b01      	cmp	r3, #1
 8005364:	d105      	bne.n	8005372 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f001 fb16 	bl	80069a4 <USB_CoreReset>
 8005378:	4603      	mov	r3, r0
 800537a:	73fb      	strb	r3, [r7, #15]
 800537c:	e01a      	b.n	80053b4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f001 fb0a 	bl	80069a4 <USB_CoreReset>
 8005390:	4603      	mov	r3, r0
 8005392:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005396:	2b00      	cmp	r3, #0
 8005398:	d106      	bne.n	80053a8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	639a      	str	r2, [r3, #56]	; 0x38
 80053a6:	e005      	b.n	80053b4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80053b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d10b      	bne.n	80053d2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f043 0206 	orr.w	r2, r3, #6
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f043 0220 	orr.w	r2, r3, #32
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80053d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053de:	b004      	add	sp, #16
 80053e0:	4770      	bx	lr
	...

080053e4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b087      	sub	sp, #28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	4613      	mov	r3, r2
 80053f0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80053f2:	79fb      	ldrb	r3, [r7, #7]
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d165      	bne.n	80054c4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	4a41      	ldr	r2, [pc, #260]	; (8005500 <USB_SetTurnaroundTime+0x11c>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d906      	bls.n	800540e <USB_SetTurnaroundTime+0x2a>
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	4a40      	ldr	r2, [pc, #256]	; (8005504 <USB_SetTurnaroundTime+0x120>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d202      	bcs.n	800540e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005408:	230f      	movs	r3, #15
 800540a:	617b      	str	r3, [r7, #20]
 800540c:	e062      	b.n	80054d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	4a3c      	ldr	r2, [pc, #240]	; (8005504 <USB_SetTurnaroundTime+0x120>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d306      	bcc.n	8005424 <USB_SetTurnaroundTime+0x40>
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	4a3b      	ldr	r2, [pc, #236]	; (8005508 <USB_SetTurnaroundTime+0x124>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d202      	bcs.n	8005424 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800541e:	230e      	movs	r3, #14
 8005420:	617b      	str	r3, [r7, #20]
 8005422:	e057      	b.n	80054d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	4a38      	ldr	r2, [pc, #224]	; (8005508 <USB_SetTurnaroundTime+0x124>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d306      	bcc.n	800543a <USB_SetTurnaroundTime+0x56>
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	4a37      	ldr	r2, [pc, #220]	; (800550c <USB_SetTurnaroundTime+0x128>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d202      	bcs.n	800543a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005434:	230d      	movs	r3, #13
 8005436:	617b      	str	r3, [r7, #20]
 8005438:	e04c      	b.n	80054d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	4a33      	ldr	r2, [pc, #204]	; (800550c <USB_SetTurnaroundTime+0x128>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d306      	bcc.n	8005450 <USB_SetTurnaroundTime+0x6c>
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	4a32      	ldr	r2, [pc, #200]	; (8005510 <USB_SetTurnaroundTime+0x12c>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d802      	bhi.n	8005450 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800544a:	230c      	movs	r3, #12
 800544c:	617b      	str	r3, [r7, #20]
 800544e:	e041      	b.n	80054d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	4a2f      	ldr	r2, [pc, #188]	; (8005510 <USB_SetTurnaroundTime+0x12c>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d906      	bls.n	8005466 <USB_SetTurnaroundTime+0x82>
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	4a2e      	ldr	r2, [pc, #184]	; (8005514 <USB_SetTurnaroundTime+0x130>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d802      	bhi.n	8005466 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005460:	230b      	movs	r3, #11
 8005462:	617b      	str	r3, [r7, #20]
 8005464:	e036      	b.n	80054d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	4a2a      	ldr	r2, [pc, #168]	; (8005514 <USB_SetTurnaroundTime+0x130>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d906      	bls.n	800547c <USB_SetTurnaroundTime+0x98>
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	4a29      	ldr	r2, [pc, #164]	; (8005518 <USB_SetTurnaroundTime+0x134>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d802      	bhi.n	800547c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005476:	230a      	movs	r3, #10
 8005478:	617b      	str	r3, [r7, #20]
 800547a:	e02b      	b.n	80054d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	4a26      	ldr	r2, [pc, #152]	; (8005518 <USB_SetTurnaroundTime+0x134>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d906      	bls.n	8005492 <USB_SetTurnaroundTime+0xae>
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	4a25      	ldr	r2, [pc, #148]	; (800551c <USB_SetTurnaroundTime+0x138>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d202      	bcs.n	8005492 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800548c:	2309      	movs	r3, #9
 800548e:	617b      	str	r3, [r7, #20]
 8005490:	e020      	b.n	80054d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	4a21      	ldr	r2, [pc, #132]	; (800551c <USB_SetTurnaroundTime+0x138>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d306      	bcc.n	80054a8 <USB_SetTurnaroundTime+0xc4>
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	4a20      	ldr	r2, [pc, #128]	; (8005520 <USB_SetTurnaroundTime+0x13c>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d802      	bhi.n	80054a8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80054a2:	2308      	movs	r3, #8
 80054a4:	617b      	str	r3, [r7, #20]
 80054a6:	e015      	b.n	80054d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	4a1d      	ldr	r2, [pc, #116]	; (8005520 <USB_SetTurnaroundTime+0x13c>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d906      	bls.n	80054be <USB_SetTurnaroundTime+0xda>
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	4a1c      	ldr	r2, [pc, #112]	; (8005524 <USB_SetTurnaroundTime+0x140>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d202      	bcs.n	80054be <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80054b8:	2307      	movs	r3, #7
 80054ba:	617b      	str	r3, [r7, #20]
 80054bc:	e00a      	b.n	80054d4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80054be:	2306      	movs	r3, #6
 80054c0:	617b      	str	r3, [r7, #20]
 80054c2:	e007      	b.n	80054d4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80054c4:	79fb      	ldrb	r3, [r7, #7]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d102      	bne.n	80054d0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80054ca:	2309      	movs	r3, #9
 80054cc:	617b      	str	r3, [r7, #20]
 80054ce:	e001      	b.n	80054d4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80054d0:	2309      	movs	r3, #9
 80054d2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	029b      	lsls	r3, r3, #10
 80054e8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80054ec:	431a      	orrs	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	371c      	adds	r7, #28
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr
 8005500:	00d8acbf 	.word	0x00d8acbf
 8005504:	00e4e1c0 	.word	0x00e4e1c0
 8005508:	00f42400 	.word	0x00f42400
 800550c:	01067380 	.word	0x01067380
 8005510:	011a499f 	.word	0x011a499f
 8005514:	01312cff 	.word	0x01312cff
 8005518:	014ca43f 	.word	0x014ca43f
 800551c:	016e3600 	.word	0x016e3600
 8005520:	01a6ab1f 	.word	0x01a6ab1f
 8005524:	01e84800 	.word	0x01e84800

08005528 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f043 0201 	orr.w	r2, r3, #1
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800554a:	b480      	push	{r7}
 800554c:	b083      	sub	sp, #12
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f023 0201 	bic.w	r2, r3, #1
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	460b      	mov	r3, r1
 8005576:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005578:	2300      	movs	r3, #0
 800557a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005588:	78fb      	ldrb	r3, [r7, #3]
 800558a:	2b01      	cmp	r3, #1
 800558c:	d115      	bne.n	80055ba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800559a:	2001      	movs	r0, #1
 800559c:	f7fb fe4c 	bl	8001238 <HAL_Delay>
      ms++;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	3301      	adds	r3, #1
 80055a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f001 f96c 	bl	8006884 <USB_GetMode>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d01e      	beq.n	80055f0 <USB_SetCurrentMode+0x84>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2b31      	cmp	r3, #49	; 0x31
 80055b6:	d9f0      	bls.n	800559a <USB_SetCurrentMode+0x2e>
 80055b8:	e01a      	b.n	80055f0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80055ba:	78fb      	ldrb	r3, [r7, #3]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d115      	bne.n	80055ec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80055cc:	2001      	movs	r0, #1
 80055ce:	f7fb fe33 	bl	8001238 <HAL_Delay>
      ms++;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	3301      	adds	r3, #1
 80055d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f001 f953 	bl	8006884 <USB_GetMode>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d005      	beq.n	80055f0 <USB_SetCurrentMode+0x84>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2b31      	cmp	r3, #49	; 0x31
 80055e8:	d9f0      	bls.n	80055cc <USB_SetCurrentMode+0x60>
 80055ea:	e001      	b.n	80055f0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e005      	b.n	80055fc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2b32      	cmp	r3, #50	; 0x32
 80055f4:	d101      	bne.n	80055fa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e000      	b.n	80055fc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005604:	b084      	sub	sp, #16
 8005606:	b580      	push	{r7, lr}
 8005608:	b086      	sub	sp, #24
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
 800560e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005612:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005616:	2300      	movs	r3, #0
 8005618:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800561e:	2300      	movs	r3, #0
 8005620:	613b      	str	r3, [r7, #16]
 8005622:	e009      	b.n	8005638 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	3340      	adds	r3, #64	; 0x40
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4413      	add	r3, r2
 800562e:	2200      	movs	r2, #0
 8005630:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	3301      	adds	r3, #1
 8005636:	613b      	str	r3, [r7, #16]
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	2b0e      	cmp	r3, #14
 800563c:	d9f2      	bls.n	8005624 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800563e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005640:	2b00      	cmp	r3, #0
 8005642:	d11c      	bne.n	800567e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005652:	f043 0302 	orr.w	r3, r3, #2
 8005656:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	601a      	str	r2, [r3, #0]
 800567c:	e005      	b.n	800568a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005682:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005690:	461a      	mov	r2, r3
 8005692:	2300      	movs	r3, #0
 8005694:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800569c:	4619      	mov	r1, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056a4:	461a      	mov	r2, r3
 80056a6:	680b      	ldr	r3, [r1, #0]
 80056a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d10c      	bne.n	80056ca <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80056b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d104      	bne.n	80056c0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80056b6:	2100      	movs	r1, #0
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 f945 	bl	8005948 <USB_SetDevSpeed>
 80056be:	e008      	b.n	80056d2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80056c0:	2101      	movs	r1, #1
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f940 	bl	8005948 <USB_SetDevSpeed>
 80056c8:	e003      	b.n	80056d2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80056ca:	2103      	movs	r1, #3
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 f93b 	bl	8005948 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80056d2:	2110      	movs	r1, #16
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 f8f3 	bl	80058c0 <USB_FlushTxFifo>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d001      	beq.n	80056e4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 f90f 	bl	8005908 <USB_FlushRxFifo>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d001      	beq.n	80056f4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056fa:	461a      	mov	r2, r3
 80056fc:	2300      	movs	r3, #0
 80056fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005706:	461a      	mov	r2, r3
 8005708:	2300      	movs	r3, #0
 800570a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005712:	461a      	mov	r2, r3
 8005714:	2300      	movs	r3, #0
 8005716:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005718:	2300      	movs	r3, #0
 800571a:	613b      	str	r3, [r7, #16]
 800571c:	e043      	b.n	80057a6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	015a      	lsls	r2, r3, #5
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	4413      	add	r3, r2
 8005726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005730:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005734:	d118      	bne.n	8005768 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d10a      	bne.n	8005752 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	015a      	lsls	r2, r3, #5
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	4413      	add	r3, r2
 8005744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005748:	461a      	mov	r2, r3
 800574a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800574e:	6013      	str	r3, [r2, #0]
 8005750:	e013      	b.n	800577a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	015a      	lsls	r2, r3, #5
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	4413      	add	r3, r2
 800575a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800575e:	461a      	mov	r2, r3
 8005760:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005764:	6013      	str	r3, [r2, #0]
 8005766:	e008      	b.n	800577a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	015a      	lsls	r2, r3, #5
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	4413      	add	r3, r2
 8005770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005774:	461a      	mov	r2, r3
 8005776:	2300      	movs	r3, #0
 8005778:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	015a      	lsls	r2, r3, #5
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	4413      	add	r3, r2
 8005782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005786:	461a      	mov	r2, r3
 8005788:	2300      	movs	r3, #0
 800578a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	015a      	lsls	r2, r3, #5
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	4413      	add	r3, r2
 8005794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005798:	461a      	mov	r2, r3
 800579a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800579e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	3301      	adds	r3, #1
 80057a4:	613b      	str	r3, [r7, #16]
 80057a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d3b7      	bcc.n	800571e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057ae:	2300      	movs	r3, #0
 80057b0:	613b      	str	r3, [r7, #16]
 80057b2:	e043      	b.n	800583c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	015a      	lsls	r2, r3, #5
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057ca:	d118      	bne.n	80057fe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10a      	bne.n	80057e8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	4413      	add	r3, r2
 80057da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057de:	461a      	mov	r2, r3
 80057e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057e4:	6013      	str	r3, [r2, #0]
 80057e6:	e013      	b.n	8005810 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	015a      	lsls	r2, r3, #5
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f4:	461a      	mov	r2, r3
 80057f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80057fa:	6013      	str	r3, [r2, #0]
 80057fc:	e008      	b.n	8005810 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	015a      	lsls	r2, r3, #5
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	4413      	add	r3, r2
 8005806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800580a:	461a      	mov	r2, r3
 800580c:	2300      	movs	r3, #0
 800580e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	015a      	lsls	r2, r3, #5
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	4413      	add	r3, r2
 8005818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800581c:	461a      	mov	r2, r3
 800581e:	2300      	movs	r3, #0
 8005820:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	015a      	lsls	r2, r3, #5
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	4413      	add	r3, r2
 800582a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800582e:	461a      	mov	r2, r3
 8005830:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005834:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	3301      	adds	r3, #1
 800583a:	613b      	str	r3, [r7, #16]
 800583c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	429a      	cmp	r2, r3
 8005842:	d3b7      	bcc.n	80057b4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005852:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005856:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005864:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005868:	2b00      	cmp	r3, #0
 800586a:	d105      	bne.n	8005878 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	f043 0210 	orr.w	r2, r3, #16
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	699a      	ldr	r2, [r3, #24]
 800587c:	4b0f      	ldr	r3, [pc, #60]	; (80058bc <USB_DevInit+0x2b8>)
 800587e:	4313      	orrs	r3, r2
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005886:	2b00      	cmp	r3, #0
 8005888:	d005      	beq.n	8005896 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	f043 0208 	orr.w	r2, r3, #8
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005898:	2b01      	cmp	r3, #1
 800589a:	d107      	bne.n	80058ac <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058a4:	f043 0304 	orr.w	r3, r3, #4
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80058ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3718      	adds	r7, #24
 80058b2:	46bd      	mov	sp, r7
 80058b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058b8:	b004      	add	sp, #16
 80058ba:	4770      	bx	lr
 80058bc:	803c3800 	.word	0x803c3800

080058c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80058ca:	2300      	movs	r3, #0
 80058cc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	019b      	lsls	r3, r3, #6
 80058d2:	f043 0220 	orr.w	r2, r3, #32
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	3301      	adds	r3, #1
 80058de:	60fb      	str	r3, [r7, #12]
 80058e0:	4a08      	ldr	r2, [pc, #32]	; (8005904 <USB_FlushTxFifo+0x44>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d901      	bls.n	80058ea <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e006      	b.n	80058f8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	f003 0320 	and.w	r3, r3, #32
 80058f2:	2b20      	cmp	r3, #32
 80058f4:	d0f1      	beq.n	80058da <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3714      	adds	r7, #20
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr
 8005904:	00030d40 	.word	0x00030d40

08005908 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005910:	2300      	movs	r3, #0
 8005912:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2210      	movs	r2, #16
 8005918:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	3301      	adds	r3, #1
 800591e:	60fb      	str	r3, [r7, #12]
 8005920:	4a08      	ldr	r2, [pc, #32]	; (8005944 <USB_FlushRxFifo+0x3c>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d901      	bls.n	800592a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e006      	b.n	8005938 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	f003 0310 	and.w	r3, r3, #16
 8005932:	2b10      	cmp	r3, #16
 8005934:	d0f1      	beq.n	800591a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3714      	adds	r7, #20
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr
 8005944:	00030d40 	.word	0x00030d40

08005948 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	460b      	mov	r3, r1
 8005952:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	78fb      	ldrb	r3, [r7, #3]
 8005962:	68f9      	ldr	r1, [r7, #12]
 8005964:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005968:	4313      	orrs	r3, r2
 800596a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3714      	adds	r7, #20
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr

0800597a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800597a:	b480      	push	{r7}
 800597c:	b087      	sub	sp, #28
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f003 0306 	and.w	r3, r3, #6
 8005992:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d102      	bne.n	80059a0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800599a:	2300      	movs	r3, #0
 800599c:	75fb      	strb	r3, [r7, #23]
 800599e:	e00a      	b.n	80059b6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d002      	beq.n	80059ac <USB_GetDevSpeed+0x32>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2b06      	cmp	r3, #6
 80059aa:	d102      	bne.n	80059b2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80059ac:	2302      	movs	r3, #2
 80059ae:	75fb      	strb	r3, [r7, #23]
 80059b0:	e001      	b.n	80059b6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80059b2:	230f      	movs	r3, #15
 80059b4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80059b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	371c      	adds	r7, #28
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	785b      	ldrb	r3, [r3, #1]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d13a      	bne.n	8005a56 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059e6:	69da      	ldr	r2, [r3, #28]
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	f003 030f 	and.w	r3, r3, #15
 80059f0:	2101      	movs	r1, #1
 80059f2:	fa01 f303 	lsl.w	r3, r1, r3
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	68f9      	ldr	r1, [r7, #12]
 80059fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059fe:	4313      	orrs	r3, r2
 8005a00:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	015a      	lsls	r2, r3, #5
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	4413      	add	r3, r2
 8005a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d155      	bne.n	8005ac4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	015a      	lsls	r2, r3, #5
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	4413      	add	r3, r2
 8005a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	78db      	ldrb	r3, [r3, #3]
 8005a32:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a34:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	059b      	lsls	r3, r3, #22
 8005a3a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	68ba      	ldr	r2, [r7, #8]
 8005a40:	0151      	lsls	r1, r2, #5
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	440a      	add	r2, r1
 8005a46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a52:	6013      	str	r3, [r2, #0]
 8005a54:	e036      	b.n	8005ac4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a5c:	69da      	ldr	r2, [r3, #28]
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	f003 030f 	and.w	r3, r3, #15
 8005a66:	2101      	movs	r1, #1
 8005a68:	fa01 f303 	lsl.w	r3, r1, r3
 8005a6c:	041b      	lsls	r3, r3, #16
 8005a6e:	68f9      	ldr	r1, [r7, #12]
 8005a70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a74:	4313      	orrs	r3, r2
 8005a76:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	015a      	lsls	r2, r3, #5
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	4413      	add	r3, r2
 8005a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d11a      	bne.n	8005ac4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	015a      	lsls	r2, r3, #5
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	4413      	add	r3, r2
 8005a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	78db      	ldrb	r3, [r3, #3]
 8005aa8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005aaa:	430b      	orrs	r3, r1
 8005aac:	4313      	orrs	r3, r2
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	0151      	lsls	r1, r2, #5
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	440a      	add	r2, r1
 8005ab6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ac2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3714      	adds	r7, #20
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
	...

08005ad4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	785b      	ldrb	r3, [r3, #1]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d161      	bne.n	8005bb4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b06:	d11f      	bne.n	8005b48 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	015a      	lsls	r2, r3, #5
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68ba      	ldr	r2, [r7, #8]
 8005b18:	0151      	lsls	r1, r2, #5
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	440a      	add	r2, r1
 8005b1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b26:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	0151      	lsls	r1, r2, #5
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	440a      	add	r2, r1
 8005b3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	f003 030f 	and.w	r3, r3, #15
 8005b58:	2101      	movs	r1, #1
 8005b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	43db      	mvns	r3, r3
 8005b62:	68f9      	ldr	r1, [r7, #12]
 8005b64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b68:	4013      	ands	r3, r2
 8005b6a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b72:	69da      	ldr	r2, [r3, #28]
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	f003 030f 	and.w	r3, r3, #15
 8005b7c:	2101      	movs	r1, #1
 8005b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	43db      	mvns	r3, r3
 8005b86:	68f9      	ldr	r1, [r7, #12]
 8005b88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	015a      	lsls	r2, r3, #5
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	0159      	lsls	r1, r3, #5
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	440b      	add	r3, r1
 8005ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005baa:	4619      	mov	r1, r3
 8005bac:	4b35      	ldr	r3, [pc, #212]	; (8005c84 <USB_DeactivateEndpoint+0x1b0>)
 8005bae:	4013      	ands	r3, r2
 8005bb0:	600b      	str	r3, [r1, #0]
 8005bb2:	e060      	b.n	8005c76 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	015a      	lsls	r2, r3, #5
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	4413      	add	r3, r2
 8005bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bca:	d11f      	bne.n	8005c0c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	0151      	lsls	r1, r2, #5
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	440a      	add	r2, r1
 8005be2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005be6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005bea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	015a      	lsls	r2, r3, #5
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68ba      	ldr	r2, [r7, #8]
 8005bfc:	0151      	lsls	r1, r2, #5
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	440a      	add	r2, r1
 8005c02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c0a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	f003 030f 	and.w	r3, r3, #15
 8005c1c:	2101      	movs	r1, #1
 8005c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c22:	041b      	lsls	r3, r3, #16
 8005c24:	43db      	mvns	r3, r3
 8005c26:	68f9      	ldr	r1, [r7, #12]
 8005c28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c36:	69da      	ldr	r2, [r3, #28]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	f003 030f 	and.w	r3, r3, #15
 8005c40:	2101      	movs	r1, #1
 8005c42:	fa01 f303 	lsl.w	r3, r1, r3
 8005c46:	041b      	lsls	r3, r3, #16
 8005c48:	43db      	mvns	r3, r3
 8005c4a:	68f9      	ldr	r1, [r7, #12]
 8005c4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c50:	4013      	ands	r3, r2
 8005c52:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	0159      	lsls	r1, r3, #5
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	440b      	add	r3, r1
 8005c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c6e:	4619      	mov	r1, r3
 8005c70:	4b05      	ldr	r3, [pc, #20]	; (8005c88 <USB_DeactivateEndpoint+0x1b4>)
 8005c72:	4013      	ands	r3, r2
 8005c74:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3714      	adds	r7, #20
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr
 8005c84:	ec337800 	.word	0xec337800
 8005c88:	eff37800 	.word	0xeff37800

08005c8c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b08a      	sub	sp, #40	; 0x28
 8005c90:	af02      	add	r7, sp, #8
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	4613      	mov	r3, r2
 8005c98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	785b      	ldrb	r3, [r3, #1]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	f040 815c 	bne.w	8005f66 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d132      	bne.n	8005d1c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	0151      	lsls	r1, r2, #5
 8005cc8:	69fa      	ldr	r2, [r7, #28]
 8005cca:	440a      	add	r2, r1
 8005ccc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cd0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cd4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cd8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	015a      	lsls	r2, r3, #5
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	69ba      	ldr	r2, [r7, #24]
 8005cea:	0151      	lsls	r1, r2, #5
 8005cec:	69fa      	ldr	r2, [r7, #28]
 8005cee:	440a      	add	r2, r1
 8005cf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cf4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cf8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	015a      	lsls	r2, r3, #5
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	4413      	add	r3, r2
 8005d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	69ba      	ldr	r2, [r7, #24]
 8005d0a:	0151      	lsls	r1, r2, #5
 8005d0c:	69fa      	ldr	r2, [r7, #28]
 8005d0e:	440a      	add	r2, r1
 8005d10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d14:	0cdb      	lsrs	r3, r3, #19
 8005d16:	04db      	lsls	r3, r3, #19
 8005d18:	6113      	str	r3, [r2, #16]
 8005d1a:	e074      	b.n	8005e06 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	015a      	lsls	r2, r3, #5
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	69ba      	ldr	r2, [r7, #24]
 8005d2c:	0151      	lsls	r1, r2, #5
 8005d2e:	69fa      	ldr	r2, [r7, #28]
 8005d30:	440a      	add	r2, r1
 8005d32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d36:	0cdb      	lsrs	r3, r3, #19
 8005d38:	04db      	lsls	r3, r3, #19
 8005d3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	69ba      	ldr	r2, [r7, #24]
 8005d4c:	0151      	lsls	r1, r2, #5
 8005d4e:	69fa      	ldr	r2, [r7, #28]
 8005d50:	440a      	add	r2, r1
 8005d52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d56:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d5a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	015a      	lsls	r2, r3, #5
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	4413      	add	r3, r2
 8005d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d6c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	6959      	ldr	r1, [r3, #20]
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	440b      	add	r3, r1
 8005d78:	1e59      	subs	r1, r3, #1
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d82:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005d84:	4b9d      	ldr	r3, [pc, #628]	; (8005ffc <USB_EPStartXfer+0x370>)
 8005d86:	400b      	ands	r3, r1
 8005d88:	69b9      	ldr	r1, [r7, #24]
 8005d8a:	0148      	lsls	r0, r1, #5
 8005d8c:	69f9      	ldr	r1, [r7, #28]
 8005d8e:	4401      	add	r1, r0
 8005d90:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005d94:	4313      	orrs	r3, r2
 8005d96:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	015a      	lsls	r2, r3, #5
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	4413      	add	r3, r2
 8005da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da4:	691a      	ldr	r2, [r3, #16]
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dae:	69b9      	ldr	r1, [r7, #24]
 8005db0:	0148      	lsls	r0, r1, #5
 8005db2:	69f9      	ldr	r1, [r7, #28]
 8005db4:	4401      	add	r1, r0
 8005db6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	78db      	ldrb	r3, [r3, #3]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d11f      	bne.n	8005e06 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	015a      	lsls	r2, r3, #5
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	4413      	add	r3, r2
 8005dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	0151      	lsls	r1, r2, #5
 8005dd8:	69fa      	ldr	r2, [r7, #28]
 8005dda:	440a      	add	r2, r1
 8005ddc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005de0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005de4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	015a      	lsls	r2, r3, #5
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	4413      	add	r3, r2
 8005dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	69ba      	ldr	r2, [r7, #24]
 8005df6:	0151      	lsls	r1, r2, #5
 8005df8:	69fa      	ldr	r2, [r7, #28]
 8005dfa:	440a      	add	r2, r1
 8005dfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e04:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005e06:	79fb      	ldrb	r3, [r7, #7]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d14b      	bne.n	8005ea4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d009      	beq.n	8005e28 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	015a      	lsls	r2, r3, #5
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e20:	461a      	mov	r2, r3
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	78db      	ldrb	r3, [r3, #3]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d128      	bne.n	8005e82 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d110      	bne.n	8005e62 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	015a      	lsls	r2, r3, #5
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	4413      	add	r3, r2
 8005e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	69ba      	ldr	r2, [r7, #24]
 8005e50:	0151      	lsls	r1, r2, #5
 8005e52:	69fa      	ldr	r2, [r7, #28]
 8005e54:	440a      	add	r2, r1
 8005e56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e5e:	6013      	str	r3, [r2, #0]
 8005e60:	e00f      	b.n	8005e82 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	69ba      	ldr	r2, [r7, #24]
 8005e72:	0151      	lsls	r1, r2, #5
 8005e74:	69fa      	ldr	r2, [r7, #28]
 8005e76:	440a      	add	r2, r1
 8005e78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e80:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	015a      	lsls	r2, r3, #5
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	4413      	add	r3, r2
 8005e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	69ba      	ldr	r2, [r7, #24]
 8005e92:	0151      	lsls	r1, r2, #5
 8005e94:	69fa      	ldr	r2, [r7, #28]
 8005e96:	440a      	add	r2, r1
 8005e98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e9c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ea0:	6013      	str	r3, [r2, #0]
 8005ea2:	e12f      	b.n	8006104 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	015a      	lsls	r2, r3, #5
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	69ba      	ldr	r2, [r7, #24]
 8005eb4:	0151      	lsls	r1, r2, #5
 8005eb6:	69fa      	ldr	r2, [r7, #28]
 8005eb8:	440a      	add	r2, r1
 8005eba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ebe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ec2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	78db      	ldrb	r3, [r3, #3]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d015      	beq.n	8005ef8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	695b      	ldr	r3, [r3, #20]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	f000 8117 	beq.w	8006104 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005edc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	f003 030f 	and.w	r3, r3, #15
 8005ee6:	2101      	movs	r1, #1
 8005ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8005eec:	69f9      	ldr	r1, [r7, #28]
 8005eee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	634b      	str	r3, [r1, #52]	; 0x34
 8005ef6:	e105      	b.n	8006104 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d110      	bne.n	8005f2a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	69ba      	ldr	r2, [r7, #24]
 8005f18:	0151      	lsls	r1, r2, #5
 8005f1a:	69fa      	ldr	r2, [r7, #28]
 8005f1c:	440a      	add	r2, r1
 8005f1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f26:	6013      	str	r3, [r2, #0]
 8005f28:	e00f      	b.n	8005f4a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	015a      	lsls	r2, r3, #5
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	4413      	add	r3, r2
 8005f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	69ba      	ldr	r2, [r7, #24]
 8005f3a:	0151      	lsls	r1, r2, #5
 8005f3c:	69fa      	ldr	r2, [r7, #28]
 8005f3e:	440a      	add	r2, r1
 8005f40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f48:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	68d9      	ldr	r1, [r3, #12]
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	781a      	ldrb	r2, [r3, #0]
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	b298      	uxth	r0, r3
 8005f58:	79fb      	ldrb	r3, [r7, #7]
 8005f5a:	9300      	str	r3, [sp, #0]
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f000 fa2b 	bl	80063ba <USB_WritePacket>
 8005f64:	e0ce      	b.n	8006104 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	015a      	lsls	r2, r3, #5
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	69ba      	ldr	r2, [r7, #24]
 8005f76:	0151      	lsls	r1, r2, #5
 8005f78:	69fa      	ldr	r2, [r7, #28]
 8005f7a:	440a      	add	r2, r1
 8005f7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f80:	0cdb      	lsrs	r3, r3, #19
 8005f82:	04db      	lsls	r3, r3, #19
 8005f84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	015a      	lsls	r2, r3, #5
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	69ba      	ldr	r2, [r7, #24]
 8005f96:	0151      	lsls	r1, r2, #5
 8005f98:	69fa      	ldr	r2, [r7, #28]
 8005f9a:	440a      	add	r2, r1
 8005f9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fa0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fa4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fa8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d126      	bne.n	8006000 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	015a      	lsls	r2, r3, #5
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	4413      	add	r3, r2
 8005fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fbe:	691a      	ldr	r2, [r3, #16]
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fc8:	69b9      	ldr	r1, [r7, #24]
 8005fca:	0148      	lsls	r0, r1, #5
 8005fcc:	69f9      	ldr	r1, [r7, #28]
 8005fce:	4401      	add	r1, r0
 8005fd0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	015a      	lsls	r2, r3, #5
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	4413      	add	r3, r2
 8005fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	69ba      	ldr	r2, [r7, #24]
 8005fe8:	0151      	lsls	r1, r2, #5
 8005fea:	69fa      	ldr	r2, [r7, #28]
 8005fec:	440a      	add	r2, r1
 8005fee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ff2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ff6:	6113      	str	r3, [r2, #16]
 8005ff8:	e036      	b.n	8006068 <USB_EPStartXfer+0x3dc>
 8005ffa:	bf00      	nop
 8005ffc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	695a      	ldr	r2, [r3, #20]
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	4413      	add	r3, r2
 800600a:	1e5a      	subs	r2, r3, #1
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	fbb2 f3f3 	udiv	r3, r2, r3
 8006014:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	015a      	lsls	r2, r3, #5
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	4413      	add	r3, r2
 800601e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006022:	691a      	ldr	r2, [r3, #16]
 8006024:	8afb      	ldrh	r3, [r7, #22]
 8006026:	04d9      	lsls	r1, r3, #19
 8006028:	4b39      	ldr	r3, [pc, #228]	; (8006110 <USB_EPStartXfer+0x484>)
 800602a:	400b      	ands	r3, r1
 800602c:	69b9      	ldr	r1, [r7, #24]
 800602e:	0148      	lsls	r0, r1, #5
 8006030:	69f9      	ldr	r1, [r7, #28]
 8006032:	4401      	add	r1, r0
 8006034:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006038:	4313      	orrs	r3, r2
 800603a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	015a      	lsls	r2, r3, #5
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	4413      	add	r3, r2
 8006044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006048:	691a      	ldr	r2, [r3, #16]
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	8af9      	ldrh	r1, [r7, #22]
 8006050:	fb01 f303 	mul.w	r3, r1, r3
 8006054:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006058:	69b9      	ldr	r1, [r7, #24]
 800605a:	0148      	lsls	r0, r1, #5
 800605c:	69f9      	ldr	r1, [r7, #28]
 800605e:	4401      	add	r1, r0
 8006060:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006064:	4313      	orrs	r3, r2
 8006066:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006068:	79fb      	ldrb	r3, [r7, #7]
 800606a:	2b01      	cmp	r3, #1
 800606c:	d10d      	bne.n	800608a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d009      	beq.n	800608a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	68d9      	ldr	r1, [r3, #12]
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	015a      	lsls	r2, r3, #5
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	4413      	add	r3, r2
 8006082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006086:	460a      	mov	r2, r1
 8006088:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	78db      	ldrb	r3, [r3, #3]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d128      	bne.n	80060e4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d110      	bne.n	80060c4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	015a      	lsls	r2, r3, #5
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	4413      	add	r3, r2
 80060aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	69ba      	ldr	r2, [r7, #24]
 80060b2:	0151      	lsls	r1, r2, #5
 80060b4:	69fa      	ldr	r2, [r7, #28]
 80060b6:	440a      	add	r2, r1
 80060b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060c0:	6013      	str	r3, [r2, #0]
 80060c2:	e00f      	b.n	80060e4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	015a      	lsls	r2, r3, #5
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	4413      	add	r3, r2
 80060cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	69ba      	ldr	r2, [r7, #24]
 80060d4:	0151      	lsls	r1, r2, #5
 80060d6:	69fa      	ldr	r2, [r7, #28]
 80060d8:	440a      	add	r2, r1
 80060da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060e2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	69ba      	ldr	r2, [r7, #24]
 80060f4:	0151      	lsls	r1, r2, #5
 80060f6:	69fa      	ldr	r2, [r7, #28]
 80060f8:	440a      	add	r2, r1
 80060fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006102:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3720      	adds	r7, #32
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	1ff80000 	.word	0x1ff80000

08006114 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006114:	b480      	push	{r7}
 8006116:	b087      	sub	sp, #28
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	4613      	mov	r3, r2
 8006120:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	785b      	ldrb	r3, [r3, #1]
 8006130:	2b01      	cmp	r3, #1
 8006132:	f040 80cd 	bne.w	80062d0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	695b      	ldr	r3, [r3, #20]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d132      	bne.n	80061a4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	015a      	lsls	r2, r3, #5
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	4413      	add	r3, r2
 8006146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	0151      	lsls	r1, r2, #5
 8006150:	697a      	ldr	r2, [r7, #20]
 8006152:	440a      	add	r2, r1
 8006154:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006158:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800615c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006160:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	015a      	lsls	r2, r3, #5
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	4413      	add	r3, r2
 800616a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	693a      	ldr	r2, [r7, #16]
 8006172:	0151      	lsls	r1, r2, #5
 8006174:	697a      	ldr	r2, [r7, #20]
 8006176:	440a      	add	r2, r1
 8006178:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800617c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006180:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	015a      	lsls	r2, r3, #5
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	4413      	add	r3, r2
 800618a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	693a      	ldr	r2, [r7, #16]
 8006192:	0151      	lsls	r1, r2, #5
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	440a      	add	r2, r1
 8006198:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800619c:	0cdb      	lsrs	r3, r3, #19
 800619e:	04db      	lsls	r3, r3, #19
 80061a0:	6113      	str	r3, [r2, #16]
 80061a2:	e04e      	b.n	8006242 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	015a      	lsls	r2, r3, #5
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	4413      	add	r3, r2
 80061ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	0151      	lsls	r1, r2, #5
 80061b6:	697a      	ldr	r2, [r7, #20]
 80061b8:	440a      	add	r2, r1
 80061ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061be:	0cdb      	lsrs	r3, r3, #19
 80061c0:	04db      	lsls	r3, r3, #19
 80061c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	015a      	lsls	r2, r3, #5
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	4413      	add	r3, r2
 80061cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	0151      	lsls	r1, r2, #5
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	440a      	add	r2, r1
 80061da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061e6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	695a      	ldr	r2, [r3, #20]
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d903      	bls.n	80061fc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	689a      	ldr	r2, [r3, #8]
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	0151      	lsls	r1, r2, #5
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	440a      	add	r2, r1
 8006212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006216:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800621a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	015a      	lsls	r2, r3, #5
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	4413      	add	r3, r2
 8006224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006228:	691a      	ldr	r2, [r3, #16]
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	695b      	ldr	r3, [r3, #20]
 800622e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006232:	6939      	ldr	r1, [r7, #16]
 8006234:	0148      	lsls	r0, r1, #5
 8006236:	6979      	ldr	r1, [r7, #20]
 8006238:	4401      	add	r1, r0
 800623a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800623e:	4313      	orrs	r3, r2
 8006240:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006242:	79fb      	ldrb	r3, [r7, #7]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d11e      	bne.n	8006286 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d009      	beq.n	8006264 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	015a      	lsls	r2, r3, #5
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	4413      	add	r3, r2
 8006258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800625c:	461a      	mov	r2, r3
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	015a      	lsls	r2, r3, #5
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	4413      	add	r3, r2
 800626c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	0151      	lsls	r1, r2, #5
 8006276:	697a      	ldr	r2, [r7, #20]
 8006278:	440a      	add	r2, r1
 800627a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800627e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006282:	6013      	str	r3, [r2, #0]
 8006284:	e092      	b.n	80063ac <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	015a      	lsls	r2, r3, #5
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	4413      	add	r3, r2
 800628e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	0151      	lsls	r1, r2, #5
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	440a      	add	r2, r1
 800629c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062a4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d07e      	beq.n	80063ac <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	f003 030f 	and.w	r3, r3, #15
 80062be:	2101      	movs	r1, #1
 80062c0:	fa01 f303 	lsl.w	r3, r1, r3
 80062c4:	6979      	ldr	r1, [r7, #20]
 80062c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062ca:	4313      	orrs	r3, r2
 80062cc:	634b      	str	r3, [r1, #52]	; 0x34
 80062ce:	e06d      	b.n	80063ac <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	015a      	lsls	r2, r3, #5
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	4413      	add	r3, r2
 80062d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	0151      	lsls	r1, r2, #5
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	440a      	add	r2, r1
 80062e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062ea:	0cdb      	lsrs	r3, r3, #19
 80062ec:	04db      	lsls	r3, r3, #19
 80062ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	015a      	lsls	r2, r3, #5
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	4413      	add	r3, r2
 80062f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	693a      	ldr	r2, [r7, #16]
 8006300:	0151      	lsls	r1, r2, #5
 8006302:	697a      	ldr	r2, [r7, #20]
 8006304:	440a      	add	r2, r1
 8006306:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800630a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800630e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006312:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	695b      	ldr	r3, [r3, #20]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d003      	beq.n	8006324 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	4413      	add	r3, r2
 800632c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	0151      	lsls	r1, r2, #5
 8006336:	697a      	ldr	r2, [r7, #20]
 8006338:	440a      	add	r2, r1
 800633a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800633e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006342:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	4413      	add	r3, r2
 800634c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006350:	691a      	ldr	r2, [r3, #16]
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800635a:	6939      	ldr	r1, [r7, #16]
 800635c:	0148      	lsls	r0, r1, #5
 800635e:	6979      	ldr	r1, [r7, #20]
 8006360:	4401      	add	r1, r0
 8006362:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006366:	4313      	orrs	r3, r2
 8006368:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800636a:	79fb      	ldrb	r3, [r7, #7]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d10d      	bne.n	800638c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d009      	beq.n	800638c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	68d9      	ldr	r1, [r3, #12]
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	015a      	lsls	r2, r3, #5
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	4413      	add	r3, r2
 8006384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006388:	460a      	mov	r2, r1
 800638a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	015a      	lsls	r2, r3, #5
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	4413      	add	r3, r2
 8006394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	0151      	lsls	r1, r2, #5
 800639e:	697a      	ldr	r2, [r7, #20]
 80063a0:	440a      	add	r2, r1
 80063a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	371c      	adds	r7, #28
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr

080063ba <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80063ba:	b480      	push	{r7}
 80063bc:	b089      	sub	sp, #36	; 0x24
 80063be:	af00      	add	r7, sp, #0
 80063c0:	60f8      	str	r0, [r7, #12]
 80063c2:	60b9      	str	r1, [r7, #8]
 80063c4:	4611      	mov	r1, r2
 80063c6:	461a      	mov	r2, r3
 80063c8:	460b      	mov	r3, r1
 80063ca:	71fb      	strb	r3, [r7, #7]
 80063cc:	4613      	mov	r3, r2
 80063ce:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80063d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d123      	bne.n	8006428 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80063e0:	88bb      	ldrh	r3, [r7, #4]
 80063e2:	3303      	adds	r3, #3
 80063e4:	089b      	lsrs	r3, r3, #2
 80063e6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80063e8:	2300      	movs	r3, #0
 80063ea:	61bb      	str	r3, [r7, #24]
 80063ec:	e018      	b.n	8006420 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80063ee:	79fb      	ldrb	r3, [r7, #7]
 80063f0:	031a      	lsls	r2, r3, #12
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	4413      	add	r3, r2
 80063f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063fa:	461a      	mov	r2, r3
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	3301      	adds	r3, #1
 8006406:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	3301      	adds	r3, #1
 800640c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	3301      	adds	r3, #1
 8006412:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	3301      	adds	r3, #1
 8006418:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	3301      	adds	r3, #1
 800641e:	61bb      	str	r3, [r7, #24]
 8006420:	69ba      	ldr	r2, [r7, #24]
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	429a      	cmp	r2, r3
 8006426:	d3e2      	bcc.n	80063ee <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3724      	adds	r7, #36	; 0x24
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr

08006436 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006436:	b480      	push	{r7}
 8006438:	b08b      	sub	sp, #44	; 0x2c
 800643a:	af00      	add	r7, sp, #0
 800643c:	60f8      	str	r0, [r7, #12]
 800643e:	60b9      	str	r1, [r7, #8]
 8006440:	4613      	mov	r3, r2
 8006442:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800644c:	88fb      	ldrh	r3, [r7, #6]
 800644e:	089b      	lsrs	r3, r3, #2
 8006450:	b29b      	uxth	r3, r3
 8006452:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006454:	88fb      	ldrh	r3, [r7, #6]
 8006456:	f003 0303 	and.w	r3, r3, #3
 800645a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800645c:	2300      	movs	r3, #0
 800645e:	623b      	str	r3, [r7, #32]
 8006460:	e014      	b.n	800648c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646c:	601a      	str	r2, [r3, #0]
    pDest++;
 800646e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006470:	3301      	adds	r3, #1
 8006472:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	3301      	adds	r3, #1
 8006478:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647c:	3301      	adds	r3, #1
 800647e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006482:	3301      	adds	r3, #1
 8006484:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006486:	6a3b      	ldr	r3, [r7, #32]
 8006488:	3301      	adds	r3, #1
 800648a:	623b      	str	r3, [r7, #32]
 800648c:	6a3a      	ldr	r2, [r7, #32]
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	429a      	cmp	r2, r3
 8006492:	d3e6      	bcc.n	8006462 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006494:	8bfb      	ldrh	r3, [r7, #30]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d01e      	beq.n	80064d8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800649a:	2300      	movs	r3, #0
 800649c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064a4:	461a      	mov	r2, r3
 80064a6:	f107 0310 	add.w	r3, r7, #16
 80064aa:	6812      	ldr	r2, [r2, #0]
 80064ac:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	6a3b      	ldr	r3, [r7, #32]
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	00db      	lsls	r3, r3, #3
 80064b6:	fa22 f303 	lsr.w	r3, r2, r3
 80064ba:	b2da      	uxtb	r2, r3
 80064bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064be:	701a      	strb	r2, [r3, #0]
      i++;
 80064c0:	6a3b      	ldr	r3, [r7, #32]
 80064c2:	3301      	adds	r3, #1
 80064c4:	623b      	str	r3, [r7, #32]
      pDest++;
 80064c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c8:	3301      	adds	r3, #1
 80064ca:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80064cc:	8bfb      	ldrh	r3, [r7, #30]
 80064ce:	3b01      	subs	r3, #1
 80064d0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80064d2:	8bfb      	ldrh	r3, [r7, #30]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1ea      	bne.n	80064ae <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80064d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80064da:	4618      	mov	r0, r3
 80064dc:	372c      	adds	r7, #44	; 0x2c
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr

080064e6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80064e6:	b480      	push	{r7}
 80064e8:	b085      	sub	sp, #20
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
 80064ee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	785b      	ldrb	r3, [r3, #1]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d12c      	bne.n	800655c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	015a      	lsls	r2, r3, #5
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	4413      	add	r3, r2
 800650a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	db12      	blt.n	800653a <USB_EPSetStall+0x54>
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00f      	beq.n	800653a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	015a      	lsls	r2, r3, #5
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	4413      	add	r3, r2
 8006522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68ba      	ldr	r2, [r7, #8]
 800652a:	0151      	lsls	r1, r2, #5
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	440a      	add	r2, r1
 8006530:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006534:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006538:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	015a      	lsls	r2, r3, #5
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	4413      	add	r3, r2
 8006542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68ba      	ldr	r2, [r7, #8]
 800654a:	0151      	lsls	r1, r2, #5
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	440a      	add	r2, r1
 8006550:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006554:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006558:	6013      	str	r3, [r2, #0]
 800655a:	e02b      	b.n	80065b4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	015a      	lsls	r2, r3, #5
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	4413      	add	r3, r2
 8006564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	db12      	blt.n	8006594 <USB_EPSetStall+0xae>
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00f      	beq.n	8006594 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	4413      	add	r3, r2
 800657c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68ba      	ldr	r2, [r7, #8]
 8006584:	0151      	lsls	r1, r2, #5
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	440a      	add	r2, r1
 800658a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800658e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006592:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	015a      	lsls	r2, r3, #5
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	4413      	add	r3, r2
 800659c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	0151      	lsls	r1, r2, #5
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	440a      	add	r2, r1
 80065aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80065b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3714      	adds	r7, #20
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr

080065c2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065c2:	b480      	push	{r7}
 80065c4:	b085      	sub	sp, #20
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
 80065ca:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	785b      	ldrb	r3, [r3, #1]
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d128      	bne.n	8006630 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	015a      	lsls	r2, r3, #5
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	4413      	add	r3, r2
 80065e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	0151      	lsls	r1, r2, #5
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	440a      	add	r2, r1
 80065f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80065fc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	78db      	ldrb	r3, [r3, #3]
 8006602:	2b03      	cmp	r3, #3
 8006604:	d003      	beq.n	800660e <USB_EPClearStall+0x4c>
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	78db      	ldrb	r3, [r3, #3]
 800660a:	2b02      	cmp	r3, #2
 800660c:	d138      	bne.n	8006680 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	015a      	lsls	r2, r3, #5
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	4413      	add	r3, r2
 8006616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68ba      	ldr	r2, [r7, #8]
 800661e:	0151      	lsls	r1, r2, #5
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	440a      	add	r2, r1
 8006624:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800662c:	6013      	str	r3, [r2, #0]
 800662e:	e027      	b.n	8006680 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	015a      	lsls	r2, r3, #5
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	4413      	add	r3, r2
 8006638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68ba      	ldr	r2, [r7, #8]
 8006640:	0151      	lsls	r1, r2, #5
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	440a      	add	r2, r1
 8006646:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800664a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800664e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	78db      	ldrb	r3, [r3, #3]
 8006654:	2b03      	cmp	r3, #3
 8006656:	d003      	beq.n	8006660 <USB_EPClearStall+0x9e>
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	78db      	ldrb	r3, [r3, #3]
 800665c:	2b02      	cmp	r3, #2
 800665e:	d10f      	bne.n	8006680 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	015a      	lsls	r2, r3, #5
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	4413      	add	r3, r2
 8006668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	0151      	lsls	r1, r2, #5
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	440a      	add	r2, r1
 8006676:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800667a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800667e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3714      	adds	r7, #20
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr

0800668e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800668e:	b480      	push	{r7}
 8006690:	b085      	sub	sp, #20
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
 8006696:	460b      	mov	r3, r1
 8006698:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066ac:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80066b0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	78fb      	ldrb	r3, [r7, #3]
 80066bc:	011b      	lsls	r3, r3, #4
 80066be:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80066c2:	68f9      	ldr	r1, [r7, #12]
 80066c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066c8:	4313      	orrs	r3, r2
 80066ca:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3714      	adds	r7, #20
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr

080066da <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80066da:	b480      	push	{r7}
 80066dc:	b085      	sub	sp, #20
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80066f4:	f023 0303 	bic.w	r3, r3, #3
 80066f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006708:	f023 0302 	bic.w	r3, r3, #2
 800670c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	3714      	adds	r7, #20
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006736:	f023 0303 	bic.w	r3, r3, #3
 800673a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800674a:	f043 0302 	orr.w	r3, r3, #2
 800674e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3714      	adds	r7, #20
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr

0800675e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800675e:	b480      	push	{r7}
 8006760:	b085      	sub	sp, #20
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	699b      	ldr	r3, [r3, #24]
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	4013      	ands	r3, r2
 8006774:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006776:	68fb      	ldr	r3, [r7, #12]
}
 8006778:	4618      	mov	r0, r3
 800677a:	3714      	adds	r7, #20
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	68ba      	ldr	r2, [r7, #8]
 80067a4:	4013      	ands	r3, r2
 80067a6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	0c1b      	lsrs	r3, r3, #16
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3714      	adds	r7, #20
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067d4:	69db      	ldr	r3, [r3, #28]
 80067d6:	68ba      	ldr	r2, [r7, #8]
 80067d8:	4013      	ands	r3, r2
 80067da:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	b29b      	uxth	r3, r3
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3714      	adds	r7, #20
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	460b      	mov	r3, r1
 80067f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80067fc:	78fb      	ldrb	r3, [r7, #3]
 80067fe:	015a      	lsls	r2, r3, #5
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	4413      	add	r3, r2
 8006804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006812:	695b      	ldr	r3, [r3, #20]
 8006814:	68ba      	ldr	r2, [r7, #8]
 8006816:	4013      	ands	r3, r2
 8006818:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800681a:	68bb      	ldr	r3, [r7, #8]
}
 800681c:	4618      	mov	r0, r3
 800681e:	3714      	adds	r7, #20
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006828:	b480      	push	{r7}
 800682a:	b087      	sub	sp, #28
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	460b      	mov	r3, r1
 8006832:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800684a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800684c:	78fb      	ldrb	r3, [r7, #3]
 800684e:	f003 030f 	and.w	r3, r3, #15
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	fa22 f303 	lsr.w	r3, r2, r3
 8006858:	01db      	lsls	r3, r3, #7
 800685a:	b2db      	uxtb	r3, r3
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	4313      	orrs	r3, r2
 8006860:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006862:	78fb      	ldrb	r3, [r7, #3]
 8006864:	015a      	lsls	r2, r3, #5
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	4413      	add	r3, r2
 800686a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	4013      	ands	r3, r2
 8006874:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006876:	68bb      	ldr	r3, [r7, #8]
}
 8006878:	4618      	mov	r0, r3
 800687a:	371c      	adds	r7, #28
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	695b      	ldr	r3, [r3, #20]
 8006890:	f003 0301 	and.w	r3, r3, #1
}
 8006894:	4618      	mov	r0, r3
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068ba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80068be:	f023 0307 	bic.w	r3, r3, #7
 80068c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3714      	adds	r7, #20
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
	...

080068e8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b087      	sub	sp, #28
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	460b      	mov	r3, r1
 80068f2:	607a      	str	r2, [r7, #4]
 80068f4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	333c      	adds	r3, #60	; 0x3c
 80068fe:	3304      	adds	r3, #4
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	4a26      	ldr	r2, [pc, #152]	; (80069a0 <USB_EP0_OutStart+0xb8>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d90a      	bls.n	8006922 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006918:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800691c:	d101      	bne.n	8006922 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800691e:	2300      	movs	r3, #0
 8006920:	e037      	b.n	8006992 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006928:	461a      	mov	r2, r3
 800692a:	2300      	movs	r3, #0
 800692c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800693c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006940:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	697a      	ldr	r2, [r7, #20]
 800694c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006950:	f043 0318 	orr.w	r3, r3, #24
 8006954:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	697a      	ldr	r2, [r7, #20]
 8006960:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006964:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006968:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800696a:	7afb      	ldrb	r3, [r7, #11]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d10f      	bne.n	8006990 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006976:	461a      	mov	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	697a      	ldr	r2, [r7, #20]
 8006986:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800698a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800698e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	371c      	adds	r7, #28
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	4f54300a 	.word	0x4f54300a

080069a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069ac:	2300      	movs	r3, #0
 80069ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	3301      	adds	r3, #1
 80069b4:	60fb      	str	r3, [r7, #12]
 80069b6:	4a13      	ldr	r2, [pc, #76]	; (8006a04 <USB_CoreReset+0x60>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d901      	bls.n	80069c0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80069bc:	2303      	movs	r3, #3
 80069be:	e01a      	b.n	80069f6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	daf3      	bge.n	80069b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069c8:	2300      	movs	r3, #0
 80069ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	f043 0201 	orr.w	r2, r3, #1
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	3301      	adds	r3, #1
 80069dc:	60fb      	str	r3, [r7, #12]
 80069de:	4a09      	ldr	r2, [pc, #36]	; (8006a04 <USB_CoreReset+0x60>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d901      	bls.n	80069e8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80069e4:	2303      	movs	r3, #3
 80069e6:	e006      	b.n	80069f6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	f003 0301 	and.w	r3, r3, #1
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d0f1      	beq.n	80069d8 <USB_CoreReset+0x34>

  return HAL_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3714      	adds	r7, #20
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	00030d40 	.word	0x00030d40

08006a08 <USBD_AUDIO_RegisterInterface>:
  * @param  fops: Audio interface callback
  * @retval status
  */
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d101      	bne.n	8006a1c <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e004      	b.n	8006a26 <USBD_AUDIO_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	683a      	ldr	r2, [r7, #0]
 8006a20:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	370c      	adds	r7, #12
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
	...

08006a34 <USBD_MIDI_Init>:
  // IN endpoint descriptor
  0x09, 0x05, MIDI_IN_EP, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00,
  0x05, 0x25, 0x01, 0x01, 0x03,
};

static uint8_t USBD_MIDI_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	70fb      	strb	r3, [r7, #3]
  pInstance = pdev;
 8006a40:	4a0c      	ldr	r2, [pc, #48]	; (8006a74 <USBD_MIDI_Init+0x40>)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6013      	str	r3, [r2, #0]
  USBD_LL_OpenEP(pdev,MIDI_IN_EP,USBD_EP_TYPE_BULK,MIDI_DATA_IN_PACKET_SIZE);
 8006a46:	2340      	movs	r3, #64	; 0x40
 8006a48:	2202      	movs	r2, #2
 8006a4a:	2181      	movs	r1, #129	; 0x81
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f004 fb2e 	bl	800b0ae <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,MIDI_OUT_EP,USBD_EP_TYPE_BULK,MIDI_DATA_OUT_PACKET_SIZE);
 8006a52:	2340      	movs	r3, #64	; 0x40
 8006a54:	2202      	movs	r2, #2
 8006a56:	2101      	movs	r1, #1
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f004 fb28 	bl	800b0ae <USBD_LL_OpenEP>
  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,(uint8_t*)(USB_Rx_Buffer),MIDI_DATA_OUT_PACKET_SIZE);
 8006a5e:	2340      	movs	r3, #64	; 0x40
 8006a60:	4a05      	ldr	r2, [pc, #20]	; (8006a78 <USBD_MIDI_Init+0x44>)
 8006a62:	2101      	movs	r1, #1
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f004 fc11 	bl	800b28c <USBD_LL_PrepareReceive>
  return 0;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3708      	adds	r7, #8
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	20000198 	.word	0x20000198
 8006a78:	20004e2c 	.word	0x20004e2c

08006a7c <USBD_MIDI_DeInit>:

static uint8_t USBD_MIDI_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	460b      	mov	r3, r1
 8006a86:	70fb      	strb	r3, [r7, #3]
  pInstance = NULL;
 8006a88:	4b07      	ldr	r3, [pc, #28]	; (8006aa8 <USBD_MIDI_DeInit+0x2c>)
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	601a      	str	r2, [r3, #0]
  USBD_LL_CloseEP(pdev,MIDI_IN_EP);
 8006a8e:	2181      	movs	r1, #129	; 0x81
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f004 fb32 	bl	800b0fa <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,MIDI_OUT_EP);
 8006a96:	2101      	movs	r1, #1
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f004 fb2e 	bl	800b0fa <USBD_LL_CloseEP>
  return 0;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3708      	adds	r7, #8
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	20000198 	.word	0x20000198

08006aac <USBD_MIDI_DataIn>:

static uint8_t USBD_MIDI_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum){
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	70fb      	strb	r3, [r7, #3]

  if (USB_Tx_State == 1){
 8006ab8:	4b06      	ldr	r3, [pc, #24]	; (8006ad4 <USBD_MIDI_DataIn+0x28>)
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d102      	bne.n	8006ac6 <USBD_MIDI_DataIn+0x1a>
    USB_Tx_State = 0;
 8006ac0:	4b04      	ldr	r3, [pc, #16]	; (8006ad4 <USBD_MIDI_DataIn+0x28>)
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	701a      	strb	r2, [r3, #0]
  }
  return USBD_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr
 8006ad4:	200001a0 	.word	0x200001a0

08006ad8 <USBD_MIDI_DataOut>:

static uint8_t  USBD_MIDI_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ad8:	b5b0      	push	{r4, r5, r7, lr}
 8006ada:	b086      	sub	sp, #24
 8006adc:	af02      	add	r7, sp, #8
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	70fb      	strb	r3, [r7, #3]
  uint16_t USB_Rx_Cnt;

  USBD_MIDI_ItfTypeDef *pmidi;
  pmidi = (USBD_MIDI_ItfTypeDef *)(pdev->pUserData);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006aea:	60fb      	str	r3, [r7, #12]

  USB_Rx_Cnt = ((PCD_HandleTypeDef*)pdev->pData)->OUT_ep[epnum].xfer_count;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 12c4 	ldr.w	r1, [r3, #708]	; 0x2c4
 8006af2:	78fa      	ldrb	r2, [r7, #3]
 8006af4:	4613      	mov	r3, r2
 8006af6:	00db      	lsls	r3, r3, #3
 8006af8:	1a9b      	subs	r3, r3, r2
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	440b      	add	r3, r1
 8006afe:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	817b      	strh	r3, [r7, #10]

  pmidi->pIf_MidiRx(USB_Rx_Buffer[0],USB_Rx_Buffer[1],USB_Rx_Buffer[2],USB_Rx_Buffer[3], USB_Rx_Cnt);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681c      	ldr	r4, [r3, #0]
 8006b0a:	4b0b      	ldr	r3, [pc, #44]	; (8006b38 <USBD_MIDI_DataOut+0x60>)
 8006b0c:	7818      	ldrb	r0, [r3, #0]
 8006b0e:	4b0a      	ldr	r3, [pc, #40]	; (8006b38 <USBD_MIDI_DataOut+0x60>)
 8006b10:	7859      	ldrb	r1, [r3, #1]
 8006b12:	4b09      	ldr	r3, [pc, #36]	; (8006b38 <USBD_MIDI_DataOut+0x60>)
 8006b14:	789a      	ldrb	r2, [r3, #2]
 8006b16:	4b08      	ldr	r3, [pc, #32]	; (8006b38 <USBD_MIDI_DataOut+0x60>)
 8006b18:	78dd      	ldrb	r5, [r3, #3]
 8006b1a:	897b      	ldrh	r3, [r7, #10]
 8006b1c:	9300      	str	r3, [sp, #0]
 8006b1e:	462b      	mov	r3, r5
 8006b20:	47a0      	blx	r4

  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,(uint8_t*)(USB_Rx_Buffer),MIDI_DATA_OUT_PACKET_SIZE);
 8006b22:	2340      	movs	r3, #64	; 0x40
 8006b24:	4a04      	ldr	r2, [pc, #16]	; (8006b38 <USBD_MIDI_DataOut+0x60>)
 8006b26:	2101      	movs	r1, #1
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f004 fbaf 	bl	800b28c <USBD_LL_PrepareReceive>
  return USBD_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bdb0      	pop	{r4, r5, r7, pc}
 8006b38:	20004e2c 	.word	0x20004e2c

08006b3c <USBD_MIDI_GetCfgDesc>:
    USB_Tx_State = 1;
    USBD_LL_Transmit (pInstance, MIDI_IN_EP,(uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],USB_Tx_length);
  }
}

static uint8_t *USBD_MIDI_GetCfgDesc (uint16_t *length){
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MIDI_CfgDesc);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2265      	movs	r2, #101	; 0x65
 8006b48:	801a      	strh	r2, [r3, #0]
  return USBD_MIDI_CfgDesc;
 8006b4a:	4b03      	ldr	r3, [pc, #12]	; (8006b58 <USBD_MIDI_GetCfgDesc+0x1c>)
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr
 8006b58:	20000044 	.word	0x20000044

08006b5c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b086      	sub	sp, #24
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	4613      	mov	r3, r2
 8006b68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d101      	bne.n	8006b74 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006b70:	2303      	movs	r3, #3
 8006b72:	e01f      	b.n	8006bb4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d003      	beq.n	8006b9a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	68ba      	ldr	r2, [r7, #8]
 8006b96:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	79fa      	ldrb	r2, [r7, #7]
 8006ba6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f004 fa19 	bl	800afe0 <USBD_LL_Init>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3718      	adds	r7, #24
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d101      	bne.n	8006bd4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e016      	b.n	8006c02 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	683a      	ldr	r2, [r7, #0]
 8006bd8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00b      	beq.n	8006c00 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf0:	f107 020e 	add.w	r2, r7, #14
 8006bf4:	4610      	mov	r0, r2
 8006bf6:	4798      	blx	r3
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3710      	adds	r7, #16
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b082      	sub	sp, #8
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f004 fa30 	bl	800b078 <USBD_LL_Start>
 8006c18:	4603      	mov	r3, r0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3708      	adds	r7, #8
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006c22:	b480      	push	{r7}
 8006c24:	b083      	sub	sp, #12
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	460b      	mov	r3, r1
 8006c42:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006c44:	2303      	movs	r3, #3
 8006c46:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d009      	beq.n	8006c66 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	78fa      	ldrb	r2, [r7, #3]
 8006c5c:	4611      	mov	r1, r2
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	4798      	blx	r3
 8006c62:	4603      	mov	r3, r0
 8006c64:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	460b      	mov	r3, r1
 8006c7a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d007      	beq.n	8006c96 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	78fa      	ldrb	r2, [r7, #3]
 8006c90:	4611      	mov	r1, r2
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	4798      	blx	r3
  }

  return USBD_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3708      	adds	r7, #8
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006cb0:	6839      	ldr	r1, [r7, #0]
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f000 ffba 	bl	8007c2c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006cd4:	f003 031f 	and.w	r3, r3, #31
 8006cd8:	2b02      	cmp	r3, #2
 8006cda:	d01a      	beq.n	8006d12 <USBD_LL_SetupStage+0x72>
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d822      	bhi.n	8006d26 <USBD_LL_SetupStage+0x86>
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d002      	beq.n	8006cea <USBD_LL_SetupStage+0x4a>
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d00a      	beq.n	8006cfe <USBD_LL_SetupStage+0x5e>
 8006ce8:	e01d      	b.n	8006d26 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 fa62 	bl	80071bc <USBD_StdDevReq>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8006cfc:	e020      	b.n	8006d40 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d04:	4619      	mov	r1, r3
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 fac6 	bl	8007298 <USBD_StdItfReq>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d10:	e016      	b.n	8006d40 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d18:	4619      	mov	r1, r3
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 fb05 	bl	800732a <USBD_StdEPReq>
 8006d20:	4603      	mov	r3, r0
 8006d22:	73fb      	strb	r3, [r7, #15]
      break;
 8006d24:	e00c      	b.n	8006d40 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006d2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	4619      	mov	r1, r3
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f004 f9ff 	bl	800b138 <USBD_LL_StallEP>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	73fb      	strb	r3, [r7, #15]
      break;
 8006d3e:	bf00      	nop
  }

  return ret;
 8006d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b086      	sub	sp, #24
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	60f8      	str	r0, [r7, #12]
 8006d52:	460b      	mov	r3, r1
 8006d54:	607a      	str	r2, [r7, #4]
 8006d56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006d58:	7afb      	ldrb	r3, [r7, #11]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d138      	bne.n	8006dd0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006d64:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d6c:	2b03      	cmp	r3, #3
 8006d6e:	d14a      	bne.n	8006e06 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	689a      	ldr	r2, [r3, #8]
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d913      	bls.n	8006da4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	689a      	ldr	r2, [r3, #8]
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	1ad2      	subs	r2, r2, r3
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	68da      	ldr	r2, [r3, #12]
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	4293      	cmp	r3, r2
 8006d94:	bf28      	it	cs
 8006d96:	4613      	movcs	r3, r2
 8006d98:	461a      	mov	r2, r3
 8006d9a:	6879      	ldr	r1, [r7, #4]
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f001 f81c 	bl	8007dda <USBD_CtlContinueRx>
 8006da2:	e030      	b.n	8006e06 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	2b03      	cmp	r3, #3
 8006dae:	d10b      	bne.n	8006dc8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d005      	beq.n	8006dc8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	68f8      	ldr	r0, [r7, #12]
 8006dc6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006dc8:	68f8      	ldr	r0, [r7, #12]
 8006dca:	f001 f817 	bl	8007dfc <USBD_CtlSendStatus>
 8006dce:	e01a      	b.n	8006e06 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	2b03      	cmp	r3, #3
 8006dda:	d114      	bne.n	8006e06 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006de2:	699b      	ldr	r3, [r3, #24]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00e      	beq.n	8006e06 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	7afa      	ldrb	r2, [r7, #11]
 8006df2:	4611      	mov	r1, r2
 8006df4:	68f8      	ldr	r0, [r7, #12]
 8006df6:	4798      	blx	r3
 8006df8:	4603      	mov	r3, r0
 8006dfa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006dfc:	7dfb      	ldrb	r3, [r7, #23]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d001      	beq.n	8006e06 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006e02:	7dfb      	ldrb	r3, [r7, #23]
 8006e04:	e000      	b.n	8006e08 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3718      	adds	r7, #24
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b086      	sub	sp, #24
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	460b      	mov	r3, r1
 8006e1a:	607a      	str	r2, [r7, #4]
 8006e1c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006e1e:	7afb      	ldrb	r3, [r7, #11]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d16b      	bne.n	8006efc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	3314      	adds	r3, #20
 8006e28:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d156      	bne.n	8006ee2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	689a      	ldr	r2, [r3, #8]
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d914      	bls.n	8006e6a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	689a      	ldr	r2, [r3, #8]
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	1ad2      	subs	r2, r2, r3
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	461a      	mov	r2, r3
 8006e54:	6879      	ldr	r1, [r7, #4]
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f000 ffae 	bl	8007db8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	2200      	movs	r2, #0
 8006e60:	2100      	movs	r1, #0
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	f004 fa12 	bl	800b28c <USBD_LL_PrepareReceive>
 8006e68:	e03b      	b.n	8006ee2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	68da      	ldr	r2, [r3, #12]
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d11c      	bne.n	8006eb0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	685a      	ldr	r2, [r3, #4]
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d316      	bcc.n	8006eb0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	685a      	ldr	r2, [r3, #4]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d20f      	bcs.n	8006eb0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006e90:	2200      	movs	r2, #0
 8006e92:	2100      	movs	r1, #0
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f000 ff8f 	bl	8007db8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	2100      	movs	r1, #0
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f004 f9ef 	bl	800b28c <USBD_LL_PrepareReceive>
 8006eae:	e018      	b.n	8006ee2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	2b03      	cmp	r3, #3
 8006eba:	d10b      	bne.n	8006ed4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d005      	beq.n	8006ed4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ed4:	2180      	movs	r1, #128	; 0x80
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f004 f92e 	bl	800b138 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006edc:	68f8      	ldr	r0, [r7, #12]
 8006ede:	f000 ffa0 	bl	8007e22 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d122      	bne.n	8006f32 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006eec:	68f8      	ldr	r0, [r7, #12]
 8006eee:	f7ff fe98 	bl	8006c22 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006efa:	e01a      	b.n	8006f32 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	2b03      	cmp	r3, #3
 8006f06:	d114      	bne.n	8006f32 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f0e:	695b      	ldr	r3, [r3, #20]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00e      	beq.n	8006f32 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f1a:	695b      	ldr	r3, [r3, #20]
 8006f1c:	7afa      	ldrb	r2, [r7, #11]
 8006f1e:	4611      	mov	r1, r2
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	4798      	blx	r3
 8006f24:	4603      	mov	r3, r0
 8006f26:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006f28:	7dfb      	ldrb	r3, [r7, #23]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d001      	beq.n	8006f32 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006f2e:	7dfb      	ldrb	r3, [r7, #23]
 8006f30:	e000      	b.n	8006f34 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3718      	adds	r7, #24
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d101      	bne.n	8006f70 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006f6c:	2303      	movs	r3, #3
 8006f6e:	e02f      	b.n	8006fd0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00f      	beq.n	8006f9a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d009      	beq.n	8006f9a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	6852      	ldr	r2, [r2, #4]
 8006f92:	b2d2      	uxtb	r2, r2
 8006f94:	4611      	mov	r1, r2
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f9a:	2340      	movs	r3, #64	; 0x40
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f004 f884 	bl	800b0ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2240      	movs	r2, #64	; 0x40
 8006fb2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006fb6:	2340      	movs	r3, #64	; 0x40
 8006fb8:	2200      	movs	r2, #0
 8006fba:	2180      	movs	r1, #128	; 0x80
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f004 f876 	bl	800b0ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2240      	movs	r2, #64	; 0x40
 8006fcc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3708      	adds	r7, #8
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	78fa      	ldrb	r2, [r7, #3]
 8006fe8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007006:	b2da      	uxtb	r2, r3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2204      	movs	r2, #4
 8007012:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007032:	b2db      	uxtb	r3, r3
 8007034:	2b04      	cmp	r3, #4
 8007036:	d106      	bne.n	8007046 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800703e:	b2da      	uxtb	r2, r3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007046:	2300      	movs	r3, #0
}
 8007048:	4618      	mov	r0, r3
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007062:	2b00      	cmp	r3, #0
 8007064:	d101      	bne.n	800706a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007066:	2303      	movs	r3, #3
 8007068:	e012      	b.n	8007090 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007070:	b2db      	uxtb	r3, r3
 8007072:	2b03      	cmp	r3, #3
 8007074:	d10b      	bne.n	800708e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800707c:	69db      	ldr	r3, [r3, #28]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d005      	beq.n	800708e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007088:	69db      	ldr	r3, [r3, #28]
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3708      	adds	r7, #8
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b082      	sub	sp, #8
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	460b      	mov	r3, r1
 80070a2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d101      	bne.n	80070b2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e014      	b.n	80070dc <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	2b03      	cmp	r3, #3
 80070bc:	d10d      	bne.n	80070da <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d007      	beq.n	80070da <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	78fa      	ldrb	r2, [r7, #3]
 80070d4:	4611      	mov	r1, r2
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3708      	adds	r7, #8
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	460b      	mov	r3, r1
 80070ee:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d101      	bne.n	80070fe <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e014      	b.n	8007128 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007104:	b2db      	uxtb	r3, r3
 8007106:	2b03      	cmp	r3, #3
 8007108:	d10d      	bne.n	8007126 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007112:	2b00      	cmp	r3, #0
 8007114:	d007      	beq.n	8007126 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800711c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711e:	78fa      	ldrb	r2, [r7, #3]
 8007120:	4611      	mov	r1, r2
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	3708      	adds	r7, #8
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	370c      	adds	r7, #12
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr

08007146 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b082      	sub	sp, #8
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2201      	movs	r2, #1
 8007152:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800715c:	2b00      	cmp	r3, #0
 800715e:	d009      	beq.n	8007174 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	6852      	ldr	r2, [r2, #4]
 800716c:	b2d2      	uxtb	r2, r2
 800716e:	4611      	mov	r1, r2
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	4798      	blx	r3
  }

  return USBD_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3708      	adds	r7, #8
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800717e:	b480      	push	{r7}
 8007180:	b087      	sub	sp, #28
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	3301      	adds	r3, #1
 8007194:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800719c:	8a3b      	ldrh	r3, [r7, #16]
 800719e:	021b      	lsls	r3, r3, #8
 80071a0:	b21a      	sxth	r2, r3
 80071a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	b21b      	sxth	r3, r3
 80071aa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80071ac:	89fb      	ldrh	r3, [r7, #14]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	371c      	adds	r7, #28
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
	...

080071bc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071c6:	2300      	movs	r3, #0
 80071c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071d2:	2b40      	cmp	r3, #64	; 0x40
 80071d4:	d005      	beq.n	80071e2 <USBD_StdDevReq+0x26>
 80071d6:	2b40      	cmp	r3, #64	; 0x40
 80071d8:	d853      	bhi.n	8007282 <USBD_StdDevReq+0xc6>
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00b      	beq.n	80071f6 <USBD_StdDevReq+0x3a>
 80071de:	2b20      	cmp	r3, #32
 80071e0:	d14f      	bne.n	8007282 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	6839      	ldr	r1, [r7, #0]
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	4798      	blx	r3
 80071f0:	4603      	mov	r3, r0
 80071f2:	73fb      	strb	r3, [r7, #15]
      break;
 80071f4:	e04a      	b.n	800728c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	785b      	ldrb	r3, [r3, #1]
 80071fa:	2b09      	cmp	r3, #9
 80071fc:	d83b      	bhi.n	8007276 <USBD_StdDevReq+0xba>
 80071fe:	a201      	add	r2, pc, #4	; (adr r2, 8007204 <USBD_StdDevReq+0x48>)
 8007200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007204:	08007259 	.word	0x08007259
 8007208:	0800726d 	.word	0x0800726d
 800720c:	08007277 	.word	0x08007277
 8007210:	08007263 	.word	0x08007263
 8007214:	08007277 	.word	0x08007277
 8007218:	08007237 	.word	0x08007237
 800721c:	0800722d 	.word	0x0800722d
 8007220:	08007277 	.word	0x08007277
 8007224:	0800724f 	.word	0x0800724f
 8007228:	08007241 	.word	0x08007241
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800722c:	6839      	ldr	r1, [r7, #0]
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 f9de 	bl	80075f0 <USBD_GetDescriptor>
          break;
 8007234:	e024      	b.n	8007280 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007236:	6839      	ldr	r1, [r7, #0]
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 fb6d 	bl	8007918 <USBD_SetAddress>
          break;
 800723e:	e01f      	b.n	8007280 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007240:	6839      	ldr	r1, [r7, #0]
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 fbac 	bl	80079a0 <USBD_SetConfig>
 8007248:	4603      	mov	r3, r0
 800724a:	73fb      	strb	r3, [r7, #15]
          break;
 800724c:	e018      	b.n	8007280 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800724e:	6839      	ldr	r1, [r7, #0]
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 fc4b 	bl	8007aec <USBD_GetConfig>
          break;
 8007256:	e013      	b.n	8007280 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007258:	6839      	ldr	r1, [r7, #0]
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 fc7c 	bl	8007b58 <USBD_GetStatus>
          break;
 8007260:	e00e      	b.n	8007280 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007262:	6839      	ldr	r1, [r7, #0]
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 fcab 	bl	8007bc0 <USBD_SetFeature>
          break;
 800726a:	e009      	b.n	8007280 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800726c:	6839      	ldr	r1, [r7, #0]
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 fcba 	bl	8007be8 <USBD_ClrFeature>
          break;
 8007274:	e004      	b.n	8007280 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007276:	6839      	ldr	r1, [r7, #0]
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 fd11 	bl	8007ca0 <USBD_CtlError>
          break;
 800727e:	bf00      	nop
      }
      break;
 8007280:	e004      	b.n	800728c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007282:	6839      	ldr	r1, [r7, #0]
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 fd0b 	bl	8007ca0 <USBD_CtlError>
      break;
 800728a:	bf00      	nop
  }

  return ret;
 800728c:	7bfb      	ldrb	r3, [r7, #15]
}
 800728e:	4618      	mov	r0, r3
 8007290:	3710      	adds	r7, #16
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop

08007298 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072a2:	2300      	movs	r3, #0
 80072a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072ae:	2b40      	cmp	r3, #64	; 0x40
 80072b0:	d005      	beq.n	80072be <USBD_StdItfReq+0x26>
 80072b2:	2b40      	cmp	r3, #64	; 0x40
 80072b4:	d82f      	bhi.n	8007316 <USBD_StdItfReq+0x7e>
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d001      	beq.n	80072be <USBD_StdItfReq+0x26>
 80072ba:	2b20      	cmp	r3, #32
 80072bc:	d12b      	bne.n	8007316 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	3b01      	subs	r3, #1
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d81d      	bhi.n	8007308 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	889b      	ldrh	r3, [r3, #4]
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d813      	bhi.n	80072fe <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	6839      	ldr	r1, [r7, #0]
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	4798      	blx	r3
 80072e4:	4603      	mov	r3, r0
 80072e6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	88db      	ldrh	r3, [r3, #6]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d110      	bne.n	8007312 <USBD_StdItfReq+0x7a>
 80072f0:	7bfb      	ldrb	r3, [r7, #15]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d10d      	bne.n	8007312 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 fd80 	bl	8007dfc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80072fc:	e009      	b.n	8007312 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80072fe:	6839      	ldr	r1, [r7, #0]
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fccd 	bl	8007ca0 <USBD_CtlError>
          break;
 8007306:	e004      	b.n	8007312 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007308:	6839      	ldr	r1, [r7, #0]
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 fcc8 	bl	8007ca0 <USBD_CtlError>
          break;
 8007310:	e000      	b.n	8007314 <USBD_StdItfReq+0x7c>
          break;
 8007312:	bf00      	nop
      }
      break;
 8007314:	e004      	b.n	8007320 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007316:	6839      	ldr	r1, [r7, #0]
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 fcc1 	bl	8007ca0 <USBD_CtlError>
      break;
 800731e:	bf00      	nop
  }

  return ret;
 8007320:	7bfb      	ldrb	r3, [r7, #15]
}
 8007322:	4618      	mov	r0, r3
 8007324:	3710      	adds	r7, #16
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}

0800732a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800732a:	b580      	push	{r7, lr}
 800732c:	b084      	sub	sp, #16
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
 8007332:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007334:	2300      	movs	r3, #0
 8007336:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	889b      	ldrh	r3, [r3, #4]
 800733c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007346:	2b40      	cmp	r3, #64	; 0x40
 8007348:	d007      	beq.n	800735a <USBD_StdEPReq+0x30>
 800734a:	2b40      	cmp	r3, #64	; 0x40
 800734c:	f200 8145 	bhi.w	80075da <USBD_StdEPReq+0x2b0>
 8007350:	2b00      	cmp	r3, #0
 8007352:	d00c      	beq.n	800736e <USBD_StdEPReq+0x44>
 8007354:	2b20      	cmp	r3, #32
 8007356:	f040 8140 	bne.w	80075da <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	6839      	ldr	r1, [r7, #0]
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	4798      	blx	r3
 8007368:	4603      	mov	r3, r0
 800736a:	73fb      	strb	r3, [r7, #15]
      break;
 800736c:	e13a      	b.n	80075e4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	785b      	ldrb	r3, [r3, #1]
 8007372:	2b03      	cmp	r3, #3
 8007374:	d007      	beq.n	8007386 <USBD_StdEPReq+0x5c>
 8007376:	2b03      	cmp	r3, #3
 8007378:	f300 8129 	bgt.w	80075ce <USBD_StdEPReq+0x2a4>
 800737c:	2b00      	cmp	r3, #0
 800737e:	d07f      	beq.n	8007480 <USBD_StdEPReq+0x156>
 8007380:	2b01      	cmp	r3, #1
 8007382:	d03c      	beq.n	80073fe <USBD_StdEPReq+0xd4>
 8007384:	e123      	b.n	80075ce <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800738c:	b2db      	uxtb	r3, r3
 800738e:	2b02      	cmp	r3, #2
 8007390:	d002      	beq.n	8007398 <USBD_StdEPReq+0x6e>
 8007392:	2b03      	cmp	r3, #3
 8007394:	d016      	beq.n	80073c4 <USBD_StdEPReq+0x9a>
 8007396:	e02c      	b.n	80073f2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007398:	7bbb      	ldrb	r3, [r7, #14]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d00d      	beq.n	80073ba <USBD_StdEPReq+0x90>
 800739e:	7bbb      	ldrb	r3, [r7, #14]
 80073a0:	2b80      	cmp	r3, #128	; 0x80
 80073a2:	d00a      	beq.n	80073ba <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80073a4:	7bbb      	ldrb	r3, [r7, #14]
 80073a6:	4619      	mov	r1, r3
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f003 fec5 	bl	800b138 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80073ae:	2180      	movs	r1, #128	; 0x80
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f003 fec1 	bl	800b138 <USBD_LL_StallEP>
 80073b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073b8:	e020      	b.n	80073fc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80073ba:	6839      	ldr	r1, [r7, #0]
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 fc6f 	bl	8007ca0 <USBD_CtlError>
              break;
 80073c2:	e01b      	b.n	80073fc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	885b      	ldrh	r3, [r3, #2]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d10e      	bne.n	80073ea <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80073cc:	7bbb      	ldrb	r3, [r7, #14]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d00b      	beq.n	80073ea <USBD_StdEPReq+0xc0>
 80073d2:	7bbb      	ldrb	r3, [r7, #14]
 80073d4:	2b80      	cmp	r3, #128	; 0x80
 80073d6:	d008      	beq.n	80073ea <USBD_StdEPReq+0xc0>
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	88db      	ldrh	r3, [r3, #6]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d104      	bne.n	80073ea <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80073e0:	7bbb      	ldrb	r3, [r7, #14]
 80073e2:	4619      	mov	r1, r3
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f003 fea7 	bl	800b138 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 fd06 	bl	8007dfc <USBD_CtlSendStatus>

              break;
 80073f0:	e004      	b.n	80073fc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80073f2:	6839      	ldr	r1, [r7, #0]
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 fc53 	bl	8007ca0 <USBD_CtlError>
              break;
 80073fa:	bf00      	nop
          }
          break;
 80073fc:	e0ec      	b.n	80075d8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007404:	b2db      	uxtb	r3, r3
 8007406:	2b02      	cmp	r3, #2
 8007408:	d002      	beq.n	8007410 <USBD_StdEPReq+0xe6>
 800740a:	2b03      	cmp	r3, #3
 800740c:	d016      	beq.n	800743c <USBD_StdEPReq+0x112>
 800740e:	e030      	b.n	8007472 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007410:	7bbb      	ldrb	r3, [r7, #14]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00d      	beq.n	8007432 <USBD_StdEPReq+0x108>
 8007416:	7bbb      	ldrb	r3, [r7, #14]
 8007418:	2b80      	cmp	r3, #128	; 0x80
 800741a:	d00a      	beq.n	8007432 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800741c:	7bbb      	ldrb	r3, [r7, #14]
 800741e:	4619      	mov	r1, r3
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f003 fe89 	bl	800b138 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007426:	2180      	movs	r1, #128	; 0x80
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f003 fe85 	bl	800b138 <USBD_LL_StallEP>
 800742e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007430:	e025      	b.n	800747e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007432:	6839      	ldr	r1, [r7, #0]
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 fc33 	bl	8007ca0 <USBD_CtlError>
              break;
 800743a:	e020      	b.n	800747e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	885b      	ldrh	r3, [r3, #2]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d11b      	bne.n	800747c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007444:	7bbb      	ldrb	r3, [r7, #14]
 8007446:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800744a:	2b00      	cmp	r3, #0
 800744c:	d004      	beq.n	8007458 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800744e:	7bbb      	ldrb	r3, [r7, #14]
 8007450:	4619      	mov	r1, r3
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f003 fe8f 	bl	800b176 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 fccf 	bl	8007dfc <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	6839      	ldr	r1, [r7, #0]
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	4798      	blx	r3
 800746c:	4603      	mov	r3, r0
 800746e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007470:	e004      	b.n	800747c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007472:	6839      	ldr	r1, [r7, #0]
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 fc13 	bl	8007ca0 <USBD_CtlError>
              break;
 800747a:	e000      	b.n	800747e <USBD_StdEPReq+0x154>
              break;
 800747c:	bf00      	nop
          }
          break;
 800747e:	e0ab      	b.n	80075d8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007486:	b2db      	uxtb	r3, r3
 8007488:	2b02      	cmp	r3, #2
 800748a:	d002      	beq.n	8007492 <USBD_StdEPReq+0x168>
 800748c:	2b03      	cmp	r3, #3
 800748e:	d032      	beq.n	80074f6 <USBD_StdEPReq+0x1cc>
 8007490:	e097      	b.n	80075c2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007492:	7bbb      	ldrb	r3, [r7, #14]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d007      	beq.n	80074a8 <USBD_StdEPReq+0x17e>
 8007498:	7bbb      	ldrb	r3, [r7, #14]
 800749a:	2b80      	cmp	r3, #128	; 0x80
 800749c:	d004      	beq.n	80074a8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800749e:	6839      	ldr	r1, [r7, #0]
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 fbfd 	bl	8007ca0 <USBD_CtlError>
                break;
 80074a6:	e091      	b.n	80075cc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	da0b      	bge.n	80074c8 <USBD_StdEPReq+0x19e>
 80074b0:	7bbb      	ldrb	r3, [r7, #14]
 80074b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074b6:	4613      	mov	r3, r2
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	4413      	add	r3, r2
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	3310      	adds	r3, #16
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	4413      	add	r3, r2
 80074c4:	3304      	adds	r3, #4
 80074c6:	e00b      	b.n	80074e0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80074c8:	7bbb      	ldrb	r3, [r7, #14]
 80074ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074ce:	4613      	mov	r3, r2
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	4413      	add	r3, r2
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	4413      	add	r3, r2
 80074de:	3304      	adds	r3, #4
 80074e0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	2200      	movs	r2, #0
 80074e6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	2202      	movs	r2, #2
 80074ec:	4619      	mov	r1, r3
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 fc47 	bl	8007d82 <USBD_CtlSendData>
              break;
 80074f4:	e06a      	b.n	80075cc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80074f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	da11      	bge.n	8007522 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80074fe:	7bbb      	ldrb	r3, [r7, #14]
 8007500:	f003 020f 	and.w	r2, r3, #15
 8007504:	6879      	ldr	r1, [r7, #4]
 8007506:	4613      	mov	r3, r2
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4413      	add	r3, r2
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	440b      	add	r3, r1
 8007510:	3324      	adds	r3, #36	; 0x24
 8007512:	881b      	ldrh	r3, [r3, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d117      	bne.n	8007548 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007518:	6839      	ldr	r1, [r7, #0]
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 fbc0 	bl	8007ca0 <USBD_CtlError>
                  break;
 8007520:	e054      	b.n	80075cc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007522:	7bbb      	ldrb	r3, [r7, #14]
 8007524:	f003 020f 	and.w	r2, r3, #15
 8007528:	6879      	ldr	r1, [r7, #4]
 800752a:	4613      	mov	r3, r2
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	4413      	add	r3, r2
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	440b      	add	r3, r1
 8007534:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007538:	881b      	ldrh	r3, [r3, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d104      	bne.n	8007548 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800753e:	6839      	ldr	r1, [r7, #0]
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 fbad 	bl	8007ca0 <USBD_CtlError>
                  break;
 8007546:	e041      	b.n	80075cc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007548:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800754c:	2b00      	cmp	r3, #0
 800754e:	da0b      	bge.n	8007568 <USBD_StdEPReq+0x23e>
 8007550:	7bbb      	ldrb	r3, [r7, #14]
 8007552:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007556:	4613      	mov	r3, r2
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	4413      	add	r3, r2
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	3310      	adds	r3, #16
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	4413      	add	r3, r2
 8007564:	3304      	adds	r3, #4
 8007566:	e00b      	b.n	8007580 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007568:	7bbb      	ldrb	r3, [r7, #14]
 800756a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800756e:	4613      	mov	r3, r2
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	4413      	add	r3, r2
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	4413      	add	r3, r2
 800757e:	3304      	adds	r3, #4
 8007580:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007582:	7bbb      	ldrb	r3, [r7, #14]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d002      	beq.n	800758e <USBD_StdEPReq+0x264>
 8007588:	7bbb      	ldrb	r3, [r7, #14]
 800758a:	2b80      	cmp	r3, #128	; 0x80
 800758c:	d103      	bne.n	8007596 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	2200      	movs	r2, #0
 8007592:	601a      	str	r2, [r3, #0]
 8007594:	e00e      	b.n	80075b4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007596:	7bbb      	ldrb	r3, [r7, #14]
 8007598:	4619      	mov	r1, r3
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f003 fe0a 	bl	800b1b4 <USBD_LL_IsStallEP>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d003      	beq.n	80075ae <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	2201      	movs	r2, #1
 80075aa:	601a      	str	r2, [r3, #0]
 80075ac:	e002      	b.n	80075b4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	2200      	movs	r2, #0
 80075b2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	2202      	movs	r2, #2
 80075b8:	4619      	mov	r1, r3
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 fbe1 	bl	8007d82 <USBD_CtlSendData>
              break;
 80075c0:	e004      	b.n	80075cc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80075c2:	6839      	ldr	r1, [r7, #0]
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 fb6b 	bl	8007ca0 <USBD_CtlError>
              break;
 80075ca:	bf00      	nop
          }
          break;
 80075cc:	e004      	b.n	80075d8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80075ce:	6839      	ldr	r1, [r7, #0]
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 fb65 	bl	8007ca0 <USBD_CtlError>
          break;
 80075d6:	bf00      	nop
      }
      break;
 80075d8:	e004      	b.n	80075e4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80075da:	6839      	ldr	r1, [r7, #0]
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 fb5f 	bl	8007ca0 <USBD_CtlError>
      break;
 80075e2:	bf00      	nop
  }

  return ret;
 80075e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3710      	adds	r7, #16
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
	...

080075f0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075fa:	2300      	movs	r3, #0
 80075fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80075fe:	2300      	movs	r3, #0
 8007600:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007602:	2300      	movs	r3, #0
 8007604:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	885b      	ldrh	r3, [r3, #2]
 800760a:	0a1b      	lsrs	r3, r3, #8
 800760c:	b29b      	uxth	r3, r3
 800760e:	3b01      	subs	r3, #1
 8007610:	2b0e      	cmp	r3, #14
 8007612:	f200 8152 	bhi.w	80078ba <USBD_GetDescriptor+0x2ca>
 8007616:	a201      	add	r2, pc, #4	; (adr r2, 800761c <USBD_GetDescriptor+0x2c>)
 8007618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800761c:	0800768d 	.word	0x0800768d
 8007620:	080076a5 	.word	0x080076a5
 8007624:	080076e5 	.word	0x080076e5
 8007628:	080078bb 	.word	0x080078bb
 800762c:	080078bb 	.word	0x080078bb
 8007630:	0800785b 	.word	0x0800785b
 8007634:	08007887 	.word	0x08007887
 8007638:	080078bb 	.word	0x080078bb
 800763c:	080078bb 	.word	0x080078bb
 8007640:	080078bb 	.word	0x080078bb
 8007644:	080078bb 	.word	0x080078bb
 8007648:	080078bb 	.word	0x080078bb
 800764c:	080078bb 	.word	0x080078bb
 8007650:	080078bb 	.word	0x080078bb
 8007654:	08007659 	.word	0x08007659
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800765e:	69db      	ldr	r3, [r3, #28]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00b      	beq.n	800767c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800766a:	69db      	ldr	r3, [r3, #28]
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	7c12      	ldrb	r2, [r2, #16]
 8007670:	f107 0108 	add.w	r1, r7, #8
 8007674:	4610      	mov	r0, r2
 8007676:	4798      	blx	r3
 8007678:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800767a:	e126      	b.n	80078ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800767c:	6839      	ldr	r1, [r7, #0]
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 fb0e 	bl	8007ca0 <USBD_CtlError>
        err++;
 8007684:	7afb      	ldrb	r3, [r7, #11]
 8007686:	3301      	adds	r3, #1
 8007688:	72fb      	strb	r3, [r7, #11]
      break;
 800768a:	e11e      	b.n	80078ca <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	7c12      	ldrb	r2, [r2, #16]
 8007698:	f107 0108 	add.w	r1, r7, #8
 800769c:	4610      	mov	r0, r2
 800769e:	4798      	blx	r3
 80076a0:	60f8      	str	r0, [r7, #12]
      break;
 80076a2:	e112      	b.n	80078ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	7c1b      	ldrb	r3, [r3, #16]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d10d      	bne.n	80076c8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b4:	f107 0208 	add.w	r2, r7, #8
 80076b8:	4610      	mov	r0, r2
 80076ba:	4798      	blx	r3
 80076bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	3301      	adds	r3, #1
 80076c2:	2202      	movs	r2, #2
 80076c4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80076c6:	e100      	b.n	80078ca <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d0:	f107 0208 	add.w	r2, r7, #8
 80076d4:	4610      	mov	r0, r2
 80076d6:	4798      	blx	r3
 80076d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	3301      	adds	r3, #1
 80076de:	2202      	movs	r2, #2
 80076e0:	701a      	strb	r2, [r3, #0]
      break;
 80076e2:	e0f2      	b.n	80078ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	885b      	ldrh	r3, [r3, #2]
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	2b05      	cmp	r3, #5
 80076ec:	f200 80ac 	bhi.w	8007848 <USBD_GetDescriptor+0x258>
 80076f0:	a201      	add	r2, pc, #4	; (adr r2, 80076f8 <USBD_GetDescriptor+0x108>)
 80076f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f6:	bf00      	nop
 80076f8:	08007711 	.word	0x08007711
 80076fc:	08007745 	.word	0x08007745
 8007700:	08007779 	.word	0x08007779
 8007704:	080077ad 	.word	0x080077ad
 8007708:	080077e1 	.word	0x080077e1
 800770c:	08007815 	.word	0x08007815
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d00b      	beq.n	8007734 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	7c12      	ldrb	r2, [r2, #16]
 8007728:	f107 0108 	add.w	r1, r7, #8
 800772c:	4610      	mov	r0, r2
 800772e:	4798      	blx	r3
 8007730:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007732:	e091      	b.n	8007858 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007734:	6839      	ldr	r1, [r7, #0]
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 fab2 	bl	8007ca0 <USBD_CtlError>
            err++;
 800773c:	7afb      	ldrb	r3, [r7, #11]
 800773e:	3301      	adds	r3, #1
 8007740:	72fb      	strb	r3, [r7, #11]
          break;
 8007742:	e089      	b.n	8007858 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00b      	beq.n	8007768 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	7c12      	ldrb	r2, [r2, #16]
 800775c:	f107 0108 	add.w	r1, r7, #8
 8007760:	4610      	mov	r0, r2
 8007762:	4798      	blx	r3
 8007764:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007766:	e077      	b.n	8007858 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007768:	6839      	ldr	r1, [r7, #0]
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 fa98 	bl	8007ca0 <USBD_CtlError>
            err++;
 8007770:	7afb      	ldrb	r3, [r7, #11]
 8007772:	3301      	adds	r3, #1
 8007774:	72fb      	strb	r3, [r7, #11]
          break;
 8007776:	e06f      	b.n	8007858 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00b      	beq.n	800779c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	7c12      	ldrb	r2, [r2, #16]
 8007790:	f107 0108 	add.w	r1, r7, #8
 8007794:	4610      	mov	r0, r2
 8007796:	4798      	blx	r3
 8007798:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800779a:	e05d      	b.n	8007858 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800779c:	6839      	ldr	r1, [r7, #0]
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 fa7e 	bl	8007ca0 <USBD_CtlError>
            err++;
 80077a4:	7afb      	ldrb	r3, [r7, #11]
 80077a6:	3301      	adds	r3, #1
 80077a8:	72fb      	strb	r3, [r7, #11]
          break;
 80077aa:	e055      	b.n	8007858 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077b2:	691b      	ldr	r3, [r3, #16]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00b      	beq.n	80077d0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077be:	691b      	ldr	r3, [r3, #16]
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	7c12      	ldrb	r2, [r2, #16]
 80077c4:	f107 0108 	add.w	r1, r7, #8
 80077c8:	4610      	mov	r0, r2
 80077ca:	4798      	blx	r3
 80077cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077ce:	e043      	b.n	8007858 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80077d0:	6839      	ldr	r1, [r7, #0]
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 fa64 	bl	8007ca0 <USBD_CtlError>
            err++;
 80077d8:	7afb      	ldrb	r3, [r7, #11]
 80077da:	3301      	adds	r3, #1
 80077dc:	72fb      	strb	r3, [r7, #11]
          break;
 80077de:	e03b      	b.n	8007858 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077e6:	695b      	ldr	r3, [r3, #20]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d00b      	beq.n	8007804 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077f2:	695b      	ldr	r3, [r3, #20]
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	7c12      	ldrb	r2, [r2, #16]
 80077f8:	f107 0108 	add.w	r1, r7, #8
 80077fc:	4610      	mov	r0, r2
 80077fe:	4798      	blx	r3
 8007800:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007802:	e029      	b.n	8007858 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007804:	6839      	ldr	r1, [r7, #0]
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 fa4a 	bl	8007ca0 <USBD_CtlError>
            err++;
 800780c:	7afb      	ldrb	r3, [r7, #11]
 800780e:	3301      	adds	r3, #1
 8007810:	72fb      	strb	r3, [r7, #11]
          break;
 8007812:	e021      	b.n	8007858 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800781a:	699b      	ldr	r3, [r3, #24]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d00b      	beq.n	8007838 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007826:	699b      	ldr	r3, [r3, #24]
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	7c12      	ldrb	r2, [r2, #16]
 800782c:	f107 0108 	add.w	r1, r7, #8
 8007830:	4610      	mov	r0, r2
 8007832:	4798      	blx	r3
 8007834:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007836:	e00f      	b.n	8007858 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007838:	6839      	ldr	r1, [r7, #0]
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 fa30 	bl	8007ca0 <USBD_CtlError>
            err++;
 8007840:	7afb      	ldrb	r3, [r7, #11]
 8007842:	3301      	adds	r3, #1
 8007844:	72fb      	strb	r3, [r7, #11]
          break;
 8007846:	e007      	b.n	8007858 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007848:	6839      	ldr	r1, [r7, #0]
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 fa28 	bl	8007ca0 <USBD_CtlError>
          err++;
 8007850:	7afb      	ldrb	r3, [r7, #11]
 8007852:	3301      	adds	r3, #1
 8007854:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007856:	bf00      	nop
      }
      break;
 8007858:	e037      	b.n	80078ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	7c1b      	ldrb	r3, [r3, #16]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d109      	bne.n	8007876 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800786a:	f107 0208 	add.w	r2, r7, #8
 800786e:	4610      	mov	r0, r2
 8007870:	4798      	blx	r3
 8007872:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007874:	e029      	b.n	80078ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007876:	6839      	ldr	r1, [r7, #0]
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 fa11 	bl	8007ca0 <USBD_CtlError>
        err++;
 800787e:	7afb      	ldrb	r3, [r7, #11]
 8007880:	3301      	adds	r3, #1
 8007882:	72fb      	strb	r3, [r7, #11]
      break;
 8007884:	e021      	b.n	80078ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	7c1b      	ldrb	r3, [r3, #16]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10d      	bne.n	80078aa <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007896:	f107 0208 	add.w	r2, r7, #8
 800789a:	4610      	mov	r0, r2
 800789c:	4798      	blx	r3
 800789e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	3301      	adds	r3, #1
 80078a4:	2207      	movs	r2, #7
 80078a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80078a8:	e00f      	b.n	80078ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80078aa:	6839      	ldr	r1, [r7, #0]
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 f9f7 	bl	8007ca0 <USBD_CtlError>
        err++;
 80078b2:	7afb      	ldrb	r3, [r7, #11]
 80078b4:	3301      	adds	r3, #1
 80078b6:	72fb      	strb	r3, [r7, #11]
      break;
 80078b8:	e007      	b.n	80078ca <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80078ba:	6839      	ldr	r1, [r7, #0]
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 f9ef 	bl	8007ca0 <USBD_CtlError>
      err++;
 80078c2:	7afb      	ldrb	r3, [r7, #11]
 80078c4:	3301      	adds	r3, #1
 80078c6:	72fb      	strb	r3, [r7, #11]
      break;
 80078c8:	bf00      	nop
  }

  if (err != 0U)
 80078ca:	7afb      	ldrb	r3, [r7, #11]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d11e      	bne.n	800790e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	88db      	ldrh	r3, [r3, #6]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d016      	beq.n	8007906 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80078d8:	893b      	ldrh	r3, [r7, #8]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00e      	beq.n	80078fc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	88da      	ldrh	r2, [r3, #6]
 80078e2:	893b      	ldrh	r3, [r7, #8]
 80078e4:	4293      	cmp	r3, r2
 80078e6:	bf28      	it	cs
 80078e8:	4613      	movcs	r3, r2
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80078ee:	893b      	ldrh	r3, [r7, #8]
 80078f0:	461a      	mov	r2, r3
 80078f2:	68f9      	ldr	r1, [r7, #12]
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 fa44 	bl	8007d82 <USBD_CtlSendData>
 80078fa:	e009      	b.n	8007910 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80078fc:	6839      	ldr	r1, [r7, #0]
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f9ce 	bl	8007ca0 <USBD_CtlError>
 8007904:	e004      	b.n	8007910 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 fa78 	bl	8007dfc <USBD_CtlSendStatus>
 800790c:	e000      	b.n	8007910 <USBD_GetDescriptor+0x320>
    return;
 800790e:	bf00      	nop
  }
}
 8007910:	3710      	adds	r7, #16
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop

08007918 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	889b      	ldrh	r3, [r3, #4]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d131      	bne.n	800798e <USBD_SetAddress+0x76>
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	88db      	ldrh	r3, [r3, #6]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d12d      	bne.n	800798e <USBD_SetAddress+0x76>
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	885b      	ldrh	r3, [r3, #2]
 8007936:	2b7f      	cmp	r3, #127	; 0x7f
 8007938:	d829      	bhi.n	800798e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	885b      	ldrh	r3, [r3, #2]
 800793e:	b2db      	uxtb	r3, r3
 8007940:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007944:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800794c:	b2db      	uxtb	r3, r3
 800794e:	2b03      	cmp	r3, #3
 8007950:	d104      	bne.n	800795c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007952:	6839      	ldr	r1, [r7, #0]
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 f9a3 	bl	8007ca0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800795a:	e01d      	b.n	8007998 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	7bfa      	ldrb	r2, [r7, #15]
 8007960:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007964:	7bfb      	ldrb	r3, [r7, #15]
 8007966:	4619      	mov	r1, r3
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f003 fc4f 	bl	800b20c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 fa44 	bl	8007dfc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007974:	7bfb      	ldrb	r3, [r7, #15]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d004      	beq.n	8007984 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2202      	movs	r2, #2
 800797e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007982:	e009      	b.n	8007998 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800798c:	e004      	b.n	8007998 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800798e:	6839      	ldr	r1, [r7, #0]
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 f985 	bl	8007ca0 <USBD_CtlError>
  }
}
 8007996:	bf00      	nop
 8007998:	bf00      	nop
 800799a:	3710      	adds	r7, #16
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b084      	sub	sp, #16
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80079aa:	2300      	movs	r3, #0
 80079ac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	885b      	ldrh	r3, [r3, #2]
 80079b2:	b2da      	uxtb	r2, r3
 80079b4:	4b4c      	ldr	r3, [pc, #304]	; (8007ae8 <USBD_SetConfig+0x148>)
 80079b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80079b8:	4b4b      	ldr	r3, [pc, #300]	; (8007ae8 <USBD_SetConfig+0x148>)
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d905      	bls.n	80079cc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80079c0:	6839      	ldr	r1, [r7, #0]
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 f96c 	bl	8007ca0 <USBD_CtlError>
    return USBD_FAIL;
 80079c8:	2303      	movs	r3, #3
 80079ca:	e088      	b.n	8007ade <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	2b02      	cmp	r3, #2
 80079d6:	d002      	beq.n	80079de <USBD_SetConfig+0x3e>
 80079d8:	2b03      	cmp	r3, #3
 80079da:	d025      	beq.n	8007a28 <USBD_SetConfig+0x88>
 80079dc:	e071      	b.n	8007ac2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80079de:	4b42      	ldr	r3, [pc, #264]	; (8007ae8 <USBD_SetConfig+0x148>)
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d01c      	beq.n	8007a20 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80079e6:	4b40      	ldr	r3, [pc, #256]	; (8007ae8 <USBD_SetConfig+0x148>)
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	461a      	mov	r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80079f0:	4b3d      	ldr	r3, [pc, #244]	; (8007ae8 <USBD_SetConfig+0x148>)
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	4619      	mov	r1, r3
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f7ff f91e 	bl	8006c38 <USBD_SetClassConfig>
 80079fc:	4603      	mov	r3, r0
 80079fe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007a00:	7bfb      	ldrb	r3, [r7, #15]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d004      	beq.n	8007a10 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007a06:	6839      	ldr	r1, [r7, #0]
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 f949 	bl	8007ca0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007a0e:	e065      	b.n	8007adc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 f9f3 	bl	8007dfc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2203      	movs	r2, #3
 8007a1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007a1e:	e05d      	b.n	8007adc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 f9eb 	bl	8007dfc <USBD_CtlSendStatus>
      break;
 8007a26:	e059      	b.n	8007adc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007a28:	4b2f      	ldr	r3, [pc, #188]	; (8007ae8 <USBD_SetConfig+0x148>)
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d112      	bne.n	8007a56 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2202      	movs	r2, #2
 8007a34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007a38:	4b2b      	ldr	r3, [pc, #172]	; (8007ae8 <USBD_SetConfig+0x148>)
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a42:	4b29      	ldr	r3, [pc, #164]	; (8007ae8 <USBD_SetConfig+0x148>)
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	4619      	mov	r1, r3
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f7ff f911 	bl	8006c70 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 f9d4 	bl	8007dfc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007a54:	e042      	b.n	8007adc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007a56:	4b24      	ldr	r3, [pc, #144]	; (8007ae8 <USBD_SetConfig+0x148>)
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d02a      	beq.n	8007aba <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f7ff f8ff 	bl	8006c70 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007a72:	4b1d      	ldr	r3, [pc, #116]	; (8007ae8 <USBD_SetConfig+0x148>)
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	461a      	mov	r2, r3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a7c:	4b1a      	ldr	r3, [pc, #104]	; (8007ae8 <USBD_SetConfig+0x148>)
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	4619      	mov	r1, r3
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f7ff f8d8 	bl	8006c38 <USBD_SetClassConfig>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007a8c:	7bfb      	ldrb	r3, [r7, #15]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00f      	beq.n	8007ab2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007a92:	6839      	ldr	r1, [r7, #0]
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 f903 	bl	8007ca0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f7ff f8e4 	bl	8006c70 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2202      	movs	r2, #2
 8007aac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007ab0:	e014      	b.n	8007adc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 f9a2 	bl	8007dfc <USBD_CtlSendStatus>
      break;
 8007ab8:	e010      	b.n	8007adc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 f99e 	bl	8007dfc <USBD_CtlSendStatus>
      break;
 8007ac0:	e00c      	b.n	8007adc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007ac2:	6839      	ldr	r1, [r7, #0]
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 f8eb 	bl	8007ca0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007aca:	4b07      	ldr	r3, [pc, #28]	; (8007ae8 <USBD_SetConfig+0x148>)
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	4619      	mov	r1, r3
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f7ff f8cd 	bl	8006c70 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007ad6:	2303      	movs	r3, #3
 8007ad8:	73fb      	strb	r3, [r7, #15]
      break;
 8007ada:	bf00      	nop
  }

  return ret;
 8007adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3710      	adds	r7, #16
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	200001a1 	.word	0x200001a1

08007aec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	88db      	ldrh	r3, [r3, #6]
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d004      	beq.n	8007b08 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007afe:	6839      	ldr	r1, [r7, #0]
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 f8cd 	bl	8007ca0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007b06:	e023      	b.n	8007b50 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	dc02      	bgt.n	8007b1a <USBD_GetConfig+0x2e>
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	dc03      	bgt.n	8007b20 <USBD_GetConfig+0x34>
 8007b18:	e015      	b.n	8007b46 <USBD_GetConfig+0x5a>
 8007b1a:	2b03      	cmp	r3, #3
 8007b1c:	d00b      	beq.n	8007b36 <USBD_GetConfig+0x4a>
 8007b1e:	e012      	b.n	8007b46 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	3308      	adds	r3, #8
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f927 	bl	8007d82 <USBD_CtlSendData>
        break;
 8007b34:	e00c      	b.n	8007b50 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	3304      	adds	r3, #4
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 f91f 	bl	8007d82 <USBD_CtlSendData>
        break;
 8007b44:	e004      	b.n	8007b50 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007b46:	6839      	ldr	r1, [r7, #0]
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 f8a9 	bl	8007ca0 <USBD_CtlError>
        break;
 8007b4e:	bf00      	nop
}
 8007b50:	bf00      	nop
 8007b52:	3708      	adds	r7, #8
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	2b02      	cmp	r3, #2
 8007b6e:	d81e      	bhi.n	8007bae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	88db      	ldrh	r3, [r3, #6]
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d004      	beq.n	8007b82 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007b78:	6839      	ldr	r1, [r7, #0]
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 f890 	bl	8007ca0 <USBD_CtlError>
        break;
 8007b80:	e01a      	b.n	8007bb8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2201      	movs	r2, #1
 8007b86:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d005      	beq.n	8007b9e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	f043 0202 	orr.w	r2, r3, #2
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	330c      	adds	r3, #12
 8007ba2:	2202      	movs	r2, #2
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 f8eb 	bl	8007d82 <USBD_CtlSendData>
      break;
 8007bac:	e004      	b.n	8007bb8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007bae:	6839      	ldr	r1, [r7, #0]
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 f875 	bl	8007ca0 <USBD_CtlError>
      break;
 8007bb6:	bf00      	nop
  }
}
 8007bb8:	bf00      	nop
 8007bba:	3708      	adds	r7, #8
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	885b      	ldrh	r3, [r3, #2]
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d106      	bne.n	8007be0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 f90e 	bl	8007dfc <USBD_CtlSendStatus>
  }
}
 8007be0:	bf00      	nop
 8007be2:	3708      	adds	r7, #8
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	2b02      	cmp	r3, #2
 8007bfe:	d80b      	bhi.n	8007c18 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	885b      	ldrh	r3, [r3, #2]
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d10c      	bne.n	8007c22 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 f8f3 	bl	8007dfc <USBD_CtlSendStatus>
      }
      break;
 8007c16:	e004      	b.n	8007c22 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007c18:	6839      	ldr	r1, [r7, #0]
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 f840 	bl	8007ca0 <USBD_CtlError>
      break;
 8007c20:	e000      	b.n	8007c24 <USBD_ClrFeature+0x3c>
      break;
 8007c22:	bf00      	nop
  }
}
 8007c24:	bf00      	nop
 8007c26:	3708      	adds	r7, #8
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	781a      	ldrb	r2, [r3, #0]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	3301      	adds	r3, #1
 8007c46:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	781a      	ldrb	r2, [r3, #0]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	3301      	adds	r3, #1
 8007c54:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007c56:	68f8      	ldr	r0, [r7, #12]
 8007c58:	f7ff fa91 	bl	800717e <SWAPBYTE>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	461a      	mov	r2, r3
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	3301      	adds	r3, #1
 8007c68:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f7ff fa84 	bl	800717e <SWAPBYTE>
 8007c76:	4603      	mov	r3, r0
 8007c78:	461a      	mov	r2, r3
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	3301      	adds	r3, #1
 8007c82:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	3301      	adds	r3, #1
 8007c88:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	f7ff fa77 	bl	800717e <SWAPBYTE>
 8007c90:	4603      	mov	r3, r0
 8007c92:	461a      	mov	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	80da      	strh	r2, [r3, #6]
}
 8007c98:	bf00      	nop
 8007c9a:	3710      	adds	r7, #16
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b082      	sub	sp, #8
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007caa:	2180      	movs	r1, #128	; 0x80
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f003 fa43 	bl	800b138 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007cb2:	2100      	movs	r1, #0
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f003 fa3f 	bl	800b138 <USBD_LL_StallEP>
}
 8007cba:	bf00      	nop
 8007cbc:	3708      	adds	r7, #8
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b086      	sub	sp, #24
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	60f8      	str	r0, [r7, #12]
 8007cca:	60b9      	str	r1, [r7, #8]
 8007ccc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d036      	beq.n	8007d46 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007cdc:	6938      	ldr	r0, [r7, #16]
 8007cde:	f000 f836 	bl	8007d4e <USBD_GetLen>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	005b      	lsls	r3, r3, #1
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007cf0:	7dfb      	ldrb	r3, [r7, #23]
 8007cf2:	68ba      	ldr	r2, [r7, #8]
 8007cf4:	4413      	add	r3, r2
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	7812      	ldrb	r2, [r2, #0]
 8007cfa:	701a      	strb	r2, [r3, #0]
  idx++;
 8007cfc:	7dfb      	ldrb	r3, [r7, #23]
 8007cfe:	3301      	adds	r3, #1
 8007d00:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007d02:	7dfb      	ldrb	r3, [r7, #23]
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	4413      	add	r3, r2
 8007d08:	2203      	movs	r2, #3
 8007d0a:	701a      	strb	r2, [r3, #0]
  idx++;
 8007d0c:	7dfb      	ldrb	r3, [r7, #23]
 8007d0e:	3301      	adds	r3, #1
 8007d10:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007d12:	e013      	b.n	8007d3c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007d14:	7dfb      	ldrb	r3, [r7, #23]
 8007d16:	68ba      	ldr	r2, [r7, #8]
 8007d18:	4413      	add	r3, r2
 8007d1a:	693a      	ldr	r2, [r7, #16]
 8007d1c:	7812      	ldrb	r2, [r2, #0]
 8007d1e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	3301      	adds	r3, #1
 8007d24:	613b      	str	r3, [r7, #16]
    idx++;
 8007d26:	7dfb      	ldrb	r3, [r7, #23]
 8007d28:	3301      	adds	r3, #1
 8007d2a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007d2c:	7dfb      	ldrb	r3, [r7, #23]
 8007d2e:	68ba      	ldr	r2, [r7, #8]
 8007d30:	4413      	add	r3, r2
 8007d32:	2200      	movs	r2, #0
 8007d34:	701a      	strb	r2, [r3, #0]
    idx++;
 8007d36:	7dfb      	ldrb	r3, [r7, #23]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1e7      	bne.n	8007d14 <USBD_GetString+0x52>
 8007d44:	e000      	b.n	8007d48 <USBD_GetString+0x86>
    return;
 8007d46:	bf00      	nop
  }
}
 8007d48:	3718      	adds	r7, #24
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007d4e:	b480      	push	{r7}
 8007d50:	b085      	sub	sp, #20
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007d56:	2300      	movs	r3, #0
 8007d58:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007d5e:	e005      	b.n	8007d6c <USBD_GetLen+0x1e>
  {
    len++;
 8007d60:	7bfb      	ldrb	r3, [r7, #15]
 8007d62:	3301      	adds	r3, #1
 8007d64:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	3301      	adds	r3, #1
 8007d6a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d1f5      	bne.n	8007d60 <USBD_GetLen+0x12>
  }

  return len;
 8007d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3714      	adds	r7, #20
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr

08007d82 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b084      	sub	sp, #16
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	60f8      	str	r0, [r7, #12]
 8007d8a:	60b9      	str	r1, [r7, #8]
 8007d8c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2202      	movs	r2, #2
 8007d92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	68ba      	ldr	r2, [r7, #8]
 8007da6:	2100      	movs	r1, #0
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	f003 fa4e 	bl	800b24a <USBD_LL_Transmit>

  return USBD_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3710      	adds	r7, #16
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	60b9      	str	r1, [r7, #8]
 8007dc2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	68ba      	ldr	r2, [r7, #8]
 8007dc8:	2100      	movs	r1, #0
 8007dca:	68f8      	ldr	r0, [r7, #12]
 8007dcc:	f003 fa3d 	bl	800b24a <USBD_LL_Transmit>

  return USBD_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3710      	adds	r7, #16
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b084      	sub	sp, #16
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	60f8      	str	r0, [r7, #12]
 8007de2:	60b9      	str	r1, [r7, #8]
 8007de4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	68ba      	ldr	r2, [r7, #8]
 8007dea:	2100      	movs	r1, #0
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	f003 fa4d 	bl	800b28c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3710      	adds	r7, #16
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2204      	movs	r2, #4
 8007e08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	2200      	movs	r2, #0
 8007e10:	2100      	movs	r1, #0
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f003 fa19 	bl	800b24a <USBD_LL_Transmit>

  return USBD_OK;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3708      	adds	r7, #8
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b082      	sub	sp, #8
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2205      	movs	r2, #5
 8007e2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e32:	2300      	movs	r3, #0
 8007e34:	2200      	movs	r2, #0
 8007e36:	2100      	movs	r1, #0
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f003 fa27 	bl	800b28c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e3e:	2300      	movs	r3, #0
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3708      	adds	r7, #8
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <__NVIC_SetPriority>:
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	4603      	mov	r3, r0
 8007e50:	6039      	str	r1, [r7, #0]
 8007e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	db0a      	blt.n	8007e72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	b2da      	uxtb	r2, r3
 8007e60:	490c      	ldr	r1, [pc, #48]	; (8007e94 <__NVIC_SetPriority+0x4c>)
 8007e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e66:	0112      	lsls	r2, r2, #4
 8007e68:	b2d2      	uxtb	r2, r2
 8007e6a:	440b      	add	r3, r1
 8007e6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007e70:	e00a      	b.n	8007e88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	b2da      	uxtb	r2, r3
 8007e76:	4908      	ldr	r1, [pc, #32]	; (8007e98 <__NVIC_SetPriority+0x50>)
 8007e78:	79fb      	ldrb	r3, [r7, #7]
 8007e7a:	f003 030f 	and.w	r3, r3, #15
 8007e7e:	3b04      	subs	r3, #4
 8007e80:	0112      	lsls	r2, r2, #4
 8007e82:	b2d2      	uxtb	r2, r2
 8007e84:	440b      	add	r3, r1
 8007e86:	761a      	strb	r2, [r3, #24]
}
 8007e88:	bf00      	nop
 8007e8a:	370c      	adds	r7, #12
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr
 8007e94:	e000e100 	.word	0xe000e100
 8007e98:	e000ed00 	.word	0xe000ed00

08007e9c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007ea0:	4b05      	ldr	r3, [pc, #20]	; (8007eb8 <SysTick_Handler+0x1c>)
 8007ea2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007ea4:	f001 fd28 	bl	80098f8 <xTaskGetSchedulerState>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d001      	beq.n	8007eb2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007eae:	f002 fb13 	bl	800a4d8 <xPortSysTickHandler>
  }
}
 8007eb2:	bf00      	nop
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	e000e010 	.word	0xe000e010

08007ebc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	f06f 0004 	mvn.w	r0, #4
 8007ec6:	f7ff ffbf 	bl	8007e48 <__NVIC_SetPriority>
#endif
}
 8007eca:	bf00      	nop
 8007ecc:	bd80      	pop	{r7, pc}
	...

08007ed0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ed6:	f3ef 8305 	mrs	r3, IPSR
 8007eda:	603b      	str	r3, [r7, #0]
  return(result);
 8007edc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d003      	beq.n	8007eea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007ee2:	f06f 0305 	mvn.w	r3, #5
 8007ee6:	607b      	str	r3, [r7, #4]
 8007ee8:	e00c      	b.n	8007f04 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007eea:	4b0a      	ldr	r3, [pc, #40]	; (8007f14 <osKernelInitialize+0x44>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d105      	bne.n	8007efe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007ef2:	4b08      	ldr	r3, [pc, #32]	; (8007f14 <osKernelInitialize+0x44>)
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	607b      	str	r3, [r7, #4]
 8007efc:	e002      	b.n	8007f04 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007efe:	f04f 33ff 	mov.w	r3, #4294967295
 8007f02:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007f04:	687b      	ldr	r3, [r7, #4]
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	370c      	adds	r7, #12
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr
 8007f12:	bf00      	nop
 8007f14:	200001a4 	.word	0x200001a4

08007f18 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f1e:	f3ef 8305 	mrs	r3, IPSR
 8007f22:	603b      	str	r3, [r7, #0]
  return(result);
 8007f24:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d003      	beq.n	8007f32 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007f2a:	f06f 0305 	mvn.w	r3, #5
 8007f2e:	607b      	str	r3, [r7, #4]
 8007f30:	e010      	b.n	8007f54 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007f32:	4b0b      	ldr	r3, [pc, #44]	; (8007f60 <osKernelStart+0x48>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d109      	bne.n	8007f4e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007f3a:	f7ff ffbf 	bl	8007ebc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007f3e:	4b08      	ldr	r3, [pc, #32]	; (8007f60 <osKernelStart+0x48>)
 8007f40:	2202      	movs	r2, #2
 8007f42:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007f44:	f001 f87c 	bl	8009040 <vTaskStartScheduler>
      stat = osOK;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	607b      	str	r3, [r7, #4]
 8007f4c:	e002      	b.n	8007f54 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8007f52:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007f54:	687b      	ldr	r3, [r7, #4]
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3708      	adds	r7, #8
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	200001a4 	.word	0x200001a4

08007f64 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b08e      	sub	sp, #56	; 0x38
 8007f68:	af04      	add	r7, sp, #16
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007f70:	2300      	movs	r3, #0
 8007f72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f74:	f3ef 8305 	mrs	r3, IPSR
 8007f78:	617b      	str	r3, [r7, #20]
  return(result);
 8007f7a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d17e      	bne.n	800807e <osThreadNew+0x11a>
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d07b      	beq.n	800807e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007f86:	2380      	movs	r3, #128	; 0x80
 8007f88:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007f8a:	2318      	movs	r3, #24
 8007f8c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007f92:	f04f 33ff 	mov.w	r3, #4294967295
 8007f96:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d045      	beq.n	800802a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d002      	beq.n	8007fac <osThreadNew+0x48>
        name = attr->name;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	699b      	ldr	r3, [r3, #24]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d002      	beq.n	8007fba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	699b      	ldr	r3, [r3, #24]
 8007fb8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d008      	beq.n	8007fd2 <osThreadNew+0x6e>
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	2b38      	cmp	r3, #56	; 0x38
 8007fc4:	d805      	bhi.n	8007fd2 <osThreadNew+0x6e>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	f003 0301 	and.w	r3, r3, #1
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d001      	beq.n	8007fd6 <osThreadNew+0x72>
        return (NULL);
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	e054      	b.n	8008080 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	695b      	ldr	r3, [r3, #20]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d003      	beq.n	8007fe6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	695b      	ldr	r3, [r3, #20]
 8007fe2:	089b      	lsrs	r3, r3, #2
 8007fe4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00e      	beq.n	800800c <osThreadNew+0xa8>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	2bbb      	cmp	r3, #187	; 0xbb
 8007ff4:	d90a      	bls.n	800800c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d006      	beq.n	800800c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	695b      	ldr	r3, [r3, #20]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d002      	beq.n	800800c <osThreadNew+0xa8>
        mem = 1;
 8008006:	2301      	movs	r3, #1
 8008008:	61bb      	str	r3, [r7, #24]
 800800a:	e010      	b.n	800802e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d10c      	bne.n	800802e <osThreadNew+0xca>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d108      	bne.n	800802e <osThreadNew+0xca>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	691b      	ldr	r3, [r3, #16]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d104      	bne.n	800802e <osThreadNew+0xca>
          mem = 0;
 8008024:	2300      	movs	r3, #0
 8008026:	61bb      	str	r3, [r7, #24]
 8008028:	e001      	b.n	800802e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800802a:	2300      	movs	r3, #0
 800802c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800802e:	69bb      	ldr	r3, [r7, #24]
 8008030:	2b01      	cmp	r3, #1
 8008032:	d110      	bne.n	8008056 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800803c:	9202      	str	r2, [sp, #8]
 800803e:	9301      	str	r3, [sp, #4]
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	9300      	str	r3, [sp, #0]
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	6a3a      	ldr	r2, [r7, #32]
 8008048:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800804a:	68f8      	ldr	r0, [r7, #12]
 800804c:	f000 fe0c 	bl	8008c68 <xTaskCreateStatic>
 8008050:	4603      	mov	r3, r0
 8008052:	613b      	str	r3, [r7, #16]
 8008054:	e013      	b.n	800807e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d110      	bne.n	800807e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800805c:	6a3b      	ldr	r3, [r7, #32]
 800805e:	b29a      	uxth	r2, r3
 8008060:	f107 0310 	add.w	r3, r7, #16
 8008064:	9301      	str	r3, [sp, #4]
 8008066:	69fb      	ldr	r3, [r7, #28]
 8008068:	9300      	str	r3, [sp, #0]
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f000 fe57 	bl	8008d22 <xTaskCreate>
 8008074:	4603      	mov	r3, r0
 8008076:	2b01      	cmp	r3, #1
 8008078:	d001      	beq.n	800807e <osThreadNew+0x11a>
            hTask = NULL;
 800807a:	2300      	movs	r3, #0
 800807c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800807e:	693b      	ldr	r3, [r7, #16]
}
 8008080:	4618      	mov	r0, r3
 8008082:	3728      	adds	r7, #40	; 0x28
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008090:	f3ef 8305 	mrs	r3, IPSR
 8008094:	60bb      	str	r3, [r7, #8]
  return(result);
 8008096:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008098:	2b00      	cmp	r3, #0
 800809a:	d003      	beq.n	80080a4 <osDelay+0x1c>
    stat = osErrorISR;
 800809c:	f06f 0305 	mvn.w	r3, #5
 80080a0:	60fb      	str	r3, [r7, #12]
 80080a2:	e007      	b.n	80080b4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80080a4:	2300      	movs	r3, #0
 80080a6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d002      	beq.n	80080b4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 ff92 	bl	8008fd8 <vTaskDelay>
    }
  }

  return (stat);
 80080b4:	68fb      	ldr	r3, [r7, #12]
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
	...

080080c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80080c0:	b480      	push	{r7}
 80080c2:	b085      	sub	sp, #20
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	4a07      	ldr	r2, [pc, #28]	; (80080ec <vApplicationGetIdleTaskMemory+0x2c>)
 80080d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	4a06      	ldr	r2, [pc, #24]	; (80080f0 <vApplicationGetIdleTaskMemory+0x30>)
 80080d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2280      	movs	r2, #128	; 0x80
 80080dc:	601a      	str	r2, [r3, #0]
}
 80080de:	bf00      	nop
 80080e0:	3714      	adds	r7, #20
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	200001a8 	.word	0x200001a8
 80080f0:	20000264 	.word	0x20000264

080080f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80080f4:	b480      	push	{r7}
 80080f6:	b085      	sub	sp, #20
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	60b9      	str	r1, [r7, #8]
 80080fe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	4a07      	ldr	r2, [pc, #28]	; (8008120 <vApplicationGetTimerTaskMemory+0x2c>)
 8008104:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	4a06      	ldr	r2, [pc, #24]	; (8008124 <vApplicationGetTimerTaskMemory+0x30>)
 800810a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008112:	601a      	str	r2, [r3, #0]
}
 8008114:	bf00      	nop
 8008116:	3714      	adds	r7, #20
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr
 8008120:	20000464 	.word	0x20000464
 8008124:	20000520 	.word	0x20000520

08008128 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f103 0208 	add.w	r2, r3, #8
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f04f 32ff 	mov.w	r2, #4294967295
 8008140:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f103 0208 	add.w	r2, r3, #8
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f103 0208 	add.w	r2, r3, #8
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800815c:	bf00      	nop
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008176:	bf00      	nop
 8008178:	370c      	adds	r7, #12
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr

08008182 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008182:	b480      	push	{r7}
 8008184:	b085      	sub	sp, #20
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
 800818a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	68fa      	ldr	r2, [r7, #12]
 8008196:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	689a      	ldr	r2, [r3, #8]
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	683a      	ldr	r2, [r7, #0]
 80081a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	683a      	ldr	r2, [r7, #0]
 80081ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	1c5a      	adds	r2, r3, #1
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	601a      	str	r2, [r3, #0]
}
 80081be:	bf00      	nop
 80081c0:	3714      	adds	r7, #20
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr

080081ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80081ca:	b480      	push	{r7}
 80081cc:	b085      	sub	sp, #20
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
 80081d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081e0:	d103      	bne.n	80081ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	691b      	ldr	r3, [r3, #16]
 80081e6:	60fb      	str	r3, [r7, #12]
 80081e8:	e00c      	b.n	8008204 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	3308      	adds	r3, #8
 80081ee:	60fb      	str	r3, [r7, #12]
 80081f0:	e002      	b.n	80081f8 <vListInsert+0x2e>
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	60fb      	str	r3, [r7, #12]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68ba      	ldr	r2, [r7, #8]
 8008200:	429a      	cmp	r2, r3
 8008202:	d2f6      	bcs.n	80081f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	685a      	ldr	r2, [r3, #4]
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	683a      	ldr	r2, [r7, #0]
 8008212:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	68fa      	ldr	r2, [r7, #12]
 8008218:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	683a      	ldr	r2, [r7, #0]
 800821e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	1c5a      	adds	r2, r3, #1
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	601a      	str	r2, [r3, #0]
}
 8008230:	bf00      	nop
 8008232:	3714      	adds	r7, #20
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800823c:	b480      	push	{r7}
 800823e:	b085      	sub	sp, #20
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	691b      	ldr	r3, [r3, #16]
 8008248:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	6892      	ldr	r2, [r2, #8]
 8008252:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	6852      	ldr	r2, [r2, #4]
 800825c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	429a      	cmp	r2, r3
 8008266:	d103      	bne.n	8008270 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	689a      	ldr	r2, [r3, #8]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	1e5a      	subs	r2, r3, #1
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
}
 8008284:	4618      	mov	r0, r3
 8008286:	3714      	adds	r7, #20
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d10a      	bne.n	80082ba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80082a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a8:	f383 8811 	msr	BASEPRI, r3
 80082ac:	f3bf 8f6f 	isb	sy
 80082b0:	f3bf 8f4f 	dsb	sy
 80082b4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80082b6:	bf00      	nop
 80082b8:	e7fe      	b.n	80082b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80082ba:	f002 f87b 	bl	800a3b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082c6:	68f9      	ldr	r1, [r7, #12]
 80082c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80082ca:	fb01 f303 	mul.w	r3, r1, r3
 80082ce:	441a      	add	r2, r3
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2200      	movs	r2, #0
 80082d8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082ea:	3b01      	subs	r3, #1
 80082ec:	68f9      	ldr	r1, [r7, #12]
 80082ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80082f0:	fb01 f303 	mul.w	r3, r1, r3
 80082f4:	441a      	add	r2, r3
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	22ff      	movs	r2, #255	; 0xff
 80082fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	22ff      	movs	r2, #255	; 0xff
 8008306:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d114      	bne.n	800833a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	691b      	ldr	r3, [r3, #16]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d01a      	beq.n	800834e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	3310      	adds	r3, #16
 800831c:	4618      	mov	r0, r3
 800831e:	f001 f929 	bl	8009574 <xTaskRemoveFromEventList>
 8008322:	4603      	mov	r3, r0
 8008324:	2b00      	cmp	r3, #0
 8008326:	d012      	beq.n	800834e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008328:	4b0c      	ldr	r3, [pc, #48]	; (800835c <xQueueGenericReset+0xcc>)
 800832a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800832e:	601a      	str	r2, [r3, #0]
 8008330:	f3bf 8f4f 	dsb	sy
 8008334:	f3bf 8f6f 	isb	sy
 8008338:	e009      	b.n	800834e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	3310      	adds	r3, #16
 800833e:	4618      	mov	r0, r3
 8008340:	f7ff fef2 	bl	8008128 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	3324      	adds	r3, #36	; 0x24
 8008348:	4618      	mov	r0, r3
 800834a:	f7ff feed 	bl	8008128 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800834e:	f002 f861 	bl	800a414 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008352:	2301      	movs	r3, #1
}
 8008354:	4618      	mov	r0, r3
 8008356:	3710      	adds	r7, #16
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}
 800835c:	e000ed04 	.word	0xe000ed04

08008360 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008360:	b580      	push	{r7, lr}
 8008362:	b08e      	sub	sp, #56	; 0x38
 8008364:	af02      	add	r7, sp, #8
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	607a      	str	r2, [r7, #4]
 800836c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d10a      	bne.n	800838a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008378:	f383 8811 	msr	BASEPRI, r3
 800837c:	f3bf 8f6f 	isb	sy
 8008380:	f3bf 8f4f 	dsb	sy
 8008384:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008386:	bf00      	nop
 8008388:	e7fe      	b.n	8008388 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d10a      	bne.n	80083a6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008394:	f383 8811 	msr	BASEPRI, r3
 8008398:	f3bf 8f6f 	isb	sy
 800839c:	f3bf 8f4f 	dsb	sy
 80083a0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80083a2:	bf00      	nop
 80083a4:	e7fe      	b.n	80083a4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d002      	beq.n	80083b2 <xQueueGenericCreateStatic+0x52>
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d001      	beq.n	80083b6 <xQueueGenericCreateStatic+0x56>
 80083b2:	2301      	movs	r3, #1
 80083b4:	e000      	b.n	80083b8 <xQueueGenericCreateStatic+0x58>
 80083b6:	2300      	movs	r3, #0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d10a      	bne.n	80083d2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80083bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c0:	f383 8811 	msr	BASEPRI, r3
 80083c4:	f3bf 8f6f 	isb	sy
 80083c8:	f3bf 8f4f 	dsb	sy
 80083cc:	623b      	str	r3, [r7, #32]
}
 80083ce:	bf00      	nop
 80083d0:	e7fe      	b.n	80083d0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d102      	bne.n	80083de <xQueueGenericCreateStatic+0x7e>
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d101      	bne.n	80083e2 <xQueueGenericCreateStatic+0x82>
 80083de:	2301      	movs	r3, #1
 80083e0:	e000      	b.n	80083e4 <xQueueGenericCreateStatic+0x84>
 80083e2:	2300      	movs	r3, #0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d10a      	bne.n	80083fe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80083e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ec:	f383 8811 	msr	BASEPRI, r3
 80083f0:	f3bf 8f6f 	isb	sy
 80083f4:	f3bf 8f4f 	dsb	sy
 80083f8:	61fb      	str	r3, [r7, #28]
}
 80083fa:	bf00      	nop
 80083fc:	e7fe      	b.n	80083fc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80083fe:	2350      	movs	r3, #80	; 0x50
 8008400:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	2b50      	cmp	r3, #80	; 0x50
 8008406:	d00a      	beq.n	800841e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840c:	f383 8811 	msr	BASEPRI, r3
 8008410:	f3bf 8f6f 	isb	sy
 8008414:	f3bf 8f4f 	dsb	sy
 8008418:	61bb      	str	r3, [r7, #24]
}
 800841a:	bf00      	nop
 800841c:	e7fe      	b.n	800841c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800841e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00d      	beq.n	8008446 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800842a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842c:	2201      	movs	r2, #1
 800842e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008432:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008438:	9300      	str	r3, [sp, #0]
 800843a:	4613      	mov	r3, r2
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	68b9      	ldr	r1, [r7, #8]
 8008440:	68f8      	ldr	r0, [r7, #12]
 8008442:	f000 f805 	bl	8008450 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008448:	4618      	mov	r0, r3
 800844a:	3730      	adds	r7, #48	; 0x30
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	607a      	str	r2, [r7, #4]
 800845c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d103      	bne.n	800846c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008464:	69bb      	ldr	r3, [r7, #24]
 8008466:	69ba      	ldr	r2, [r7, #24]
 8008468:	601a      	str	r2, [r3, #0]
 800846a:	e002      	b.n	8008472 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800846c:	69bb      	ldr	r3, [r7, #24]
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008472:	69bb      	ldr	r3, [r7, #24]
 8008474:	68fa      	ldr	r2, [r7, #12]
 8008476:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008478:	69bb      	ldr	r3, [r7, #24]
 800847a:	68ba      	ldr	r2, [r7, #8]
 800847c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800847e:	2101      	movs	r1, #1
 8008480:	69b8      	ldr	r0, [r7, #24]
 8008482:	f7ff ff05 	bl	8008290 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008486:	69bb      	ldr	r3, [r7, #24]
 8008488:	78fa      	ldrb	r2, [r7, #3]
 800848a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800848e:	bf00      	nop
 8008490:	3710      	adds	r7, #16
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
	...

08008498 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b08e      	sub	sp, #56	; 0x38
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	607a      	str	r2, [r7, #4]
 80084a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80084a6:	2300      	movs	r3, #0
 80084a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80084ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d10a      	bne.n	80084ca <xQueueGenericSend+0x32>
	__asm volatile
 80084b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b8:	f383 8811 	msr	BASEPRI, r3
 80084bc:	f3bf 8f6f 	isb	sy
 80084c0:	f3bf 8f4f 	dsb	sy
 80084c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80084c6:	bf00      	nop
 80084c8:	e7fe      	b.n	80084c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d103      	bne.n	80084d8 <xQueueGenericSend+0x40>
 80084d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d101      	bne.n	80084dc <xQueueGenericSend+0x44>
 80084d8:	2301      	movs	r3, #1
 80084da:	e000      	b.n	80084de <xQueueGenericSend+0x46>
 80084dc:	2300      	movs	r3, #0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d10a      	bne.n	80084f8 <xQueueGenericSend+0x60>
	__asm volatile
 80084e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e6:	f383 8811 	msr	BASEPRI, r3
 80084ea:	f3bf 8f6f 	isb	sy
 80084ee:	f3bf 8f4f 	dsb	sy
 80084f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80084f4:	bf00      	nop
 80084f6:	e7fe      	b.n	80084f6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	2b02      	cmp	r3, #2
 80084fc:	d103      	bne.n	8008506 <xQueueGenericSend+0x6e>
 80084fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008502:	2b01      	cmp	r3, #1
 8008504:	d101      	bne.n	800850a <xQueueGenericSend+0x72>
 8008506:	2301      	movs	r3, #1
 8008508:	e000      	b.n	800850c <xQueueGenericSend+0x74>
 800850a:	2300      	movs	r3, #0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d10a      	bne.n	8008526 <xQueueGenericSend+0x8e>
	__asm volatile
 8008510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008514:	f383 8811 	msr	BASEPRI, r3
 8008518:	f3bf 8f6f 	isb	sy
 800851c:	f3bf 8f4f 	dsb	sy
 8008520:	623b      	str	r3, [r7, #32]
}
 8008522:	bf00      	nop
 8008524:	e7fe      	b.n	8008524 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008526:	f001 f9e7 	bl	80098f8 <xTaskGetSchedulerState>
 800852a:	4603      	mov	r3, r0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d102      	bne.n	8008536 <xQueueGenericSend+0x9e>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d101      	bne.n	800853a <xQueueGenericSend+0xa2>
 8008536:	2301      	movs	r3, #1
 8008538:	e000      	b.n	800853c <xQueueGenericSend+0xa4>
 800853a:	2300      	movs	r3, #0
 800853c:	2b00      	cmp	r3, #0
 800853e:	d10a      	bne.n	8008556 <xQueueGenericSend+0xbe>
	__asm volatile
 8008540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008544:	f383 8811 	msr	BASEPRI, r3
 8008548:	f3bf 8f6f 	isb	sy
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	61fb      	str	r3, [r7, #28]
}
 8008552:	bf00      	nop
 8008554:	e7fe      	b.n	8008554 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008556:	f001 ff2d 	bl	800a3b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800855a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800855c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800855e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008562:	429a      	cmp	r2, r3
 8008564:	d302      	bcc.n	800856c <xQueueGenericSend+0xd4>
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	2b02      	cmp	r3, #2
 800856a:	d129      	bne.n	80085c0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800856c:	683a      	ldr	r2, [r7, #0]
 800856e:	68b9      	ldr	r1, [r7, #8]
 8008570:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008572:	f000 fa0b 	bl	800898c <prvCopyDataToQueue>
 8008576:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857c:	2b00      	cmp	r3, #0
 800857e:	d010      	beq.n	80085a2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008582:	3324      	adds	r3, #36	; 0x24
 8008584:	4618      	mov	r0, r3
 8008586:	f000 fff5 	bl	8009574 <xTaskRemoveFromEventList>
 800858a:	4603      	mov	r3, r0
 800858c:	2b00      	cmp	r3, #0
 800858e:	d013      	beq.n	80085b8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008590:	4b3f      	ldr	r3, [pc, #252]	; (8008690 <xQueueGenericSend+0x1f8>)
 8008592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008596:	601a      	str	r2, [r3, #0]
 8008598:	f3bf 8f4f 	dsb	sy
 800859c:	f3bf 8f6f 	isb	sy
 80085a0:	e00a      	b.n	80085b8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80085a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d007      	beq.n	80085b8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80085a8:	4b39      	ldr	r3, [pc, #228]	; (8008690 <xQueueGenericSend+0x1f8>)
 80085aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085ae:	601a      	str	r2, [r3, #0]
 80085b0:	f3bf 8f4f 	dsb	sy
 80085b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80085b8:	f001 ff2c 	bl	800a414 <vPortExitCritical>
				return pdPASS;
 80085bc:	2301      	movs	r3, #1
 80085be:	e063      	b.n	8008688 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d103      	bne.n	80085ce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80085c6:	f001 ff25 	bl	800a414 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80085ca:	2300      	movs	r3, #0
 80085cc:	e05c      	b.n	8008688 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80085ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d106      	bne.n	80085e2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80085d4:	f107 0314 	add.w	r3, r7, #20
 80085d8:	4618      	mov	r0, r3
 80085da:	f001 f82f 	bl	800963c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80085de:	2301      	movs	r3, #1
 80085e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80085e2:	f001 ff17 	bl	800a414 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80085e6:	f000 fd9b 	bl	8009120 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80085ea:	f001 fee3 	bl	800a3b4 <vPortEnterCritical>
 80085ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80085f4:	b25b      	sxtb	r3, r3
 80085f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085fa:	d103      	bne.n	8008604 <xQueueGenericSend+0x16c>
 80085fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fe:	2200      	movs	r2, #0
 8008600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008606:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800860a:	b25b      	sxtb	r3, r3
 800860c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008610:	d103      	bne.n	800861a <xQueueGenericSend+0x182>
 8008612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008614:	2200      	movs	r2, #0
 8008616:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800861a:	f001 fefb 	bl	800a414 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800861e:	1d3a      	adds	r2, r7, #4
 8008620:	f107 0314 	add.w	r3, r7, #20
 8008624:	4611      	mov	r1, r2
 8008626:	4618      	mov	r0, r3
 8008628:	f001 f81e 	bl	8009668 <xTaskCheckForTimeOut>
 800862c:	4603      	mov	r3, r0
 800862e:	2b00      	cmp	r3, #0
 8008630:	d124      	bne.n	800867c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008632:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008634:	f000 faa2 	bl	8008b7c <prvIsQueueFull>
 8008638:	4603      	mov	r3, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d018      	beq.n	8008670 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800863e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008640:	3310      	adds	r3, #16
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	4611      	mov	r1, r2
 8008646:	4618      	mov	r0, r3
 8008648:	f000 ff44 	bl	80094d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800864c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800864e:	f000 fa2d 	bl	8008aac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008652:	f000 fd73 	bl	800913c <xTaskResumeAll>
 8008656:	4603      	mov	r3, r0
 8008658:	2b00      	cmp	r3, #0
 800865a:	f47f af7c 	bne.w	8008556 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800865e:	4b0c      	ldr	r3, [pc, #48]	; (8008690 <xQueueGenericSend+0x1f8>)
 8008660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008664:	601a      	str	r2, [r3, #0]
 8008666:	f3bf 8f4f 	dsb	sy
 800866a:	f3bf 8f6f 	isb	sy
 800866e:	e772      	b.n	8008556 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008670:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008672:	f000 fa1b 	bl	8008aac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008676:	f000 fd61 	bl	800913c <xTaskResumeAll>
 800867a:	e76c      	b.n	8008556 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800867c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800867e:	f000 fa15 	bl	8008aac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008682:	f000 fd5b 	bl	800913c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008686:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008688:	4618      	mov	r0, r3
 800868a:	3738      	adds	r7, #56	; 0x38
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}
 8008690:	e000ed04 	.word	0xe000ed04

08008694 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b090      	sub	sp, #64	; 0x40
 8008698:	af00      	add	r7, sp, #0
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	60b9      	str	r1, [r7, #8]
 800869e:	607a      	str	r2, [r7, #4]
 80086a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80086a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d10a      	bne.n	80086c2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80086ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b0:	f383 8811 	msr	BASEPRI, r3
 80086b4:	f3bf 8f6f 	isb	sy
 80086b8:	f3bf 8f4f 	dsb	sy
 80086bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80086be:	bf00      	nop
 80086c0:	e7fe      	b.n	80086c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d103      	bne.n	80086d0 <xQueueGenericSendFromISR+0x3c>
 80086c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d101      	bne.n	80086d4 <xQueueGenericSendFromISR+0x40>
 80086d0:	2301      	movs	r3, #1
 80086d2:	e000      	b.n	80086d6 <xQueueGenericSendFromISR+0x42>
 80086d4:	2300      	movs	r3, #0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d10a      	bne.n	80086f0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80086da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086de:	f383 8811 	msr	BASEPRI, r3
 80086e2:	f3bf 8f6f 	isb	sy
 80086e6:	f3bf 8f4f 	dsb	sy
 80086ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80086ec:	bf00      	nop
 80086ee:	e7fe      	b.n	80086ee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	2b02      	cmp	r3, #2
 80086f4:	d103      	bne.n	80086fe <xQueueGenericSendFromISR+0x6a>
 80086f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d101      	bne.n	8008702 <xQueueGenericSendFromISR+0x6e>
 80086fe:	2301      	movs	r3, #1
 8008700:	e000      	b.n	8008704 <xQueueGenericSendFromISR+0x70>
 8008702:	2300      	movs	r3, #0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d10a      	bne.n	800871e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800870c:	f383 8811 	msr	BASEPRI, r3
 8008710:	f3bf 8f6f 	isb	sy
 8008714:	f3bf 8f4f 	dsb	sy
 8008718:	623b      	str	r3, [r7, #32]
}
 800871a:	bf00      	nop
 800871c:	e7fe      	b.n	800871c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800871e:	f001 ff2b 	bl	800a578 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008722:	f3ef 8211 	mrs	r2, BASEPRI
 8008726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872a:	f383 8811 	msr	BASEPRI, r3
 800872e:	f3bf 8f6f 	isb	sy
 8008732:	f3bf 8f4f 	dsb	sy
 8008736:	61fa      	str	r2, [r7, #28]
 8008738:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800873a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800873c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800873e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008740:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008746:	429a      	cmp	r2, r3
 8008748:	d302      	bcc.n	8008750 <xQueueGenericSendFromISR+0xbc>
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	2b02      	cmp	r3, #2
 800874e:	d12f      	bne.n	80087b0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008752:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800875a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800875c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800875e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008760:	683a      	ldr	r2, [r7, #0]
 8008762:	68b9      	ldr	r1, [r7, #8]
 8008764:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008766:	f000 f911 	bl	800898c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800876a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800876e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008772:	d112      	bne.n	800879a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008778:	2b00      	cmp	r3, #0
 800877a:	d016      	beq.n	80087aa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800877c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800877e:	3324      	adds	r3, #36	; 0x24
 8008780:	4618      	mov	r0, r3
 8008782:	f000 fef7 	bl	8009574 <xTaskRemoveFromEventList>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d00e      	beq.n	80087aa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00b      	beq.n	80087aa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2201      	movs	r2, #1
 8008796:	601a      	str	r2, [r3, #0]
 8008798:	e007      	b.n	80087aa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800879a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800879e:	3301      	adds	r3, #1
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	b25a      	sxtb	r2, r3
 80087a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80087aa:	2301      	movs	r3, #1
 80087ac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80087ae:	e001      	b.n	80087b4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80087b0:	2300      	movs	r3, #0
 80087b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087b6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80087be:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80087c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3740      	adds	r7, #64	; 0x40
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
	...

080087cc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b08c      	sub	sp, #48	; 0x30
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80087d8:	2300      	movs	r3, #0
 80087da:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80087e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d10a      	bne.n	80087fc <xQueueReceive+0x30>
	__asm volatile
 80087e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ea:	f383 8811 	msr	BASEPRI, r3
 80087ee:	f3bf 8f6f 	isb	sy
 80087f2:	f3bf 8f4f 	dsb	sy
 80087f6:	623b      	str	r3, [r7, #32]
}
 80087f8:	bf00      	nop
 80087fa:	e7fe      	b.n	80087fa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d103      	bne.n	800880a <xQueueReceive+0x3e>
 8008802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008806:	2b00      	cmp	r3, #0
 8008808:	d101      	bne.n	800880e <xQueueReceive+0x42>
 800880a:	2301      	movs	r3, #1
 800880c:	e000      	b.n	8008810 <xQueueReceive+0x44>
 800880e:	2300      	movs	r3, #0
 8008810:	2b00      	cmp	r3, #0
 8008812:	d10a      	bne.n	800882a <xQueueReceive+0x5e>
	__asm volatile
 8008814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008818:	f383 8811 	msr	BASEPRI, r3
 800881c:	f3bf 8f6f 	isb	sy
 8008820:	f3bf 8f4f 	dsb	sy
 8008824:	61fb      	str	r3, [r7, #28]
}
 8008826:	bf00      	nop
 8008828:	e7fe      	b.n	8008828 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800882a:	f001 f865 	bl	80098f8 <xTaskGetSchedulerState>
 800882e:	4603      	mov	r3, r0
 8008830:	2b00      	cmp	r3, #0
 8008832:	d102      	bne.n	800883a <xQueueReceive+0x6e>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d101      	bne.n	800883e <xQueueReceive+0x72>
 800883a:	2301      	movs	r3, #1
 800883c:	e000      	b.n	8008840 <xQueueReceive+0x74>
 800883e:	2300      	movs	r3, #0
 8008840:	2b00      	cmp	r3, #0
 8008842:	d10a      	bne.n	800885a <xQueueReceive+0x8e>
	__asm volatile
 8008844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008848:	f383 8811 	msr	BASEPRI, r3
 800884c:	f3bf 8f6f 	isb	sy
 8008850:	f3bf 8f4f 	dsb	sy
 8008854:	61bb      	str	r3, [r7, #24]
}
 8008856:	bf00      	nop
 8008858:	e7fe      	b.n	8008858 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800885a:	f001 fdab 	bl	800a3b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800885e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008862:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008866:	2b00      	cmp	r3, #0
 8008868:	d01f      	beq.n	80088aa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800886a:	68b9      	ldr	r1, [r7, #8]
 800886c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800886e:	f000 f8f7 	bl	8008a60 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008874:	1e5a      	subs	r2, r3, #1
 8008876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008878:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800887a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d00f      	beq.n	80088a2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008884:	3310      	adds	r3, #16
 8008886:	4618      	mov	r0, r3
 8008888:	f000 fe74 	bl	8009574 <xTaskRemoveFromEventList>
 800888c:	4603      	mov	r3, r0
 800888e:	2b00      	cmp	r3, #0
 8008890:	d007      	beq.n	80088a2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008892:	4b3d      	ldr	r3, [pc, #244]	; (8008988 <xQueueReceive+0x1bc>)
 8008894:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008898:	601a      	str	r2, [r3, #0]
 800889a:	f3bf 8f4f 	dsb	sy
 800889e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80088a2:	f001 fdb7 	bl	800a414 <vPortExitCritical>
				return pdPASS;
 80088a6:	2301      	movs	r3, #1
 80088a8:	e069      	b.n	800897e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d103      	bne.n	80088b8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80088b0:	f001 fdb0 	bl	800a414 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80088b4:	2300      	movs	r3, #0
 80088b6:	e062      	b.n	800897e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80088b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d106      	bne.n	80088cc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80088be:	f107 0310 	add.w	r3, r7, #16
 80088c2:	4618      	mov	r0, r3
 80088c4:	f000 feba 	bl	800963c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80088c8:	2301      	movs	r3, #1
 80088ca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80088cc:	f001 fda2 	bl	800a414 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80088d0:	f000 fc26 	bl	8009120 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80088d4:	f001 fd6e 	bl	800a3b4 <vPortEnterCritical>
 80088d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088de:	b25b      	sxtb	r3, r3
 80088e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e4:	d103      	bne.n	80088ee <xQueueReceive+0x122>
 80088e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e8:	2200      	movs	r2, #0
 80088ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088f4:	b25b      	sxtb	r3, r3
 80088f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088fa:	d103      	bne.n	8008904 <xQueueReceive+0x138>
 80088fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088fe:	2200      	movs	r2, #0
 8008900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008904:	f001 fd86 	bl	800a414 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008908:	1d3a      	adds	r2, r7, #4
 800890a:	f107 0310 	add.w	r3, r7, #16
 800890e:	4611      	mov	r1, r2
 8008910:	4618      	mov	r0, r3
 8008912:	f000 fea9 	bl	8009668 <xTaskCheckForTimeOut>
 8008916:	4603      	mov	r3, r0
 8008918:	2b00      	cmp	r3, #0
 800891a:	d123      	bne.n	8008964 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800891c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800891e:	f000 f917 	bl	8008b50 <prvIsQueueEmpty>
 8008922:	4603      	mov	r3, r0
 8008924:	2b00      	cmp	r3, #0
 8008926:	d017      	beq.n	8008958 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892a:	3324      	adds	r3, #36	; 0x24
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	4611      	mov	r1, r2
 8008930:	4618      	mov	r0, r3
 8008932:	f000 fdcf 	bl	80094d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008936:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008938:	f000 f8b8 	bl	8008aac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800893c:	f000 fbfe 	bl	800913c <xTaskResumeAll>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	d189      	bne.n	800885a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008946:	4b10      	ldr	r3, [pc, #64]	; (8008988 <xQueueReceive+0x1bc>)
 8008948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800894c:	601a      	str	r2, [r3, #0]
 800894e:	f3bf 8f4f 	dsb	sy
 8008952:	f3bf 8f6f 	isb	sy
 8008956:	e780      	b.n	800885a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008958:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800895a:	f000 f8a7 	bl	8008aac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800895e:	f000 fbed 	bl	800913c <xTaskResumeAll>
 8008962:	e77a      	b.n	800885a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008964:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008966:	f000 f8a1 	bl	8008aac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800896a:	f000 fbe7 	bl	800913c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800896e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008970:	f000 f8ee 	bl	8008b50 <prvIsQueueEmpty>
 8008974:	4603      	mov	r3, r0
 8008976:	2b00      	cmp	r3, #0
 8008978:	f43f af6f 	beq.w	800885a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800897c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800897e:	4618      	mov	r0, r3
 8008980:	3730      	adds	r7, #48	; 0x30
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop
 8008988:	e000ed04 	.word	0xe000ed04

0800898c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b086      	sub	sp, #24
 8008990:	af00      	add	r7, sp, #0
 8008992:	60f8      	str	r0, [r7, #12]
 8008994:	60b9      	str	r1, [r7, #8]
 8008996:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008998:	2300      	movs	r3, #0
 800899a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d10d      	bne.n	80089c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d14d      	bne.n	8008a4e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	4618      	mov	r0, r3
 80089b8:	f000 ffbc 	bl	8009934 <xTaskPriorityDisinherit>
 80089bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2200      	movs	r2, #0
 80089c2:	609a      	str	r2, [r3, #8]
 80089c4:	e043      	b.n	8008a4e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d119      	bne.n	8008a00 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6858      	ldr	r0, [r3, #4]
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089d4:	461a      	mov	r2, r3
 80089d6:	68b9      	ldr	r1, [r7, #8]
 80089d8:	f002 fd1a 	bl	800b410 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	685a      	ldr	r2, [r3, #4]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089e4:	441a      	add	r2, r3
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	685a      	ldr	r2, [r3, #4]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d32b      	bcc.n	8008a4e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	605a      	str	r2, [r3, #4]
 80089fe:	e026      	b.n	8008a4e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	68d8      	ldr	r0, [r3, #12]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a08:	461a      	mov	r2, r3
 8008a0a:	68b9      	ldr	r1, [r7, #8]
 8008a0c:	f002 fd00 	bl	800b410 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	68da      	ldr	r2, [r3, #12]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a18:	425b      	negs	r3, r3
 8008a1a:	441a      	add	r2, r3
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	68da      	ldr	r2, [r3, #12]
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d207      	bcs.n	8008a3c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	689a      	ldr	r2, [r3, #8]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a34:	425b      	negs	r3, r3
 8008a36:	441a      	add	r2, r3
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2b02      	cmp	r3, #2
 8008a40:	d105      	bne.n	8008a4e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d002      	beq.n	8008a4e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	3b01      	subs	r3, #1
 8008a4c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	1c5a      	adds	r2, r3, #1
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008a56:	697b      	ldr	r3, [r7, #20]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3718      	adds	r7, #24
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d018      	beq.n	8008aa4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	68da      	ldr	r2, [r3, #12]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a7a:	441a      	add	r2, r3
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	68da      	ldr	r2, [r3, #12]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d303      	bcc.n	8008a94 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	68d9      	ldr	r1, [r3, #12]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	6838      	ldr	r0, [r7, #0]
 8008aa0:	f002 fcb6 	bl	800b410 <memcpy>
	}
}
 8008aa4:	bf00      	nop
 8008aa6:	3708      	adds	r7, #8
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008ab4:	f001 fc7e 	bl	800a3b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008abe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ac0:	e011      	b.n	8008ae6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d012      	beq.n	8008af0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	3324      	adds	r3, #36	; 0x24
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f000 fd50 	bl	8009574 <xTaskRemoveFromEventList>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d001      	beq.n	8008ade <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008ada:	f000 fe27 	bl	800972c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008ade:	7bfb      	ldrb	r3, [r7, #15]
 8008ae0:	3b01      	subs	r3, #1
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	dce9      	bgt.n	8008ac2 <prvUnlockQueue+0x16>
 8008aee:	e000      	b.n	8008af2 <prvUnlockQueue+0x46>
					break;
 8008af0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	22ff      	movs	r2, #255	; 0xff
 8008af6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008afa:	f001 fc8b 	bl	800a414 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008afe:	f001 fc59 	bl	800a3b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b0a:	e011      	b.n	8008b30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	691b      	ldr	r3, [r3, #16]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d012      	beq.n	8008b3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	3310      	adds	r3, #16
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f000 fd2b 	bl	8009574 <xTaskRemoveFromEventList>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d001      	beq.n	8008b28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008b24:	f000 fe02 	bl	800972c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008b28:	7bbb      	ldrb	r3, [r7, #14]
 8008b2a:	3b01      	subs	r3, #1
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	dce9      	bgt.n	8008b0c <prvUnlockQueue+0x60>
 8008b38:	e000      	b.n	8008b3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008b3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	22ff      	movs	r2, #255	; 0xff
 8008b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008b44:	f001 fc66 	bl	800a414 <vPortExitCritical>
}
 8008b48:	bf00      	nop
 8008b4a:	3710      	adds	r7, #16
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b58:	f001 fc2c 	bl	800a3b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d102      	bne.n	8008b6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008b64:	2301      	movs	r3, #1
 8008b66:	60fb      	str	r3, [r7, #12]
 8008b68:	e001      	b.n	8008b6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008b6e:	f001 fc51 	bl	800a414 <vPortExitCritical>

	return xReturn;
 8008b72:	68fb      	ldr	r3, [r7, #12]
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3710      	adds	r7, #16
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b84:	f001 fc16 	bl	800a3b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d102      	bne.n	8008b9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008b94:	2301      	movs	r3, #1
 8008b96:	60fb      	str	r3, [r7, #12]
 8008b98:	e001      	b.n	8008b9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008b9e:	f001 fc39 	bl	800a414 <vPortExitCritical>

	return xReturn;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3710      	adds	r7, #16
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008bac:	b480      	push	{r7}
 8008bae:	b085      	sub	sp, #20
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	60fb      	str	r3, [r7, #12]
 8008bba:	e014      	b.n	8008be6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008bbc:	4a0f      	ldr	r2, [pc, #60]	; (8008bfc <vQueueAddToRegistry+0x50>)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d10b      	bne.n	8008be0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008bc8:	490c      	ldr	r1, [pc, #48]	; (8008bfc <vQueueAddToRegistry+0x50>)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	683a      	ldr	r2, [r7, #0]
 8008bce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008bd2:	4a0a      	ldr	r2, [pc, #40]	; (8008bfc <vQueueAddToRegistry+0x50>)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	00db      	lsls	r3, r3, #3
 8008bd8:	4413      	add	r3, r2
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008bde:	e006      	b.n	8008bee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	3301      	adds	r3, #1
 8008be4:	60fb      	str	r3, [r7, #12]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2b07      	cmp	r3, #7
 8008bea:	d9e7      	bls.n	8008bbc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008bec:	bf00      	nop
 8008bee:	bf00      	nop
 8008bf0:	3714      	adds	r7, #20
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr
 8008bfa:	bf00      	nop
 8008bfc:	20004f6c 	.word	0x20004f6c

08008c00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b086      	sub	sp, #24
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	60f8      	str	r0, [r7, #12]
 8008c08:	60b9      	str	r1, [r7, #8]
 8008c0a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008c10:	f001 fbd0 	bl	800a3b4 <vPortEnterCritical>
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c1a:	b25b      	sxtb	r3, r3
 8008c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c20:	d103      	bne.n	8008c2a <vQueueWaitForMessageRestricted+0x2a>
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	2200      	movs	r2, #0
 8008c26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c30:	b25b      	sxtb	r3, r3
 8008c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c36:	d103      	bne.n	8008c40 <vQueueWaitForMessageRestricted+0x40>
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c40:	f001 fbe8 	bl	800a414 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d106      	bne.n	8008c5a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	3324      	adds	r3, #36	; 0x24
 8008c50:	687a      	ldr	r2, [r7, #4]
 8008c52:	68b9      	ldr	r1, [r7, #8]
 8008c54:	4618      	mov	r0, r3
 8008c56:	f000 fc61 	bl	800951c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008c5a:	6978      	ldr	r0, [r7, #20]
 8008c5c:	f7ff ff26 	bl	8008aac <prvUnlockQueue>
	}
 8008c60:	bf00      	nop
 8008c62:	3718      	adds	r7, #24
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b08e      	sub	sp, #56	; 0x38
 8008c6c:	af04      	add	r7, sp, #16
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	607a      	str	r2, [r7, #4]
 8008c74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d10a      	bne.n	8008c92 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c80:	f383 8811 	msr	BASEPRI, r3
 8008c84:	f3bf 8f6f 	isb	sy
 8008c88:	f3bf 8f4f 	dsb	sy
 8008c8c:	623b      	str	r3, [r7, #32]
}
 8008c8e:	bf00      	nop
 8008c90:	e7fe      	b.n	8008c90 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d10a      	bne.n	8008cae <xTaskCreateStatic+0x46>
	__asm volatile
 8008c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c9c:	f383 8811 	msr	BASEPRI, r3
 8008ca0:	f3bf 8f6f 	isb	sy
 8008ca4:	f3bf 8f4f 	dsb	sy
 8008ca8:	61fb      	str	r3, [r7, #28]
}
 8008caa:	bf00      	nop
 8008cac:	e7fe      	b.n	8008cac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008cae:	23bc      	movs	r3, #188	; 0xbc
 8008cb0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	2bbc      	cmp	r3, #188	; 0xbc
 8008cb6:	d00a      	beq.n	8008cce <xTaskCreateStatic+0x66>
	__asm volatile
 8008cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cbc:	f383 8811 	msr	BASEPRI, r3
 8008cc0:	f3bf 8f6f 	isb	sy
 8008cc4:	f3bf 8f4f 	dsb	sy
 8008cc8:	61bb      	str	r3, [r7, #24]
}
 8008cca:	bf00      	nop
 8008ccc:	e7fe      	b.n	8008ccc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008cce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d01e      	beq.n	8008d14 <xTaskCreateStatic+0xac>
 8008cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d01b      	beq.n	8008d14 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cde:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ce4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce8:	2202      	movs	r2, #2
 8008cea:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008cee:	2300      	movs	r3, #0
 8008cf0:	9303      	str	r3, [sp, #12]
 8008cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf4:	9302      	str	r3, [sp, #8]
 8008cf6:	f107 0314 	add.w	r3, r7, #20
 8008cfa:	9301      	str	r3, [sp, #4]
 8008cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cfe:	9300      	str	r3, [sp, #0]
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	68b9      	ldr	r1, [r7, #8]
 8008d06:	68f8      	ldr	r0, [r7, #12]
 8008d08:	f000 f850 	bl	8008dac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d0e:	f000 f8f3 	bl	8008ef8 <prvAddNewTaskToReadyList>
 8008d12:	e001      	b.n	8008d18 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008d14:	2300      	movs	r3, #0
 8008d16:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008d18:	697b      	ldr	r3, [r7, #20]
	}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3728      	adds	r7, #40	; 0x28
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b08c      	sub	sp, #48	; 0x30
 8008d26:	af04      	add	r7, sp, #16
 8008d28:	60f8      	str	r0, [r7, #12]
 8008d2a:	60b9      	str	r1, [r7, #8]
 8008d2c:	603b      	str	r3, [r7, #0]
 8008d2e:	4613      	mov	r3, r2
 8008d30:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008d32:	88fb      	ldrh	r3, [r7, #6]
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	4618      	mov	r0, r3
 8008d38:	f001 fc5e 	bl	800a5f8 <pvPortMalloc>
 8008d3c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d00e      	beq.n	8008d62 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008d44:	20bc      	movs	r0, #188	; 0xbc
 8008d46:	f001 fc57 	bl	800a5f8 <pvPortMalloc>
 8008d4a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d003      	beq.n	8008d5a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008d52:	69fb      	ldr	r3, [r7, #28]
 8008d54:	697a      	ldr	r2, [r7, #20]
 8008d56:	631a      	str	r2, [r3, #48]	; 0x30
 8008d58:	e005      	b.n	8008d66 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008d5a:	6978      	ldr	r0, [r7, #20]
 8008d5c:	f001 fd18 	bl	800a790 <vPortFree>
 8008d60:	e001      	b.n	8008d66 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008d62:	2300      	movs	r3, #0
 8008d64:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d017      	beq.n	8008d9c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008d6c:	69fb      	ldr	r3, [r7, #28]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008d74:	88fa      	ldrh	r2, [r7, #6]
 8008d76:	2300      	movs	r3, #0
 8008d78:	9303      	str	r3, [sp, #12]
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	9302      	str	r3, [sp, #8]
 8008d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d80:	9301      	str	r3, [sp, #4]
 8008d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d84:	9300      	str	r3, [sp, #0]
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	68b9      	ldr	r1, [r7, #8]
 8008d8a:	68f8      	ldr	r0, [r7, #12]
 8008d8c:	f000 f80e 	bl	8008dac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d90:	69f8      	ldr	r0, [r7, #28]
 8008d92:	f000 f8b1 	bl	8008ef8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008d96:	2301      	movs	r3, #1
 8008d98:	61bb      	str	r3, [r7, #24]
 8008d9a:	e002      	b.n	8008da2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8008da0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008da2:	69bb      	ldr	r3, [r7, #24]
	}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3720      	adds	r7, #32
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b088      	sub	sp, #32
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	60b9      	str	r1, [r7, #8]
 8008db6:	607a      	str	r2, [r7, #4]
 8008db8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dbc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	009b      	lsls	r3, r3, #2
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	21a5      	movs	r1, #165	; 0xa5
 8008dc6:	f002 fb31 	bl	800b42c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008dd4:	3b01      	subs	r3, #1
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	4413      	add	r3, r2
 8008dda:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008ddc:	69bb      	ldr	r3, [r7, #24]
 8008dde:	f023 0307 	bic.w	r3, r3, #7
 8008de2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008de4:	69bb      	ldr	r3, [r7, #24]
 8008de6:	f003 0307 	and.w	r3, r3, #7
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d00a      	beq.n	8008e04 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df2:	f383 8811 	msr	BASEPRI, r3
 8008df6:	f3bf 8f6f 	isb	sy
 8008dfa:	f3bf 8f4f 	dsb	sy
 8008dfe:	617b      	str	r3, [r7, #20]
}
 8008e00:	bf00      	nop
 8008e02:	e7fe      	b.n	8008e02 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d01f      	beq.n	8008e4a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	61fb      	str	r3, [r7, #28]
 8008e0e:	e012      	b.n	8008e36 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008e10:	68ba      	ldr	r2, [r7, #8]
 8008e12:	69fb      	ldr	r3, [r7, #28]
 8008e14:	4413      	add	r3, r2
 8008e16:	7819      	ldrb	r1, [r3, #0]
 8008e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e1a:	69fb      	ldr	r3, [r7, #28]
 8008e1c:	4413      	add	r3, r2
 8008e1e:	3334      	adds	r3, #52	; 0x34
 8008e20:	460a      	mov	r2, r1
 8008e22:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008e24:	68ba      	ldr	r2, [r7, #8]
 8008e26:	69fb      	ldr	r3, [r7, #28]
 8008e28:	4413      	add	r3, r2
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d006      	beq.n	8008e3e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e30:	69fb      	ldr	r3, [r7, #28]
 8008e32:	3301      	adds	r3, #1
 8008e34:	61fb      	str	r3, [r7, #28]
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	2b0f      	cmp	r3, #15
 8008e3a:	d9e9      	bls.n	8008e10 <prvInitialiseNewTask+0x64>
 8008e3c:	e000      	b.n	8008e40 <prvInitialiseNewTask+0x94>
			{
				break;
 8008e3e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e42:	2200      	movs	r2, #0
 8008e44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e48:	e003      	b.n	8008e52 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e54:	2b37      	cmp	r3, #55	; 0x37
 8008e56:	d901      	bls.n	8008e5c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008e58:	2337      	movs	r3, #55	; 0x37
 8008e5a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e60:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e66:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e70:	3304      	adds	r3, #4
 8008e72:	4618      	mov	r0, r3
 8008e74:	f7ff f978 	bl	8008168 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7a:	3318      	adds	r3, #24
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f7ff f973 	bl	8008168 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e86:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e90:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e96:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eaa:	3354      	adds	r3, #84	; 0x54
 8008eac:	2260      	movs	r2, #96	; 0x60
 8008eae:	2100      	movs	r1, #0
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f002 fabb 	bl	800b42c <memset>
 8008eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb8:	4a0c      	ldr	r2, [pc, #48]	; (8008eec <prvInitialiseNewTask+0x140>)
 8008eba:	659a      	str	r2, [r3, #88]	; 0x58
 8008ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ebe:	4a0c      	ldr	r2, [pc, #48]	; (8008ef0 <prvInitialiseNewTask+0x144>)
 8008ec0:	65da      	str	r2, [r3, #92]	; 0x5c
 8008ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec4:	4a0b      	ldr	r2, [pc, #44]	; (8008ef4 <prvInitialiseNewTask+0x148>)
 8008ec6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008ec8:	683a      	ldr	r2, [r7, #0]
 8008eca:	68f9      	ldr	r1, [r7, #12]
 8008ecc:	69b8      	ldr	r0, [r7, #24]
 8008ece:	f001 f941 	bl	800a154 <pxPortInitialiseStack>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d002      	beq.n	8008ee4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ee2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ee4:	bf00      	nop
 8008ee6:	3720      	adds	r7, #32
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	0800b6e0 	.word	0x0800b6e0
 8008ef0:	0800b700 	.word	0x0800b700
 8008ef4:	0800b6c0 	.word	0x0800b6c0

08008ef8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008f00:	f001 fa58 	bl	800a3b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008f04:	4b2d      	ldr	r3, [pc, #180]	; (8008fbc <prvAddNewTaskToReadyList+0xc4>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	3301      	adds	r3, #1
 8008f0a:	4a2c      	ldr	r2, [pc, #176]	; (8008fbc <prvAddNewTaskToReadyList+0xc4>)
 8008f0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008f0e:	4b2c      	ldr	r3, [pc, #176]	; (8008fc0 <prvAddNewTaskToReadyList+0xc8>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d109      	bne.n	8008f2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008f16:	4a2a      	ldr	r2, [pc, #168]	; (8008fc0 <prvAddNewTaskToReadyList+0xc8>)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008f1c:	4b27      	ldr	r3, [pc, #156]	; (8008fbc <prvAddNewTaskToReadyList+0xc4>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d110      	bne.n	8008f46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008f24:	f000 fc26 	bl	8009774 <prvInitialiseTaskLists>
 8008f28:	e00d      	b.n	8008f46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008f2a:	4b26      	ldr	r3, [pc, #152]	; (8008fc4 <prvAddNewTaskToReadyList+0xcc>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d109      	bne.n	8008f46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008f32:	4b23      	ldr	r3, [pc, #140]	; (8008fc0 <prvAddNewTaskToReadyList+0xc8>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d802      	bhi.n	8008f46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008f40:	4a1f      	ldr	r2, [pc, #124]	; (8008fc0 <prvAddNewTaskToReadyList+0xc8>)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008f46:	4b20      	ldr	r3, [pc, #128]	; (8008fc8 <prvAddNewTaskToReadyList+0xd0>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	4a1e      	ldr	r2, [pc, #120]	; (8008fc8 <prvAddNewTaskToReadyList+0xd0>)
 8008f4e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008f50:	4b1d      	ldr	r3, [pc, #116]	; (8008fc8 <prvAddNewTaskToReadyList+0xd0>)
 8008f52:	681a      	ldr	r2, [r3, #0]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f5c:	4b1b      	ldr	r3, [pc, #108]	; (8008fcc <prvAddNewTaskToReadyList+0xd4>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d903      	bls.n	8008f6c <prvAddNewTaskToReadyList+0x74>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f68:	4a18      	ldr	r2, [pc, #96]	; (8008fcc <prvAddNewTaskToReadyList+0xd4>)
 8008f6a:	6013      	str	r3, [r2, #0]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f70:	4613      	mov	r3, r2
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	4413      	add	r3, r2
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	4a15      	ldr	r2, [pc, #84]	; (8008fd0 <prvAddNewTaskToReadyList+0xd8>)
 8008f7a:	441a      	add	r2, r3
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	3304      	adds	r3, #4
 8008f80:	4619      	mov	r1, r3
 8008f82:	4610      	mov	r0, r2
 8008f84:	f7ff f8fd 	bl	8008182 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008f88:	f001 fa44 	bl	800a414 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008f8c:	4b0d      	ldr	r3, [pc, #52]	; (8008fc4 <prvAddNewTaskToReadyList+0xcc>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d00e      	beq.n	8008fb2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008f94:	4b0a      	ldr	r3, [pc, #40]	; (8008fc0 <prvAddNewTaskToReadyList+0xc8>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d207      	bcs.n	8008fb2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008fa2:	4b0c      	ldr	r3, [pc, #48]	; (8008fd4 <prvAddNewTaskToReadyList+0xdc>)
 8008fa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fa8:	601a      	str	r2, [r3, #0]
 8008faa:	f3bf 8f4f 	dsb	sy
 8008fae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008fb2:	bf00      	nop
 8008fb4:	3708      	adds	r7, #8
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	20000df4 	.word	0x20000df4
 8008fc0:	20000920 	.word	0x20000920
 8008fc4:	20000e00 	.word	0x20000e00
 8008fc8:	20000e10 	.word	0x20000e10
 8008fcc:	20000dfc 	.word	0x20000dfc
 8008fd0:	20000924 	.word	0x20000924
 8008fd4:	e000ed04 	.word	0xe000ed04

08008fd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d017      	beq.n	800901a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008fea:	4b13      	ldr	r3, [pc, #76]	; (8009038 <vTaskDelay+0x60>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d00a      	beq.n	8009008 <vTaskDelay+0x30>
	__asm volatile
 8008ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff6:	f383 8811 	msr	BASEPRI, r3
 8008ffa:	f3bf 8f6f 	isb	sy
 8008ffe:	f3bf 8f4f 	dsb	sy
 8009002:	60bb      	str	r3, [r7, #8]
}
 8009004:	bf00      	nop
 8009006:	e7fe      	b.n	8009006 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009008:	f000 f88a 	bl	8009120 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800900c:	2100      	movs	r1, #0
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 fcfe 	bl	8009a10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009014:	f000 f892 	bl	800913c <xTaskResumeAll>
 8009018:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d107      	bne.n	8009030 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009020:	4b06      	ldr	r3, [pc, #24]	; (800903c <vTaskDelay+0x64>)
 8009022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009026:	601a      	str	r2, [r3, #0]
 8009028:	f3bf 8f4f 	dsb	sy
 800902c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009030:	bf00      	nop
 8009032:	3710      	adds	r7, #16
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}
 8009038:	20000e1c 	.word	0x20000e1c
 800903c:	e000ed04 	.word	0xe000ed04

08009040 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b08a      	sub	sp, #40	; 0x28
 8009044:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009046:	2300      	movs	r3, #0
 8009048:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800904a:	2300      	movs	r3, #0
 800904c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800904e:	463a      	mov	r2, r7
 8009050:	1d39      	adds	r1, r7, #4
 8009052:	f107 0308 	add.w	r3, r7, #8
 8009056:	4618      	mov	r0, r3
 8009058:	f7ff f832 	bl	80080c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800905c:	6839      	ldr	r1, [r7, #0]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	68ba      	ldr	r2, [r7, #8]
 8009062:	9202      	str	r2, [sp, #8]
 8009064:	9301      	str	r3, [sp, #4]
 8009066:	2300      	movs	r3, #0
 8009068:	9300      	str	r3, [sp, #0]
 800906a:	2300      	movs	r3, #0
 800906c:	460a      	mov	r2, r1
 800906e:	4924      	ldr	r1, [pc, #144]	; (8009100 <vTaskStartScheduler+0xc0>)
 8009070:	4824      	ldr	r0, [pc, #144]	; (8009104 <vTaskStartScheduler+0xc4>)
 8009072:	f7ff fdf9 	bl	8008c68 <xTaskCreateStatic>
 8009076:	4603      	mov	r3, r0
 8009078:	4a23      	ldr	r2, [pc, #140]	; (8009108 <vTaskStartScheduler+0xc8>)
 800907a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800907c:	4b22      	ldr	r3, [pc, #136]	; (8009108 <vTaskStartScheduler+0xc8>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d002      	beq.n	800908a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009084:	2301      	movs	r3, #1
 8009086:	617b      	str	r3, [r7, #20]
 8009088:	e001      	b.n	800908e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800908a:	2300      	movs	r3, #0
 800908c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	2b01      	cmp	r3, #1
 8009092:	d102      	bne.n	800909a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009094:	f000 fd10 	bl	8009ab8 <xTimerCreateTimerTask>
 8009098:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	2b01      	cmp	r3, #1
 800909e:	d11b      	bne.n	80090d8 <vTaskStartScheduler+0x98>
	__asm volatile
 80090a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a4:	f383 8811 	msr	BASEPRI, r3
 80090a8:	f3bf 8f6f 	isb	sy
 80090ac:	f3bf 8f4f 	dsb	sy
 80090b0:	613b      	str	r3, [r7, #16]
}
 80090b2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80090b4:	4b15      	ldr	r3, [pc, #84]	; (800910c <vTaskStartScheduler+0xcc>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	3354      	adds	r3, #84	; 0x54
 80090ba:	4a15      	ldr	r2, [pc, #84]	; (8009110 <vTaskStartScheduler+0xd0>)
 80090bc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80090be:	4b15      	ldr	r3, [pc, #84]	; (8009114 <vTaskStartScheduler+0xd4>)
 80090c0:	f04f 32ff 	mov.w	r2, #4294967295
 80090c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80090c6:	4b14      	ldr	r3, [pc, #80]	; (8009118 <vTaskStartScheduler+0xd8>)
 80090c8:	2201      	movs	r2, #1
 80090ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80090cc:	4b13      	ldr	r3, [pc, #76]	; (800911c <vTaskStartScheduler+0xdc>)
 80090ce:	2200      	movs	r2, #0
 80090d0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80090d2:	f001 f8cd 	bl	800a270 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80090d6:	e00e      	b.n	80090f6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090de:	d10a      	bne.n	80090f6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80090e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e4:	f383 8811 	msr	BASEPRI, r3
 80090e8:	f3bf 8f6f 	isb	sy
 80090ec:	f3bf 8f4f 	dsb	sy
 80090f0:	60fb      	str	r3, [r7, #12]
}
 80090f2:	bf00      	nop
 80090f4:	e7fe      	b.n	80090f4 <vTaskStartScheduler+0xb4>
}
 80090f6:	bf00      	nop
 80090f8:	3718      	adds	r7, #24
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop
 8009100:	0800b5f8 	.word	0x0800b5f8
 8009104:	08009745 	.word	0x08009745
 8009108:	20000e18 	.word	0x20000e18
 800910c:	20000920 	.word	0x20000920
 8009110:	20000118 	.word	0x20000118
 8009114:	20000e14 	.word	0x20000e14
 8009118:	20000e00 	.word	0x20000e00
 800911c:	20000df8 	.word	0x20000df8

08009120 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009120:	b480      	push	{r7}
 8009122:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009124:	4b04      	ldr	r3, [pc, #16]	; (8009138 <vTaskSuspendAll+0x18>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	3301      	adds	r3, #1
 800912a:	4a03      	ldr	r2, [pc, #12]	; (8009138 <vTaskSuspendAll+0x18>)
 800912c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800912e:	bf00      	nop
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr
 8009138:	20000e1c 	.word	0x20000e1c

0800913c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009142:	2300      	movs	r3, #0
 8009144:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009146:	2300      	movs	r3, #0
 8009148:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800914a:	4b42      	ldr	r3, [pc, #264]	; (8009254 <xTaskResumeAll+0x118>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d10a      	bne.n	8009168 <xTaskResumeAll+0x2c>
	__asm volatile
 8009152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009156:	f383 8811 	msr	BASEPRI, r3
 800915a:	f3bf 8f6f 	isb	sy
 800915e:	f3bf 8f4f 	dsb	sy
 8009162:	603b      	str	r3, [r7, #0]
}
 8009164:	bf00      	nop
 8009166:	e7fe      	b.n	8009166 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009168:	f001 f924 	bl	800a3b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800916c:	4b39      	ldr	r3, [pc, #228]	; (8009254 <xTaskResumeAll+0x118>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	3b01      	subs	r3, #1
 8009172:	4a38      	ldr	r2, [pc, #224]	; (8009254 <xTaskResumeAll+0x118>)
 8009174:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009176:	4b37      	ldr	r3, [pc, #220]	; (8009254 <xTaskResumeAll+0x118>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d162      	bne.n	8009244 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800917e:	4b36      	ldr	r3, [pc, #216]	; (8009258 <xTaskResumeAll+0x11c>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d05e      	beq.n	8009244 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009186:	e02f      	b.n	80091e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009188:	4b34      	ldr	r3, [pc, #208]	; (800925c <xTaskResumeAll+0x120>)
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	3318      	adds	r3, #24
 8009194:	4618      	mov	r0, r3
 8009196:	f7ff f851 	bl	800823c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	3304      	adds	r3, #4
 800919e:	4618      	mov	r0, r3
 80091a0:	f7ff f84c 	bl	800823c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091a8:	4b2d      	ldr	r3, [pc, #180]	; (8009260 <xTaskResumeAll+0x124>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d903      	bls.n	80091b8 <xTaskResumeAll+0x7c>
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b4:	4a2a      	ldr	r2, [pc, #168]	; (8009260 <xTaskResumeAll+0x124>)
 80091b6:	6013      	str	r3, [r2, #0]
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091bc:	4613      	mov	r3, r2
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	4413      	add	r3, r2
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	4a27      	ldr	r2, [pc, #156]	; (8009264 <xTaskResumeAll+0x128>)
 80091c6:	441a      	add	r2, r3
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	3304      	adds	r3, #4
 80091cc:	4619      	mov	r1, r3
 80091ce:	4610      	mov	r0, r2
 80091d0:	f7fe ffd7 	bl	8008182 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091d8:	4b23      	ldr	r3, [pc, #140]	; (8009268 <xTaskResumeAll+0x12c>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091de:	429a      	cmp	r2, r3
 80091e0:	d302      	bcc.n	80091e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80091e2:	4b22      	ldr	r3, [pc, #136]	; (800926c <xTaskResumeAll+0x130>)
 80091e4:	2201      	movs	r2, #1
 80091e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80091e8:	4b1c      	ldr	r3, [pc, #112]	; (800925c <xTaskResumeAll+0x120>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d1cb      	bne.n	8009188 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d001      	beq.n	80091fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80091f6:	f000 fb5f 	bl	80098b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80091fa:	4b1d      	ldr	r3, [pc, #116]	; (8009270 <xTaskResumeAll+0x134>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d010      	beq.n	8009228 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009206:	f000 f847 	bl	8009298 <xTaskIncrementTick>
 800920a:	4603      	mov	r3, r0
 800920c:	2b00      	cmp	r3, #0
 800920e:	d002      	beq.n	8009216 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009210:	4b16      	ldr	r3, [pc, #88]	; (800926c <xTaskResumeAll+0x130>)
 8009212:	2201      	movs	r2, #1
 8009214:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	3b01      	subs	r3, #1
 800921a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1f1      	bne.n	8009206 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009222:	4b13      	ldr	r3, [pc, #76]	; (8009270 <xTaskResumeAll+0x134>)
 8009224:	2200      	movs	r2, #0
 8009226:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009228:	4b10      	ldr	r3, [pc, #64]	; (800926c <xTaskResumeAll+0x130>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d009      	beq.n	8009244 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009230:	2301      	movs	r3, #1
 8009232:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009234:	4b0f      	ldr	r3, [pc, #60]	; (8009274 <xTaskResumeAll+0x138>)
 8009236:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800923a:	601a      	str	r2, [r3, #0]
 800923c:	f3bf 8f4f 	dsb	sy
 8009240:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009244:	f001 f8e6 	bl	800a414 <vPortExitCritical>

	return xAlreadyYielded;
 8009248:	68bb      	ldr	r3, [r7, #8]
}
 800924a:	4618      	mov	r0, r3
 800924c:	3710      	adds	r7, #16
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop
 8009254:	20000e1c 	.word	0x20000e1c
 8009258:	20000df4 	.word	0x20000df4
 800925c:	20000db4 	.word	0x20000db4
 8009260:	20000dfc 	.word	0x20000dfc
 8009264:	20000924 	.word	0x20000924
 8009268:	20000920 	.word	0x20000920
 800926c:	20000e08 	.word	0x20000e08
 8009270:	20000e04 	.word	0x20000e04
 8009274:	e000ed04 	.word	0xe000ed04

08009278 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009278:	b480      	push	{r7}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800927e:	4b05      	ldr	r3, [pc, #20]	; (8009294 <xTaskGetTickCount+0x1c>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009284:	687b      	ldr	r3, [r7, #4]
}
 8009286:	4618      	mov	r0, r3
 8009288:	370c      	adds	r7, #12
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr
 8009292:	bf00      	nop
 8009294:	20000df8 	.word	0x20000df8

08009298 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b086      	sub	sp, #24
 800929c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800929e:	2300      	movs	r3, #0
 80092a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092a2:	4b4f      	ldr	r3, [pc, #316]	; (80093e0 <xTaskIncrementTick+0x148>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	f040 808f 	bne.w	80093ca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80092ac:	4b4d      	ldr	r3, [pc, #308]	; (80093e4 <xTaskIncrementTick+0x14c>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	3301      	adds	r3, #1
 80092b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80092b4:	4a4b      	ldr	r2, [pc, #300]	; (80093e4 <xTaskIncrementTick+0x14c>)
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d120      	bne.n	8009302 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80092c0:	4b49      	ldr	r3, [pc, #292]	; (80093e8 <xTaskIncrementTick+0x150>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d00a      	beq.n	80092e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80092ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ce:	f383 8811 	msr	BASEPRI, r3
 80092d2:	f3bf 8f6f 	isb	sy
 80092d6:	f3bf 8f4f 	dsb	sy
 80092da:	603b      	str	r3, [r7, #0]
}
 80092dc:	bf00      	nop
 80092de:	e7fe      	b.n	80092de <xTaskIncrementTick+0x46>
 80092e0:	4b41      	ldr	r3, [pc, #260]	; (80093e8 <xTaskIncrementTick+0x150>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	60fb      	str	r3, [r7, #12]
 80092e6:	4b41      	ldr	r3, [pc, #260]	; (80093ec <xTaskIncrementTick+0x154>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4a3f      	ldr	r2, [pc, #252]	; (80093e8 <xTaskIncrementTick+0x150>)
 80092ec:	6013      	str	r3, [r2, #0]
 80092ee:	4a3f      	ldr	r2, [pc, #252]	; (80093ec <xTaskIncrementTick+0x154>)
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	6013      	str	r3, [r2, #0]
 80092f4:	4b3e      	ldr	r3, [pc, #248]	; (80093f0 <xTaskIncrementTick+0x158>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	3301      	adds	r3, #1
 80092fa:	4a3d      	ldr	r2, [pc, #244]	; (80093f0 <xTaskIncrementTick+0x158>)
 80092fc:	6013      	str	r3, [r2, #0]
 80092fe:	f000 fadb 	bl	80098b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009302:	4b3c      	ldr	r3, [pc, #240]	; (80093f4 <xTaskIncrementTick+0x15c>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	693a      	ldr	r2, [r7, #16]
 8009308:	429a      	cmp	r2, r3
 800930a:	d349      	bcc.n	80093a0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800930c:	4b36      	ldr	r3, [pc, #216]	; (80093e8 <xTaskIncrementTick+0x150>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d104      	bne.n	8009320 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009316:	4b37      	ldr	r3, [pc, #220]	; (80093f4 <xTaskIncrementTick+0x15c>)
 8009318:	f04f 32ff 	mov.w	r2, #4294967295
 800931c:	601a      	str	r2, [r3, #0]
					break;
 800931e:	e03f      	b.n	80093a0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009320:	4b31      	ldr	r3, [pc, #196]	; (80093e8 <xTaskIncrementTick+0x150>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	68db      	ldr	r3, [r3, #12]
 8009326:	68db      	ldr	r3, [r3, #12]
 8009328:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009330:	693a      	ldr	r2, [r7, #16]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	429a      	cmp	r2, r3
 8009336:	d203      	bcs.n	8009340 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009338:	4a2e      	ldr	r2, [pc, #184]	; (80093f4 <xTaskIncrementTick+0x15c>)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800933e:	e02f      	b.n	80093a0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	3304      	adds	r3, #4
 8009344:	4618      	mov	r0, r3
 8009346:	f7fe ff79 	bl	800823c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800934e:	2b00      	cmp	r3, #0
 8009350:	d004      	beq.n	800935c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	3318      	adds	r3, #24
 8009356:	4618      	mov	r0, r3
 8009358:	f7fe ff70 	bl	800823c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009360:	4b25      	ldr	r3, [pc, #148]	; (80093f8 <xTaskIncrementTick+0x160>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	429a      	cmp	r2, r3
 8009366:	d903      	bls.n	8009370 <xTaskIncrementTick+0xd8>
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800936c:	4a22      	ldr	r2, [pc, #136]	; (80093f8 <xTaskIncrementTick+0x160>)
 800936e:	6013      	str	r3, [r2, #0]
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009374:	4613      	mov	r3, r2
 8009376:	009b      	lsls	r3, r3, #2
 8009378:	4413      	add	r3, r2
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	4a1f      	ldr	r2, [pc, #124]	; (80093fc <xTaskIncrementTick+0x164>)
 800937e:	441a      	add	r2, r3
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	3304      	adds	r3, #4
 8009384:	4619      	mov	r1, r3
 8009386:	4610      	mov	r0, r2
 8009388:	f7fe fefb 	bl	8008182 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009390:	4b1b      	ldr	r3, [pc, #108]	; (8009400 <xTaskIncrementTick+0x168>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009396:	429a      	cmp	r2, r3
 8009398:	d3b8      	bcc.n	800930c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800939a:	2301      	movs	r3, #1
 800939c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800939e:	e7b5      	b.n	800930c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80093a0:	4b17      	ldr	r3, [pc, #92]	; (8009400 <xTaskIncrementTick+0x168>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093a6:	4915      	ldr	r1, [pc, #84]	; (80093fc <xTaskIncrementTick+0x164>)
 80093a8:	4613      	mov	r3, r2
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	4413      	add	r3, r2
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	440b      	add	r3, r1
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d901      	bls.n	80093bc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80093b8:	2301      	movs	r3, #1
 80093ba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80093bc:	4b11      	ldr	r3, [pc, #68]	; (8009404 <xTaskIncrementTick+0x16c>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d007      	beq.n	80093d4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80093c4:	2301      	movs	r3, #1
 80093c6:	617b      	str	r3, [r7, #20]
 80093c8:	e004      	b.n	80093d4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80093ca:	4b0f      	ldr	r3, [pc, #60]	; (8009408 <xTaskIncrementTick+0x170>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	3301      	adds	r3, #1
 80093d0:	4a0d      	ldr	r2, [pc, #52]	; (8009408 <xTaskIncrementTick+0x170>)
 80093d2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80093d4:	697b      	ldr	r3, [r7, #20]
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3718      	adds	r7, #24
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	20000e1c 	.word	0x20000e1c
 80093e4:	20000df8 	.word	0x20000df8
 80093e8:	20000dac 	.word	0x20000dac
 80093ec:	20000db0 	.word	0x20000db0
 80093f0:	20000e0c 	.word	0x20000e0c
 80093f4:	20000e14 	.word	0x20000e14
 80093f8:	20000dfc 	.word	0x20000dfc
 80093fc:	20000924 	.word	0x20000924
 8009400:	20000920 	.word	0x20000920
 8009404:	20000e08 	.word	0x20000e08
 8009408:	20000e04 	.word	0x20000e04

0800940c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800940c:	b480      	push	{r7}
 800940e:	b085      	sub	sp, #20
 8009410:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009412:	4b2a      	ldr	r3, [pc, #168]	; (80094bc <vTaskSwitchContext+0xb0>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d003      	beq.n	8009422 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800941a:	4b29      	ldr	r3, [pc, #164]	; (80094c0 <vTaskSwitchContext+0xb4>)
 800941c:	2201      	movs	r2, #1
 800941e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009420:	e046      	b.n	80094b0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009422:	4b27      	ldr	r3, [pc, #156]	; (80094c0 <vTaskSwitchContext+0xb4>)
 8009424:	2200      	movs	r2, #0
 8009426:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009428:	4b26      	ldr	r3, [pc, #152]	; (80094c4 <vTaskSwitchContext+0xb8>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	60fb      	str	r3, [r7, #12]
 800942e:	e010      	b.n	8009452 <vTaskSwitchContext+0x46>
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d10a      	bne.n	800944c <vTaskSwitchContext+0x40>
	__asm volatile
 8009436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800943a:	f383 8811 	msr	BASEPRI, r3
 800943e:	f3bf 8f6f 	isb	sy
 8009442:	f3bf 8f4f 	dsb	sy
 8009446:	607b      	str	r3, [r7, #4]
}
 8009448:	bf00      	nop
 800944a:	e7fe      	b.n	800944a <vTaskSwitchContext+0x3e>
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	3b01      	subs	r3, #1
 8009450:	60fb      	str	r3, [r7, #12]
 8009452:	491d      	ldr	r1, [pc, #116]	; (80094c8 <vTaskSwitchContext+0xbc>)
 8009454:	68fa      	ldr	r2, [r7, #12]
 8009456:	4613      	mov	r3, r2
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	4413      	add	r3, r2
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	440b      	add	r3, r1
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d0e4      	beq.n	8009430 <vTaskSwitchContext+0x24>
 8009466:	68fa      	ldr	r2, [r7, #12]
 8009468:	4613      	mov	r3, r2
 800946a:	009b      	lsls	r3, r3, #2
 800946c:	4413      	add	r3, r2
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	4a15      	ldr	r2, [pc, #84]	; (80094c8 <vTaskSwitchContext+0xbc>)
 8009472:	4413      	add	r3, r2
 8009474:	60bb      	str	r3, [r7, #8]
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	685a      	ldr	r2, [r3, #4]
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	605a      	str	r2, [r3, #4]
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	685a      	ldr	r2, [r3, #4]
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	3308      	adds	r3, #8
 8009488:	429a      	cmp	r2, r3
 800948a:	d104      	bne.n	8009496 <vTaskSwitchContext+0x8a>
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	685a      	ldr	r2, [r3, #4]
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	605a      	str	r2, [r3, #4]
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	68db      	ldr	r3, [r3, #12]
 800949c:	4a0b      	ldr	r2, [pc, #44]	; (80094cc <vTaskSwitchContext+0xc0>)
 800949e:	6013      	str	r3, [r2, #0]
 80094a0:	4a08      	ldr	r2, [pc, #32]	; (80094c4 <vTaskSwitchContext+0xb8>)
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80094a6:	4b09      	ldr	r3, [pc, #36]	; (80094cc <vTaskSwitchContext+0xc0>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	3354      	adds	r3, #84	; 0x54
 80094ac:	4a08      	ldr	r2, [pc, #32]	; (80094d0 <vTaskSwitchContext+0xc4>)
 80094ae:	6013      	str	r3, [r2, #0]
}
 80094b0:	bf00      	nop
 80094b2:	3714      	adds	r7, #20
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr
 80094bc:	20000e1c 	.word	0x20000e1c
 80094c0:	20000e08 	.word	0x20000e08
 80094c4:	20000dfc 	.word	0x20000dfc
 80094c8:	20000924 	.word	0x20000924
 80094cc:	20000920 	.word	0x20000920
 80094d0:	20000118 	.word	0x20000118

080094d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d10a      	bne.n	80094fa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80094e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e8:	f383 8811 	msr	BASEPRI, r3
 80094ec:	f3bf 8f6f 	isb	sy
 80094f0:	f3bf 8f4f 	dsb	sy
 80094f4:	60fb      	str	r3, [r7, #12]
}
 80094f6:	bf00      	nop
 80094f8:	e7fe      	b.n	80094f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80094fa:	4b07      	ldr	r3, [pc, #28]	; (8009518 <vTaskPlaceOnEventList+0x44>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	3318      	adds	r3, #24
 8009500:	4619      	mov	r1, r3
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f7fe fe61 	bl	80081ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009508:	2101      	movs	r1, #1
 800950a:	6838      	ldr	r0, [r7, #0]
 800950c:	f000 fa80 	bl	8009a10 <prvAddCurrentTaskToDelayedList>
}
 8009510:	bf00      	nop
 8009512:	3710      	adds	r7, #16
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}
 8009518:	20000920 	.word	0x20000920

0800951c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800951c:	b580      	push	{r7, lr}
 800951e:	b086      	sub	sp, #24
 8009520:	af00      	add	r7, sp, #0
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	60b9      	str	r1, [r7, #8]
 8009526:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d10a      	bne.n	8009544 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800952e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009532:	f383 8811 	msr	BASEPRI, r3
 8009536:	f3bf 8f6f 	isb	sy
 800953a:	f3bf 8f4f 	dsb	sy
 800953e:	617b      	str	r3, [r7, #20]
}
 8009540:	bf00      	nop
 8009542:	e7fe      	b.n	8009542 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009544:	4b0a      	ldr	r3, [pc, #40]	; (8009570 <vTaskPlaceOnEventListRestricted+0x54>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	3318      	adds	r3, #24
 800954a:	4619      	mov	r1, r3
 800954c:	68f8      	ldr	r0, [r7, #12]
 800954e:	f7fe fe18 	bl	8008182 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d002      	beq.n	800955e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009558:	f04f 33ff 	mov.w	r3, #4294967295
 800955c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800955e:	6879      	ldr	r1, [r7, #4]
 8009560:	68b8      	ldr	r0, [r7, #8]
 8009562:	f000 fa55 	bl	8009a10 <prvAddCurrentTaskToDelayedList>
	}
 8009566:	bf00      	nop
 8009568:	3718      	adds	r7, #24
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	20000920 	.word	0x20000920

08009574 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b086      	sub	sp, #24
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d10a      	bne.n	80095a0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800958a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958e:	f383 8811 	msr	BASEPRI, r3
 8009592:	f3bf 8f6f 	isb	sy
 8009596:	f3bf 8f4f 	dsb	sy
 800959a:	60fb      	str	r3, [r7, #12]
}
 800959c:	bf00      	nop
 800959e:	e7fe      	b.n	800959e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	3318      	adds	r3, #24
 80095a4:	4618      	mov	r0, r3
 80095a6:	f7fe fe49 	bl	800823c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095aa:	4b1e      	ldr	r3, [pc, #120]	; (8009624 <xTaskRemoveFromEventList+0xb0>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d11d      	bne.n	80095ee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	3304      	adds	r3, #4
 80095b6:	4618      	mov	r0, r3
 80095b8:	f7fe fe40 	bl	800823c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095c0:	4b19      	ldr	r3, [pc, #100]	; (8009628 <xTaskRemoveFromEventList+0xb4>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d903      	bls.n	80095d0 <xTaskRemoveFromEventList+0x5c>
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095cc:	4a16      	ldr	r2, [pc, #88]	; (8009628 <xTaskRemoveFromEventList+0xb4>)
 80095ce:	6013      	str	r3, [r2, #0]
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095d4:	4613      	mov	r3, r2
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	4413      	add	r3, r2
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	4a13      	ldr	r2, [pc, #76]	; (800962c <xTaskRemoveFromEventList+0xb8>)
 80095de:	441a      	add	r2, r3
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	3304      	adds	r3, #4
 80095e4:	4619      	mov	r1, r3
 80095e6:	4610      	mov	r0, r2
 80095e8:	f7fe fdcb 	bl	8008182 <vListInsertEnd>
 80095ec:	e005      	b.n	80095fa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	3318      	adds	r3, #24
 80095f2:	4619      	mov	r1, r3
 80095f4:	480e      	ldr	r0, [pc, #56]	; (8009630 <xTaskRemoveFromEventList+0xbc>)
 80095f6:	f7fe fdc4 	bl	8008182 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095fe:	4b0d      	ldr	r3, [pc, #52]	; (8009634 <xTaskRemoveFromEventList+0xc0>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009604:	429a      	cmp	r2, r3
 8009606:	d905      	bls.n	8009614 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009608:	2301      	movs	r3, #1
 800960a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800960c:	4b0a      	ldr	r3, [pc, #40]	; (8009638 <xTaskRemoveFromEventList+0xc4>)
 800960e:	2201      	movs	r2, #1
 8009610:	601a      	str	r2, [r3, #0]
 8009612:	e001      	b.n	8009618 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009614:	2300      	movs	r3, #0
 8009616:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009618:	697b      	ldr	r3, [r7, #20]
}
 800961a:	4618      	mov	r0, r3
 800961c:	3718      	adds	r7, #24
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	20000e1c 	.word	0x20000e1c
 8009628:	20000dfc 	.word	0x20000dfc
 800962c:	20000924 	.word	0x20000924
 8009630:	20000db4 	.word	0x20000db4
 8009634:	20000920 	.word	0x20000920
 8009638:	20000e08 	.word	0x20000e08

0800963c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009644:	4b06      	ldr	r3, [pc, #24]	; (8009660 <vTaskInternalSetTimeOutState+0x24>)
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800964c:	4b05      	ldr	r3, [pc, #20]	; (8009664 <vTaskInternalSetTimeOutState+0x28>)
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	605a      	str	r2, [r3, #4]
}
 8009654:	bf00      	nop
 8009656:	370c      	adds	r7, #12
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr
 8009660:	20000e0c 	.word	0x20000e0c
 8009664:	20000df8 	.word	0x20000df8

08009668 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b088      	sub	sp, #32
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d10a      	bne.n	800968e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800967c:	f383 8811 	msr	BASEPRI, r3
 8009680:	f3bf 8f6f 	isb	sy
 8009684:	f3bf 8f4f 	dsb	sy
 8009688:	613b      	str	r3, [r7, #16]
}
 800968a:	bf00      	nop
 800968c:	e7fe      	b.n	800968c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d10a      	bne.n	80096aa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009698:	f383 8811 	msr	BASEPRI, r3
 800969c:	f3bf 8f6f 	isb	sy
 80096a0:	f3bf 8f4f 	dsb	sy
 80096a4:	60fb      	str	r3, [r7, #12]
}
 80096a6:	bf00      	nop
 80096a8:	e7fe      	b.n	80096a8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80096aa:	f000 fe83 	bl	800a3b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80096ae:	4b1d      	ldr	r3, [pc, #116]	; (8009724 <xTaskCheckForTimeOut+0xbc>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	69ba      	ldr	r2, [r7, #24]
 80096ba:	1ad3      	subs	r3, r2, r3
 80096bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096c6:	d102      	bne.n	80096ce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80096c8:	2300      	movs	r3, #0
 80096ca:	61fb      	str	r3, [r7, #28]
 80096cc:	e023      	b.n	8009716 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	4b15      	ldr	r3, [pc, #84]	; (8009728 <xTaskCheckForTimeOut+0xc0>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d007      	beq.n	80096ea <xTaskCheckForTimeOut+0x82>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	69ba      	ldr	r2, [r7, #24]
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d302      	bcc.n	80096ea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80096e4:	2301      	movs	r3, #1
 80096e6:	61fb      	str	r3, [r7, #28]
 80096e8:	e015      	b.n	8009716 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	697a      	ldr	r2, [r7, #20]
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d20b      	bcs.n	800970c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	681a      	ldr	r2, [r3, #0]
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	1ad2      	subs	r2, r2, r3
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f7ff ff9b 	bl	800963c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009706:	2300      	movs	r3, #0
 8009708:	61fb      	str	r3, [r7, #28]
 800970a:	e004      	b.n	8009716 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	2200      	movs	r2, #0
 8009710:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009712:	2301      	movs	r3, #1
 8009714:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009716:	f000 fe7d 	bl	800a414 <vPortExitCritical>

	return xReturn;
 800971a:	69fb      	ldr	r3, [r7, #28]
}
 800971c:	4618      	mov	r0, r3
 800971e:	3720      	adds	r7, #32
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}
 8009724:	20000df8 	.word	0x20000df8
 8009728:	20000e0c 	.word	0x20000e0c

0800972c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800972c:	b480      	push	{r7}
 800972e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009730:	4b03      	ldr	r3, [pc, #12]	; (8009740 <vTaskMissedYield+0x14>)
 8009732:	2201      	movs	r2, #1
 8009734:	601a      	str	r2, [r3, #0]
}
 8009736:	bf00      	nop
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr
 8009740:	20000e08 	.word	0x20000e08

08009744 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b082      	sub	sp, #8
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800974c:	f000 f852 	bl	80097f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009750:	4b06      	ldr	r3, [pc, #24]	; (800976c <prvIdleTask+0x28>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2b01      	cmp	r3, #1
 8009756:	d9f9      	bls.n	800974c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009758:	4b05      	ldr	r3, [pc, #20]	; (8009770 <prvIdleTask+0x2c>)
 800975a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800975e:	601a      	str	r2, [r3, #0]
 8009760:	f3bf 8f4f 	dsb	sy
 8009764:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009768:	e7f0      	b.n	800974c <prvIdleTask+0x8>
 800976a:	bf00      	nop
 800976c:	20000924 	.word	0x20000924
 8009770:	e000ed04 	.word	0xe000ed04

08009774 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b082      	sub	sp, #8
 8009778:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800977a:	2300      	movs	r3, #0
 800977c:	607b      	str	r3, [r7, #4]
 800977e:	e00c      	b.n	800979a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	4613      	mov	r3, r2
 8009784:	009b      	lsls	r3, r3, #2
 8009786:	4413      	add	r3, r2
 8009788:	009b      	lsls	r3, r3, #2
 800978a:	4a12      	ldr	r2, [pc, #72]	; (80097d4 <prvInitialiseTaskLists+0x60>)
 800978c:	4413      	add	r3, r2
 800978e:	4618      	mov	r0, r3
 8009790:	f7fe fcca 	bl	8008128 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	3301      	adds	r3, #1
 8009798:	607b      	str	r3, [r7, #4]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2b37      	cmp	r3, #55	; 0x37
 800979e:	d9ef      	bls.n	8009780 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80097a0:	480d      	ldr	r0, [pc, #52]	; (80097d8 <prvInitialiseTaskLists+0x64>)
 80097a2:	f7fe fcc1 	bl	8008128 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80097a6:	480d      	ldr	r0, [pc, #52]	; (80097dc <prvInitialiseTaskLists+0x68>)
 80097a8:	f7fe fcbe 	bl	8008128 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80097ac:	480c      	ldr	r0, [pc, #48]	; (80097e0 <prvInitialiseTaskLists+0x6c>)
 80097ae:	f7fe fcbb 	bl	8008128 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80097b2:	480c      	ldr	r0, [pc, #48]	; (80097e4 <prvInitialiseTaskLists+0x70>)
 80097b4:	f7fe fcb8 	bl	8008128 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80097b8:	480b      	ldr	r0, [pc, #44]	; (80097e8 <prvInitialiseTaskLists+0x74>)
 80097ba:	f7fe fcb5 	bl	8008128 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80097be:	4b0b      	ldr	r3, [pc, #44]	; (80097ec <prvInitialiseTaskLists+0x78>)
 80097c0:	4a05      	ldr	r2, [pc, #20]	; (80097d8 <prvInitialiseTaskLists+0x64>)
 80097c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80097c4:	4b0a      	ldr	r3, [pc, #40]	; (80097f0 <prvInitialiseTaskLists+0x7c>)
 80097c6:	4a05      	ldr	r2, [pc, #20]	; (80097dc <prvInitialiseTaskLists+0x68>)
 80097c8:	601a      	str	r2, [r3, #0]
}
 80097ca:	bf00      	nop
 80097cc:	3708      	adds	r7, #8
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	20000924 	.word	0x20000924
 80097d8:	20000d84 	.word	0x20000d84
 80097dc:	20000d98 	.word	0x20000d98
 80097e0:	20000db4 	.word	0x20000db4
 80097e4:	20000dc8 	.word	0x20000dc8
 80097e8:	20000de0 	.word	0x20000de0
 80097ec:	20000dac 	.word	0x20000dac
 80097f0:	20000db0 	.word	0x20000db0

080097f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b082      	sub	sp, #8
 80097f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80097fa:	e019      	b.n	8009830 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80097fc:	f000 fdda 	bl	800a3b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009800:	4b10      	ldr	r3, [pc, #64]	; (8009844 <prvCheckTasksWaitingTermination+0x50>)
 8009802:	68db      	ldr	r3, [r3, #12]
 8009804:	68db      	ldr	r3, [r3, #12]
 8009806:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	3304      	adds	r3, #4
 800980c:	4618      	mov	r0, r3
 800980e:	f7fe fd15 	bl	800823c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009812:	4b0d      	ldr	r3, [pc, #52]	; (8009848 <prvCheckTasksWaitingTermination+0x54>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	3b01      	subs	r3, #1
 8009818:	4a0b      	ldr	r2, [pc, #44]	; (8009848 <prvCheckTasksWaitingTermination+0x54>)
 800981a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800981c:	4b0b      	ldr	r3, [pc, #44]	; (800984c <prvCheckTasksWaitingTermination+0x58>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	3b01      	subs	r3, #1
 8009822:	4a0a      	ldr	r2, [pc, #40]	; (800984c <prvCheckTasksWaitingTermination+0x58>)
 8009824:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009826:	f000 fdf5 	bl	800a414 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 f810 	bl	8009850 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009830:	4b06      	ldr	r3, [pc, #24]	; (800984c <prvCheckTasksWaitingTermination+0x58>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d1e1      	bne.n	80097fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009838:	bf00      	nop
 800983a:	bf00      	nop
 800983c:	3708      	adds	r7, #8
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop
 8009844:	20000dc8 	.word	0x20000dc8
 8009848:	20000df4 	.word	0x20000df4
 800984c:	20000ddc 	.word	0x20000ddc

08009850 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009850:	b580      	push	{r7, lr}
 8009852:	b084      	sub	sp, #16
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	3354      	adds	r3, #84	; 0x54
 800985c:	4618      	mov	r0, r3
 800985e:	f001 fdfb 	bl	800b458 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009868:	2b00      	cmp	r3, #0
 800986a:	d108      	bne.n	800987e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009870:	4618      	mov	r0, r3
 8009872:	f000 ff8d 	bl	800a790 <vPortFree>
				vPortFree( pxTCB );
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f000 ff8a 	bl	800a790 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800987c:	e018      	b.n	80098b0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009884:	2b01      	cmp	r3, #1
 8009886:	d103      	bne.n	8009890 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 ff81 	bl	800a790 <vPortFree>
	}
 800988e:	e00f      	b.n	80098b0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009896:	2b02      	cmp	r3, #2
 8009898:	d00a      	beq.n	80098b0 <prvDeleteTCB+0x60>
	__asm volatile
 800989a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800989e:	f383 8811 	msr	BASEPRI, r3
 80098a2:	f3bf 8f6f 	isb	sy
 80098a6:	f3bf 8f4f 	dsb	sy
 80098aa:	60fb      	str	r3, [r7, #12]
}
 80098ac:	bf00      	nop
 80098ae:	e7fe      	b.n	80098ae <prvDeleteTCB+0x5e>
	}
 80098b0:	bf00      	nop
 80098b2:	3710      	adds	r7, #16
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098be:	4b0c      	ldr	r3, [pc, #48]	; (80098f0 <prvResetNextTaskUnblockTime+0x38>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d104      	bne.n	80098d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80098c8:	4b0a      	ldr	r3, [pc, #40]	; (80098f4 <prvResetNextTaskUnblockTime+0x3c>)
 80098ca:	f04f 32ff 	mov.w	r2, #4294967295
 80098ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80098d0:	e008      	b.n	80098e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098d2:	4b07      	ldr	r3, [pc, #28]	; (80098f0 <prvResetNextTaskUnblockTime+0x38>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	68db      	ldr	r3, [r3, #12]
 80098d8:	68db      	ldr	r3, [r3, #12]
 80098da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	4a04      	ldr	r2, [pc, #16]	; (80098f4 <prvResetNextTaskUnblockTime+0x3c>)
 80098e2:	6013      	str	r3, [r2, #0]
}
 80098e4:	bf00      	nop
 80098e6:	370c      	adds	r7, #12
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr
 80098f0:	20000dac 	.word	0x20000dac
 80098f4:	20000e14 	.word	0x20000e14

080098f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80098f8:	b480      	push	{r7}
 80098fa:	b083      	sub	sp, #12
 80098fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80098fe:	4b0b      	ldr	r3, [pc, #44]	; (800992c <xTaskGetSchedulerState+0x34>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d102      	bne.n	800990c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009906:	2301      	movs	r3, #1
 8009908:	607b      	str	r3, [r7, #4]
 800990a:	e008      	b.n	800991e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800990c:	4b08      	ldr	r3, [pc, #32]	; (8009930 <xTaskGetSchedulerState+0x38>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d102      	bne.n	800991a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009914:	2302      	movs	r3, #2
 8009916:	607b      	str	r3, [r7, #4]
 8009918:	e001      	b.n	800991e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800991a:	2300      	movs	r3, #0
 800991c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800991e:	687b      	ldr	r3, [r7, #4]
	}
 8009920:	4618      	mov	r0, r3
 8009922:	370c      	adds	r7, #12
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr
 800992c:	20000e00 	.word	0x20000e00
 8009930:	20000e1c 	.word	0x20000e1c

08009934 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009934:	b580      	push	{r7, lr}
 8009936:	b086      	sub	sp, #24
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009940:	2300      	movs	r3, #0
 8009942:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d056      	beq.n	80099f8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800994a:	4b2e      	ldr	r3, [pc, #184]	; (8009a04 <xTaskPriorityDisinherit+0xd0>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	693a      	ldr	r2, [r7, #16]
 8009950:	429a      	cmp	r2, r3
 8009952:	d00a      	beq.n	800996a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009958:	f383 8811 	msr	BASEPRI, r3
 800995c:	f3bf 8f6f 	isb	sy
 8009960:	f3bf 8f4f 	dsb	sy
 8009964:	60fb      	str	r3, [r7, #12]
}
 8009966:	bf00      	nop
 8009968:	e7fe      	b.n	8009968 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800996e:	2b00      	cmp	r3, #0
 8009970:	d10a      	bne.n	8009988 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009976:	f383 8811 	msr	BASEPRI, r3
 800997a:	f3bf 8f6f 	isb	sy
 800997e:	f3bf 8f4f 	dsb	sy
 8009982:	60bb      	str	r3, [r7, #8]
}
 8009984:	bf00      	nop
 8009986:	e7fe      	b.n	8009986 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800998c:	1e5a      	subs	r2, r3, #1
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800999a:	429a      	cmp	r2, r3
 800999c:	d02c      	beq.n	80099f8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d128      	bne.n	80099f8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	3304      	adds	r3, #4
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7fe fc46 	bl	800823c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099c8:	4b0f      	ldr	r3, [pc, #60]	; (8009a08 <xTaskPriorityDisinherit+0xd4>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	429a      	cmp	r2, r3
 80099ce:	d903      	bls.n	80099d8 <xTaskPriorityDisinherit+0xa4>
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d4:	4a0c      	ldr	r2, [pc, #48]	; (8009a08 <xTaskPriorityDisinherit+0xd4>)
 80099d6:	6013      	str	r3, [r2, #0]
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099dc:	4613      	mov	r3, r2
 80099de:	009b      	lsls	r3, r3, #2
 80099e0:	4413      	add	r3, r2
 80099e2:	009b      	lsls	r3, r3, #2
 80099e4:	4a09      	ldr	r2, [pc, #36]	; (8009a0c <xTaskPriorityDisinherit+0xd8>)
 80099e6:	441a      	add	r2, r3
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	3304      	adds	r3, #4
 80099ec:	4619      	mov	r1, r3
 80099ee:	4610      	mov	r0, r2
 80099f0:	f7fe fbc7 	bl	8008182 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80099f4:	2301      	movs	r3, #1
 80099f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80099f8:	697b      	ldr	r3, [r7, #20]
	}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3718      	adds	r7, #24
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	bf00      	nop
 8009a04:	20000920 	.word	0x20000920
 8009a08:	20000dfc 	.word	0x20000dfc
 8009a0c:	20000924 	.word	0x20000924

08009a10 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009a1a:	4b21      	ldr	r3, [pc, #132]	; (8009aa0 <prvAddCurrentTaskToDelayedList+0x90>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a20:	4b20      	ldr	r3, [pc, #128]	; (8009aa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	3304      	adds	r3, #4
 8009a26:	4618      	mov	r0, r3
 8009a28:	f7fe fc08 	bl	800823c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a32:	d10a      	bne.n	8009a4a <prvAddCurrentTaskToDelayedList+0x3a>
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d007      	beq.n	8009a4a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a3a:	4b1a      	ldr	r3, [pc, #104]	; (8009aa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	3304      	adds	r3, #4
 8009a40:	4619      	mov	r1, r3
 8009a42:	4819      	ldr	r0, [pc, #100]	; (8009aa8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009a44:	f7fe fb9d 	bl	8008182 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009a48:	e026      	b.n	8009a98 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009a4a:	68fa      	ldr	r2, [r7, #12]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	4413      	add	r3, r2
 8009a50:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009a52:	4b14      	ldr	r3, [pc, #80]	; (8009aa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	68ba      	ldr	r2, [r7, #8]
 8009a58:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009a5a:	68ba      	ldr	r2, [r7, #8]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d209      	bcs.n	8009a76 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a62:	4b12      	ldr	r3, [pc, #72]	; (8009aac <prvAddCurrentTaskToDelayedList+0x9c>)
 8009a64:	681a      	ldr	r2, [r3, #0]
 8009a66:	4b0f      	ldr	r3, [pc, #60]	; (8009aa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	3304      	adds	r3, #4
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	4610      	mov	r0, r2
 8009a70:	f7fe fbab 	bl	80081ca <vListInsert>
}
 8009a74:	e010      	b.n	8009a98 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a76:	4b0e      	ldr	r3, [pc, #56]	; (8009ab0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009a78:	681a      	ldr	r2, [r3, #0]
 8009a7a:	4b0a      	ldr	r3, [pc, #40]	; (8009aa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	3304      	adds	r3, #4
 8009a80:	4619      	mov	r1, r3
 8009a82:	4610      	mov	r0, r2
 8009a84:	f7fe fba1 	bl	80081ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009a88:	4b0a      	ldr	r3, [pc, #40]	; (8009ab4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	68ba      	ldr	r2, [r7, #8]
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	d202      	bcs.n	8009a98 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009a92:	4a08      	ldr	r2, [pc, #32]	; (8009ab4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	6013      	str	r3, [r2, #0]
}
 8009a98:	bf00      	nop
 8009a9a:	3710      	adds	r7, #16
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}
 8009aa0:	20000df8 	.word	0x20000df8
 8009aa4:	20000920 	.word	0x20000920
 8009aa8:	20000de0 	.word	0x20000de0
 8009aac:	20000db0 	.word	0x20000db0
 8009ab0:	20000dac 	.word	0x20000dac
 8009ab4:	20000e14 	.word	0x20000e14

08009ab8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b08a      	sub	sp, #40	; 0x28
 8009abc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009ac2:	f000 fb07 	bl	800a0d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009ac6:	4b1c      	ldr	r3, [pc, #112]	; (8009b38 <xTimerCreateTimerTask+0x80>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d021      	beq.n	8009b12 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009ad6:	1d3a      	adds	r2, r7, #4
 8009ad8:	f107 0108 	add.w	r1, r7, #8
 8009adc:	f107 030c 	add.w	r3, r7, #12
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f7fe fb07 	bl	80080f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009ae6:	6879      	ldr	r1, [r7, #4]
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	68fa      	ldr	r2, [r7, #12]
 8009aec:	9202      	str	r2, [sp, #8]
 8009aee:	9301      	str	r3, [sp, #4]
 8009af0:	2302      	movs	r3, #2
 8009af2:	9300      	str	r3, [sp, #0]
 8009af4:	2300      	movs	r3, #0
 8009af6:	460a      	mov	r2, r1
 8009af8:	4910      	ldr	r1, [pc, #64]	; (8009b3c <xTimerCreateTimerTask+0x84>)
 8009afa:	4811      	ldr	r0, [pc, #68]	; (8009b40 <xTimerCreateTimerTask+0x88>)
 8009afc:	f7ff f8b4 	bl	8008c68 <xTaskCreateStatic>
 8009b00:	4603      	mov	r3, r0
 8009b02:	4a10      	ldr	r2, [pc, #64]	; (8009b44 <xTimerCreateTimerTask+0x8c>)
 8009b04:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009b06:	4b0f      	ldr	r3, [pc, #60]	; (8009b44 <xTimerCreateTimerTask+0x8c>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d001      	beq.n	8009b12 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009b0e:	2301      	movs	r3, #1
 8009b10:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d10a      	bne.n	8009b2e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b1c:	f383 8811 	msr	BASEPRI, r3
 8009b20:	f3bf 8f6f 	isb	sy
 8009b24:	f3bf 8f4f 	dsb	sy
 8009b28:	613b      	str	r3, [r7, #16]
}
 8009b2a:	bf00      	nop
 8009b2c:	e7fe      	b.n	8009b2c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009b2e:	697b      	ldr	r3, [r7, #20]
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3718      	adds	r7, #24
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}
 8009b38:	20000e50 	.word	0x20000e50
 8009b3c:	0800b600 	.word	0x0800b600
 8009b40:	08009c7d 	.word	0x08009c7d
 8009b44:	20000e54 	.word	0x20000e54

08009b48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b08a      	sub	sp, #40	; 0x28
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	60f8      	str	r0, [r7, #12]
 8009b50:	60b9      	str	r1, [r7, #8]
 8009b52:	607a      	str	r2, [r7, #4]
 8009b54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009b56:	2300      	movs	r3, #0
 8009b58:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d10a      	bne.n	8009b76 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b64:	f383 8811 	msr	BASEPRI, r3
 8009b68:	f3bf 8f6f 	isb	sy
 8009b6c:	f3bf 8f4f 	dsb	sy
 8009b70:	623b      	str	r3, [r7, #32]
}
 8009b72:	bf00      	nop
 8009b74:	e7fe      	b.n	8009b74 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009b76:	4b1a      	ldr	r3, [pc, #104]	; (8009be0 <xTimerGenericCommand+0x98>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d02a      	beq.n	8009bd4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	2b05      	cmp	r3, #5
 8009b8e:	dc18      	bgt.n	8009bc2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009b90:	f7ff feb2 	bl	80098f8 <xTaskGetSchedulerState>
 8009b94:	4603      	mov	r3, r0
 8009b96:	2b02      	cmp	r3, #2
 8009b98:	d109      	bne.n	8009bae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009b9a:	4b11      	ldr	r3, [pc, #68]	; (8009be0 <xTimerGenericCommand+0x98>)
 8009b9c:	6818      	ldr	r0, [r3, #0]
 8009b9e:	f107 0110 	add.w	r1, r7, #16
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ba6:	f7fe fc77 	bl	8008498 <xQueueGenericSend>
 8009baa:	6278      	str	r0, [r7, #36]	; 0x24
 8009bac:	e012      	b.n	8009bd4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009bae:	4b0c      	ldr	r3, [pc, #48]	; (8009be0 <xTimerGenericCommand+0x98>)
 8009bb0:	6818      	ldr	r0, [r3, #0]
 8009bb2:	f107 0110 	add.w	r1, r7, #16
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	2200      	movs	r2, #0
 8009bba:	f7fe fc6d 	bl	8008498 <xQueueGenericSend>
 8009bbe:	6278      	str	r0, [r7, #36]	; 0x24
 8009bc0:	e008      	b.n	8009bd4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009bc2:	4b07      	ldr	r3, [pc, #28]	; (8009be0 <xTimerGenericCommand+0x98>)
 8009bc4:	6818      	ldr	r0, [r3, #0]
 8009bc6:	f107 0110 	add.w	r1, r7, #16
 8009bca:	2300      	movs	r3, #0
 8009bcc:	683a      	ldr	r2, [r7, #0]
 8009bce:	f7fe fd61 	bl	8008694 <xQueueGenericSendFromISR>
 8009bd2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3728      	adds	r7, #40	; 0x28
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	20000e50 	.word	0x20000e50

08009be4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b088      	sub	sp, #32
 8009be8:	af02      	add	r7, sp, #8
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bee:	4b22      	ldr	r3, [pc, #136]	; (8009c78 <prvProcessExpiredTimer+0x94>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	68db      	ldr	r3, [r3, #12]
 8009bf4:	68db      	ldr	r3, [r3, #12]
 8009bf6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	3304      	adds	r3, #4
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f7fe fb1d 	bl	800823c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c08:	f003 0304 	and.w	r3, r3, #4
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d022      	beq.n	8009c56 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	699a      	ldr	r2, [r3, #24]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	18d1      	adds	r1, r2, r3
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	683a      	ldr	r2, [r7, #0]
 8009c1c:	6978      	ldr	r0, [r7, #20]
 8009c1e:	f000 f8d1 	bl	8009dc4 <prvInsertTimerInActiveList>
 8009c22:	4603      	mov	r3, r0
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d01f      	beq.n	8009c68 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c28:	2300      	movs	r3, #0
 8009c2a:	9300      	str	r3, [sp, #0]
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	687a      	ldr	r2, [r7, #4]
 8009c30:	2100      	movs	r1, #0
 8009c32:	6978      	ldr	r0, [r7, #20]
 8009c34:	f7ff ff88 	bl	8009b48 <xTimerGenericCommand>
 8009c38:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d113      	bne.n	8009c68 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c44:	f383 8811 	msr	BASEPRI, r3
 8009c48:	f3bf 8f6f 	isb	sy
 8009c4c:	f3bf 8f4f 	dsb	sy
 8009c50:	60fb      	str	r3, [r7, #12]
}
 8009c52:	bf00      	nop
 8009c54:	e7fe      	b.n	8009c54 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c5c:	f023 0301 	bic.w	r3, r3, #1
 8009c60:	b2da      	uxtb	r2, r3
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	6a1b      	ldr	r3, [r3, #32]
 8009c6c:	6978      	ldr	r0, [r7, #20]
 8009c6e:	4798      	blx	r3
}
 8009c70:	bf00      	nop
 8009c72:	3718      	adds	r7, #24
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}
 8009c78:	20000e48 	.word	0x20000e48

08009c7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b084      	sub	sp, #16
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c84:	f107 0308 	add.w	r3, r7, #8
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f000 f857 	bl	8009d3c <prvGetNextExpireTime>
 8009c8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	4619      	mov	r1, r3
 8009c94:	68f8      	ldr	r0, [r7, #12]
 8009c96:	f000 f803 	bl	8009ca0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009c9a:	f000 f8d5 	bl	8009e48 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c9e:	e7f1      	b.n	8009c84 <prvTimerTask+0x8>

08009ca0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009caa:	f7ff fa39 	bl	8009120 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009cae:	f107 0308 	add.w	r3, r7, #8
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f000 f866 	bl	8009d84 <prvSampleTimeNow>
 8009cb8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d130      	bne.n	8009d22 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d10a      	bne.n	8009cdc <prvProcessTimerOrBlockTask+0x3c>
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d806      	bhi.n	8009cdc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009cce:	f7ff fa35 	bl	800913c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009cd2:	68f9      	ldr	r1, [r7, #12]
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f7ff ff85 	bl	8009be4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009cda:	e024      	b.n	8009d26 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d008      	beq.n	8009cf4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009ce2:	4b13      	ldr	r3, [pc, #76]	; (8009d30 <prvProcessTimerOrBlockTask+0x90>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d101      	bne.n	8009cf0 <prvProcessTimerOrBlockTask+0x50>
 8009cec:	2301      	movs	r3, #1
 8009cee:	e000      	b.n	8009cf2 <prvProcessTimerOrBlockTask+0x52>
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009cf4:	4b0f      	ldr	r3, [pc, #60]	; (8009d34 <prvProcessTimerOrBlockTask+0x94>)
 8009cf6:	6818      	ldr	r0, [r3, #0]
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	1ad3      	subs	r3, r2, r3
 8009cfe:	683a      	ldr	r2, [r7, #0]
 8009d00:	4619      	mov	r1, r3
 8009d02:	f7fe ff7d 	bl	8008c00 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009d06:	f7ff fa19 	bl	800913c <xTaskResumeAll>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d10a      	bne.n	8009d26 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009d10:	4b09      	ldr	r3, [pc, #36]	; (8009d38 <prvProcessTimerOrBlockTask+0x98>)
 8009d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d16:	601a      	str	r2, [r3, #0]
 8009d18:	f3bf 8f4f 	dsb	sy
 8009d1c:	f3bf 8f6f 	isb	sy
}
 8009d20:	e001      	b.n	8009d26 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009d22:	f7ff fa0b 	bl	800913c <xTaskResumeAll>
}
 8009d26:	bf00      	nop
 8009d28:	3710      	adds	r7, #16
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	20000e4c 	.word	0x20000e4c
 8009d34:	20000e50 	.word	0x20000e50
 8009d38:	e000ed04 	.word	0xe000ed04

08009d3c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b085      	sub	sp, #20
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009d44:	4b0e      	ldr	r3, [pc, #56]	; (8009d80 <prvGetNextExpireTime+0x44>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d101      	bne.n	8009d52 <prvGetNextExpireTime+0x16>
 8009d4e:	2201      	movs	r2, #1
 8009d50:	e000      	b.n	8009d54 <prvGetNextExpireTime+0x18>
 8009d52:	2200      	movs	r2, #0
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d105      	bne.n	8009d6c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d60:	4b07      	ldr	r3, [pc, #28]	; (8009d80 <prvGetNextExpireTime+0x44>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	68db      	ldr	r3, [r3, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	60fb      	str	r3, [r7, #12]
 8009d6a:	e001      	b.n	8009d70 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009d70:	68fb      	ldr	r3, [r7, #12]
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3714      	adds	r7, #20
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr
 8009d7e:	bf00      	nop
 8009d80:	20000e48 	.word	0x20000e48

08009d84 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009d8c:	f7ff fa74 	bl	8009278 <xTaskGetTickCount>
 8009d90:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009d92:	4b0b      	ldr	r3, [pc, #44]	; (8009dc0 <prvSampleTimeNow+0x3c>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	68fa      	ldr	r2, [r7, #12]
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d205      	bcs.n	8009da8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009d9c:	f000 f936 	bl	800a00c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2201      	movs	r2, #1
 8009da4:	601a      	str	r2, [r3, #0]
 8009da6:	e002      	b.n	8009dae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009dae:	4a04      	ldr	r2, [pc, #16]	; (8009dc0 <prvSampleTimeNow+0x3c>)
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009db4:	68fb      	ldr	r3, [r7, #12]
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3710      	adds	r7, #16
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
 8009dbe:	bf00      	nop
 8009dc0:	20000e58 	.word	0x20000e58

08009dc4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b086      	sub	sp, #24
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	60f8      	str	r0, [r7, #12]
 8009dcc:	60b9      	str	r1, [r7, #8]
 8009dce:	607a      	str	r2, [r7, #4]
 8009dd0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	68ba      	ldr	r2, [r7, #8]
 8009dda:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	68fa      	ldr	r2, [r7, #12]
 8009de0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009de2:	68ba      	ldr	r2, [r7, #8]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d812      	bhi.n	8009e10 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	1ad2      	subs	r2, r2, r3
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	699b      	ldr	r3, [r3, #24]
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d302      	bcc.n	8009dfe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009df8:	2301      	movs	r3, #1
 8009dfa:	617b      	str	r3, [r7, #20]
 8009dfc:	e01b      	b.n	8009e36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009dfe:	4b10      	ldr	r3, [pc, #64]	; (8009e40 <prvInsertTimerInActiveList+0x7c>)
 8009e00:	681a      	ldr	r2, [r3, #0]
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	3304      	adds	r3, #4
 8009e06:	4619      	mov	r1, r3
 8009e08:	4610      	mov	r0, r2
 8009e0a:	f7fe f9de 	bl	80081ca <vListInsert>
 8009e0e:	e012      	b.n	8009e36 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d206      	bcs.n	8009e26 <prvInsertTimerInActiveList+0x62>
 8009e18:	68ba      	ldr	r2, [r7, #8]
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d302      	bcc.n	8009e26 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009e20:	2301      	movs	r3, #1
 8009e22:	617b      	str	r3, [r7, #20]
 8009e24:	e007      	b.n	8009e36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e26:	4b07      	ldr	r3, [pc, #28]	; (8009e44 <prvInsertTimerInActiveList+0x80>)
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	3304      	adds	r3, #4
 8009e2e:	4619      	mov	r1, r3
 8009e30:	4610      	mov	r0, r2
 8009e32:	f7fe f9ca 	bl	80081ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009e36:	697b      	ldr	r3, [r7, #20]
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3718      	adds	r7, #24
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}
 8009e40:	20000e4c 	.word	0x20000e4c
 8009e44:	20000e48 	.word	0x20000e48

08009e48 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b08e      	sub	sp, #56	; 0x38
 8009e4c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e4e:	e0ca      	b.n	8009fe6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	da18      	bge.n	8009e88 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009e56:	1d3b      	adds	r3, r7, #4
 8009e58:	3304      	adds	r3, #4
 8009e5a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d10a      	bne.n	8009e78 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e66:	f383 8811 	msr	BASEPRI, r3
 8009e6a:	f3bf 8f6f 	isb	sy
 8009e6e:	f3bf 8f4f 	dsb	sy
 8009e72:	61fb      	str	r3, [r7, #28]
}
 8009e74:	bf00      	nop
 8009e76:	e7fe      	b.n	8009e76 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e7e:	6850      	ldr	r0, [r2, #4]
 8009e80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e82:	6892      	ldr	r2, [r2, #8]
 8009e84:	4611      	mov	r1, r2
 8009e86:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	f2c0 80aa 	blt.w	8009fe4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e96:	695b      	ldr	r3, [r3, #20]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d004      	beq.n	8009ea6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e9e:	3304      	adds	r3, #4
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f7fe f9cb 	bl	800823c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009ea6:	463b      	mov	r3, r7
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f7ff ff6b 	bl	8009d84 <prvSampleTimeNow>
 8009eae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2b09      	cmp	r3, #9
 8009eb4:	f200 8097 	bhi.w	8009fe6 <prvProcessReceivedCommands+0x19e>
 8009eb8:	a201      	add	r2, pc, #4	; (adr r2, 8009ec0 <prvProcessReceivedCommands+0x78>)
 8009eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ebe:	bf00      	nop
 8009ec0:	08009ee9 	.word	0x08009ee9
 8009ec4:	08009ee9 	.word	0x08009ee9
 8009ec8:	08009ee9 	.word	0x08009ee9
 8009ecc:	08009f5d 	.word	0x08009f5d
 8009ed0:	08009f71 	.word	0x08009f71
 8009ed4:	08009fbb 	.word	0x08009fbb
 8009ed8:	08009ee9 	.word	0x08009ee9
 8009edc:	08009ee9 	.word	0x08009ee9
 8009ee0:	08009f5d 	.word	0x08009f5d
 8009ee4:	08009f71 	.word	0x08009f71
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009eee:	f043 0301 	orr.w	r3, r3, #1
 8009ef2:	b2da      	uxtb	r2, r3
 8009ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009efa:	68ba      	ldr	r2, [r7, #8]
 8009efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009efe:	699b      	ldr	r3, [r3, #24]
 8009f00:	18d1      	adds	r1, r2, r3
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f08:	f7ff ff5c 	bl	8009dc4 <prvInsertTimerInActiveList>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d069      	beq.n	8009fe6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f14:	6a1b      	ldr	r3, [r3, #32]
 8009f16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f18:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f20:	f003 0304 	and.w	r3, r3, #4
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d05e      	beq.n	8009fe6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009f28:	68ba      	ldr	r2, [r7, #8]
 8009f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f2c:	699b      	ldr	r3, [r3, #24]
 8009f2e:	441a      	add	r2, r3
 8009f30:	2300      	movs	r3, #0
 8009f32:	9300      	str	r3, [sp, #0]
 8009f34:	2300      	movs	r3, #0
 8009f36:	2100      	movs	r1, #0
 8009f38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f3a:	f7ff fe05 	bl	8009b48 <xTimerGenericCommand>
 8009f3e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009f40:	6a3b      	ldr	r3, [r7, #32]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d14f      	bne.n	8009fe6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4a:	f383 8811 	msr	BASEPRI, r3
 8009f4e:	f3bf 8f6f 	isb	sy
 8009f52:	f3bf 8f4f 	dsb	sy
 8009f56:	61bb      	str	r3, [r7, #24]
}
 8009f58:	bf00      	nop
 8009f5a:	e7fe      	b.n	8009f5a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f62:	f023 0301 	bic.w	r3, r3, #1
 8009f66:	b2da      	uxtb	r2, r3
 8009f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009f6e:	e03a      	b.n	8009fe6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f76:	f043 0301 	orr.w	r3, r3, #1
 8009f7a:	b2da      	uxtb	r2, r3
 8009f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009f82:	68ba      	ldr	r2, [r7, #8]
 8009f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f86:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f8a:	699b      	ldr	r3, [r3, #24]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d10a      	bne.n	8009fa6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f94:	f383 8811 	msr	BASEPRI, r3
 8009f98:	f3bf 8f6f 	isb	sy
 8009f9c:	f3bf 8f4f 	dsb	sy
 8009fa0:	617b      	str	r3, [r7, #20]
}
 8009fa2:	bf00      	nop
 8009fa4:	e7fe      	b.n	8009fa4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa8:	699a      	ldr	r2, [r3, #24]
 8009faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fac:	18d1      	adds	r1, r2, r3
 8009fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fb4:	f7ff ff06 	bl	8009dc4 <prvInsertTimerInActiveList>
					break;
 8009fb8:	e015      	b.n	8009fe6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fc0:	f003 0302 	and.w	r3, r3, #2
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d103      	bne.n	8009fd0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009fc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fca:	f000 fbe1 	bl	800a790 <vPortFree>
 8009fce:	e00a      	b.n	8009fe6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fd6:	f023 0301 	bic.w	r3, r3, #1
 8009fda:	b2da      	uxtb	r2, r3
 8009fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009fe2:	e000      	b.n	8009fe6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009fe4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009fe6:	4b08      	ldr	r3, [pc, #32]	; (800a008 <prvProcessReceivedCommands+0x1c0>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	1d39      	adds	r1, r7, #4
 8009fec:	2200      	movs	r2, #0
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f7fe fbec 	bl	80087cc <xQueueReceive>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	f47f af2a 	bne.w	8009e50 <prvProcessReceivedCommands+0x8>
	}
}
 8009ffc:	bf00      	nop
 8009ffe:	bf00      	nop
 800a000:	3730      	adds	r7, #48	; 0x30
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
 800a006:	bf00      	nop
 800a008:	20000e50 	.word	0x20000e50

0800a00c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b088      	sub	sp, #32
 800a010:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a012:	e048      	b.n	800a0a6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a014:	4b2d      	ldr	r3, [pc, #180]	; (800a0cc <prvSwitchTimerLists+0xc0>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	68db      	ldr	r3, [r3, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a01e:	4b2b      	ldr	r3, [pc, #172]	; (800a0cc <prvSwitchTimerLists+0xc0>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	68db      	ldr	r3, [r3, #12]
 800a024:	68db      	ldr	r3, [r3, #12]
 800a026:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	3304      	adds	r3, #4
 800a02c:	4618      	mov	r0, r3
 800a02e:	f7fe f905 	bl	800823c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	6a1b      	ldr	r3, [r3, #32]
 800a036:	68f8      	ldr	r0, [r7, #12]
 800a038:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a040:	f003 0304 	and.w	r3, r3, #4
 800a044:	2b00      	cmp	r3, #0
 800a046:	d02e      	beq.n	800a0a6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	699b      	ldr	r3, [r3, #24]
 800a04c:	693a      	ldr	r2, [r7, #16]
 800a04e:	4413      	add	r3, r2
 800a050:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a052:	68ba      	ldr	r2, [r7, #8]
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	429a      	cmp	r2, r3
 800a058:	d90e      	bls.n	800a078 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	68ba      	ldr	r2, [r7, #8]
 800a05e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	68fa      	ldr	r2, [r7, #12]
 800a064:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a066:	4b19      	ldr	r3, [pc, #100]	; (800a0cc <prvSwitchTimerLists+0xc0>)
 800a068:	681a      	ldr	r2, [r3, #0]
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	3304      	adds	r3, #4
 800a06e:	4619      	mov	r1, r3
 800a070:	4610      	mov	r0, r2
 800a072:	f7fe f8aa 	bl	80081ca <vListInsert>
 800a076:	e016      	b.n	800a0a6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a078:	2300      	movs	r3, #0
 800a07a:	9300      	str	r3, [sp, #0]
 800a07c:	2300      	movs	r3, #0
 800a07e:	693a      	ldr	r2, [r7, #16]
 800a080:	2100      	movs	r1, #0
 800a082:	68f8      	ldr	r0, [r7, #12]
 800a084:	f7ff fd60 	bl	8009b48 <xTimerGenericCommand>
 800a088:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d10a      	bne.n	800a0a6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a094:	f383 8811 	msr	BASEPRI, r3
 800a098:	f3bf 8f6f 	isb	sy
 800a09c:	f3bf 8f4f 	dsb	sy
 800a0a0:	603b      	str	r3, [r7, #0]
}
 800a0a2:	bf00      	nop
 800a0a4:	e7fe      	b.n	800a0a4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a0a6:	4b09      	ldr	r3, [pc, #36]	; (800a0cc <prvSwitchTimerLists+0xc0>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d1b1      	bne.n	800a014 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a0b0:	4b06      	ldr	r3, [pc, #24]	; (800a0cc <prvSwitchTimerLists+0xc0>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a0b6:	4b06      	ldr	r3, [pc, #24]	; (800a0d0 <prvSwitchTimerLists+0xc4>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4a04      	ldr	r2, [pc, #16]	; (800a0cc <prvSwitchTimerLists+0xc0>)
 800a0bc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a0be:	4a04      	ldr	r2, [pc, #16]	; (800a0d0 <prvSwitchTimerLists+0xc4>)
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	6013      	str	r3, [r2, #0]
}
 800a0c4:	bf00      	nop
 800a0c6:	3718      	adds	r7, #24
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}
 800a0cc:	20000e48 	.word	0x20000e48
 800a0d0:	20000e4c 	.word	0x20000e4c

0800a0d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b082      	sub	sp, #8
 800a0d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a0da:	f000 f96b 	bl	800a3b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a0de:	4b15      	ldr	r3, [pc, #84]	; (800a134 <prvCheckForValidListAndQueue+0x60>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d120      	bne.n	800a128 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a0e6:	4814      	ldr	r0, [pc, #80]	; (800a138 <prvCheckForValidListAndQueue+0x64>)
 800a0e8:	f7fe f81e 	bl	8008128 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a0ec:	4813      	ldr	r0, [pc, #76]	; (800a13c <prvCheckForValidListAndQueue+0x68>)
 800a0ee:	f7fe f81b 	bl	8008128 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a0f2:	4b13      	ldr	r3, [pc, #76]	; (800a140 <prvCheckForValidListAndQueue+0x6c>)
 800a0f4:	4a10      	ldr	r2, [pc, #64]	; (800a138 <prvCheckForValidListAndQueue+0x64>)
 800a0f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a0f8:	4b12      	ldr	r3, [pc, #72]	; (800a144 <prvCheckForValidListAndQueue+0x70>)
 800a0fa:	4a10      	ldr	r2, [pc, #64]	; (800a13c <prvCheckForValidListAndQueue+0x68>)
 800a0fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a0fe:	2300      	movs	r3, #0
 800a100:	9300      	str	r3, [sp, #0]
 800a102:	4b11      	ldr	r3, [pc, #68]	; (800a148 <prvCheckForValidListAndQueue+0x74>)
 800a104:	4a11      	ldr	r2, [pc, #68]	; (800a14c <prvCheckForValidListAndQueue+0x78>)
 800a106:	2110      	movs	r1, #16
 800a108:	200a      	movs	r0, #10
 800a10a:	f7fe f929 	bl	8008360 <xQueueGenericCreateStatic>
 800a10e:	4603      	mov	r3, r0
 800a110:	4a08      	ldr	r2, [pc, #32]	; (800a134 <prvCheckForValidListAndQueue+0x60>)
 800a112:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a114:	4b07      	ldr	r3, [pc, #28]	; (800a134 <prvCheckForValidListAndQueue+0x60>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d005      	beq.n	800a128 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a11c:	4b05      	ldr	r3, [pc, #20]	; (800a134 <prvCheckForValidListAndQueue+0x60>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	490b      	ldr	r1, [pc, #44]	; (800a150 <prvCheckForValidListAndQueue+0x7c>)
 800a122:	4618      	mov	r0, r3
 800a124:	f7fe fd42 	bl	8008bac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a128:	f000 f974 	bl	800a414 <vPortExitCritical>
}
 800a12c:	bf00      	nop
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	20000e50 	.word	0x20000e50
 800a138:	20000e20 	.word	0x20000e20
 800a13c:	20000e34 	.word	0x20000e34
 800a140:	20000e48 	.word	0x20000e48
 800a144:	20000e4c 	.word	0x20000e4c
 800a148:	20000efc 	.word	0x20000efc
 800a14c:	20000e5c 	.word	0x20000e5c
 800a150:	0800b608 	.word	0x0800b608

0800a154 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a154:	b480      	push	{r7}
 800a156:	b085      	sub	sp, #20
 800a158:	af00      	add	r7, sp, #0
 800a15a:	60f8      	str	r0, [r7, #12]
 800a15c:	60b9      	str	r1, [r7, #8]
 800a15e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	3b04      	subs	r3, #4
 800a164:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a16c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	3b04      	subs	r3, #4
 800a172:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	f023 0201 	bic.w	r2, r3, #1
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	3b04      	subs	r3, #4
 800a182:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a184:	4a0c      	ldr	r2, [pc, #48]	; (800a1b8 <pxPortInitialiseStack+0x64>)
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	3b14      	subs	r3, #20
 800a18e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	3b04      	subs	r3, #4
 800a19a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f06f 0202 	mvn.w	r2, #2
 800a1a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	3b20      	subs	r3, #32
 800a1a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3714      	adds	r7, #20
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr
 800a1b8:	0800a1bd 	.word	0x0800a1bd

0800a1bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b085      	sub	sp, #20
 800a1c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a1c6:	4b12      	ldr	r3, [pc, #72]	; (800a210 <prvTaskExitError+0x54>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ce:	d00a      	beq.n	800a1e6 <prvTaskExitError+0x2a>
	__asm volatile
 800a1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d4:	f383 8811 	msr	BASEPRI, r3
 800a1d8:	f3bf 8f6f 	isb	sy
 800a1dc:	f3bf 8f4f 	dsb	sy
 800a1e0:	60fb      	str	r3, [r7, #12]
}
 800a1e2:	bf00      	nop
 800a1e4:	e7fe      	b.n	800a1e4 <prvTaskExitError+0x28>
	__asm volatile
 800a1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ea:	f383 8811 	msr	BASEPRI, r3
 800a1ee:	f3bf 8f6f 	isb	sy
 800a1f2:	f3bf 8f4f 	dsb	sy
 800a1f6:	60bb      	str	r3, [r7, #8]
}
 800a1f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a1fa:	bf00      	nop
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d0fc      	beq.n	800a1fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a202:	bf00      	nop
 800a204:	bf00      	nop
 800a206:	3714      	adds	r7, #20
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr
 800a210:	200000ac 	.word	0x200000ac
	...

0800a220 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a220:	4b07      	ldr	r3, [pc, #28]	; (800a240 <pxCurrentTCBConst2>)
 800a222:	6819      	ldr	r1, [r3, #0]
 800a224:	6808      	ldr	r0, [r1, #0]
 800a226:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a22a:	f380 8809 	msr	PSP, r0
 800a22e:	f3bf 8f6f 	isb	sy
 800a232:	f04f 0000 	mov.w	r0, #0
 800a236:	f380 8811 	msr	BASEPRI, r0
 800a23a:	4770      	bx	lr
 800a23c:	f3af 8000 	nop.w

0800a240 <pxCurrentTCBConst2>:
 800a240:	20000920 	.word	0x20000920
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a244:	bf00      	nop
 800a246:	bf00      	nop

0800a248 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a248:	4808      	ldr	r0, [pc, #32]	; (800a26c <prvPortStartFirstTask+0x24>)
 800a24a:	6800      	ldr	r0, [r0, #0]
 800a24c:	6800      	ldr	r0, [r0, #0]
 800a24e:	f380 8808 	msr	MSP, r0
 800a252:	f04f 0000 	mov.w	r0, #0
 800a256:	f380 8814 	msr	CONTROL, r0
 800a25a:	b662      	cpsie	i
 800a25c:	b661      	cpsie	f
 800a25e:	f3bf 8f4f 	dsb	sy
 800a262:	f3bf 8f6f 	isb	sy
 800a266:	df00      	svc	0
 800a268:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a26a:	bf00      	nop
 800a26c:	e000ed08 	.word	0xe000ed08

0800a270 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b086      	sub	sp, #24
 800a274:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a276:	4b46      	ldr	r3, [pc, #280]	; (800a390 <xPortStartScheduler+0x120>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4a46      	ldr	r2, [pc, #280]	; (800a394 <xPortStartScheduler+0x124>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d10a      	bne.n	800a296 <xPortStartScheduler+0x26>
	__asm volatile
 800a280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a284:	f383 8811 	msr	BASEPRI, r3
 800a288:	f3bf 8f6f 	isb	sy
 800a28c:	f3bf 8f4f 	dsb	sy
 800a290:	613b      	str	r3, [r7, #16]
}
 800a292:	bf00      	nop
 800a294:	e7fe      	b.n	800a294 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a296:	4b3e      	ldr	r3, [pc, #248]	; (800a390 <xPortStartScheduler+0x120>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4a3f      	ldr	r2, [pc, #252]	; (800a398 <xPortStartScheduler+0x128>)
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d10a      	bne.n	800a2b6 <xPortStartScheduler+0x46>
	__asm volatile
 800a2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a4:	f383 8811 	msr	BASEPRI, r3
 800a2a8:	f3bf 8f6f 	isb	sy
 800a2ac:	f3bf 8f4f 	dsb	sy
 800a2b0:	60fb      	str	r3, [r7, #12]
}
 800a2b2:	bf00      	nop
 800a2b4:	e7fe      	b.n	800a2b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a2b6:	4b39      	ldr	r3, [pc, #228]	; (800a39c <xPortStartScheduler+0x12c>)
 800a2b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	781b      	ldrb	r3, [r3, #0]
 800a2be:	b2db      	uxtb	r3, r3
 800a2c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	22ff      	movs	r2, #255	; 0xff
 800a2c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	b2db      	uxtb	r3, r3
 800a2ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a2d0:	78fb      	ldrb	r3, [r7, #3]
 800a2d2:	b2db      	uxtb	r3, r3
 800a2d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a2d8:	b2da      	uxtb	r2, r3
 800a2da:	4b31      	ldr	r3, [pc, #196]	; (800a3a0 <xPortStartScheduler+0x130>)
 800a2dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a2de:	4b31      	ldr	r3, [pc, #196]	; (800a3a4 <xPortStartScheduler+0x134>)
 800a2e0:	2207      	movs	r2, #7
 800a2e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a2e4:	e009      	b.n	800a2fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a2e6:	4b2f      	ldr	r3, [pc, #188]	; (800a3a4 <xPortStartScheduler+0x134>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	3b01      	subs	r3, #1
 800a2ec:	4a2d      	ldr	r2, [pc, #180]	; (800a3a4 <xPortStartScheduler+0x134>)
 800a2ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a2f0:	78fb      	ldrb	r3, [r7, #3]
 800a2f2:	b2db      	uxtb	r3, r3
 800a2f4:	005b      	lsls	r3, r3, #1
 800a2f6:	b2db      	uxtb	r3, r3
 800a2f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a2fa:	78fb      	ldrb	r3, [r7, #3]
 800a2fc:	b2db      	uxtb	r3, r3
 800a2fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a302:	2b80      	cmp	r3, #128	; 0x80
 800a304:	d0ef      	beq.n	800a2e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a306:	4b27      	ldr	r3, [pc, #156]	; (800a3a4 <xPortStartScheduler+0x134>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f1c3 0307 	rsb	r3, r3, #7
 800a30e:	2b04      	cmp	r3, #4
 800a310:	d00a      	beq.n	800a328 <xPortStartScheduler+0xb8>
	__asm volatile
 800a312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a316:	f383 8811 	msr	BASEPRI, r3
 800a31a:	f3bf 8f6f 	isb	sy
 800a31e:	f3bf 8f4f 	dsb	sy
 800a322:	60bb      	str	r3, [r7, #8]
}
 800a324:	bf00      	nop
 800a326:	e7fe      	b.n	800a326 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a328:	4b1e      	ldr	r3, [pc, #120]	; (800a3a4 <xPortStartScheduler+0x134>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	021b      	lsls	r3, r3, #8
 800a32e:	4a1d      	ldr	r2, [pc, #116]	; (800a3a4 <xPortStartScheduler+0x134>)
 800a330:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a332:	4b1c      	ldr	r3, [pc, #112]	; (800a3a4 <xPortStartScheduler+0x134>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a33a:	4a1a      	ldr	r2, [pc, #104]	; (800a3a4 <xPortStartScheduler+0x134>)
 800a33c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	b2da      	uxtb	r2, r3
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a346:	4b18      	ldr	r3, [pc, #96]	; (800a3a8 <xPortStartScheduler+0x138>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	4a17      	ldr	r2, [pc, #92]	; (800a3a8 <xPortStartScheduler+0x138>)
 800a34c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a350:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a352:	4b15      	ldr	r3, [pc, #84]	; (800a3a8 <xPortStartScheduler+0x138>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	4a14      	ldr	r2, [pc, #80]	; (800a3a8 <xPortStartScheduler+0x138>)
 800a358:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a35c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a35e:	f000 f8dd 	bl	800a51c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a362:	4b12      	ldr	r3, [pc, #72]	; (800a3ac <xPortStartScheduler+0x13c>)
 800a364:	2200      	movs	r2, #0
 800a366:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a368:	f000 f8fc 	bl	800a564 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a36c:	4b10      	ldr	r3, [pc, #64]	; (800a3b0 <xPortStartScheduler+0x140>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a0f      	ldr	r2, [pc, #60]	; (800a3b0 <xPortStartScheduler+0x140>)
 800a372:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a376:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a378:	f7ff ff66 	bl	800a248 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a37c:	f7ff f846 	bl	800940c <vTaskSwitchContext>
	prvTaskExitError();
 800a380:	f7ff ff1c 	bl	800a1bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a384:	2300      	movs	r3, #0
}
 800a386:	4618      	mov	r0, r3
 800a388:	3718      	adds	r7, #24
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	e000ed00 	.word	0xe000ed00
 800a394:	410fc271 	.word	0x410fc271
 800a398:	410fc270 	.word	0x410fc270
 800a39c:	e000e400 	.word	0xe000e400
 800a3a0:	20000f4c 	.word	0x20000f4c
 800a3a4:	20000f50 	.word	0x20000f50
 800a3a8:	e000ed20 	.word	0xe000ed20
 800a3ac:	200000ac 	.word	0x200000ac
 800a3b0:	e000ef34 	.word	0xe000ef34

0800a3b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b083      	sub	sp, #12
 800a3b8:	af00      	add	r7, sp, #0
	__asm volatile
 800a3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3be:	f383 8811 	msr	BASEPRI, r3
 800a3c2:	f3bf 8f6f 	isb	sy
 800a3c6:	f3bf 8f4f 	dsb	sy
 800a3ca:	607b      	str	r3, [r7, #4]
}
 800a3cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a3ce:	4b0f      	ldr	r3, [pc, #60]	; (800a40c <vPortEnterCritical+0x58>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	4a0d      	ldr	r2, [pc, #52]	; (800a40c <vPortEnterCritical+0x58>)
 800a3d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a3d8:	4b0c      	ldr	r3, [pc, #48]	; (800a40c <vPortEnterCritical+0x58>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	d10f      	bne.n	800a400 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a3e0:	4b0b      	ldr	r3, [pc, #44]	; (800a410 <vPortEnterCritical+0x5c>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	b2db      	uxtb	r3, r3
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d00a      	beq.n	800a400 <vPortEnterCritical+0x4c>
	__asm volatile
 800a3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ee:	f383 8811 	msr	BASEPRI, r3
 800a3f2:	f3bf 8f6f 	isb	sy
 800a3f6:	f3bf 8f4f 	dsb	sy
 800a3fa:	603b      	str	r3, [r7, #0]
}
 800a3fc:	bf00      	nop
 800a3fe:	e7fe      	b.n	800a3fe <vPortEnterCritical+0x4a>
	}
}
 800a400:	bf00      	nop
 800a402:	370c      	adds	r7, #12
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr
 800a40c:	200000ac 	.word	0x200000ac
 800a410:	e000ed04 	.word	0xe000ed04

0800a414 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a414:	b480      	push	{r7}
 800a416:	b083      	sub	sp, #12
 800a418:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a41a:	4b12      	ldr	r3, [pc, #72]	; (800a464 <vPortExitCritical+0x50>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d10a      	bne.n	800a438 <vPortExitCritical+0x24>
	__asm volatile
 800a422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a426:	f383 8811 	msr	BASEPRI, r3
 800a42a:	f3bf 8f6f 	isb	sy
 800a42e:	f3bf 8f4f 	dsb	sy
 800a432:	607b      	str	r3, [r7, #4]
}
 800a434:	bf00      	nop
 800a436:	e7fe      	b.n	800a436 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a438:	4b0a      	ldr	r3, [pc, #40]	; (800a464 <vPortExitCritical+0x50>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	3b01      	subs	r3, #1
 800a43e:	4a09      	ldr	r2, [pc, #36]	; (800a464 <vPortExitCritical+0x50>)
 800a440:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a442:	4b08      	ldr	r3, [pc, #32]	; (800a464 <vPortExitCritical+0x50>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d105      	bne.n	800a456 <vPortExitCritical+0x42>
 800a44a:	2300      	movs	r3, #0
 800a44c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	f383 8811 	msr	BASEPRI, r3
}
 800a454:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a456:	bf00      	nop
 800a458:	370c      	adds	r7, #12
 800a45a:	46bd      	mov	sp, r7
 800a45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a460:	4770      	bx	lr
 800a462:	bf00      	nop
 800a464:	200000ac 	.word	0x200000ac
	...

0800a470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a470:	f3ef 8009 	mrs	r0, PSP
 800a474:	f3bf 8f6f 	isb	sy
 800a478:	4b15      	ldr	r3, [pc, #84]	; (800a4d0 <pxCurrentTCBConst>)
 800a47a:	681a      	ldr	r2, [r3, #0]
 800a47c:	f01e 0f10 	tst.w	lr, #16
 800a480:	bf08      	it	eq
 800a482:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a486:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a48a:	6010      	str	r0, [r2, #0]
 800a48c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a490:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a494:	f380 8811 	msr	BASEPRI, r0
 800a498:	f3bf 8f4f 	dsb	sy
 800a49c:	f3bf 8f6f 	isb	sy
 800a4a0:	f7fe ffb4 	bl	800940c <vTaskSwitchContext>
 800a4a4:	f04f 0000 	mov.w	r0, #0
 800a4a8:	f380 8811 	msr	BASEPRI, r0
 800a4ac:	bc09      	pop	{r0, r3}
 800a4ae:	6819      	ldr	r1, [r3, #0]
 800a4b0:	6808      	ldr	r0, [r1, #0]
 800a4b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4b6:	f01e 0f10 	tst.w	lr, #16
 800a4ba:	bf08      	it	eq
 800a4bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a4c0:	f380 8809 	msr	PSP, r0
 800a4c4:	f3bf 8f6f 	isb	sy
 800a4c8:	4770      	bx	lr
 800a4ca:	bf00      	nop
 800a4cc:	f3af 8000 	nop.w

0800a4d0 <pxCurrentTCBConst>:
 800a4d0:	20000920 	.word	0x20000920
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a4d4:	bf00      	nop
 800a4d6:	bf00      	nop

0800a4d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b082      	sub	sp, #8
 800a4dc:	af00      	add	r7, sp, #0
	__asm volatile
 800a4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e2:	f383 8811 	msr	BASEPRI, r3
 800a4e6:	f3bf 8f6f 	isb	sy
 800a4ea:	f3bf 8f4f 	dsb	sy
 800a4ee:	607b      	str	r3, [r7, #4]
}
 800a4f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a4f2:	f7fe fed1 	bl	8009298 <xTaskIncrementTick>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d003      	beq.n	800a504 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a4fc:	4b06      	ldr	r3, [pc, #24]	; (800a518 <xPortSysTickHandler+0x40>)
 800a4fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a502:	601a      	str	r2, [r3, #0]
 800a504:	2300      	movs	r3, #0
 800a506:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	f383 8811 	msr	BASEPRI, r3
}
 800a50e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a510:	bf00      	nop
 800a512:	3708      	adds	r7, #8
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}
 800a518:	e000ed04 	.word	0xe000ed04

0800a51c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a51c:	b480      	push	{r7}
 800a51e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a520:	4b0b      	ldr	r3, [pc, #44]	; (800a550 <vPortSetupTimerInterrupt+0x34>)
 800a522:	2200      	movs	r2, #0
 800a524:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a526:	4b0b      	ldr	r3, [pc, #44]	; (800a554 <vPortSetupTimerInterrupt+0x38>)
 800a528:	2200      	movs	r2, #0
 800a52a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a52c:	4b0a      	ldr	r3, [pc, #40]	; (800a558 <vPortSetupTimerInterrupt+0x3c>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	4a0a      	ldr	r2, [pc, #40]	; (800a55c <vPortSetupTimerInterrupt+0x40>)
 800a532:	fba2 2303 	umull	r2, r3, r2, r3
 800a536:	099b      	lsrs	r3, r3, #6
 800a538:	4a09      	ldr	r2, [pc, #36]	; (800a560 <vPortSetupTimerInterrupt+0x44>)
 800a53a:	3b01      	subs	r3, #1
 800a53c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a53e:	4b04      	ldr	r3, [pc, #16]	; (800a550 <vPortSetupTimerInterrupt+0x34>)
 800a540:	2207      	movs	r2, #7
 800a542:	601a      	str	r2, [r3, #0]
}
 800a544:	bf00      	nop
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr
 800a54e:	bf00      	nop
 800a550:	e000e010 	.word	0xe000e010
 800a554:	e000e018 	.word	0xe000e018
 800a558:	20000000 	.word	0x20000000
 800a55c:	10624dd3 	.word	0x10624dd3
 800a560:	e000e014 	.word	0xe000e014

0800a564 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a564:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a574 <vPortEnableVFP+0x10>
 800a568:	6801      	ldr	r1, [r0, #0]
 800a56a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a56e:	6001      	str	r1, [r0, #0]
 800a570:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a572:	bf00      	nop
 800a574:	e000ed88 	.word	0xe000ed88

0800a578 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a578:	b480      	push	{r7}
 800a57a:	b085      	sub	sp, #20
 800a57c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a57e:	f3ef 8305 	mrs	r3, IPSR
 800a582:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	2b0f      	cmp	r3, #15
 800a588:	d914      	bls.n	800a5b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a58a:	4a17      	ldr	r2, [pc, #92]	; (800a5e8 <vPortValidateInterruptPriority+0x70>)
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	4413      	add	r3, r2
 800a590:	781b      	ldrb	r3, [r3, #0]
 800a592:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a594:	4b15      	ldr	r3, [pc, #84]	; (800a5ec <vPortValidateInterruptPriority+0x74>)
 800a596:	781b      	ldrb	r3, [r3, #0]
 800a598:	7afa      	ldrb	r2, [r7, #11]
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d20a      	bcs.n	800a5b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a2:	f383 8811 	msr	BASEPRI, r3
 800a5a6:	f3bf 8f6f 	isb	sy
 800a5aa:	f3bf 8f4f 	dsb	sy
 800a5ae:	607b      	str	r3, [r7, #4]
}
 800a5b0:	bf00      	nop
 800a5b2:	e7fe      	b.n	800a5b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a5b4:	4b0e      	ldr	r3, [pc, #56]	; (800a5f0 <vPortValidateInterruptPriority+0x78>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a5bc:	4b0d      	ldr	r3, [pc, #52]	; (800a5f4 <vPortValidateInterruptPriority+0x7c>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d90a      	bls.n	800a5da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a5c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c8:	f383 8811 	msr	BASEPRI, r3
 800a5cc:	f3bf 8f6f 	isb	sy
 800a5d0:	f3bf 8f4f 	dsb	sy
 800a5d4:	603b      	str	r3, [r7, #0]
}
 800a5d6:	bf00      	nop
 800a5d8:	e7fe      	b.n	800a5d8 <vPortValidateInterruptPriority+0x60>
	}
 800a5da:	bf00      	nop
 800a5dc:	3714      	adds	r7, #20
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e4:	4770      	bx	lr
 800a5e6:	bf00      	nop
 800a5e8:	e000e3f0 	.word	0xe000e3f0
 800a5ec:	20000f4c 	.word	0x20000f4c
 800a5f0:	e000ed0c 	.word	0xe000ed0c
 800a5f4:	20000f50 	.word	0x20000f50

0800a5f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b08a      	sub	sp, #40	; 0x28
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a600:	2300      	movs	r3, #0
 800a602:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a604:	f7fe fd8c 	bl	8009120 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a608:	4b5b      	ldr	r3, [pc, #364]	; (800a778 <pvPortMalloc+0x180>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d101      	bne.n	800a614 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a610:	f000 f920 	bl	800a854 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a614:	4b59      	ldr	r3, [pc, #356]	; (800a77c <pvPortMalloc+0x184>)
 800a616:	681a      	ldr	r2, [r3, #0]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	4013      	ands	r3, r2
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	f040 8093 	bne.w	800a748 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d01d      	beq.n	800a664 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a628:	2208      	movs	r2, #8
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	4413      	add	r3, r2
 800a62e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f003 0307 	and.w	r3, r3, #7
 800a636:	2b00      	cmp	r3, #0
 800a638:	d014      	beq.n	800a664 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f023 0307 	bic.w	r3, r3, #7
 800a640:	3308      	adds	r3, #8
 800a642:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f003 0307 	and.w	r3, r3, #7
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d00a      	beq.n	800a664 <pvPortMalloc+0x6c>
	__asm volatile
 800a64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a652:	f383 8811 	msr	BASEPRI, r3
 800a656:	f3bf 8f6f 	isb	sy
 800a65a:	f3bf 8f4f 	dsb	sy
 800a65e:	617b      	str	r3, [r7, #20]
}
 800a660:	bf00      	nop
 800a662:	e7fe      	b.n	800a662 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d06e      	beq.n	800a748 <pvPortMalloc+0x150>
 800a66a:	4b45      	ldr	r3, [pc, #276]	; (800a780 <pvPortMalloc+0x188>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	687a      	ldr	r2, [r7, #4]
 800a670:	429a      	cmp	r2, r3
 800a672:	d869      	bhi.n	800a748 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a674:	4b43      	ldr	r3, [pc, #268]	; (800a784 <pvPortMalloc+0x18c>)
 800a676:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a678:	4b42      	ldr	r3, [pc, #264]	; (800a784 <pvPortMalloc+0x18c>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a67e:	e004      	b.n	800a68a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a682:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	687a      	ldr	r2, [r7, #4]
 800a690:	429a      	cmp	r2, r3
 800a692:	d903      	bls.n	800a69c <pvPortMalloc+0xa4>
 800a694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d1f1      	bne.n	800a680 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a69c:	4b36      	ldr	r3, [pc, #216]	; (800a778 <pvPortMalloc+0x180>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d050      	beq.n	800a748 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a6a6:	6a3b      	ldr	r3, [r7, #32]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	2208      	movs	r2, #8
 800a6ac:	4413      	add	r3, r2
 800a6ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	6a3b      	ldr	r3, [r7, #32]
 800a6b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ba:	685a      	ldr	r2, [r3, #4]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	1ad2      	subs	r2, r2, r3
 800a6c0:	2308      	movs	r3, #8
 800a6c2:	005b      	lsls	r3, r3, #1
 800a6c4:	429a      	cmp	r2, r3
 800a6c6:	d91f      	bls.n	800a708 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a6c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	4413      	add	r3, r2
 800a6ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6d0:	69bb      	ldr	r3, [r7, #24]
 800a6d2:	f003 0307 	and.w	r3, r3, #7
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d00a      	beq.n	800a6f0 <pvPortMalloc+0xf8>
	__asm volatile
 800a6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6de:	f383 8811 	msr	BASEPRI, r3
 800a6e2:	f3bf 8f6f 	isb	sy
 800a6e6:	f3bf 8f4f 	dsb	sy
 800a6ea:	613b      	str	r3, [r7, #16]
}
 800a6ec:	bf00      	nop
 800a6ee:	e7fe      	b.n	800a6ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f2:	685a      	ldr	r2, [r3, #4]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	1ad2      	subs	r2, r2, r3
 800a6f8:	69bb      	ldr	r3, [r7, #24]
 800a6fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6fe:	687a      	ldr	r2, [r7, #4]
 800a700:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a702:	69b8      	ldr	r0, [r7, #24]
 800a704:	f000 f908 	bl	800a918 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a708:	4b1d      	ldr	r3, [pc, #116]	; (800a780 <pvPortMalloc+0x188>)
 800a70a:	681a      	ldr	r2, [r3, #0]
 800a70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a70e:	685b      	ldr	r3, [r3, #4]
 800a710:	1ad3      	subs	r3, r2, r3
 800a712:	4a1b      	ldr	r2, [pc, #108]	; (800a780 <pvPortMalloc+0x188>)
 800a714:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a716:	4b1a      	ldr	r3, [pc, #104]	; (800a780 <pvPortMalloc+0x188>)
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	4b1b      	ldr	r3, [pc, #108]	; (800a788 <pvPortMalloc+0x190>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	429a      	cmp	r2, r3
 800a720:	d203      	bcs.n	800a72a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a722:	4b17      	ldr	r3, [pc, #92]	; (800a780 <pvPortMalloc+0x188>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4a18      	ldr	r2, [pc, #96]	; (800a788 <pvPortMalloc+0x190>)
 800a728:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a72c:	685a      	ldr	r2, [r3, #4]
 800a72e:	4b13      	ldr	r3, [pc, #76]	; (800a77c <pvPortMalloc+0x184>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	431a      	orrs	r2, r3
 800a734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a736:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73a:	2200      	movs	r2, #0
 800a73c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a73e:	4b13      	ldr	r3, [pc, #76]	; (800a78c <pvPortMalloc+0x194>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	3301      	adds	r3, #1
 800a744:	4a11      	ldr	r2, [pc, #68]	; (800a78c <pvPortMalloc+0x194>)
 800a746:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a748:	f7fe fcf8 	bl	800913c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a74c:	69fb      	ldr	r3, [r7, #28]
 800a74e:	f003 0307 	and.w	r3, r3, #7
 800a752:	2b00      	cmp	r3, #0
 800a754:	d00a      	beq.n	800a76c <pvPortMalloc+0x174>
	__asm volatile
 800a756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a75a:	f383 8811 	msr	BASEPRI, r3
 800a75e:	f3bf 8f6f 	isb	sy
 800a762:	f3bf 8f4f 	dsb	sy
 800a766:	60fb      	str	r3, [r7, #12]
}
 800a768:	bf00      	nop
 800a76a:	e7fe      	b.n	800a76a <pvPortMalloc+0x172>
	return pvReturn;
 800a76c:	69fb      	ldr	r3, [r7, #28]
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3728      	adds	r7, #40	; 0x28
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
 800a776:	bf00      	nop
 800a778:	20004b5c 	.word	0x20004b5c
 800a77c:	20004b70 	.word	0x20004b70
 800a780:	20004b60 	.word	0x20004b60
 800a784:	20004b54 	.word	0x20004b54
 800a788:	20004b64 	.word	0x20004b64
 800a78c:	20004b68 	.word	0x20004b68

0800a790 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b086      	sub	sp, #24
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d04d      	beq.n	800a83e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a7a2:	2308      	movs	r3, #8
 800a7a4:	425b      	negs	r3, r3
 800a7a6:	697a      	ldr	r2, [r7, #20]
 800a7a8:	4413      	add	r3, r2
 800a7aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	685a      	ldr	r2, [r3, #4]
 800a7b4:	4b24      	ldr	r3, [pc, #144]	; (800a848 <vPortFree+0xb8>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	4013      	ands	r3, r2
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d10a      	bne.n	800a7d4 <vPortFree+0x44>
	__asm volatile
 800a7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c2:	f383 8811 	msr	BASEPRI, r3
 800a7c6:	f3bf 8f6f 	isb	sy
 800a7ca:	f3bf 8f4f 	dsb	sy
 800a7ce:	60fb      	str	r3, [r7, #12]
}
 800a7d0:	bf00      	nop
 800a7d2:	e7fe      	b.n	800a7d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d00a      	beq.n	800a7f2 <vPortFree+0x62>
	__asm volatile
 800a7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e0:	f383 8811 	msr	BASEPRI, r3
 800a7e4:	f3bf 8f6f 	isb	sy
 800a7e8:	f3bf 8f4f 	dsb	sy
 800a7ec:	60bb      	str	r3, [r7, #8]
}
 800a7ee:	bf00      	nop
 800a7f0:	e7fe      	b.n	800a7f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	685a      	ldr	r2, [r3, #4]
 800a7f6:	4b14      	ldr	r3, [pc, #80]	; (800a848 <vPortFree+0xb8>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	4013      	ands	r3, r2
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d01e      	beq.n	800a83e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d11a      	bne.n	800a83e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	685a      	ldr	r2, [r3, #4]
 800a80c:	4b0e      	ldr	r3, [pc, #56]	; (800a848 <vPortFree+0xb8>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	43db      	mvns	r3, r3
 800a812:	401a      	ands	r2, r3
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a818:	f7fe fc82 	bl	8009120 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	685a      	ldr	r2, [r3, #4]
 800a820:	4b0a      	ldr	r3, [pc, #40]	; (800a84c <vPortFree+0xbc>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4413      	add	r3, r2
 800a826:	4a09      	ldr	r2, [pc, #36]	; (800a84c <vPortFree+0xbc>)
 800a828:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a82a:	6938      	ldr	r0, [r7, #16]
 800a82c:	f000 f874 	bl	800a918 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a830:	4b07      	ldr	r3, [pc, #28]	; (800a850 <vPortFree+0xc0>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	3301      	adds	r3, #1
 800a836:	4a06      	ldr	r2, [pc, #24]	; (800a850 <vPortFree+0xc0>)
 800a838:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a83a:	f7fe fc7f 	bl	800913c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a83e:	bf00      	nop
 800a840:	3718      	adds	r7, #24
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
 800a846:	bf00      	nop
 800a848:	20004b70 	.word	0x20004b70
 800a84c:	20004b60 	.word	0x20004b60
 800a850:	20004b6c 	.word	0x20004b6c

0800a854 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a854:	b480      	push	{r7}
 800a856:	b085      	sub	sp, #20
 800a858:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a85a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a85e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a860:	4b27      	ldr	r3, [pc, #156]	; (800a900 <prvHeapInit+0xac>)
 800a862:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f003 0307 	and.w	r3, r3, #7
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d00c      	beq.n	800a888 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	3307      	adds	r3, #7
 800a872:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f023 0307 	bic.w	r3, r3, #7
 800a87a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a87c:	68ba      	ldr	r2, [r7, #8]
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	1ad3      	subs	r3, r2, r3
 800a882:	4a1f      	ldr	r2, [pc, #124]	; (800a900 <prvHeapInit+0xac>)
 800a884:	4413      	add	r3, r2
 800a886:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a88c:	4a1d      	ldr	r2, [pc, #116]	; (800a904 <prvHeapInit+0xb0>)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a892:	4b1c      	ldr	r3, [pc, #112]	; (800a904 <prvHeapInit+0xb0>)
 800a894:	2200      	movs	r2, #0
 800a896:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	68ba      	ldr	r2, [r7, #8]
 800a89c:	4413      	add	r3, r2
 800a89e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a8a0:	2208      	movs	r2, #8
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	1a9b      	subs	r3, r3, r2
 800a8a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f023 0307 	bic.w	r3, r3, #7
 800a8ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	4a15      	ldr	r2, [pc, #84]	; (800a908 <prvHeapInit+0xb4>)
 800a8b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a8b6:	4b14      	ldr	r3, [pc, #80]	; (800a908 <prvHeapInit+0xb4>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a8be:	4b12      	ldr	r3, [pc, #72]	; (800a908 <prvHeapInit+0xb4>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	68fa      	ldr	r2, [r7, #12]
 800a8ce:	1ad2      	subs	r2, r2, r3
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a8d4:	4b0c      	ldr	r3, [pc, #48]	; (800a908 <prvHeapInit+0xb4>)
 800a8d6:	681a      	ldr	r2, [r3, #0]
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	685b      	ldr	r3, [r3, #4]
 800a8e0:	4a0a      	ldr	r2, [pc, #40]	; (800a90c <prvHeapInit+0xb8>)
 800a8e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	4a09      	ldr	r2, [pc, #36]	; (800a910 <prvHeapInit+0xbc>)
 800a8ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a8ec:	4b09      	ldr	r3, [pc, #36]	; (800a914 <prvHeapInit+0xc0>)
 800a8ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a8f2:	601a      	str	r2, [r3, #0]
}
 800a8f4:	bf00      	nop
 800a8f6:	3714      	adds	r7, #20
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr
 800a900:	20000f54 	.word	0x20000f54
 800a904:	20004b54 	.word	0x20004b54
 800a908:	20004b5c 	.word	0x20004b5c
 800a90c:	20004b64 	.word	0x20004b64
 800a910:	20004b60 	.word	0x20004b60
 800a914:	20004b70 	.word	0x20004b70

0800a918 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a918:	b480      	push	{r7}
 800a91a:	b085      	sub	sp, #20
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a920:	4b28      	ldr	r3, [pc, #160]	; (800a9c4 <prvInsertBlockIntoFreeList+0xac>)
 800a922:	60fb      	str	r3, [r7, #12]
 800a924:	e002      	b.n	800a92c <prvInsertBlockIntoFreeList+0x14>
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	60fb      	str	r3, [r7, #12]
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	687a      	ldr	r2, [r7, #4]
 800a932:	429a      	cmp	r2, r3
 800a934:	d8f7      	bhi.n	800a926 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	685b      	ldr	r3, [r3, #4]
 800a93e:	68ba      	ldr	r2, [r7, #8]
 800a940:	4413      	add	r3, r2
 800a942:	687a      	ldr	r2, [r7, #4]
 800a944:	429a      	cmp	r2, r3
 800a946:	d108      	bne.n	800a95a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	685a      	ldr	r2, [r3, #4]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	441a      	add	r2, r3
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	685b      	ldr	r3, [r3, #4]
 800a962:	68ba      	ldr	r2, [r7, #8]
 800a964:	441a      	add	r2, r3
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	429a      	cmp	r2, r3
 800a96c:	d118      	bne.n	800a9a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	4b15      	ldr	r3, [pc, #84]	; (800a9c8 <prvInsertBlockIntoFreeList+0xb0>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	429a      	cmp	r2, r3
 800a978:	d00d      	beq.n	800a996 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	685a      	ldr	r2, [r3, #4]
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	441a      	add	r2, r3
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	681a      	ldr	r2, [r3, #0]
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	601a      	str	r2, [r3, #0]
 800a994:	e008      	b.n	800a9a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a996:	4b0c      	ldr	r3, [pc, #48]	; (800a9c8 <prvInsertBlockIntoFreeList+0xb0>)
 800a998:	681a      	ldr	r2, [r3, #0]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	601a      	str	r2, [r3, #0]
 800a99e:	e003      	b.n	800a9a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681a      	ldr	r2, [r3, #0]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a9a8:	68fa      	ldr	r2, [r7, #12]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	d002      	beq.n	800a9b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	687a      	ldr	r2, [r7, #4]
 800a9b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a9b6:	bf00      	nop
 800a9b8:	3714      	adds	r7, #20
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr
 800a9c2:	bf00      	nop
 800a9c4:	20004b54 	.word	0x20004b54
 800a9c8:	20004b5c 	.word	0x20004b5c

0800a9cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	4912      	ldr	r1, [pc, #72]	; (800aa1c <MX_USB_DEVICE_Init+0x50>)
 800a9d4:	4812      	ldr	r0, [pc, #72]	; (800aa20 <MX_USB_DEVICE_Init+0x54>)
 800a9d6:	f7fc f8c1 	bl	8006b5c <USBD_Init>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d001      	beq.n	800a9e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a9e0:	f7f6 f900 	bl	8000be4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MIDI) != USBD_OK)
 800a9e4:	490f      	ldr	r1, [pc, #60]	; (800aa24 <MX_USB_DEVICE_Init+0x58>)
 800a9e6:	480e      	ldr	r0, [pc, #56]	; (800aa20 <MX_USB_DEVICE_Init+0x54>)
 800a9e8:	f7fc f8e8 	bl	8006bbc <USBD_RegisterClass>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d001      	beq.n	800a9f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a9f2:	f7f6 f8f7 	bl	8000be4 <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a9f6:	490c      	ldr	r1, [pc, #48]	; (800aa28 <MX_USB_DEVICE_Init+0x5c>)
 800a9f8:	4809      	ldr	r0, [pc, #36]	; (800aa20 <MX_USB_DEVICE_Init+0x54>)
 800a9fa:	f7fc f805 	bl	8006a08 <USBD_AUDIO_RegisterInterface>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d001      	beq.n	800aa08 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800aa04:	f7f6 f8ee 	bl	8000be4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800aa08:	4805      	ldr	r0, [pc, #20]	; (800aa20 <MX_USB_DEVICE_Init+0x54>)
 800aa0a:	f7fc f8fe 	bl	8006c0a <USBD_Start>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d001      	beq.n	800aa18 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800aa14:	f7f6 f8e6 	bl	8000be4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800aa18:	bf00      	nop
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	200000b0 	.word	0x200000b0
 800aa20:	20004fac 	.word	0x20004fac
 800aa24:	2000000c 	.word	0x2000000c
 800aa28:	20000110 	.word	0x20000110

0800aa2c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	4603      	mov	r3, r0
 800aa34:	6039      	str	r1, [r7, #0]
 800aa36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	2212      	movs	r2, #18
 800aa3c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800aa3e:	4b03      	ldr	r3, [pc, #12]	; (800aa4c <USBD_FS_DeviceDescriptor+0x20>)
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	370c      	adds	r7, #12
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr
 800aa4c:	200000d0 	.word	0x200000d0

0800aa50 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b083      	sub	sp, #12
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	4603      	mov	r3, r0
 800aa58:	6039      	str	r1, [r7, #0]
 800aa5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	2204      	movs	r2, #4
 800aa60:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aa62:	4b03      	ldr	r3, [pc, #12]	; (800aa70 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	370c      	adds	r7, #12
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr
 800aa70:	200000f0 	.word	0x200000f0

0800aa74 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b082      	sub	sp, #8
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	6039      	str	r1, [r7, #0]
 800aa7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aa80:	79fb      	ldrb	r3, [r7, #7]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d105      	bne.n	800aa92 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aa86:	683a      	ldr	r2, [r7, #0]
 800aa88:	4907      	ldr	r1, [pc, #28]	; (800aaa8 <USBD_FS_ProductStrDescriptor+0x34>)
 800aa8a:	4808      	ldr	r0, [pc, #32]	; (800aaac <USBD_FS_ProductStrDescriptor+0x38>)
 800aa8c:	f7fd f919 	bl	8007cc2 <USBD_GetString>
 800aa90:	e004      	b.n	800aa9c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aa92:	683a      	ldr	r2, [r7, #0]
 800aa94:	4904      	ldr	r1, [pc, #16]	; (800aaa8 <USBD_FS_ProductStrDescriptor+0x34>)
 800aa96:	4805      	ldr	r0, [pc, #20]	; (800aaac <USBD_FS_ProductStrDescriptor+0x38>)
 800aa98:	f7fd f913 	bl	8007cc2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa9c:	4b02      	ldr	r3, [pc, #8]	; (800aaa8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3708      	adds	r7, #8
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}
 800aaa6:	bf00      	nop
 800aaa8:	2000527c 	.word	0x2000527c
 800aaac:	0800b610 	.word	0x0800b610

0800aab0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b082      	sub	sp, #8
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	4603      	mov	r3, r0
 800aab8:	6039      	str	r1, [r7, #0]
 800aaba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aabc:	683a      	ldr	r2, [r7, #0]
 800aabe:	4904      	ldr	r1, [pc, #16]	; (800aad0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800aac0:	4804      	ldr	r0, [pc, #16]	; (800aad4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800aac2:	f7fd f8fe 	bl	8007cc2 <USBD_GetString>
  return USBD_StrDesc;
 800aac6:	4b02      	ldr	r3, [pc, #8]	; (800aad0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3708      	adds	r7, #8
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}
 800aad0:	2000527c 	.word	0x2000527c
 800aad4:	0800b624 	.word	0x0800b624

0800aad8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b082      	sub	sp, #8
 800aadc:	af00      	add	r7, sp, #0
 800aade:	4603      	mov	r3, r0
 800aae0:	6039      	str	r1, [r7, #0]
 800aae2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	221a      	movs	r2, #26
 800aae8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800aaea:	f000 f855 	bl	800ab98 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800aaee:	4b02      	ldr	r3, [pc, #8]	; (800aaf8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3708      	adds	r7, #8
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}
 800aaf8:	200000f4 	.word	0x200000f4

0800aafc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b082      	sub	sp, #8
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	4603      	mov	r3, r0
 800ab04:	6039      	str	r1, [r7, #0]
 800ab06:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ab08:	79fb      	ldrb	r3, [r7, #7]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d105      	bne.n	800ab1a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ab0e:	683a      	ldr	r2, [r7, #0]
 800ab10:	4907      	ldr	r1, [pc, #28]	; (800ab30 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ab12:	4808      	ldr	r0, [pc, #32]	; (800ab34 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ab14:	f7fd f8d5 	bl	8007cc2 <USBD_GetString>
 800ab18:	e004      	b.n	800ab24 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ab1a:	683a      	ldr	r2, [r7, #0]
 800ab1c:	4904      	ldr	r1, [pc, #16]	; (800ab30 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ab1e:	4805      	ldr	r0, [pc, #20]	; (800ab34 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ab20:	f7fd f8cf 	bl	8007cc2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab24:	4b02      	ldr	r3, [pc, #8]	; (800ab30 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3708      	adds	r7, #8
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}
 800ab2e:	bf00      	nop
 800ab30:	2000527c 	.word	0x2000527c
 800ab34:	0800b638 	.word	0x0800b638

0800ab38 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	4603      	mov	r3, r0
 800ab40:	6039      	str	r1, [r7, #0]
 800ab42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ab44:	79fb      	ldrb	r3, [r7, #7]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d105      	bne.n	800ab56 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ab4a:	683a      	ldr	r2, [r7, #0]
 800ab4c:	4907      	ldr	r1, [pc, #28]	; (800ab6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ab4e:	4808      	ldr	r0, [pc, #32]	; (800ab70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ab50:	f7fd f8b7 	bl	8007cc2 <USBD_GetString>
 800ab54:	e004      	b.n	800ab60 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ab56:	683a      	ldr	r2, [r7, #0]
 800ab58:	4904      	ldr	r1, [pc, #16]	; (800ab6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ab5a:	4805      	ldr	r0, [pc, #20]	; (800ab70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ab5c:	f7fd f8b1 	bl	8007cc2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab60:	4b02      	ldr	r3, [pc, #8]	; (800ab6c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3708      	adds	r7, #8
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}
 800ab6a:	bf00      	nop
 800ab6c:	2000527c 	.word	0x2000527c
 800ab70:	0800b648 	.word	0x0800b648

0800ab74 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b083      	sub	sp, #12
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	6039      	str	r1, [r7, #0]
 800ab7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	220c      	movs	r2, #12
 800ab84:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800ab86:	4b03      	ldr	r3, [pc, #12]	; (800ab94 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	370c      	adds	r7, #12
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr
 800ab94:	200000e4 	.word	0x200000e4

0800ab98 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b084      	sub	sp, #16
 800ab9c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ab9e:	4b0f      	ldr	r3, [pc, #60]	; (800abdc <Get_SerialNum+0x44>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800aba4:	4b0e      	ldr	r3, [pc, #56]	; (800abe0 <Get_SerialNum+0x48>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800abaa:	4b0e      	ldr	r3, [pc, #56]	; (800abe4 <Get_SerialNum+0x4c>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800abb0:	68fa      	ldr	r2, [r7, #12]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	4413      	add	r3, r2
 800abb6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d009      	beq.n	800abd2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800abbe:	2208      	movs	r2, #8
 800abc0:	4909      	ldr	r1, [pc, #36]	; (800abe8 <Get_SerialNum+0x50>)
 800abc2:	68f8      	ldr	r0, [r7, #12]
 800abc4:	f000 f814 	bl	800abf0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800abc8:	2204      	movs	r2, #4
 800abca:	4908      	ldr	r1, [pc, #32]	; (800abec <Get_SerialNum+0x54>)
 800abcc:	68b8      	ldr	r0, [r7, #8]
 800abce:	f000 f80f 	bl	800abf0 <IntToUnicode>
  }
}
 800abd2:	bf00      	nop
 800abd4:	3710      	adds	r7, #16
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
 800abda:	bf00      	nop
 800abdc:	1fff7a10 	.word	0x1fff7a10
 800abe0:	1fff7a14 	.word	0x1fff7a14
 800abe4:	1fff7a18 	.word	0x1fff7a18
 800abe8:	200000f6 	.word	0x200000f6
 800abec:	20000106 	.word	0x20000106

0800abf0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b087      	sub	sp, #28
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	60b9      	str	r1, [r7, #8]
 800abfa:	4613      	mov	r3, r2
 800abfc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800abfe:	2300      	movs	r3, #0
 800ac00:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ac02:	2300      	movs	r3, #0
 800ac04:	75fb      	strb	r3, [r7, #23]
 800ac06:	e027      	b.n	800ac58 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	0f1b      	lsrs	r3, r3, #28
 800ac0c:	2b09      	cmp	r3, #9
 800ac0e:	d80b      	bhi.n	800ac28 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	0f1b      	lsrs	r3, r3, #28
 800ac14:	b2da      	uxtb	r2, r3
 800ac16:	7dfb      	ldrb	r3, [r7, #23]
 800ac18:	005b      	lsls	r3, r3, #1
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	440b      	add	r3, r1
 800ac20:	3230      	adds	r2, #48	; 0x30
 800ac22:	b2d2      	uxtb	r2, r2
 800ac24:	701a      	strb	r2, [r3, #0]
 800ac26:	e00a      	b.n	800ac3e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	0f1b      	lsrs	r3, r3, #28
 800ac2c:	b2da      	uxtb	r2, r3
 800ac2e:	7dfb      	ldrb	r3, [r7, #23]
 800ac30:	005b      	lsls	r3, r3, #1
 800ac32:	4619      	mov	r1, r3
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	440b      	add	r3, r1
 800ac38:	3237      	adds	r2, #55	; 0x37
 800ac3a:	b2d2      	uxtb	r2, r2
 800ac3c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	011b      	lsls	r3, r3, #4
 800ac42:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ac44:	7dfb      	ldrb	r3, [r7, #23]
 800ac46:	005b      	lsls	r3, r3, #1
 800ac48:	3301      	adds	r3, #1
 800ac4a:	68ba      	ldr	r2, [r7, #8]
 800ac4c:	4413      	add	r3, r2
 800ac4e:	2200      	movs	r2, #0
 800ac50:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ac52:	7dfb      	ldrb	r3, [r7, #23]
 800ac54:	3301      	adds	r3, #1
 800ac56:	75fb      	strb	r3, [r7, #23]
 800ac58:	7dfa      	ldrb	r2, [r7, #23]
 800ac5a:	79fb      	ldrb	r3, [r7, #7]
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	d3d3      	bcc.n	800ac08 <IntToUnicode+0x18>
  }
}
 800ac60:	bf00      	nop
 800ac62:	bf00      	nop
 800ac64:	371c      	adds	r7, #28
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr

0800ac6e <MIDI_DataRx>:
  MIDI_DataTx
};


static uint16_t MIDI_DataRx(uint8_t *msg, uint16_t length)
{
 800ac6e:	b480      	push	{r7}
 800ac70:	b085      	sub	sp, #20
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]
 800ac76:	460b      	mov	r3, r1
 800ac78:	807b      	strh	r3, [r7, #2]
  uint8_t chan = msg[1] & 0xf;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	3301      	adds	r3, #1
 800ac7e:	781b      	ldrb	r3, [r3, #0]
 800ac80:	f003 030f 	and.w	r3, r3, #15
 800ac84:	73fb      	strb	r3, [r7, #15]
  uint8_t msgtype = msg[1] & 0xf0;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	3301      	adds	r3, #1
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	f023 030f 	bic.w	r3, r3, #15
 800ac90:	73bb      	strb	r3, [r7, #14]
  uint8_t b1 =  msg[2];
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	789b      	ldrb	r3, [r3, #2]
 800ac96:	737b      	strb	r3, [r7, #13]
  uint8_t b2 =  msg[3];
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	78db      	ldrb	r3, [r3, #3]
 800ac9c:	733b      	strb	r3, [r7, #12]
  uint16_t b = ((b2 & 0x7f) << 7) | (b1 & 0x7f);
 800ac9e:	7b3b      	ldrb	r3, [r7, #12]
 800aca0:	01db      	lsls	r3, r3, #7
 800aca2:	b21b      	sxth	r3, r3
 800aca4:	f403 537e 	and.w	r3, r3, #16256	; 0x3f80
 800aca8:	b21a      	sxth	r2, r3
 800acaa:	7b7b      	ldrb	r3, [r7, #13]
 800acac:	b21b      	sxth	r3, r3
 800acae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acb2:	b21b      	sxth	r3, r3
 800acb4:	4313      	orrs	r3, r2
 800acb6:	b21b      	sxth	r3, r3
 800acb8:	817b      	strh	r3, [r7, #10]
							sus = data;
							break;
					}*/
          break;
  }
	return 0;
 800acba:	2300      	movs	r3, #0
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3714      	adds	r7, #20
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr

0800acc8 <MIDI_DataTx>:

static uint16_t MIDI_DataTx(uint8_t *msg, uint16_t length)
{
 800acc8:	b480      	push	{r7}
 800acca:	b085      	sub	sp, #20
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	460b      	mov	r3, r1
 800acd2:	807b      	strh	r3, [r7, #2]
  uint32_t i = 0;
 800acd4:	2300      	movs	r3, #0
 800acd6:	60fb      	str	r3, [r7, #12]
  while (i < length) {
 800acd8:	e017      	b.n	800ad0a <MIDI_DataTx+0x42>
    APP_Rx_Buffer[APP_Rx_ptr_in] = *(msg + i);
 800acda:	687a      	ldr	r2, [r7, #4]
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	441a      	add	r2, r3
 800ace0:	4b0f      	ldr	r3, [pc, #60]	; (800ad20 <MIDI_DataTx+0x58>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	7811      	ldrb	r1, [r2, #0]
 800ace6:	4a0f      	ldr	r2, [pc, #60]	; (800ad24 <MIDI_DataTx+0x5c>)
 800ace8:	54d1      	strb	r1, [r2, r3]
    APP_Rx_ptr_in++;
 800acea:	4b0d      	ldr	r3, [pc, #52]	; (800ad20 <MIDI_DataTx+0x58>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	3301      	adds	r3, #1
 800acf0:	4a0b      	ldr	r2, [pc, #44]	; (800ad20 <MIDI_DataTx+0x58>)
 800acf2:	6013      	str	r3, [r2, #0]
    i++;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	3301      	adds	r3, #1
 800acf8:	60fb      	str	r3, [r7, #12]
    if (APP_Rx_ptr_in == APP_RX_DATA_SIZE) {
 800acfa:	4b09      	ldr	r3, [pc, #36]	; (800ad20 <MIDI_DataTx+0x58>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad02:	d102      	bne.n	800ad0a <MIDI_DataTx+0x42>
      APP_Rx_ptr_in = 0;
 800ad04:	4b06      	ldr	r3, [pc, #24]	; (800ad20 <MIDI_DataTx+0x58>)
 800ad06:	2200      	movs	r2, #0
 800ad08:	601a      	str	r2, [r3, #0]
  while (i < length) {
 800ad0a:	887b      	ldrh	r3, [r7, #2]
 800ad0c:	68fa      	ldr	r2, [r7, #12]
 800ad0e:	429a      	cmp	r2, r3
 800ad10:	d3e3      	bcc.n	800acda <MIDI_DataTx+0x12>
    }
  }
  return USBD_OK;
 800ad12:	2300      	movs	r3, #0
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	3714      	adds	r7, #20
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr
 800ad20:	2000019c 	.word	0x2000019c
 800ad24:	20004e6c 	.word	0x20004e6c

0800ad28 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b0a0      	sub	sp, #128	; 0x80
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad30:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800ad34:	2200      	movs	r2, #0
 800ad36:	601a      	str	r2, [r3, #0]
 800ad38:	605a      	str	r2, [r3, #4]
 800ad3a:	609a      	str	r2, [r3, #8]
 800ad3c:	60da      	str	r2, [r3, #12]
 800ad3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ad40:	f107 0310 	add.w	r3, r7, #16
 800ad44:	225c      	movs	r2, #92	; 0x5c
 800ad46:	2100      	movs	r1, #0
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f000 fb6f 	bl	800b42c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad56:	d149      	bne.n	800adec <HAL_PCD_MspInit+0xc4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800ad58:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad5c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ad62:	f107 0310 	add.w	r3, r7, #16
 800ad66:	4618      	mov	r0, r3
 800ad68:	f7f8 febe 	bl	8003ae8 <HAL_RCCEx_PeriphCLKConfig>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d001      	beq.n	800ad76 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800ad72:	f7f5 ff37 	bl	8000be4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad76:	2300      	movs	r3, #0
 800ad78:	60fb      	str	r3, [r7, #12]
 800ad7a:	4b1e      	ldr	r3, [pc, #120]	; (800adf4 <HAL_PCD_MspInit+0xcc>)
 800ad7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad7e:	4a1d      	ldr	r2, [pc, #116]	; (800adf4 <HAL_PCD_MspInit+0xcc>)
 800ad80:	f043 0301 	orr.w	r3, r3, #1
 800ad84:	6313      	str	r3, [r2, #48]	; 0x30
 800ad86:	4b1b      	ldr	r3, [pc, #108]	; (800adf4 <HAL_PCD_MspInit+0xcc>)
 800ad88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad8a:	f003 0301 	and.w	r3, r3, #1
 800ad8e:	60fb      	str	r3, [r7, #12]
 800ad90:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ad92:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ad96:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad98:	2302      	movs	r3, #2
 800ad9a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ada0:	2303      	movs	r3, #3
 800ada2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ada4:	230a      	movs	r3, #10
 800ada6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ada8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800adac:	4619      	mov	r1, r3
 800adae:	4812      	ldr	r0, [pc, #72]	; (800adf8 <HAL_PCD_MspInit+0xd0>)
 800adb0:	f7f7 f8a4 	bl	8001efc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800adb4:	4b0f      	ldr	r3, [pc, #60]	; (800adf4 <HAL_PCD_MspInit+0xcc>)
 800adb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adb8:	4a0e      	ldr	r2, [pc, #56]	; (800adf4 <HAL_PCD_MspInit+0xcc>)
 800adba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adbe:	6353      	str	r3, [r2, #52]	; 0x34
 800adc0:	2300      	movs	r3, #0
 800adc2:	60bb      	str	r3, [r7, #8]
 800adc4:	4b0b      	ldr	r3, [pc, #44]	; (800adf4 <HAL_PCD_MspInit+0xcc>)
 800adc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adc8:	4a0a      	ldr	r2, [pc, #40]	; (800adf4 <HAL_PCD_MspInit+0xcc>)
 800adca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800adce:	6453      	str	r3, [r2, #68]	; 0x44
 800add0:	4b08      	ldr	r3, [pc, #32]	; (800adf4 <HAL_PCD_MspInit+0xcc>)
 800add2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800add4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800add8:	60bb      	str	r3, [r7, #8]
 800adda:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800addc:	2200      	movs	r2, #0
 800adde:	2105      	movs	r1, #5
 800ade0:	2043      	movs	r0, #67	; 0x43
 800ade2:	f7f6 fd77 	bl	80018d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ade6:	2043      	movs	r0, #67	; 0x43
 800ade8:	f7f6 fd90 	bl	800190c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800adec:	bf00      	nop
 800adee:	3780      	adds	r7, #128	; 0x80
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}
 800adf4:	40023800 	.word	0x40023800
 800adf8:	40020000 	.word	0x40020000

0800adfc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b082      	sub	sp, #8
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ae10:	4619      	mov	r1, r3
 800ae12:	4610      	mov	r0, r2
 800ae14:	f7fb ff44 	bl	8006ca0 <USBD_LL_SetupStage>
}
 800ae18:	bf00      	nop
 800ae1a:	3708      	adds	r7, #8
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}

0800ae20 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b082      	sub	sp, #8
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	460b      	mov	r3, r1
 800ae2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ae32:	78fa      	ldrb	r2, [r7, #3]
 800ae34:	6879      	ldr	r1, [r7, #4]
 800ae36:	4613      	mov	r3, r2
 800ae38:	00db      	lsls	r3, r3, #3
 800ae3a:	1a9b      	subs	r3, r3, r2
 800ae3c:	009b      	lsls	r3, r3, #2
 800ae3e:	440b      	add	r3, r1
 800ae40:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ae44:	681a      	ldr	r2, [r3, #0]
 800ae46:	78fb      	ldrb	r3, [r7, #3]
 800ae48:	4619      	mov	r1, r3
 800ae4a:	f7fb ff7e 	bl	8006d4a <USBD_LL_DataOutStage>
}
 800ae4e:	bf00      	nop
 800ae50:	3708      	adds	r7, #8
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}

0800ae56 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae56:	b580      	push	{r7, lr}
 800ae58:	b082      	sub	sp, #8
 800ae5a:	af00      	add	r7, sp, #0
 800ae5c:	6078      	str	r0, [r7, #4]
 800ae5e:	460b      	mov	r3, r1
 800ae60:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ae68:	78fa      	ldrb	r2, [r7, #3]
 800ae6a:	6879      	ldr	r1, [r7, #4]
 800ae6c:	4613      	mov	r3, r2
 800ae6e:	00db      	lsls	r3, r3, #3
 800ae70:	1a9b      	subs	r3, r3, r2
 800ae72:	009b      	lsls	r3, r3, #2
 800ae74:	440b      	add	r3, r1
 800ae76:	3348      	adds	r3, #72	; 0x48
 800ae78:	681a      	ldr	r2, [r3, #0]
 800ae7a:	78fb      	ldrb	r3, [r7, #3]
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	f7fb ffc7 	bl	8006e10 <USBD_LL_DataInStage>
}
 800ae82:	bf00      	nop
 800ae84:	3708      	adds	r7, #8
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}

0800ae8a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae8a:	b580      	push	{r7, lr}
 800ae8c:	b082      	sub	sp, #8
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f7fc f8db 	bl	8007054 <USBD_LL_SOF>
}
 800ae9e:	bf00      	nop
 800aea0:	3708      	adds	r7, #8
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}

0800aea6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aea6:	b580      	push	{r7, lr}
 800aea8:	b084      	sub	sp, #16
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aeae:	2301      	movs	r3, #1
 800aeb0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	68db      	ldr	r3, [r3, #12]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d102      	bne.n	800aec0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800aeba:	2300      	movs	r3, #0
 800aebc:	73fb      	strb	r3, [r7, #15]
 800aebe:	e008      	b.n	800aed2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	68db      	ldr	r3, [r3, #12]
 800aec4:	2b02      	cmp	r3, #2
 800aec6:	d102      	bne.n	800aece <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800aec8:	2301      	movs	r3, #1
 800aeca:	73fb      	strb	r3, [r7, #15]
 800aecc:	e001      	b.n	800aed2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800aece:	f7f5 fe89 	bl	8000be4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aed8:	7bfa      	ldrb	r2, [r7, #15]
 800aeda:	4611      	mov	r1, r2
 800aedc:	4618      	mov	r0, r3
 800aede:	f7fc f87b 	bl	8006fd8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800aee8:	4618      	mov	r0, r3
 800aeea:	f7fc f827 	bl	8006f3c <USBD_LL_Reset>
}
 800aeee:	bf00      	nop
 800aef0:	3710      	adds	r7, #16
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
	...

0800aef8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b082      	sub	sp, #8
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800af06:	4618      	mov	r0, r3
 800af08:	f7fc f876 	bl	8006ff8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	687a      	ldr	r2, [r7, #4]
 800af18:	6812      	ldr	r2, [r2, #0]
 800af1a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800af1e:	f043 0301 	orr.w	r3, r3, #1
 800af22:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6a1b      	ldr	r3, [r3, #32]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d005      	beq.n	800af38 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af2c:	4b04      	ldr	r3, [pc, #16]	; (800af40 <HAL_PCD_SuspendCallback+0x48>)
 800af2e:	691b      	ldr	r3, [r3, #16]
 800af30:	4a03      	ldr	r2, [pc, #12]	; (800af40 <HAL_PCD_SuspendCallback+0x48>)
 800af32:	f043 0306 	orr.w	r3, r3, #6
 800af36:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800af38:	bf00      	nop
 800af3a:	3708      	adds	r7, #8
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}
 800af40:	e000ed00 	.word	0xe000ed00

0800af44 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b082      	sub	sp, #8
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800af52:	4618      	mov	r0, r3
 800af54:	f7fc f866 	bl	8007024 <USBD_LL_Resume>
}
 800af58:	bf00      	nop
 800af5a:	3708      	adds	r7, #8
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}

0800af60 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b082      	sub	sp, #8
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	460b      	mov	r3, r1
 800af6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800af72:	78fa      	ldrb	r2, [r7, #3]
 800af74:	4611      	mov	r1, r2
 800af76:	4618      	mov	r0, r3
 800af78:	f7fc f8b4 	bl	80070e4 <USBD_LL_IsoOUTIncomplete>
}
 800af7c:	bf00      	nop
 800af7e:	3708      	adds	r7, #8
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b082      	sub	sp, #8
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	460b      	mov	r3, r1
 800af8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800af96:	78fa      	ldrb	r2, [r7, #3]
 800af98:	4611      	mov	r1, r2
 800af9a:	4618      	mov	r0, r3
 800af9c:	f7fc f87c 	bl	8007098 <USBD_LL_IsoINIncomplete>
}
 800afa0:	bf00      	nop
 800afa2:	3708      	adds	r7, #8
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}

0800afa8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800afb6:	4618      	mov	r0, r3
 800afb8:	f7fc f8ba 	bl	8007130 <USBD_LL_DevConnected>
}
 800afbc:	bf00      	nop
 800afbe:	3708      	adds	r7, #8
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}

0800afc4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b082      	sub	sp, #8
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800afd2:	4618      	mov	r0, r3
 800afd4:	f7fc f8b7 	bl	8007146 <USBD_LL_DevDisconnected>
}
 800afd8:	bf00      	nop
 800afda:	3708      	adds	r7, #8
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}

0800afe0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b082      	sub	sp, #8
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	781b      	ldrb	r3, [r3, #0]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d13c      	bne.n	800b06a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800aff0:	4a20      	ldr	r2, [pc, #128]	; (800b074 <USBD_LL_Init+0x94>)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	4a1e      	ldr	r2, [pc, #120]	; (800b074 <USBD_LL_Init+0x94>)
 800affc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b000:	4b1c      	ldr	r3, [pc, #112]	; (800b074 <USBD_LL_Init+0x94>)
 800b002:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b006:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800b008:	4b1a      	ldr	r3, [pc, #104]	; (800b074 <USBD_LL_Init+0x94>)
 800b00a:	2206      	movs	r2, #6
 800b00c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b00e:	4b19      	ldr	r3, [pc, #100]	; (800b074 <USBD_LL_Init+0x94>)
 800b010:	2202      	movs	r2, #2
 800b012:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b014:	4b17      	ldr	r3, [pc, #92]	; (800b074 <USBD_LL_Init+0x94>)
 800b016:	2200      	movs	r2, #0
 800b018:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b01a:	4b16      	ldr	r3, [pc, #88]	; (800b074 <USBD_LL_Init+0x94>)
 800b01c:	2202      	movs	r2, #2
 800b01e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b020:	4b14      	ldr	r3, [pc, #80]	; (800b074 <USBD_LL_Init+0x94>)
 800b022:	2200      	movs	r2, #0
 800b024:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b026:	4b13      	ldr	r3, [pc, #76]	; (800b074 <USBD_LL_Init+0x94>)
 800b028:	2200      	movs	r2, #0
 800b02a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b02c:	4b11      	ldr	r3, [pc, #68]	; (800b074 <USBD_LL_Init+0x94>)
 800b02e:	2200      	movs	r2, #0
 800b030:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b032:	4b10      	ldr	r3, [pc, #64]	; (800b074 <USBD_LL_Init+0x94>)
 800b034:	2200      	movs	r2, #0
 800b036:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b038:	4b0e      	ldr	r3, [pc, #56]	; (800b074 <USBD_LL_Init+0x94>)
 800b03a:	2200      	movs	r2, #0
 800b03c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b03e:	480d      	ldr	r0, [pc, #52]	; (800b074 <USBD_LL_Init+0x94>)
 800b040:	f7f7 fa4e 	bl	80024e0 <HAL_PCD_Init>
 800b044:	4603      	mov	r3, r0
 800b046:	2b00      	cmp	r3, #0
 800b048:	d001      	beq.n	800b04e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b04a:	f7f5 fdcb 	bl	8000be4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b04e:	2180      	movs	r1, #128	; 0x80
 800b050:	4808      	ldr	r0, [pc, #32]	; (800b074 <USBD_LL_Init+0x94>)
 800b052:	f7f8 fbc8 	bl	80037e6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b056:	2240      	movs	r2, #64	; 0x40
 800b058:	2100      	movs	r1, #0
 800b05a:	4806      	ldr	r0, [pc, #24]	; (800b074 <USBD_LL_Init+0x94>)
 800b05c:	f7f8 fb7c 	bl	8003758 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b060:	2280      	movs	r2, #128	; 0x80
 800b062:	2101      	movs	r1, #1
 800b064:	4803      	ldr	r0, [pc, #12]	; (800b074 <USBD_LL_Init+0x94>)
 800b066:	f7f8 fb77 	bl	8003758 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b06a:	2300      	movs	r3, #0
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3708      	adds	r7, #8
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}
 800b074:	2000547c 	.word	0x2000547c

0800b078 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b080:	2300      	movs	r3, #0
 800b082:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b084:	2300      	movs	r3, #0
 800b086:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b08e:	4618      	mov	r0, r3
 800b090:	f7f7 fb4a 	bl	8002728 <HAL_PCD_Start>
 800b094:	4603      	mov	r3, r0
 800b096:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b098:	7bfb      	ldrb	r3, [r7, #15]
 800b09a:	4618      	mov	r0, r3
 800b09c:	f000 f966 	bl	800b36c <USBD_Get_USB_Status>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3710      	adds	r7, #16
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}

0800b0ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b0ae:	b580      	push	{r7, lr}
 800b0b0:	b084      	sub	sp, #16
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	6078      	str	r0, [r7, #4]
 800b0b6:	4608      	mov	r0, r1
 800b0b8:	4611      	mov	r1, r2
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	4603      	mov	r3, r0
 800b0be:	70fb      	strb	r3, [r7, #3]
 800b0c0:	460b      	mov	r3, r1
 800b0c2:	70bb      	strb	r3, [r7, #2]
 800b0c4:	4613      	mov	r3, r2
 800b0c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b0d6:	78bb      	ldrb	r3, [r7, #2]
 800b0d8:	883a      	ldrh	r2, [r7, #0]
 800b0da:	78f9      	ldrb	r1, [r7, #3]
 800b0dc:	f7f7 ff5b 	bl	8002f96 <HAL_PCD_EP_Open>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0e4:	7bfb      	ldrb	r3, [r7, #15]
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f000 f940 	bl	800b36c <USBD_Get_USB_Status>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3710      	adds	r7, #16
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}

0800b0fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0fa:	b580      	push	{r7, lr}
 800b0fc:	b084      	sub	sp, #16
 800b0fe:	af00      	add	r7, sp, #0
 800b100:	6078      	str	r0, [r7, #4]
 800b102:	460b      	mov	r3, r1
 800b104:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b106:	2300      	movs	r3, #0
 800b108:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b10a:	2300      	movs	r3, #0
 800b10c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b114:	78fa      	ldrb	r2, [r7, #3]
 800b116:	4611      	mov	r1, r2
 800b118:	4618      	mov	r0, r3
 800b11a:	f7f7 ffa4 	bl	8003066 <HAL_PCD_EP_Close>
 800b11e:	4603      	mov	r3, r0
 800b120:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b122:	7bfb      	ldrb	r3, [r7, #15]
 800b124:	4618      	mov	r0, r3
 800b126:	f000 f921 	bl	800b36c <USBD_Get_USB_Status>
 800b12a:	4603      	mov	r3, r0
 800b12c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b12e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b130:	4618      	mov	r0, r3
 800b132:	3710      	adds	r7, #16
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}

0800b138 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b084      	sub	sp, #16
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
 800b140:	460b      	mov	r3, r1
 800b142:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b144:	2300      	movs	r3, #0
 800b146:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b148:	2300      	movs	r3, #0
 800b14a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b152:	78fa      	ldrb	r2, [r7, #3]
 800b154:	4611      	mov	r1, r2
 800b156:	4618      	mov	r0, r3
 800b158:	f7f8 f864 	bl	8003224 <HAL_PCD_EP_SetStall>
 800b15c:	4603      	mov	r3, r0
 800b15e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b160:	7bfb      	ldrb	r3, [r7, #15]
 800b162:	4618      	mov	r0, r3
 800b164:	f000 f902 	bl	800b36c <USBD_Get_USB_Status>
 800b168:	4603      	mov	r3, r0
 800b16a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b16c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b16e:	4618      	mov	r0, r3
 800b170:	3710      	adds	r7, #16
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}

0800b176 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b176:	b580      	push	{r7, lr}
 800b178:	b084      	sub	sp, #16
 800b17a:	af00      	add	r7, sp, #0
 800b17c:	6078      	str	r0, [r7, #4]
 800b17e:	460b      	mov	r3, r1
 800b180:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b182:	2300      	movs	r3, #0
 800b184:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b186:	2300      	movs	r3, #0
 800b188:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b190:	78fa      	ldrb	r2, [r7, #3]
 800b192:	4611      	mov	r1, r2
 800b194:	4618      	mov	r0, r3
 800b196:	f7f8 f8a9 	bl	80032ec <HAL_PCD_EP_ClrStall>
 800b19a:	4603      	mov	r3, r0
 800b19c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b19e:	7bfb      	ldrb	r3, [r7, #15]
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f000 f8e3 	bl	800b36c <USBD_Get_USB_Status>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3710      	adds	r7, #16
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b085      	sub	sp, #20
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	460b      	mov	r3, r1
 800b1be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b1c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b1c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	da0b      	bge.n	800b1e8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b1d0:	78fb      	ldrb	r3, [r7, #3]
 800b1d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1d6:	68f9      	ldr	r1, [r7, #12]
 800b1d8:	4613      	mov	r3, r2
 800b1da:	00db      	lsls	r3, r3, #3
 800b1dc:	1a9b      	subs	r3, r3, r2
 800b1de:	009b      	lsls	r3, r3, #2
 800b1e0:	440b      	add	r3, r1
 800b1e2:	333e      	adds	r3, #62	; 0x3e
 800b1e4:	781b      	ldrb	r3, [r3, #0]
 800b1e6:	e00b      	b.n	800b200 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b1e8:	78fb      	ldrb	r3, [r7, #3]
 800b1ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1ee:	68f9      	ldr	r1, [r7, #12]
 800b1f0:	4613      	mov	r3, r2
 800b1f2:	00db      	lsls	r3, r3, #3
 800b1f4:	1a9b      	subs	r3, r3, r2
 800b1f6:	009b      	lsls	r3, r3, #2
 800b1f8:	440b      	add	r3, r1
 800b1fa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b1fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b200:	4618      	mov	r0, r3
 800b202:	3714      	adds	r7, #20
 800b204:	46bd      	mov	sp, r7
 800b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20a:	4770      	bx	lr

0800b20c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	460b      	mov	r3, r1
 800b216:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b218:	2300      	movs	r3, #0
 800b21a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b21c:	2300      	movs	r3, #0
 800b21e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b226:	78fa      	ldrb	r2, [r7, #3]
 800b228:	4611      	mov	r1, r2
 800b22a:	4618      	mov	r0, r3
 800b22c:	f7f7 fe8e 	bl	8002f4c <HAL_PCD_SetAddress>
 800b230:	4603      	mov	r3, r0
 800b232:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b234:	7bfb      	ldrb	r3, [r7, #15]
 800b236:	4618      	mov	r0, r3
 800b238:	f000 f898 	bl	800b36c <USBD_Get_USB_Status>
 800b23c:	4603      	mov	r3, r0
 800b23e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b240:	7bbb      	ldrb	r3, [r7, #14]
}
 800b242:	4618      	mov	r0, r3
 800b244:	3710      	adds	r7, #16
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}

0800b24a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b24a:	b580      	push	{r7, lr}
 800b24c:	b086      	sub	sp, #24
 800b24e:	af00      	add	r7, sp, #0
 800b250:	60f8      	str	r0, [r7, #12]
 800b252:	607a      	str	r2, [r7, #4]
 800b254:	603b      	str	r3, [r7, #0]
 800b256:	460b      	mov	r3, r1
 800b258:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b25a:	2300      	movs	r3, #0
 800b25c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b25e:	2300      	movs	r3, #0
 800b260:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b268:	7af9      	ldrb	r1, [r7, #11]
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	687a      	ldr	r2, [r7, #4]
 800b26e:	f7f7 ff8f 	bl	8003190 <HAL_PCD_EP_Transmit>
 800b272:	4603      	mov	r3, r0
 800b274:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b276:	7dfb      	ldrb	r3, [r7, #23]
 800b278:	4618      	mov	r0, r3
 800b27a:	f000 f877 	bl	800b36c <USBD_Get_USB_Status>
 800b27e:	4603      	mov	r3, r0
 800b280:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b282:	7dbb      	ldrb	r3, [r7, #22]
}
 800b284:	4618      	mov	r0, r3
 800b286:	3718      	adds	r7, #24
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}

0800b28c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b086      	sub	sp, #24
 800b290:	af00      	add	r7, sp, #0
 800b292:	60f8      	str	r0, [r7, #12]
 800b294:	607a      	str	r2, [r7, #4]
 800b296:	603b      	str	r3, [r7, #0]
 800b298:	460b      	mov	r3, r1
 800b29a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b29c:	2300      	movs	r3, #0
 800b29e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b2aa:	7af9      	ldrb	r1, [r7, #11]
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	687a      	ldr	r2, [r7, #4]
 800b2b0:	f7f7 ff23 	bl	80030fa <HAL_PCD_EP_Receive>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2b8:	7dfb      	ldrb	r3, [r7, #23]
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f000 f856 	bl	800b36c <USBD_Get_USB_Status>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b2c4:	7dbb      	ldrb	r3, [r7, #22]
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3718      	adds	r7, #24
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}
	...

0800b2d0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b082      	sub	sp, #8
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
 800b2d8:	460b      	mov	r3, r1
 800b2da:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800b2dc:	78fb      	ldrb	r3, [r7, #3]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d002      	beq.n	800b2e8 <HAL_PCDEx_LPM_Callback+0x18>
 800b2e2:	2b01      	cmp	r3, #1
 800b2e4:	d01f      	beq.n	800b326 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800b2e6:	e03b      	b.n	800b360 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6a1b      	ldr	r3, [r3, #32]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d007      	beq.n	800b300 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800b2f0:	f7f5 f944 	bl	800057c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b2f4:	4b1c      	ldr	r3, [pc, #112]	; (800b368 <HAL_PCDEx_LPM_Callback+0x98>)
 800b2f6:	691b      	ldr	r3, [r3, #16]
 800b2f8:	4a1b      	ldr	r2, [pc, #108]	; (800b368 <HAL_PCDEx_LPM_Callback+0x98>)
 800b2fa:	f023 0306 	bic.w	r3, r3, #6
 800b2fe:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	687a      	ldr	r2, [r7, #4]
 800b30c:	6812      	ldr	r2, [r2, #0]
 800b30e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b312:	f023 0301 	bic.w	r3, r3, #1
 800b316:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b31e:	4618      	mov	r0, r3
 800b320:	f7fb fe80 	bl	8007024 <USBD_LL_Resume>
    break;
 800b324:	e01c      	b.n	800b360 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	687a      	ldr	r2, [r7, #4]
 800b332:	6812      	ldr	r2, [r2, #0]
 800b334:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b338:	f043 0301 	orr.w	r3, r3, #1
 800b33c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b344:	4618      	mov	r0, r3
 800b346:	f7fb fe57 	bl	8006ff8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6a1b      	ldr	r3, [r3, #32]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d005      	beq.n	800b35e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b352:	4b05      	ldr	r3, [pc, #20]	; (800b368 <HAL_PCDEx_LPM_Callback+0x98>)
 800b354:	691b      	ldr	r3, [r3, #16]
 800b356:	4a04      	ldr	r2, [pc, #16]	; (800b368 <HAL_PCDEx_LPM_Callback+0x98>)
 800b358:	f043 0306 	orr.w	r3, r3, #6
 800b35c:	6113      	str	r3, [r2, #16]
    break;
 800b35e:	bf00      	nop
}
 800b360:	bf00      	nop
 800b362:	3708      	adds	r7, #8
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}
 800b368:	e000ed00 	.word	0xe000ed00

0800b36c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b085      	sub	sp, #20
 800b370:	af00      	add	r7, sp, #0
 800b372:	4603      	mov	r3, r0
 800b374:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b376:	2300      	movs	r3, #0
 800b378:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b37a:	79fb      	ldrb	r3, [r7, #7]
 800b37c:	2b03      	cmp	r3, #3
 800b37e:	d817      	bhi.n	800b3b0 <USBD_Get_USB_Status+0x44>
 800b380:	a201      	add	r2, pc, #4	; (adr r2, 800b388 <USBD_Get_USB_Status+0x1c>)
 800b382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b386:	bf00      	nop
 800b388:	0800b399 	.word	0x0800b399
 800b38c:	0800b39f 	.word	0x0800b39f
 800b390:	0800b3a5 	.word	0x0800b3a5
 800b394:	0800b3ab 	.word	0x0800b3ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b398:	2300      	movs	r3, #0
 800b39a:	73fb      	strb	r3, [r7, #15]
    break;
 800b39c:	e00b      	b.n	800b3b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b39e:	2303      	movs	r3, #3
 800b3a0:	73fb      	strb	r3, [r7, #15]
    break;
 800b3a2:	e008      	b.n	800b3b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	73fb      	strb	r3, [r7, #15]
    break;
 800b3a8:	e005      	b.n	800b3b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b3aa:	2303      	movs	r3, #3
 800b3ac:	73fb      	strb	r3, [r7, #15]
    break;
 800b3ae:	e002      	b.n	800b3b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b3b0:	2303      	movs	r3, #3
 800b3b2:	73fb      	strb	r3, [r7, #15]
    break;
 800b3b4:	bf00      	nop
  }
  return usb_status;
 800b3b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3714      	adds	r7, #20
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr

0800b3c4 <__libc_init_array>:
 800b3c4:	b570      	push	{r4, r5, r6, lr}
 800b3c6:	4d0d      	ldr	r5, [pc, #52]	; (800b3fc <__libc_init_array+0x38>)
 800b3c8:	4c0d      	ldr	r4, [pc, #52]	; (800b400 <__libc_init_array+0x3c>)
 800b3ca:	1b64      	subs	r4, r4, r5
 800b3cc:	10a4      	asrs	r4, r4, #2
 800b3ce:	2600      	movs	r6, #0
 800b3d0:	42a6      	cmp	r6, r4
 800b3d2:	d109      	bne.n	800b3e8 <__libc_init_array+0x24>
 800b3d4:	4d0b      	ldr	r5, [pc, #44]	; (800b404 <__libc_init_array+0x40>)
 800b3d6:	4c0c      	ldr	r4, [pc, #48]	; (800b408 <__libc_init_array+0x44>)
 800b3d8:	f000 f8f6 	bl	800b5c8 <_init>
 800b3dc:	1b64      	subs	r4, r4, r5
 800b3de:	10a4      	asrs	r4, r4, #2
 800b3e0:	2600      	movs	r6, #0
 800b3e2:	42a6      	cmp	r6, r4
 800b3e4:	d105      	bne.n	800b3f2 <__libc_init_array+0x2e>
 800b3e6:	bd70      	pop	{r4, r5, r6, pc}
 800b3e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3ec:	4798      	blx	r3
 800b3ee:	3601      	adds	r6, #1
 800b3f0:	e7ee      	b.n	800b3d0 <__libc_init_array+0xc>
 800b3f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3f6:	4798      	blx	r3
 800b3f8:	3601      	adds	r6, #1
 800b3fa:	e7f2      	b.n	800b3e2 <__libc_init_array+0x1e>
 800b3fc:	0800b728 	.word	0x0800b728
 800b400:	0800b728 	.word	0x0800b728
 800b404:	0800b728 	.word	0x0800b728
 800b408:	0800b72c 	.word	0x0800b72c

0800b40c <__retarget_lock_acquire_recursive>:
 800b40c:	4770      	bx	lr

0800b40e <__retarget_lock_release_recursive>:
 800b40e:	4770      	bx	lr

0800b410 <memcpy>:
 800b410:	440a      	add	r2, r1
 800b412:	4291      	cmp	r1, r2
 800b414:	f100 33ff 	add.w	r3, r0, #4294967295
 800b418:	d100      	bne.n	800b41c <memcpy+0xc>
 800b41a:	4770      	bx	lr
 800b41c:	b510      	push	{r4, lr}
 800b41e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b422:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b426:	4291      	cmp	r1, r2
 800b428:	d1f9      	bne.n	800b41e <memcpy+0xe>
 800b42a:	bd10      	pop	{r4, pc}

0800b42c <memset>:
 800b42c:	4402      	add	r2, r0
 800b42e:	4603      	mov	r3, r0
 800b430:	4293      	cmp	r3, r2
 800b432:	d100      	bne.n	800b436 <memset+0xa>
 800b434:	4770      	bx	lr
 800b436:	f803 1b01 	strb.w	r1, [r3], #1
 800b43a:	e7f9      	b.n	800b430 <memset+0x4>

0800b43c <cleanup_glue>:
 800b43c:	b538      	push	{r3, r4, r5, lr}
 800b43e:	460c      	mov	r4, r1
 800b440:	6809      	ldr	r1, [r1, #0]
 800b442:	4605      	mov	r5, r0
 800b444:	b109      	cbz	r1, 800b44a <cleanup_glue+0xe>
 800b446:	f7ff fff9 	bl	800b43c <cleanup_glue>
 800b44a:	4621      	mov	r1, r4
 800b44c:	4628      	mov	r0, r5
 800b44e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b452:	f000 b869 	b.w	800b528 <_free_r>
	...

0800b458 <_reclaim_reent>:
 800b458:	4b2c      	ldr	r3, [pc, #176]	; (800b50c <_reclaim_reent+0xb4>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	4283      	cmp	r3, r0
 800b45e:	b570      	push	{r4, r5, r6, lr}
 800b460:	4604      	mov	r4, r0
 800b462:	d051      	beq.n	800b508 <_reclaim_reent+0xb0>
 800b464:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b466:	b143      	cbz	r3, 800b47a <_reclaim_reent+0x22>
 800b468:	68db      	ldr	r3, [r3, #12]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d14a      	bne.n	800b504 <_reclaim_reent+0xac>
 800b46e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b470:	6819      	ldr	r1, [r3, #0]
 800b472:	b111      	cbz	r1, 800b47a <_reclaim_reent+0x22>
 800b474:	4620      	mov	r0, r4
 800b476:	f000 f857 	bl	800b528 <_free_r>
 800b47a:	6961      	ldr	r1, [r4, #20]
 800b47c:	b111      	cbz	r1, 800b484 <_reclaim_reent+0x2c>
 800b47e:	4620      	mov	r0, r4
 800b480:	f000 f852 	bl	800b528 <_free_r>
 800b484:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b486:	b111      	cbz	r1, 800b48e <_reclaim_reent+0x36>
 800b488:	4620      	mov	r0, r4
 800b48a:	f000 f84d 	bl	800b528 <_free_r>
 800b48e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b490:	b111      	cbz	r1, 800b498 <_reclaim_reent+0x40>
 800b492:	4620      	mov	r0, r4
 800b494:	f000 f848 	bl	800b528 <_free_r>
 800b498:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b49a:	b111      	cbz	r1, 800b4a2 <_reclaim_reent+0x4a>
 800b49c:	4620      	mov	r0, r4
 800b49e:	f000 f843 	bl	800b528 <_free_r>
 800b4a2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b4a4:	b111      	cbz	r1, 800b4ac <_reclaim_reent+0x54>
 800b4a6:	4620      	mov	r0, r4
 800b4a8:	f000 f83e 	bl	800b528 <_free_r>
 800b4ac:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b4ae:	b111      	cbz	r1, 800b4b6 <_reclaim_reent+0x5e>
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	f000 f839 	bl	800b528 <_free_r>
 800b4b6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b4b8:	b111      	cbz	r1, 800b4c0 <_reclaim_reent+0x68>
 800b4ba:	4620      	mov	r0, r4
 800b4bc:	f000 f834 	bl	800b528 <_free_r>
 800b4c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4c2:	b111      	cbz	r1, 800b4ca <_reclaim_reent+0x72>
 800b4c4:	4620      	mov	r0, r4
 800b4c6:	f000 f82f 	bl	800b528 <_free_r>
 800b4ca:	69a3      	ldr	r3, [r4, #24]
 800b4cc:	b1e3      	cbz	r3, 800b508 <_reclaim_reent+0xb0>
 800b4ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	4798      	blx	r3
 800b4d4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b4d6:	b1b9      	cbz	r1, 800b508 <_reclaim_reent+0xb0>
 800b4d8:	4620      	mov	r0, r4
 800b4da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b4de:	f7ff bfad 	b.w	800b43c <cleanup_glue>
 800b4e2:	5949      	ldr	r1, [r1, r5]
 800b4e4:	b941      	cbnz	r1, 800b4f8 <_reclaim_reent+0xa0>
 800b4e6:	3504      	adds	r5, #4
 800b4e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4ea:	2d80      	cmp	r5, #128	; 0x80
 800b4ec:	68d9      	ldr	r1, [r3, #12]
 800b4ee:	d1f8      	bne.n	800b4e2 <_reclaim_reent+0x8a>
 800b4f0:	4620      	mov	r0, r4
 800b4f2:	f000 f819 	bl	800b528 <_free_r>
 800b4f6:	e7ba      	b.n	800b46e <_reclaim_reent+0x16>
 800b4f8:	680e      	ldr	r6, [r1, #0]
 800b4fa:	4620      	mov	r0, r4
 800b4fc:	f000 f814 	bl	800b528 <_free_r>
 800b500:	4631      	mov	r1, r6
 800b502:	e7ef      	b.n	800b4e4 <_reclaim_reent+0x8c>
 800b504:	2500      	movs	r5, #0
 800b506:	e7ef      	b.n	800b4e8 <_reclaim_reent+0x90>
 800b508:	bd70      	pop	{r4, r5, r6, pc}
 800b50a:	bf00      	nop
 800b50c:	20000118 	.word	0x20000118

0800b510 <__malloc_lock>:
 800b510:	4801      	ldr	r0, [pc, #4]	; (800b518 <__malloc_lock+0x8>)
 800b512:	f7ff bf7b 	b.w	800b40c <__retarget_lock_acquire_recursive>
 800b516:	bf00      	nop
 800b518:	20005888 	.word	0x20005888

0800b51c <__malloc_unlock>:
 800b51c:	4801      	ldr	r0, [pc, #4]	; (800b524 <__malloc_unlock+0x8>)
 800b51e:	f7ff bf76 	b.w	800b40e <__retarget_lock_release_recursive>
 800b522:	bf00      	nop
 800b524:	20005888 	.word	0x20005888

0800b528 <_free_r>:
 800b528:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b52a:	2900      	cmp	r1, #0
 800b52c:	d048      	beq.n	800b5c0 <_free_r+0x98>
 800b52e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b532:	9001      	str	r0, [sp, #4]
 800b534:	2b00      	cmp	r3, #0
 800b536:	f1a1 0404 	sub.w	r4, r1, #4
 800b53a:	bfb8      	it	lt
 800b53c:	18e4      	addlt	r4, r4, r3
 800b53e:	f7ff ffe7 	bl	800b510 <__malloc_lock>
 800b542:	4a20      	ldr	r2, [pc, #128]	; (800b5c4 <_free_r+0x9c>)
 800b544:	9801      	ldr	r0, [sp, #4]
 800b546:	6813      	ldr	r3, [r2, #0]
 800b548:	4615      	mov	r5, r2
 800b54a:	b933      	cbnz	r3, 800b55a <_free_r+0x32>
 800b54c:	6063      	str	r3, [r4, #4]
 800b54e:	6014      	str	r4, [r2, #0]
 800b550:	b003      	add	sp, #12
 800b552:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b556:	f7ff bfe1 	b.w	800b51c <__malloc_unlock>
 800b55a:	42a3      	cmp	r3, r4
 800b55c:	d90b      	bls.n	800b576 <_free_r+0x4e>
 800b55e:	6821      	ldr	r1, [r4, #0]
 800b560:	1862      	adds	r2, r4, r1
 800b562:	4293      	cmp	r3, r2
 800b564:	bf04      	itt	eq
 800b566:	681a      	ldreq	r2, [r3, #0]
 800b568:	685b      	ldreq	r3, [r3, #4]
 800b56a:	6063      	str	r3, [r4, #4]
 800b56c:	bf04      	itt	eq
 800b56e:	1852      	addeq	r2, r2, r1
 800b570:	6022      	streq	r2, [r4, #0]
 800b572:	602c      	str	r4, [r5, #0]
 800b574:	e7ec      	b.n	800b550 <_free_r+0x28>
 800b576:	461a      	mov	r2, r3
 800b578:	685b      	ldr	r3, [r3, #4]
 800b57a:	b10b      	cbz	r3, 800b580 <_free_r+0x58>
 800b57c:	42a3      	cmp	r3, r4
 800b57e:	d9fa      	bls.n	800b576 <_free_r+0x4e>
 800b580:	6811      	ldr	r1, [r2, #0]
 800b582:	1855      	adds	r5, r2, r1
 800b584:	42a5      	cmp	r5, r4
 800b586:	d10b      	bne.n	800b5a0 <_free_r+0x78>
 800b588:	6824      	ldr	r4, [r4, #0]
 800b58a:	4421      	add	r1, r4
 800b58c:	1854      	adds	r4, r2, r1
 800b58e:	42a3      	cmp	r3, r4
 800b590:	6011      	str	r1, [r2, #0]
 800b592:	d1dd      	bne.n	800b550 <_free_r+0x28>
 800b594:	681c      	ldr	r4, [r3, #0]
 800b596:	685b      	ldr	r3, [r3, #4]
 800b598:	6053      	str	r3, [r2, #4]
 800b59a:	4421      	add	r1, r4
 800b59c:	6011      	str	r1, [r2, #0]
 800b59e:	e7d7      	b.n	800b550 <_free_r+0x28>
 800b5a0:	d902      	bls.n	800b5a8 <_free_r+0x80>
 800b5a2:	230c      	movs	r3, #12
 800b5a4:	6003      	str	r3, [r0, #0]
 800b5a6:	e7d3      	b.n	800b550 <_free_r+0x28>
 800b5a8:	6825      	ldr	r5, [r4, #0]
 800b5aa:	1961      	adds	r1, r4, r5
 800b5ac:	428b      	cmp	r3, r1
 800b5ae:	bf04      	itt	eq
 800b5b0:	6819      	ldreq	r1, [r3, #0]
 800b5b2:	685b      	ldreq	r3, [r3, #4]
 800b5b4:	6063      	str	r3, [r4, #4]
 800b5b6:	bf04      	itt	eq
 800b5b8:	1949      	addeq	r1, r1, r5
 800b5ba:	6021      	streq	r1, [r4, #0]
 800b5bc:	6054      	str	r4, [r2, #4]
 800b5be:	e7c7      	b.n	800b550 <_free_r+0x28>
 800b5c0:	b003      	add	sp, #12
 800b5c2:	bd30      	pop	{r4, r5, pc}
 800b5c4:	20004b74 	.word	0x20004b74

0800b5c8 <_init>:
 800b5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ca:	bf00      	nop
 800b5cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5ce:	bc08      	pop	{r3}
 800b5d0:	469e      	mov	lr, r3
 800b5d2:	4770      	bx	lr

0800b5d4 <_fini>:
 800b5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5d6:	bf00      	nop
 800b5d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5da:	bc08      	pop	{r3}
 800b5dc:	469e      	mov	lr, r3
 800b5de:	4770      	bx	lr
