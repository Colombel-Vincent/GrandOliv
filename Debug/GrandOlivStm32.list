
GrandOlivStm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dab4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0800dc84  0800dc84  0001dc84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd60  0800dd60  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd60  0800dd60  0001dd60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd68  0800dd68  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd68  0800dd68  0001dd68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd6c  0800dd6c  0001dd6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800dd70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000055c8  20000094  0800de04  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000565c  0800de04  0002565c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031511  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005971  00000000  00000000  000515d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fa8  00000000  00000000  00056f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001dd8  00000000  00000000  00058ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007667  00000000  00000000  0005acc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027ea8  00000000  00000000  0006232f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000efb6e  00000000  00000000  0008a1d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00179d45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a64  00000000  00000000  00179d98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000094 	.word	0x20000094
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800dc6c 	.word	0x0800dc6c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000098 	.word	0x20000098
 800020c:	0800dc6c 	.word	0x0800dc6c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fe86 	bl	800121c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f826 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 faae 	bl	8000a74 <MX_GPIO_Init>
  MX_DMA_Init();
 8000518:	f000 fa8c 	bl	8000a34 <MX_DMA_Init>
  MX_ADC1_Init();
 800051c:	f000 f88c 	bl	8000638 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000520:	f000 f8dc 	bl	80006dc <MX_I2C1_Init>
  MX_TIM1_Init();
 8000524:	f000 f908 	bl	8000738 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000528:	f000 f95e 	bl	80007e8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800052c:	f000 f9b0 	bl	8000890 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000530:	f000 fa02 	bl	8000938 <MX_TIM4_Init>
  MX_UART4_Init();
 8000534:	f000 fa54 	bl	80009e0 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000538:	f009 ffbe 	bl	800a4b8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800053c:	4a05      	ldr	r2, [pc, #20]	; (8000554 <main+0x4c>)
 800053e:	2100      	movs	r1, #0
 8000540:	4805      	ldr	r0, [pc, #20]	; (8000558 <main+0x50>)
 8000542:	f00a f803 	bl	800a54c <osThreadNew>
 8000546:	4603      	mov	r3, r0
 8000548:	4a04      	ldr	r2, [pc, #16]	; (800055c <main+0x54>)
 800054a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800054c:	f009 ffd8 	bl	800a500 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000550:	e7fe      	b.n	8000550 <main+0x48>
 8000552:	bf00      	nop
 8000554:	0800dcbc 	.word	0x0800dcbc
 8000558:	08000ba5 	.word	0x08000ba5
 800055c:	20004a90 	.word	0x20004a90

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	; 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 031c 	add.w	r3, r7, #28
 800056a:	2234      	movs	r2, #52	; 0x34
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f00d fa44 	bl	800d9fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 0308 	add.w	r3, r7, #8
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000584:	2300      	movs	r3, #0
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	4b29      	ldr	r3, [pc, #164]	; (8000630 <SystemClock_Config+0xd0>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	4a28      	ldr	r2, [pc, #160]	; (8000630 <SystemClock_Config+0xd0>)
 800058e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000592:	6413      	str	r3, [r2, #64]	; 0x40
 8000594:	4b26      	ldr	r3, [pc, #152]	; (8000630 <SystemClock_Config+0xd0>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005a0:	2300      	movs	r3, #0
 80005a2:	603b      	str	r3, [r7, #0]
 80005a4:	4b23      	ldr	r3, [pc, #140]	; (8000634 <SystemClock_Config+0xd4>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005ac:	4a21      	ldr	r2, [pc, #132]	; (8000634 <SystemClock_Config+0xd4>)
 80005ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4b1f      	ldr	r3, [pc, #124]	; (8000634 <SystemClock_Config+0xd4>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005bc:	603b      	str	r3, [r7, #0]
 80005be:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c0:	2302      	movs	r3, #2
 80005c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c4:	2301      	movs	r3, #1
 80005c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c8:	2310      	movs	r3, #16
 80005ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005cc:	2302      	movs	r3, #2
 80005ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005d6:	2304      	movs	r3, #4
 80005d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005da:	2348      	movs	r3, #72	; 0x48
 80005dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005de:	2302      	movs	r3, #2
 80005e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005e2:	2303      	movs	r3, #3
 80005e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005e6:	2302      	movs	r3, #2
 80005e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	4618      	mov	r0, r3
 80005f0:	f004 fb1a 	bl	8004c28 <HAL_RCC_OscConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005fa:	f000 fadd 	bl	8000bb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fe:	230f      	movs	r3, #15
 8000600:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000612:	f107 0308 	add.w	r3, r7, #8
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f003 fcdd 	bl	8003fd8 <HAL_RCC_ClockConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000624:	f000 fac8 	bl	8000bb8 <Error_Handler>
  }
}
 8000628:	bf00      	nop
 800062a:	3750      	adds	r7, #80	; 0x50
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40023800 	.word	0x40023800
 8000634:	40007000 	.word	0x40007000

08000638 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800063e:	463b      	mov	r3, r7
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800064a:	4b21      	ldr	r3, [pc, #132]	; (80006d0 <MX_ADC1_Init+0x98>)
 800064c:	4a21      	ldr	r2, [pc, #132]	; (80006d4 <MX_ADC1_Init+0x9c>)
 800064e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000650:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000652:	2200      	movs	r2, #0
 8000654:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000656:	4b1e      	ldr	r3, [pc, #120]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800065c:	4b1c      	ldr	r3, [pc, #112]	; (80006d0 <MX_ADC1_Init+0x98>)
 800065e:	2200      	movs	r2, #0
 8000660:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000662:	4b1b      	ldr	r3, [pc, #108]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000664:	2200      	movs	r2, #0
 8000666:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000668:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <MX_ADC1_Init+0x98>)
 800066a:	2200      	movs	r2, #0
 800066c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000670:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000672:	2200      	movs	r2, #0
 8000674:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000676:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000678:	4a17      	ldr	r2, [pc, #92]	; (80006d8 <MX_ADC1_Init+0xa0>)
 800067a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <MX_ADC1_Init+0x98>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000682:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000684:	2201      	movs	r2, #1
 8000686:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000688:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_ADC1_Init+0x98>)
 800068a:	2200      	movs	r2, #0
 800068c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000692:	2201      	movs	r2, #1
 8000694:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000696:	480e      	ldr	r0, [pc, #56]	; (80006d0 <MX_ADC1_Init+0x98>)
 8000698:	f000 fe12 	bl	80012c0 <HAL_ADC_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80006a2:	f000 fa89 	bl	8000bb8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80006a6:	2308      	movs	r3, #8
 80006a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006aa:	2301      	movs	r3, #1
 80006ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b2:	463b      	mov	r3, r7
 80006b4:	4619      	mov	r1, r3
 80006b6:	4806      	ldr	r0, [pc, #24]	; (80006d0 <MX_ADC1_Init+0x98>)
 80006b8:	f000 fe46 	bl	8001348 <HAL_ADC_ConfigChannel>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006c2:	f000 fa79 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20004b78 	.word	0x20004b78
 80006d4:	40012000 	.word	0x40012000
 80006d8:	0f000001 	.word	0x0f000001

080006dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006e0:	4b12      	ldr	r3, [pc, #72]	; (800072c <MX_I2C1_Init+0x50>)
 80006e2:	4a13      	ldr	r2, [pc, #76]	; (8000730 <MX_I2C1_Init+0x54>)
 80006e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_I2C1_Init+0x50>)
 80006e8:	4a12      	ldr	r2, [pc, #72]	; (8000734 <MX_I2C1_Init+0x58>)
 80006ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_I2C1_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_I2C1_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_I2C1_Init+0x50>)
 80006fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000700:	4b0a      	ldr	r3, [pc, #40]	; (800072c <MX_I2C1_Init+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_I2C1_Init+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <MX_I2C1_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_I2C1_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <MX_I2C1_Init+0x50>)
 800071a:	f003 fb19 	bl	8003d50 <HAL_I2C_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000724:	f000 fa48 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20004adc 	.word	0x20004adc
 8000730:	40005400 	.word	0x40005400
 8000734:	000186a0 	.word	0x000186a0

08000738 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08c      	sub	sp, #48	; 0x30
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	2224      	movs	r2, #36	; 0x24
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f00d f958 	bl	800d9fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000754:	4b22      	ldr	r3, [pc, #136]	; (80007e0 <MX_TIM1_Init+0xa8>)
 8000756:	4a23      	ldr	r2, [pc, #140]	; (80007e4 <MX_TIM1_Init+0xac>)
 8000758:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800075a:	4b21      	ldr	r3, [pc, #132]	; (80007e0 <MX_TIM1_Init+0xa8>)
 800075c:	2200      	movs	r2, #0
 800075e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000760:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <MX_TIM1_Init+0xa8>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000766:	4b1e      	ldr	r3, [pc, #120]	; (80007e0 <MX_TIM1_Init+0xa8>)
 8000768:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800076c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800076e:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <MX_TIM1_Init+0xa8>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000774:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <MX_TIM1_Init+0xa8>)
 8000776:	2200      	movs	r2, #0
 8000778:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800077a:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <MX_TIM1_Init+0xa8>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000780:	2301      	movs	r3, #1
 8000782:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000784:	2300      	movs	r3, #0
 8000786:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000788:	2301      	movs	r3, #1
 800078a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000794:	2300      	movs	r3, #0
 8000796:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000798:	2301      	movs	r3, #1
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	4619      	mov	r1, r3
 80007aa:	480d      	ldr	r0, [pc, #52]	; (80007e0 <MX_TIM1_Init+0xa8>)
 80007ac:	f004 fda4 	bl	80052f8 <HAL_TIM_Encoder_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80007b6:	f000 f9ff 	bl	8000bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	4619      	mov	r1, r3
 80007c6:	4806      	ldr	r0, [pc, #24]	; (80007e0 <MX_TIM1_Init+0xa8>)
 80007c8:	f004 fedc 	bl	8005584 <HAL_TIMEx_MasterConfigSynchronization>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80007d2:	f000 f9f1 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	3730      	adds	r7, #48	; 0x30
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20004c20 	.word	0x20004c20
 80007e4:	40010000 	.word	0x40010000

080007e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08c      	sub	sp, #48	; 0x30
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	2224      	movs	r2, #36	; 0x24
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f00d f900 	bl	800d9fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000804:	4b21      	ldr	r3, [pc, #132]	; (800088c <MX_TIM2_Init+0xa4>)
 8000806:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800080a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800080c:	4b1f      	ldr	r3, [pc, #124]	; (800088c <MX_TIM2_Init+0xa4>)
 800080e:	2200      	movs	r2, #0
 8000810:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000812:	4b1e      	ldr	r3, [pc, #120]	; (800088c <MX_TIM2_Init+0xa4>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000818:	4b1c      	ldr	r3, [pc, #112]	; (800088c <MX_TIM2_Init+0xa4>)
 800081a:	f04f 32ff 	mov.w	r2, #4294967295
 800081e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000820:	4b1a      	ldr	r3, [pc, #104]	; (800088c <MX_TIM2_Init+0xa4>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000826:	4b19      	ldr	r3, [pc, #100]	; (800088c <MX_TIM2_Init+0xa4>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800082c:	2301      	movs	r3, #1
 800082e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000830:	2300      	movs	r3, #0
 8000832:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000834:	2301      	movs	r3, #1
 8000836:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000840:	2300      	movs	r3, #0
 8000842:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000844:	2301      	movs	r3, #1
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000850:	f107 030c 	add.w	r3, r7, #12
 8000854:	4619      	mov	r1, r3
 8000856:	480d      	ldr	r0, [pc, #52]	; (800088c <MX_TIM2_Init+0xa4>)
 8000858:	f004 fd4e 	bl	80052f8 <HAL_TIM_Encoder_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000862:	f000 f9a9 	bl	8000bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800086a:	2300      	movs	r3, #0
 800086c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	4619      	mov	r1, r3
 8000872:	4806      	ldr	r0, [pc, #24]	; (800088c <MX_TIM2_Init+0xa4>)
 8000874:	f004 fe86 	bl	8005584 <HAL_TIMEx_MasterConfigSynchronization>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800087e:	f000 f99b 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	3730      	adds	r7, #48	; 0x30
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20004cac 	.word	0x20004cac

08000890 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08c      	sub	sp, #48	; 0x30
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000896:	f107 030c 	add.w	r3, r7, #12
 800089a:	2224      	movs	r2, #36	; 0x24
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f00d f8ac 	bl	800d9fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008ac:	4b20      	ldr	r3, [pc, #128]	; (8000930 <MX_TIM3_Init+0xa0>)
 80008ae:	4a21      	ldr	r2, [pc, #132]	; (8000934 <MX_TIM3_Init+0xa4>)
 80008b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008b2:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <MX_TIM3_Init+0xa0>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b8:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <MX_TIM3_Init+0xa0>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80008be:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <MX_TIM3_Init+0xa0>)
 80008c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c6:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <MX_TIM3_Init+0xa0>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008cc:	4b18      	ldr	r3, [pc, #96]	; (8000930 <MX_TIM3_Init+0xa0>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80008d2:	2301      	movs	r3, #1
 80008d4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008da:	2301      	movs	r3, #1
 80008dc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008de:	2300      	movs	r3, #0
 80008e0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008e6:	2300      	movs	r3, #0
 80008e8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008ea:	2301      	movs	r3, #1
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80008f6:	f107 030c 	add.w	r3, r7, #12
 80008fa:	4619      	mov	r1, r3
 80008fc:	480c      	ldr	r0, [pc, #48]	; (8000930 <MX_TIM3_Init+0xa0>)
 80008fe:	f004 fcfb 	bl	80052f8 <HAL_TIM_Encoder_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000908:	f000 f956 	bl	8000bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800090c:	2300      	movs	r3, #0
 800090e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000910:	2300      	movs	r3, #0
 8000912:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	4619      	mov	r1, r3
 8000918:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_TIM3_Init+0xa0>)
 800091a:	f004 fe33 	bl	8005584 <HAL_TIMEx_MasterConfigSynchronization>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000924:	f000 f948 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	3730      	adds	r7, #48	; 0x30
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20004b30 	.word	0x20004b30
 8000934:	40000400 	.word	0x40000400

08000938 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08c      	sub	sp, #48	; 0x30
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800093e:	f107 030c 	add.w	r3, r7, #12
 8000942:	2224      	movs	r2, #36	; 0x24
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f00d f858 	bl	800d9fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000954:	4b20      	ldr	r3, [pc, #128]	; (80009d8 <MX_TIM4_Init+0xa0>)
 8000956:	4a21      	ldr	r2, [pc, #132]	; (80009dc <MX_TIM4_Init+0xa4>)
 8000958:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800095a:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <MX_TIM4_Init+0xa0>)
 800095c:	2200      	movs	r2, #0
 800095e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000960:	4b1d      	ldr	r3, [pc, #116]	; (80009d8 <MX_TIM4_Init+0xa0>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000966:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <MX_TIM4_Init+0xa0>)
 8000968:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800096c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096e:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <MX_TIM4_Init+0xa0>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000974:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <MX_TIM4_Init+0xa0>)
 8000976:	2200      	movs	r2, #0
 8000978:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800097a:	2301      	movs	r3, #1
 800097c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000982:	2301      	movs	r3, #1
 8000984:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000986:	2300      	movs	r3, #0
 8000988:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800098e:	2300      	movs	r3, #0
 8000990:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000992:	2301      	movs	r3, #1
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000996:	2300      	movs	r3, #0
 8000998:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800099e:	f107 030c 	add.w	r3, r7, #12
 80009a2:	4619      	mov	r1, r3
 80009a4:	480c      	ldr	r0, [pc, #48]	; (80009d8 <MX_TIM4_Init+0xa0>)
 80009a6:	f004 fca7 	bl	80052f8 <HAL_TIM_Encoder_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80009b0:	f000 f902 	bl	8000bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b4:	2300      	movs	r3, #0
 80009b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b8:	2300      	movs	r3, #0
 80009ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	4619      	mov	r1, r3
 80009c0:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_TIM4_Init+0xa0>)
 80009c2:	f004 fddf 	bl	8005584 <HAL_TIMEx_MasterConfigSynchronization>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80009cc:	f000 f8f4 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80009d0:	bf00      	nop
 80009d2:	3730      	adds	r7, #48	; 0x30
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20004a94 	.word	0x20004a94
 80009dc:	40000800 	.word	0x40000800

080009e0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80009e4:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <MX_UART4_Init+0x4c>)
 80009e6:	4a12      	ldr	r2, [pc, #72]	; (8000a30 <MX_UART4_Init+0x50>)
 80009e8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <MX_UART4_Init+0x4c>)
 80009ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <MX_UART4_Init+0x4c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <MX_UART4_Init+0x4c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <MX_UART4_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a04:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MX_UART4_Init+0x4c>)
 8000a06:	220c      	movs	r2, #12
 8000a08:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0a:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <MX_UART4_Init+0x4c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <MX_UART4_Init+0x4c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a16:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_UART4_Init+0x4c>)
 8000a18:	f004 fe30 	bl	800567c <HAL_UART_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000a22:	f000 f8c9 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20004c68 	.word	0x20004c68
 8000a30:	40004c00 	.word	0x40004c00

08000a34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <MX_DMA_Init+0x3c>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a0b      	ldr	r2, [pc, #44]	; (8000a70 <MX_DMA_Init+0x3c>)
 8000a44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <MX_DMA_Init+0x3c>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2105      	movs	r1, #5
 8000a5a:	2038      	movs	r0, #56	; 0x38
 8000a5c:	f000 ff5a 	bl	8001914 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a60:	2038      	movs	r0, #56	; 0x38
 8000a62:	f000 ff73 	bl	800194c <HAL_NVIC_EnableIRQ>

}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40023800 	.word	0x40023800

08000a74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	; 0x28
 8000a78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	4b41      	ldr	r3, [pc, #260]	; (8000b94 <MX_GPIO_Init+0x120>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a40      	ldr	r2, [pc, #256]	; (8000b94 <MX_GPIO_Init+0x120>)
 8000a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b3e      	ldr	r3, [pc, #248]	; (8000b94 <MX_GPIO_Init+0x120>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	4b3a      	ldr	r3, [pc, #232]	; (8000b94 <MX_GPIO_Init+0x120>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a39      	ldr	r2, [pc, #228]	; (8000b94 <MX_GPIO_Init+0x120>)
 8000ab0:	f043 0304 	orr.w	r3, r3, #4
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b37      	ldr	r3, [pc, #220]	; (8000b94 <MX_GPIO_Init+0x120>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0304 	and.w	r3, r3, #4
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	4b33      	ldr	r3, [pc, #204]	; (8000b94 <MX_GPIO_Init+0x120>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a32      	ldr	r2, [pc, #200]	; (8000b94 <MX_GPIO_Init+0x120>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b30      	ldr	r3, [pc, #192]	; (8000b94 <MX_GPIO_Init+0x120>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	4b2c      	ldr	r3, [pc, #176]	; (8000b94 <MX_GPIO_Init+0x120>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a2b      	ldr	r2, [pc, #172]	; (8000b94 <MX_GPIO_Init+0x120>)
 8000ae8:	f043 0302 	orr.w	r3, r3, #2
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b29      	ldr	r3, [pc, #164]	; (8000b94 <MX_GPIO_Init+0x120>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_7
 8000afa:	2200      	movs	r2, #0
 8000afc:	f241 31c5 	movw	r1, #5061	; 0x13c5
 8000b00:	4825      	ldr	r0, [pc, #148]	; (8000b98 <MX_GPIO_Init+0x124>)
 8000b02:	f001 fbaf 	bl	8002264 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_14, GPIO_PIN_RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	f244 011c 	movw	r1, #16412	; 0x401c
 8000b0c:	4823      	ldr	r0, [pc, #140]	; (8000b9c <MX_GPIO_Init+0x128>)
 8000b0e:	f001 fba9 	bl	8002264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2118      	movs	r1, #24
 8000b16:	4822      	ldr	r0, [pc, #136]	; (8000ba0 <MX_GPIO_Init+0x12c>)
 8000b18:	f001 fba4 	bl	8002264 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC2 PC6 PC7
                           PC8 PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_7
 8000b1c:	f241 33c5 	movw	r3, #5061	; 0x13c5
 8000b20:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b22:	2301      	movs	r3, #1
 8000b24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	4619      	mov	r1, r3
 8000b34:	4818      	ldr	r0, [pc, #96]	; (8000b98 <MX_GPIO_Init+0x124>)
 8000b36:	f001 fa01 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4812      	ldr	r0, [pc, #72]	; (8000b98 <MX_GPIO_Init+0x124>)
 8000b4e:	f001 f9f5 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_14;
 8000b52:	f244 031c 	movw	r3, #16412	; 0x401c
 8000b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	4619      	mov	r1, r3
 8000b6a:	480c      	ldr	r0, [pc, #48]	; (8000b9c <MX_GPIO_Init+0x128>)
 8000b6c:	f001 f9e6 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000b70:	2318      	movs	r3, #24
 8000b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b74:	2301      	movs	r3, #1
 8000b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	4619      	mov	r1, r3
 8000b86:	4806      	ldr	r0, [pc, #24]	; (8000ba0 <MX_GPIO_Init+0x12c>)
 8000b88:	f001 f9d8 	bl	8001f3c <HAL_GPIO_Init>

}
 8000b8c:	bf00      	nop
 8000b8e:	3728      	adds	r7, #40	; 0x28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020800 	.word	0x40020800
 8000b9c:	40020000 	.word	0x40020000
 8000ba0:	40020400 	.word	0x40020400

08000ba4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000bac:	f00c fbe6 	bl	800d37c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	f009 fd5d 	bl	800a670 <osDelay>
 8000bb6:	e7fb      	b.n	8000bb0 <StartDefaultTask+0xc>

08000bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bbc:	b672      	cpsid	i
}
 8000bbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <Error_Handler+0x8>
	...

08000bc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <HAL_MspInit+0x54>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd2:	4a11      	ldr	r2, [pc, #68]	; (8000c18 <HAL_MspInit+0x54>)
 8000bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bda:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <HAL_MspInit+0x54>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	603b      	str	r3, [r7, #0]
 8000bea:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <HAL_MspInit+0x54>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	4a0a      	ldr	r2, [pc, #40]	; (8000c18 <HAL_MspInit+0x54>)
 8000bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf6:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <HAL_MspInit+0x54>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	210f      	movs	r1, #15
 8000c06:	f06f 0001 	mvn.w	r0, #1
 8000c0a:	f000 fe83 	bl	8001914 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40023800 	.word	0x40023800

08000c1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08a      	sub	sp, #40	; 0x28
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a2e      	ldr	r2, [pc, #184]	; (8000cf4 <HAL_ADC_MspInit+0xd8>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d156      	bne.n	8000cec <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	4b2d      	ldr	r3, [pc, #180]	; (8000cf8 <HAL_ADC_MspInit+0xdc>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c46:	4a2c      	ldr	r2, [pc, #176]	; (8000cf8 <HAL_ADC_MspInit+0xdc>)
 8000c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c4e:	4b2a      	ldr	r3, [pc, #168]	; (8000cf8 <HAL_ADC_MspInit+0xdc>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	4b26      	ldr	r3, [pc, #152]	; (8000cf8 <HAL_ADC_MspInit+0xdc>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a25      	ldr	r2, [pc, #148]	; (8000cf8 <HAL_ADC_MspInit+0xdc>)
 8000c64:	f043 0302 	orr.w	r3, r3, #2
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b23      	ldr	r3, [pc, #140]	; (8000cf8 <HAL_ADC_MspInit+0xdc>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0302 	and.w	r3, r3, #2
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c76:	2301      	movs	r3, #1
 8000c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	4619      	mov	r1, r3
 8000c88:	481c      	ldr	r0, [pc, #112]	; (8000cfc <HAL_ADC_MspInit+0xe0>)
 8000c8a:	f001 f957 	bl	8001f3c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c8e:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <HAL_ADC_MspInit+0xe4>)
 8000c90:	4a1c      	ldr	r2, [pc, #112]	; (8000d04 <HAL_ADC_MspInit+0xe8>)
 8000c92:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c94:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <HAL_ADC_MspInit+0xe4>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c9a:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <HAL_ADC_MspInit+0xe4>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ca0:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <HAL_ADC_MspInit+0xe4>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ca6:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <HAL_ADC_MspInit+0xe4>)
 8000ca8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cae:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <HAL_ADC_MspInit+0xe4>)
 8000cb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cb4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cb6:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <HAL_ADC_MspInit+0xe4>)
 8000cb8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cbc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000cbe:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <HAL_ADC_MspInit+0xe4>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000cc4:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <HAL_ADC_MspInit+0xe4>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cca:	4b0d      	ldr	r3, [pc, #52]	; (8000d00 <HAL_ADC_MspInit+0xe4>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cd0:	480b      	ldr	r0, [pc, #44]	; (8000d00 <HAL_ADC_MspInit+0xe4>)
 8000cd2:	f000 fe49 	bl	8001968 <HAL_DMA_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000cdc:	f7ff ff6c 	bl	8000bb8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a07      	ldr	r2, [pc, #28]	; (8000d00 <HAL_ADC_MspInit+0xe4>)
 8000ce4:	639a      	str	r2, [r3, #56]	; 0x38
 8000ce6:	4a06      	ldr	r2, [pc, #24]	; (8000d00 <HAL_ADC_MspInit+0xe4>)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cec:	bf00      	nop
 8000cee:	3728      	adds	r7, #40	; 0x28
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40012000 	.word	0x40012000
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020400 	.word	0x40020400
 8000d00:	20004bc0 	.word	0x20004bc0
 8000d04:	40026410 	.word	0x40026410

08000d08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	; 0x28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a19      	ldr	r2, [pc, #100]	; (8000d8c <HAL_I2C_MspInit+0x84>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d12c      	bne.n	8000d84 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <HAL_I2C_MspInit+0x88>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a17      	ldr	r2, [pc, #92]	; (8000d90 <HAL_I2C_MspInit+0x88>)
 8000d34:	f043 0302 	orr.w	r3, r3, #2
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <HAL_I2C_MspInit+0x88>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d4c:	2312      	movs	r3, #18
 8000d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d54:	2303      	movs	r3, #3
 8000d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d58:	2304      	movs	r3, #4
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	4619      	mov	r1, r3
 8000d62:	480c      	ldr	r0, [pc, #48]	; (8000d94 <HAL_I2C_MspInit+0x8c>)
 8000d64:	f001 f8ea 	bl	8001f3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <HAL_I2C_MspInit+0x88>)
 8000d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d70:	4a07      	ldr	r2, [pc, #28]	; (8000d90 <HAL_I2C_MspInit+0x88>)
 8000d72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d76:	6413      	str	r3, [r2, #64]	; 0x40
 8000d78:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <HAL_I2C_MspInit+0x88>)
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d84:	bf00      	nop
 8000d86:	3728      	adds	r7, #40	; 0x28
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40005400 	.word	0x40005400
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40020400 	.word	0x40020400

08000d98 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b090      	sub	sp, #64	; 0x40
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a64      	ldr	r2, [pc, #400]	; (8000f48 <HAL_TIM_Encoder_MspInit+0x1b0>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d12d      	bne.n	8000e16 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8000dbe:	4b63      	ldr	r3, [pc, #396]	; (8000f4c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	4a62      	ldr	r2, [pc, #392]	; (8000f4c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dca:	4b60      	ldr	r3, [pc, #384]	; (8000f4c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8000dda:	4b5c      	ldr	r3, [pc, #368]	; (8000f4c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a5b      	ldr	r2, [pc, #364]	; (8000f4c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b59      	ldr	r3, [pc, #356]	; (8000f4c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
 8000df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000df2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e00:	2300      	movs	r3, #0
 8000e02:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e04:	2301      	movs	r3, #1
 8000e06:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4850      	ldr	r0, [pc, #320]	; (8000f50 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8000e10:	f001 f894 	bl	8001f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000e14:	e094      	b.n	8000f40 <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM2)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e1e:	d12c      	bne.n	8000e7a <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e20:	2300      	movs	r3, #0
 8000e22:	623b      	str	r3, [r7, #32]
 8000e24:	4b49      	ldr	r3, [pc, #292]	; (8000f4c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e28:	4a48      	ldr	r2, [pc, #288]	; (8000f4c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000e2a:	f043 0301 	orr.w	r3, r3, #1
 8000e2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e30:	4b46      	ldr	r3, [pc, #280]	; (8000f4c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	623b      	str	r3, [r7, #32]
 8000e3a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61fb      	str	r3, [r7, #28]
 8000e40:	4b42      	ldr	r3, [pc, #264]	; (8000f4c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e44:	4a41      	ldr	r2, [pc, #260]	; (8000f4c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000e46:	f043 0301 	orr.w	r3, r3, #1
 8000e4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4c:	4b3f      	ldr	r3, [pc, #252]	; (8000f4c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	61fb      	str	r3, [r7, #28]
 8000e56:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8000e58:	2322      	movs	r3, #34	; 0x22
 8000e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e70:	4619      	mov	r1, r3
 8000e72:	4837      	ldr	r0, [pc, #220]	; (8000f50 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8000e74:	f001 f862 	bl	8001f3c <HAL_GPIO_Init>
}
 8000e78:	e062      	b.n	8000f40 <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM3)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a35      	ldr	r2, [pc, #212]	; (8000f54 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d12c      	bne.n	8000ede <HAL_TIM_Encoder_MspInit+0x146>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e84:	2300      	movs	r3, #0
 8000e86:	61bb      	str	r3, [r7, #24]
 8000e88:	4b30      	ldr	r3, [pc, #192]	; (8000f4c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8c:	4a2f      	ldr	r2, [pc, #188]	; (8000f4c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000e8e:	f043 0302 	orr.w	r3, r3, #2
 8000e92:	6413      	str	r3, [r2, #64]	; 0x40
 8000e94:	4b2d      	ldr	r3, [pc, #180]	; (8000f4c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e98:	f003 0302 	and.w	r3, r3, #2
 8000e9c:	61bb      	str	r3, [r7, #24]
 8000e9e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
 8000ea4:	4b29      	ldr	r3, [pc, #164]	; (8000f4c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea8:	4a28      	ldr	r2, [pc, #160]	; (8000f4c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000eaa:	f043 0301 	orr.w	r3, r3, #1
 8000eae:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb0:	4b26      	ldr	r3, [pc, #152]	; (8000f4c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	617b      	str	r3, [r7, #20]
 8000eba:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ebc:	23c0      	movs	r3, #192	; 0xc0
 8000ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	481e      	ldr	r0, [pc, #120]	; (8000f50 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8000ed8:	f001 f830 	bl	8001f3c <HAL_GPIO_Init>
}
 8000edc:	e030      	b.n	8000f40 <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM4)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a1d      	ldr	r2, [pc, #116]	; (8000f58 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d12b      	bne.n	8000f40 <HAL_TIM_Encoder_MspInit+0x1a8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ee8:	2300      	movs	r3, #0
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	4b17      	ldr	r3, [pc, #92]	; (8000f4c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef0:	4a16      	ldr	r2, [pc, #88]	; (8000f4c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000ef2:	f043 0304 	orr.w	r3, r3, #4
 8000ef6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef8:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efc:	f003 0304 	and.w	r3, r3, #4
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f04:	2300      	movs	r3, #0
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0c:	4a0f      	ldr	r2, [pc, #60]	; (8000f4c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000f0e:	f043 0302 	orr.w	r3, r3, #2
 8000f12:	6313      	str	r3, [r2, #48]	; 0x30
 8000f14:	4b0d      	ldr	r3, [pc, #52]	; (8000f4c <HAL_TIM_Encoder_MspInit+0x1b4>)
 8000f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f18:	f003 0302 	and.w	r3, r3, #2
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f20:	23c0      	movs	r3, #192	; 0xc0
 8000f22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f24:	2302      	movs	r3, #2
 8000f26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000f30:	2302      	movs	r3, #2
 8000f32:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4808      	ldr	r0, [pc, #32]	; (8000f5c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8000f3c:	f000 fffe 	bl	8001f3c <HAL_GPIO_Init>
}
 8000f40:	bf00      	nop
 8000f42:	3740      	adds	r7, #64	; 0x40
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40010000 	.word	0x40010000
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40020000 	.word	0x40020000
 8000f54:	40000400 	.word	0x40000400
 8000f58:	40000800 	.word	0x40000800
 8000f5c:	40020400 	.word	0x40020400

08000f60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08a      	sub	sp, #40	; 0x28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a28      	ldr	r2, [pc, #160]	; (8001020 <HAL_UART_MspInit+0xc0>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d14a      	bne.n	8001018 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	4b27      	ldr	r3, [pc, #156]	; (8001024 <HAL_UART_MspInit+0xc4>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	4a26      	ldr	r2, [pc, #152]	; (8001024 <HAL_UART_MspInit+0xc4>)
 8000f8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f90:	6413      	str	r3, [r2, #64]	; 0x40
 8000f92:	4b24      	ldr	r3, [pc, #144]	; (8001024 <HAL_UART_MspInit+0xc4>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	4b20      	ldr	r3, [pc, #128]	; (8001024 <HAL_UART_MspInit+0xc4>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a1f      	ldr	r2, [pc, #124]	; (8001024 <HAL_UART_MspInit+0xc4>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <HAL_UART_MspInit+0xc4>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	4b19      	ldr	r3, [pc, #100]	; (8001024 <HAL_UART_MspInit+0xc4>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a18      	ldr	r2, [pc, #96]	; (8001024 <HAL_UART_MspInit+0xc4>)
 8000fc4:	f043 0304 	orr.w	r3, r3, #4
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b16      	ldr	r3, [pc, #88]	; (8001024 <HAL_UART_MspInit+0xc4>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0304 	and.w	r3, r3, #4
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000fe6:	2308      	movs	r3, #8
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4619      	mov	r1, r3
 8000ff0:	480d      	ldr	r0, [pc, #52]	; (8001028 <HAL_UART_MspInit+0xc8>)
 8000ff2:	f000 ffa3 	bl	8001f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ff6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001004:	2303      	movs	r3, #3
 8001006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001008:	2308      	movs	r3, #8
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	4619      	mov	r1, r3
 8001012:	4806      	ldr	r0, [pc, #24]	; (800102c <HAL_UART_MspInit+0xcc>)
 8001014:	f000 ff92 	bl	8001f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001018:	bf00      	nop
 800101a:	3728      	adds	r7, #40	; 0x28
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40004c00 	.word	0x40004c00
 8001024:	40023800 	.word	0x40023800
 8001028:	40020000 	.word	0x40020000
 800102c:	40020800 	.word	0x40020800

08001030 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08c      	sub	sp, #48	; 0x30
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8001040:	2200      	movs	r2, #0
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	f04f 30ff 	mov.w	r0, #4294967295
 8001048:	f000 fc64 	bl	8001914 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(SysTick_IRQn);
 800104c:	f04f 30ff 	mov.w	r0, #4294967295
 8001050:	f000 fc7c 	bl	800194c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	4b1e      	ldr	r3, [pc, #120]	; (80010d4 <HAL_InitTick+0xa4>)
 800105a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105c:	4a1d      	ldr	r2, [pc, #116]	; (80010d4 <HAL_InitTick+0xa4>)
 800105e:	f043 0310 	orr.w	r3, r3, #16
 8001062:	6413      	str	r3, [r2, #64]	; 0x40
 8001064:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <HAL_InitTick+0xa4>)
 8001066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001068:	f003 0310 	and.w	r3, r3, #16
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001070:	f107 0210 	add.w	r2, r7, #16
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	4611      	mov	r1, r2
 800107a:	4618      	mov	r0, r3
 800107c:	f003 f8c6 	bl	800420c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001080:	f003 f89c 	bl	80041bc <HAL_RCC_GetPCLK1Freq>
 8001084:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001088:	4a13      	ldr	r2, [pc, #76]	; (80010d8 <HAL_InitTick+0xa8>)
 800108a:	fba2 2303 	umull	r2, r3, r2, r3
 800108e:	0c9b      	lsrs	r3, r3, #18
 8001090:	3b01      	subs	r3, #1
 8001092:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001094:	4b11      	ldr	r3, [pc, #68]	; (80010dc <HAL_InitTick+0xac>)
 8001096:	4a12      	ldr	r2, [pc, #72]	; (80010e0 <HAL_InitTick+0xb0>)
 8001098:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800109a:	4b10      	ldr	r3, [pc, #64]	; (80010dc <HAL_InitTick+0xac>)
 800109c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010a0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80010a2:	4a0e      	ldr	r2, [pc, #56]	; (80010dc <HAL_InitTick+0xac>)
 80010a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010a6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <HAL_InitTick+0xac>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ae:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <HAL_InitTick+0xac>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80010b4:	4809      	ldr	r0, [pc, #36]	; (80010dc <HAL_InitTick+0xac>)
 80010b6:	f004 f855 	bl	8005164 <HAL_TIM_Base_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d104      	bne.n	80010ca <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80010c0:	4806      	ldr	r0, [pc, #24]	; (80010dc <HAL_InitTick+0xac>)
 80010c2:	f004 f8a9 	bl	8005218 <HAL_TIM_Base_Start_IT>
 80010c6:	4603      	mov	r3, r0
 80010c8:	e000      	b.n	80010cc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3730      	adds	r7, #48	; 0x30
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40023800 	.word	0x40023800
 80010d8:	431bde83 	.word	0x431bde83
 80010dc:	20004cf4 	.word	0x20004cf4
 80010e0:	40001000 	.word	0x40001000

080010e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <NMI_Handler+0x4>

080010ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ee:	e7fe      	b.n	80010ee <HardFault_Handler+0x4>

080010f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <MemManage_Handler+0x4>

080010f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fa:	e7fe      	b.n	80010fa <BusFault_Handler+0x4>

080010fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001100:	e7fe      	b.n	8001100 <UsageFault_Handler+0x4>

08001102 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001114:	4802      	ldr	r0, [pc, #8]	; (8001120 <DMA2_Stream0_IRQHandler+0x10>)
 8001116:	f000 fcd5 	bl	8001ac4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20004bc0 	.word	0x20004bc0

08001124 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001128:	4802      	ldr	r0, [pc, #8]	; (8001134 <OTG_FS_IRQHandler+0x10>)
 800112a:	f001 fb1f 	bl	800276c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20005348 	.word	0x20005348

08001138 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001140:	4a14      	ldr	r2, [pc, #80]	; (8001194 <_sbrk+0x5c>)
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <_sbrk+0x60>)
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800114c:	4b13      	ldr	r3, [pc, #76]	; (800119c <_sbrk+0x64>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d102      	bne.n	800115a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <_sbrk+0x64>)
 8001156:	4a12      	ldr	r2, [pc, #72]	; (80011a0 <_sbrk+0x68>)
 8001158:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <_sbrk+0x64>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	429a      	cmp	r2, r3
 8001166:	d207      	bcs.n	8001178 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001168:	f00c fbfe 	bl	800d968 <__errno>
 800116c:	4603      	mov	r3, r0
 800116e:	220c      	movs	r2, #12
 8001170:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001172:	f04f 33ff 	mov.w	r3, #4294967295
 8001176:	e009      	b.n	800118c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <_sbrk+0x64>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800117e:	4b07      	ldr	r3, [pc, #28]	; (800119c <_sbrk+0x64>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	4a05      	ldr	r2, [pc, #20]	; (800119c <_sbrk+0x64>)
 8001188:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800118a:	68fb      	ldr	r3, [r7, #12]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20020000 	.word	0x20020000
 8001198:	00000400 	.word	0x00000400
 800119c:	200000b0 	.word	0x200000b0
 80011a0:	20005660 	.word	0x20005660

080011a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <SystemInit+0x20>)
 80011aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ae:	4a05      	ldr	r2, [pc, #20]	; (80011c4 <SystemInit+0x20>)
 80011b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001200 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011cc:	480d      	ldr	r0, [pc, #52]	; (8001204 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011ce:	490e      	ldr	r1, [pc, #56]	; (8001208 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011d0:	4a0e      	ldr	r2, [pc, #56]	; (800120c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d4:	e002      	b.n	80011dc <LoopCopyDataInit>

080011d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011da:	3304      	adds	r3, #4

080011dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e0:	d3f9      	bcc.n	80011d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e2:	4a0b      	ldr	r2, [pc, #44]	; (8001210 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011e4:	4c0b      	ldr	r4, [pc, #44]	; (8001214 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e8:	e001      	b.n	80011ee <LoopFillZerobss>

080011ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ec:	3204      	adds	r2, #4

080011ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f0:	d3fb      	bcc.n	80011ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011f2:	f7ff ffd7 	bl	80011a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011f6:	f00c fbbd 	bl	800d974 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011fa:	f7ff f985 	bl	8000508 <main>
  bx  lr    
 80011fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001200:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001208:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 800120c:	0800dd70 	.word	0x0800dd70
  ldr r2, =_sbss
 8001210:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001214:	2000565c 	.word	0x2000565c

08001218 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001218:	e7fe      	b.n	8001218 <ADC_IRQHandler>
	...

0800121c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <HAL_Init+0x40>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0d      	ldr	r2, [pc, #52]	; (800125c <HAL_Init+0x40>)
 8001226:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800122a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0a      	ldr	r2, [pc, #40]	; (800125c <HAL_Init+0x40>)
 8001232:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001236:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <HAL_Init+0x40>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a07      	ldr	r2, [pc, #28]	; (800125c <HAL_Init+0x40>)
 800123e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001242:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001244:	2003      	movs	r0, #3
 8001246:	f000 fb5a 	bl	80018fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124a:	200f      	movs	r0, #15
 800124c:	f7ff fef0 	bl	8001030 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001250:	f7ff fcb8 	bl	8000bc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40023c00 	.word	0x40023c00

08001260 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return uwTick;
 8001264:	4b03      	ldr	r3, [pc, #12]	; (8001274 <HAL_GetTick+0x14>)
 8001266:	681b      	ldr	r3, [r3, #0]
}
 8001268:	4618      	mov	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	20004d3c 	.word	0x20004d3c

08001278 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001280:	f7ff ffee 	bl	8001260 <HAL_GetTick>
 8001284:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001290:	d005      	beq.n	800129e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <HAL_Delay+0x44>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4413      	add	r3, r2
 800129c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800129e:	bf00      	nop
 80012a0:	f7ff ffde 	bl	8001260 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d8f7      	bhi.n	80012a0 <HAL_Delay+0x28>
  {
  }
}
 80012b0:	bf00      	nop
 80012b2:	bf00      	nop
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000008 	.word	0x20000008

080012c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012c8:	2300      	movs	r3, #0
 80012ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d101      	bne.n	80012d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e033      	b.n	800133e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d109      	bne.n	80012f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff fc9c 	bl	8000c1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	f003 0310 	and.w	r3, r3, #16
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d118      	bne.n	8001330 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001306:	f023 0302 	bic.w	r3, r3, #2
 800130a:	f043 0202 	orr.w	r2, r3, #2
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f000 f94a 	bl	80015ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	f023 0303 	bic.w	r3, r3, #3
 8001326:	f043 0201 	orr.w	r2, r3, #1
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	641a      	str	r2, [r3, #64]	; 0x40
 800132e:	e001      	b.n	8001334 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800133c:	7bfb      	ldrb	r3, [r7, #15]
}
 800133e:	4618      	mov	r0, r3
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001352:	2300      	movs	r3, #0
 8001354:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800135c:	2b01      	cmp	r3, #1
 800135e:	d101      	bne.n	8001364 <HAL_ADC_ConfigChannel+0x1c>
 8001360:	2302      	movs	r3, #2
 8001362:	e113      	b.n	800158c <HAL_ADC_ConfigChannel+0x244>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b09      	cmp	r3, #9
 8001372:	d925      	bls.n	80013c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	68d9      	ldr	r1, [r3, #12]
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	b29b      	uxth	r3, r3
 8001380:	461a      	mov	r2, r3
 8001382:	4613      	mov	r3, r2
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	4413      	add	r3, r2
 8001388:	3b1e      	subs	r3, #30
 800138a:	2207      	movs	r2, #7
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43da      	mvns	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	400a      	ands	r2, r1
 8001398:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	68d9      	ldr	r1, [r3, #12]
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	4618      	mov	r0, r3
 80013ac:	4603      	mov	r3, r0
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	4403      	add	r3, r0
 80013b2:	3b1e      	subs	r3, #30
 80013b4:	409a      	lsls	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	430a      	orrs	r2, r1
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	e022      	b.n	8001406 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6919      	ldr	r1, [r3, #16]
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	461a      	mov	r2, r3
 80013ce:	4613      	mov	r3, r2
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	4413      	add	r3, r2
 80013d4:	2207      	movs	r2, #7
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43da      	mvns	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	400a      	ands	r2, r1
 80013e2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6919      	ldr	r1, [r3, #16]
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	689a      	ldr	r2, [r3, #8]
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	4618      	mov	r0, r3
 80013f6:	4603      	mov	r3, r0
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	4403      	add	r3, r0
 80013fc:	409a      	lsls	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	430a      	orrs	r2, r1
 8001404:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b06      	cmp	r3, #6
 800140c:	d824      	bhi.n	8001458 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	4613      	mov	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	3b05      	subs	r3, #5
 8001420:	221f      	movs	r2, #31
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43da      	mvns	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	400a      	ands	r2, r1
 800142e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	b29b      	uxth	r3, r3
 800143c:	4618      	mov	r0, r3
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	4613      	mov	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	3b05      	subs	r3, #5
 800144a:	fa00 f203 	lsl.w	r2, r0, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	635a      	str	r2, [r3, #52]	; 0x34
 8001456:	e04c      	b.n	80014f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b0c      	cmp	r3, #12
 800145e:	d824      	bhi.n	80014aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	4613      	mov	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4413      	add	r3, r2
 8001470:	3b23      	subs	r3, #35	; 0x23
 8001472:	221f      	movs	r2, #31
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43da      	mvns	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	400a      	ands	r2, r1
 8001480:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	b29b      	uxth	r3, r3
 800148e:	4618      	mov	r0, r3
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	4613      	mov	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	3b23      	subs	r3, #35	; 0x23
 800149c:	fa00 f203 	lsl.w	r2, r0, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	430a      	orrs	r2, r1
 80014a6:	631a      	str	r2, [r3, #48]	; 0x30
 80014a8:	e023      	b.n	80014f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	4613      	mov	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	3b41      	subs	r3, #65	; 0x41
 80014bc:	221f      	movs	r2, #31
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43da      	mvns	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	400a      	ands	r2, r1
 80014ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	4618      	mov	r0, r3
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	3b41      	subs	r3, #65	; 0x41
 80014e6:	fa00 f203 	lsl.w	r2, r0, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	430a      	orrs	r2, r1
 80014f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014f2:	4b29      	ldr	r3, [pc, #164]	; (8001598 <HAL_ADC_ConfigChannel+0x250>)
 80014f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a28      	ldr	r2, [pc, #160]	; (800159c <HAL_ADC_ConfigChannel+0x254>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d10f      	bne.n	8001520 <HAL_ADC_ConfigChannel+0x1d8>
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b12      	cmp	r3, #18
 8001506:	d10b      	bne.n	8001520 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a1d      	ldr	r2, [pc, #116]	; (800159c <HAL_ADC_ConfigChannel+0x254>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d12b      	bne.n	8001582 <HAL_ADC_ConfigChannel+0x23a>
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a1c      	ldr	r2, [pc, #112]	; (80015a0 <HAL_ADC_ConfigChannel+0x258>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d003      	beq.n	800153c <HAL_ADC_ConfigChannel+0x1f4>
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2b11      	cmp	r3, #17
 800153a:	d122      	bne.n	8001582 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a11      	ldr	r2, [pc, #68]	; (80015a0 <HAL_ADC_ConfigChannel+0x258>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d111      	bne.n	8001582 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800155e:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <HAL_ADC_ConfigChannel+0x25c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a11      	ldr	r2, [pc, #68]	; (80015a8 <HAL_ADC_ConfigChannel+0x260>)
 8001564:	fba2 2303 	umull	r2, r3, r2, r3
 8001568:	0c9a      	lsrs	r2, r3, #18
 800156a:	4613      	mov	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001574:	e002      	b.n	800157c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	3b01      	subs	r3, #1
 800157a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1f9      	bne.n	8001576 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	40012300 	.word	0x40012300
 800159c:	40012000 	.word	0x40012000
 80015a0:	10000012 	.word	0x10000012
 80015a4:	20000000 	.word	0x20000000
 80015a8:	431bde83 	.word	0x431bde83

080015ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015b4:	4b79      	ldr	r3, [pc, #484]	; (800179c <ADC_Init+0x1f0>)
 80015b6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	431a      	orrs	r2, r3
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6859      	ldr	r1, [r3, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	021a      	lsls	r2, r3, #8
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	430a      	orrs	r2, r1
 80015f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001604:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6859      	ldr	r1, [r3, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	430a      	orrs	r2, r1
 8001616:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	689a      	ldr	r2, [r3, #8]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001626:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6899      	ldr	r1, [r3, #8]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	68da      	ldr	r2, [r3, #12]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	430a      	orrs	r2, r1
 8001638:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163e:	4a58      	ldr	r2, [pc, #352]	; (80017a0 <ADC_Init+0x1f4>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d022      	beq.n	800168a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	689a      	ldr	r2, [r3, #8]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001652:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6899      	ldr	r1, [r3, #8]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	430a      	orrs	r2, r1
 8001664:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001674:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6899      	ldr	r1, [r3, #8]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	430a      	orrs	r2, r1
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	e00f      	b.n	80016aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001698:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 0202 	bic.w	r2, r2, #2
 80016b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6899      	ldr	r1, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	7e1b      	ldrb	r3, [r3, #24]
 80016c4:	005a      	lsls	r2, r3, #1
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d01b      	beq.n	8001710 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80016f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6859      	ldr	r1, [r3, #4]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001702:	3b01      	subs	r3, #1
 8001704:	035a      	lsls	r2, r3, #13
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	430a      	orrs	r2, r1
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	e007      	b.n	8001720 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800171e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800172e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	3b01      	subs	r3, #1
 800173c:	051a      	lsls	r2, r3, #20
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	430a      	orrs	r2, r1
 8001744:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001754:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6899      	ldr	r1, [r3, #8]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001762:	025a      	lsls	r2, r3, #9
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	430a      	orrs	r2, r1
 800176a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	689a      	ldr	r2, [r3, #8]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800177a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6899      	ldr	r1, [r3, #8]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	029a      	lsls	r2, r3, #10
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	430a      	orrs	r2, r1
 800178e:	609a      	str	r2, [r3, #8]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	40012300 	.word	0x40012300
 80017a0:	0f000001 	.word	0x0f000001

080017a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c0:	4013      	ands	r3, r2
 80017c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017d6:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	60d3      	str	r3, [r2, #12]
}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f0:	4b04      	ldr	r3, [pc, #16]	; (8001804 <__NVIC_GetPriorityGrouping+0x18>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	0a1b      	lsrs	r3, r3, #8
 80017f6:	f003 0307 	and.w	r3, r3, #7
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	2b00      	cmp	r3, #0
 8001818:	db0b      	blt.n	8001832 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	f003 021f 	and.w	r2, r3, #31
 8001820:	4907      	ldr	r1, [pc, #28]	; (8001840 <__NVIC_EnableIRQ+0x38>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	095b      	lsrs	r3, r3, #5
 8001828:	2001      	movs	r0, #1
 800182a:	fa00 f202 	lsl.w	r2, r0, r2
 800182e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	e000e100 	.word	0xe000e100

08001844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	6039      	str	r1, [r7, #0]
 800184e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001854:	2b00      	cmp	r3, #0
 8001856:	db0a      	blt.n	800186e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	b2da      	uxtb	r2, r3
 800185c:	490c      	ldr	r1, [pc, #48]	; (8001890 <__NVIC_SetPriority+0x4c>)
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	0112      	lsls	r2, r2, #4
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	440b      	add	r3, r1
 8001868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800186c:	e00a      	b.n	8001884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	b2da      	uxtb	r2, r3
 8001872:	4908      	ldr	r1, [pc, #32]	; (8001894 <__NVIC_SetPriority+0x50>)
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	3b04      	subs	r3, #4
 800187c:	0112      	lsls	r2, r2, #4
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	440b      	add	r3, r1
 8001882:	761a      	strb	r2, [r3, #24]
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000e100 	.word	0xe000e100
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001898:	b480      	push	{r7}
 800189a:	b089      	sub	sp, #36	; 0x24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f1c3 0307 	rsb	r3, r3, #7
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	bf28      	it	cs
 80018b6:	2304      	movcs	r3, #4
 80018b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3304      	adds	r3, #4
 80018be:	2b06      	cmp	r3, #6
 80018c0:	d902      	bls.n	80018c8 <NVIC_EncodePriority+0x30>
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3b03      	subs	r3, #3
 80018c6:	e000      	b.n	80018ca <NVIC_EncodePriority+0x32>
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	f04f 32ff 	mov.w	r2, #4294967295
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43da      	mvns	r2, r3
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	401a      	ands	r2, r3
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e0:	f04f 31ff 	mov.w	r1, #4294967295
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ea:	43d9      	mvns	r1, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f0:	4313      	orrs	r3, r2
         );
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3724      	adds	r7, #36	; 0x24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b082      	sub	sp, #8
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff ff4c 	bl	80017a4 <__NVIC_SetPriorityGrouping>
}
 800190c:	bf00      	nop
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
 8001920:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001926:	f7ff ff61 	bl	80017ec <__NVIC_GetPriorityGrouping>
 800192a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	68b9      	ldr	r1, [r7, #8]
 8001930:	6978      	ldr	r0, [r7, #20]
 8001932:	f7ff ffb1 	bl	8001898 <NVIC_EncodePriority>
 8001936:	4602      	mov	r2, r0
 8001938:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800193c:	4611      	mov	r1, r2
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff ff80 	bl	8001844 <__NVIC_SetPriority>
}
 8001944:	bf00      	nop
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff ff54 	bl	8001808 <__NVIC_EnableIRQ>
}
 8001960:	bf00      	nop
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001974:	f7ff fc74 	bl	8001260 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e099      	b.n	8001ab8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2202      	movs	r2, #2
 8001988:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f022 0201 	bic.w	r2, r2, #1
 80019a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019a4:	e00f      	b.n	80019c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019a6:	f7ff fc5b 	bl	8001260 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b05      	cmp	r3, #5
 80019b2:	d908      	bls.n	80019c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2220      	movs	r2, #32
 80019b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2203      	movs	r2, #3
 80019be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e078      	b.n	8001ab8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1e8      	bne.n	80019a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	4b38      	ldr	r3, [pc, #224]	; (8001ac0 <HAL_DMA_Init+0x158>)
 80019e0:	4013      	ands	r3, r2
 80019e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1c:	2b04      	cmp	r3, #4
 8001a1e:	d107      	bne.n	8001a30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	f023 0307 	bic.w	r3, r3, #7
 8001a46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	d117      	bne.n	8001a8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d00e      	beq.n	8001a8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 f9e9 	bl	8001e44 <DMA_CheckFifoParam>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d008      	beq.n	8001a8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2240      	movs	r2, #64	; 0x40
 8001a7c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2201      	movs	r2, #1
 8001a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a86:	2301      	movs	r3, #1
 8001a88:	e016      	b.n	8001ab8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 f9a0 	bl	8001dd8 <DMA_CalcBaseAndBitshift>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa0:	223f      	movs	r2, #63	; 0x3f
 8001aa2:	409a      	lsls	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3718      	adds	r7, #24
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	f010803f 	.word	0xf010803f

08001ac4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ad0:	4b92      	ldr	r3, [pc, #584]	; (8001d1c <HAL_DMA_IRQHandler+0x258>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a92      	ldr	r2, [pc, #584]	; (8001d20 <HAL_DMA_IRQHandler+0x25c>)
 8001ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ada:	0a9b      	lsrs	r3, r3, #10
 8001adc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aee:	2208      	movs	r2, #8
 8001af0:	409a      	lsls	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	4013      	ands	r3, r2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d01a      	beq.n	8001b30 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d013      	beq.n	8001b30 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f022 0204 	bic.w	r2, r2, #4
 8001b16:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b1c:	2208      	movs	r2, #8
 8001b1e:	409a      	lsls	r2, r3
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b28:	f043 0201 	orr.w	r2, r3, #1
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b34:	2201      	movs	r2, #1
 8001b36:	409a      	lsls	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d012      	beq.n	8001b66 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00b      	beq.n	8001b66 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b52:	2201      	movs	r2, #1
 8001b54:	409a      	lsls	r2, r3
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b5e:	f043 0202 	orr.w	r2, r3, #2
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b6a:	2204      	movs	r2, #4
 8001b6c:	409a      	lsls	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	4013      	ands	r3, r2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d012      	beq.n	8001b9c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d00b      	beq.n	8001b9c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b88:	2204      	movs	r2, #4
 8001b8a:	409a      	lsls	r2, r3
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b94:	f043 0204 	orr.w	r2, r3, #4
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba0:	2210      	movs	r2, #16
 8001ba2:	409a      	lsls	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d043      	beq.n	8001c34 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d03c      	beq.n	8001c34 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bbe:	2210      	movs	r2, #16
 8001bc0:	409a      	lsls	r2, r3
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d018      	beq.n	8001c06 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d108      	bne.n	8001bf4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d024      	beq.n	8001c34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	4798      	blx	r3
 8001bf2:	e01f      	b.n	8001c34 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d01b      	beq.n	8001c34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	4798      	blx	r3
 8001c04:	e016      	b.n	8001c34 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d107      	bne.n	8001c24 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 0208 	bic.w	r2, r2, #8
 8001c22:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c38:	2220      	movs	r2, #32
 8001c3a:	409a      	lsls	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 808e 	beq.w	8001d62 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0310 	and.w	r3, r3, #16
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 8086 	beq.w	8001d62 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c5a:	2220      	movs	r2, #32
 8001c5c:	409a      	lsls	r2, r3
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b05      	cmp	r3, #5
 8001c6c:	d136      	bne.n	8001cdc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 0216 	bic.w	r2, r2, #22
 8001c7c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	695a      	ldr	r2, [r3, #20]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c8c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d103      	bne.n	8001c9e <HAL_DMA_IRQHandler+0x1da>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d007      	beq.n	8001cae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 0208 	bic.w	r2, r2, #8
 8001cac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb2:	223f      	movs	r2, #63	; 0x3f
 8001cb4:	409a      	lsls	r2, r3
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d07d      	beq.n	8001dce <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	4798      	blx	r3
        }
        return;
 8001cda:	e078      	b.n	8001dce <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d01c      	beq.n	8001d24 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d108      	bne.n	8001d0a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d030      	beq.n	8001d62 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	4798      	blx	r3
 8001d08:	e02b      	b.n	8001d62 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d027      	beq.n	8001d62 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	4798      	blx	r3
 8001d1a:	e022      	b.n	8001d62 <HAL_DMA_IRQHandler+0x29e>
 8001d1c:	20000000 	.word	0x20000000
 8001d20:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d10f      	bne.n	8001d52 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 0210 	bic.w	r2, r2, #16
 8001d40:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d032      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d022      	beq.n	8001dbc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2205      	movs	r2, #5
 8001d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 0201 	bic.w	r2, r2, #1
 8001d8c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	3301      	adds	r3, #1
 8001d92:	60bb      	str	r3, [r7, #8]
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d307      	bcc.n	8001daa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1f2      	bne.n	8001d8e <HAL_DMA_IRQHandler+0x2ca>
 8001da8:	e000      	b.n	8001dac <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001daa:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d005      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	4798      	blx	r3
 8001dcc:	e000      	b.n	8001dd0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001dce:	bf00      	nop
    }
  }
}
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop

08001dd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	3b10      	subs	r3, #16
 8001de8:	4a14      	ldr	r2, [pc, #80]	; (8001e3c <DMA_CalcBaseAndBitshift+0x64>)
 8001dea:	fba2 2303 	umull	r2, r3, r2, r3
 8001dee:	091b      	lsrs	r3, r3, #4
 8001df0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001df2:	4a13      	ldr	r2, [pc, #76]	; (8001e40 <DMA_CalcBaseAndBitshift+0x68>)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4413      	add	r3, r2
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2b03      	cmp	r3, #3
 8001e04:	d909      	bls.n	8001e1a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e0e:	f023 0303 	bic.w	r3, r3, #3
 8001e12:	1d1a      	adds	r2, r3, #4
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	659a      	str	r2, [r3, #88]	; 0x58
 8001e18:	e007      	b.n	8001e2a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e22:	f023 0303 	bic.w	r3, r3, #3
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	aaaaaaab 	.word	0xaaaaaaab
 8001e40:	0800dcf8 	.word	0x0800dcf8

08001e44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d11f      	bne.n	8001e9e <DMA_CheckFifoParam+0x5a>
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d856      	bhi.n	8001f12 <DMA_CheckFifoParam+0xce>
 8001e64:	a201      	add	r2, pc, #4	; (adr r2, 8001e6c <DMA_CheckFifoParam+0x28>)
 8001e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e6a:	bf00      	nop
 8001e6c:	08001e7d 	.word	0x08001e7d
 8001e70:	08001e8f 	.word	0x08001e8f
 8001e74:	08001e7d 	.word	0x08001e7d
 8001e78:	08001f13 	.word	0x08001f13
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d046      	beq.n	8001f16 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e8c:	e043      	b.n	8001f16 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e92:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e96:	d140      	bne.n	8001f1a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e9c:	e03d      	b.n	8001f1a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ea6:	d121      	bne.n	8001eec <DMA_CheckFifoParam+0xa8>
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	2b03      	cmp	r3, #3
 8001eac:	d837      	bhi.n	8001f1e <DMA_CheckFifoParam+0xda>
 8001eae:	a201      	add	r2, pc, #4	; (adr r2, 8001eb4 <DMA_CheckFifoParam+0x70>)
 8001eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb4:	08001ec5 	.word	0x08001ec5
 8001eb8:	08001ecb 	.word	0x08001ecb
 8001ebc:	08001ec5 	.word	0x08001ec5
 8001ec0:	08001edd 	.word	0x08001edd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ec8:	e030      	b.n	8001f2c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ece:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d025      	beq.n	8001f22 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001eda:	e022      	b.n	8001f22 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ee4:	d11f      	bne.n	8001f26 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001eea:	e01c      	b.n	8001f26 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d903      	bls.n	8001efa <DMA_CheckFifoParam+0xb6>
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	2b03      	cmp	r3, #3
 8001ef6:	d003      	beq.n	8001f00 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ef8:	e018      	b.n	8001f2c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	73fb      	strb	r3, [r7, #15]
      break;
 8001efe:	e015      	b.n	8001f2c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00e      	beq.n	8001f2a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8001f10:	e00b      	b.n	8001f2a <DMA_CheckFifoParam+0xe6>
      break;
 8001f12:	bf00      	nop
 8001f14:	e00a      	b.n	8001f2c <DMA_CheckFifoParam+0xe8>
      break;
 8001f16:	bf00      	nop
 8001f18:	e008      	b.n	8001f2c <DMA_CheckFifoParam+0xe8>
      break;
 8001f1a:	bf00      	nop
 8001f1c:	e006      	b.n	8001f2c <DMA_CheckFifoParam+0xe8>
      break;
 8001f1e:	bf00      	nop
 8001f20:	e004      	b.n	8001f2c <DMA_CheckFifoParam+0xe8>
      break;
 8001f22:	bf00      	nop
 8001f24:	e002      	b.n	8001f2c <DMA_CheckFifoParam+0xe8>
      break;   
 8001f26:	bf00      	nop
 8001f28:	e000      	b.n	8001f2c <DMA_CheckFifoParam+0xe8>
      break;
 8001f2a:	bf00      	nop
    }
  } 
  
  return status; 
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop

08001f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b089      	sub	sp, #36	; 0x24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
 8001f56:	e165      	b.n	8002224 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f58:	2201      	movs	r2, #1
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	f040 8154 	bne.w	800221e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d005      	beq.n	8001f8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d130      	bne.n	8001ff0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	2203      	movs	r2, #3
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	68da      	ldr	r2, [r3, #12]
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	091b      	lsrs	r3, r3, #4
 8001fda:	f003 0201 	and.w	r2, r3, #1
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 0303 	and.w	r3, r3, #3
 8001ff8:	2b03      	cmp	r3, #3
 8001ffa:	d017      	beq.n	800202c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	2203      	movs	r2, #3
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4313      	orrs	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d123      	bne.n	8002080 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	08da      	lsrs	r2, r3, #3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3208      	adds	r2, #8
 8002040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002044:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	220f      	movs	r2, #15
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	691a      	ldr	r2, [r3, #16]
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4313      	orrs	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	08da      	lsrs	r2, r3, #3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3208      	adds	r2, #8
 800207a:	69b9      	ldr	r1, [r7, #24]
 800207c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	2203      	movs	r2, #3
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 0203 	and.w	r2, r3, #3
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 80ae 	beq.w	800221e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	4b5d      	ldr	r3, [pc, #372]	; (800223c <HAL_GPIO_Init+0x300>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	4a5c      	ldr	r2, [pc, #368]	; (800223c <HAL_GPIO_Init+0x300>)
 80020cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020d0:	6453      	str	r3, [r2, #68]	; 0x44
 80020d2:	4b5a      	ldr	r3, [pc, #360]	; (800223c <HAL_GPIO_Init+0x300>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020de:	4a58      	ldr	r2, [pc, #352]	; (8002240 <HAL_GPIO_Init+0x304>)
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	089b      	lsrs	r3, r3, #2
 80020e4:	3302      	adds	r3, #2
 80020e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	220f      	movs	r2, #15
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43db      	mvns	r3, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4013      	ands	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a4f      	ldr	r2, [pc, #316]	; (8002244 <HAL_GPIO_Init+0x308>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d025      	beq.n	8002156 <HAL_GPIO_Init+0x21a>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a4e      	ldr	r2, [pc, #312]	; (8002248 <HAL_GPIO_Init+0x30c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d01f      	beq.n	8002152 <HAL_GPIO_Init+0x216>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a4d      	ldr	r2, [pc, #308]	; (800224c <HAL_GPIO_Init+0x310>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d019      	beq.n	800214e <HAL_GPIO_Init+0x212>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a4c      	ldr	r2, [pc, #304]	; (8002250 <HAL_GPIO_Init+0x314>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d013      	beq.n	800214a <HAL_GPIO_Init+0x20e>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a4b      	ldr	r2, [pc, #300]	; (8002254 <HAL_GPIO_Init+0x318>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d00d      	beq.n	8002146 <HAL_GPIO_Init+0x20a>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a4a      	ldr	r2, [pc, #296]	; (8002258 <HAL_GPIO_Init+0x31c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d007      	beq.n	8002142 <HAL_GPIO_Init+0x206>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a49      	ldr	r2, [pc, #292]	; (800225c <HAL_GPIO_Init+0x320>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d101      	bne.n	800213e <HAL_GPIO_Init+0x202>
 800213a:	2306      	movs	r3, #6
 800213c:	e00c      	b.n	8002158 <HAL_GPIO_Init+0x21c>
 800213e:	2307      	movs	r3, #7
 8002140:	e00a      	b.n	8002158 <HAL_GPIO_Init+0x21c>
 8002142:	2305      	movs	r3, #5
 8002144:	e008      	b.n	8002158 <HAL_GPIO_Init+0x21c>
 8002146:	2304      	movs	r3, #4
 8002148:	e006      	b.n	8002158 <HAL_GPIO_Init+0x21c>
 800214a:	2303      	movs	r3, #3
 800214c:	e004      	b.n	8002158 <HAL_GPIO_Init+0x21c>
 800214e:	2302      	movs	r3, #2
 8002150:	e002      	b.n	8002158 <HAL_GPIO_Init+0x21c>
 8002152:	2301      	movs	r3, #1
 8002154:	e000      	b.n	8002158 <HAL_GPIO_Init+0x21c>
 8002156:	2300      	movs	r3, #0
 8002158:	69fa      	ldr	r2, [r7, #28]
 800215a:	f002 0203 	and.w	r2, r2, #3
 800215e:	0092      	lsls	r2, r2, #2
 8002160:	4093      	lsls	r3, r2
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4313      	orrs	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002168:	4935      	ldr	r1, [pc, #212]	; (8002240 <HAL_GPIO_Init+0x304>)
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	089b      	lsrs	r3, r3, #2
 800216e:	3302      	adds	r3, #2
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002176:	4b3a      	ldr	r3, [pc, #232]	; (8002260 <HAL_GPIO_Init+0x324>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	43db      	mvns	r3, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4013      	ands	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800219a:	4a31      	ldr	r2, [pc, #196]	; (8002260 <HAL_GPIO_Init+0x324>)
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021a0:	4b2f      	ldr	r3, [pc, #188]	; (8002260 <HAL_GPIO_Init+0x324>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	43db      	mvns	r3, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4013      	ands	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021c4:	4a26      	ldr	r2, [pc, #152]	; (8002260 <HAL_GPIO_Init+0x324>)
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021ca:	4b25      	ldr	r3, [pc, #148]	; (8002260 <HAL_GPIO_Init+0x324>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	43db      	mvns	r3, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4013      	ands	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021ee:	4a1c      	ldr	r2, [pc, #112]	; (8002260 <HAL_GPIO_Init+0x324>)
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021f4:	4b1a      	ldr	r3, [pc, #104]	; (8002260 <HAL_GPIO_Init+0x324>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d003      	beq.n	8002218 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002218:	4a11      	ldr	r2, [pc, #68]	; (8002260 <HAL_GPIO_Init+0x324>)
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	3301      	adds	r3, #1
 8002222:	61fb      	str	r3, [r7, #28]
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	2b0f      	cmp	r3, #15
 8002228:	f67f ae96 	bls.w	8001f58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800222c:	bf00      	nop
 800222e:	bf00      	nop
 8002230:	3724      	adds	r7, #36	; 0x24
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40023800 	.word	0x40023800
 8002240:	40013800 	.word	0x40013800
 8002244:	40020000 	.word	0x40020000
 8002248:	40020400 	.word	0x40020400
 800224c:	40020800 	.word	0x40020800
 8002250:	40020c00 	.word	0x40020c00
 8002254:	40021000 	.word	0x40021000
 8002258:	40021400 	.word	0x40021400
 800225c:	40021800 	.word	0x40021800
 8002260:	40013c00 	.word	0x40013c00

08002264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	460b      	mov	r3, r1
 800226e:	807b      	strh	r3, [r7, #2]
 8002270:	4613      	mov	r3, r2
 8002272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002274:	787b      	ldrb	r3, [r7, #1]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800227a:	887a      	ldrh	r2, [r7, #2]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002280:	e003      	b.n	800228a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002282:	887b      	ldrh	r3, [r7, #2]
 8002284:	041a      	lsls	r2, r3, #16
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	619a      	str	r2, [r3, #24]
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002296:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002298:	b08f      	sub	sp, #60	; 0x3c
 800229a:	af0a      	add	r7, sp, #40	; 0x28
 800229c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d101      	bne.n	80022a8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e054      	b.n	8002352 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d106      	bne.n	80022c8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f00b f8ae 	bl	800d424 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2203      	movs	r2, #3
 80022cc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d102      	bne.n	80022e2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f003 fc50 	bl	8005b8c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	603b      	str	r3, [r7, #0]
 80022f2:	687e      	ldr	r6, [r7, #4]
 80022f4:	466d      	mov	r5, sp
 80022f6:	f106 0410 	add.w	r4, r6, #16
 80022fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002300:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002302:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002306:	e885 0003 	stmia.w	r5, {r0, r1}
 800230a:	1d33      	adds	r3, r6, #4
 800230c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800230e:	6838      	ldr	r0, [r7, #0]
 8002310:	f003 fbca 	bl	8005aa8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2101      	movs	r1, #1
 800231a:	4618      	mov	r0, r3
 800231c:	f003 fc47 	bl	8005bae <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	603b      	str	r3, [r7, #0]
 8002326:	687e      	ldr	r6, [r7, #4]
 8002328:	466d      	mov	r5, sp
 800232a:	f106 0410 	add.w	r4, r6, #16
 800232e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002330:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002332:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002334:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002336:	e894 0003 	ldmia.w	r4, {r0, r1}
 800233a:	e885 0003 	stmia.w	r5, {r0, r1}
 800233e:	1d33      	adds	r3, r6, #4
 8002340:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002342:	6838      	ldr	r0, [r7, #0]
 8002344:	f003 fdae 	bl	8005ea4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800235a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800235a:	b590      	push	{r4, r7, lr}
 800235c:	b089      	sub	sp, #36	; 0x24
 800235e:	af04      	add	r7, sp, #16
 8002360:	6078      	str	r0, [r7, #4]
 8002362:	4608      	mov	r0, r1
 8002364:	4611      	mov	r1, r2
 8002366:	461a      	mov	r2, r3
 8002368:	4603      	mov	r3, r0
 800236a:	70fb      	strb	r3, [r7, #3]
 800236c:	460b      	mov	r3, r1
 800236e:	70bb      	strb	r3, [r7, #2]
 8002370:	4613      	mov	r3, r2
 8002372:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800237a:	2b01      	cmp	r3, #1
 800237c:	d101      	bne.n	8002382 <HAL_HCD_HC_Init+0x28>
 800237e:	2302      	movs	r3, #2
 8002380:	e076      	b.n	8002470 <HAL_HCD_HC_Init+0x116>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800238a:	78fb      	ldrb	r3, [r7, #3]
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	212c      	movs	r1, #44	; 0x2c
 8002390:	fb01 f303 	mul.w	r3, r1, r3
 8002394:	4413      	add	r3, r2
 8002396:	333d      	adds	r3, #61	; 0x3d
 8002398:	2200      	movs	r2, #0
 800239a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800239c:	78fb      	ldrb	r3, [r7, #3]
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	212c      	movs	r1, #44	; 0x2c
 80023a2:	fb01 f303 	mul.w	r3, r1, r3
 80023a6:	4413      	add	r3, r2
 80023a8:	3338      	adds	r3, #56	; 0x38
 80023aa:	787a      	ldrb	r2, [r7, #1]
 80023ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80023ae:	78fb      	ldrb	r3, [r7, #3]
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	212c      	movs	r1, #44	; 0x2c
 80023b4:	fb01 f303 	mul.w	r3, r1, r3
 80023b8:	4413      	add	r3, r2
 80023ba:	3340      	adds	r3, #64	; 0x40
 80023bc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80023be:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80023c0:	78fb      	ldrb	r3, [r7, #3]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	212c      	movs	r1, #44	; 0x2c
 80023c6:	fb01 f303 	mul.w	r3, r1, r3
 80023ca:	4413      	add	r3, r2
 80023cc:	3339      	adds	r3, #57	; 0x39
 80023ce:	78fa      	ldrb	r2, [r7, #3]
 80023d0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80023d2:	78fb      	ldrb	r3, [r7, #3]
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	212c      	movs	r1, #44	; 0x2c
 80023d8:	fb01 f303 	mul.w	r3, r1, r3
 80023dc:	4413      	add	r3, r2
 80023de:	333f      	adds	r3, #63	; 0x3f
 80023e0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80023e4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80023e6:	78fb      	ldrb	r3, [r7, #3]
 80023e8:	78ba      	ldrb	r2, [r7, #2]
 80023ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023ee:	b2d0      	uxtb	r0, r2
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	212c      	movs	r1, #44	; 0x2c
 80023f4:	fb01 f303 	mul.w	r3, r1, r3
 80023f8:	4413      	add	r3, r2
 80023fa:	333a      	adds	r3, #58	; 0x3a
 80023fc:	4602      	mov	r2, r0
 80023fe:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002400:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002404:	2b00      	cmp	r3, #0
 8002406:	da09      	bge.n	800241c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002408:	78fb      	ldrb	r3, [r7, #3]
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	212c      	movs	r1, #44	; 0x2c
 800240e:	fb01 f303 	mul.w	r3, r1, r3
 8002412:	4413      	add	r3, r2
 8002414:	333b      	adds	r3, #59	; 0x3b
 8002416:	2201      	movs	r2, #1
 8002418:	701a      	strb	r2, [r3, #0]
 800241a:	e008      	b.n	800242e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800241c:	78fb      	ldrb	r3, [r7, #3]
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	212c      	movs	r1, #44	; 0x2c
 8002422:	fb01 f303 	mul.w	r3, r1, r3
 8002426:	4413      	add	r3, r2
 8002428:	333b      	adds	r3, #59	; 0x3b
 800242a:	2200      	movs	r2, #0
 800242c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800242e:	78fb      	ldrb	r3, [r7, #3]
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	212c      	movs	r1, #44	; 0x2c
 8002434:	fb01 f303 	mul.w	r3, r1, r3
 8002438:	4413      	add	r3, r2
 800243a:	333c      	adds	r3, #60	; 0x3c
 800243c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002440:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6818      	ldr	r0, [r3, #0]
 8002446:	787c      	ldrb	r4, [r7, #1]
 8002448:	78ba      	ldrb	r2, [r7, #2]
 800244a:	78f9      	ldrb	r1, [r7, #3]
 800244c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800244e:	9302      	str	r3, [sp, #8]
 8002450:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002454:	9301      	str	r3, [sp, #4]
 8002456:	f897 3020 	ldrb.w	r3, [r7, #32]
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	4623      	mov	r3, r4
 800245e:	f003 fe8f 	bl	8006180 <USB_HC_Init>
 8002462:	4603      	mov	r3, r0
 8002464:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800246e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	bd90      	pop	{r4, r7, pc}

08002478 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	460b      	mov	r3, r1
 8002482:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002484:	2300      	movs	r3, #0
 8002486:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800248e:	2b01      	cmp	r3, #1
 8002490:	d101      	bne.n	8002496 <HAL_HCD_HC_Halt+0x1e>
 8002492:	2302      	movs	r3, #2
 8002494:	e00f      	b.n	80024b6 <HAL_HCD_HC_Halt+0x3e>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	78fa      	ldrb	r2, [r7, #3]
 80024a4:	4611      	mov	r1, r2
 80024a6:	4618      	mov	r0, r3
 80024a8:	f004 f8cb 	bl	8006642 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
	...

080024c0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	4608      	mov	r0, r1
 80024ca:	4611      	mov	r1, r2
 80024cc:	461a      	mov	r2, r3
 80024ce:	4603      	mov	r3, r0
 80024d0:	70fb      	strb	r3, [r7, #3]
 80024d2:	460b      	mov	r3, r1
 80024d4:	70bb      	strb	r3, [r7, #2]
 80024d6:	4613      	mov	r3, r2
 80024d8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80024da:	78fb      	ldrb	r3, [r7, #3]
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	212c      	movs	r1, #44	; 0x2c
 80024e0:	fb01 f303 	mul.w	r3, r1, r3
 80024e4:	4413      	add	r3, r2
 80024e6:	333b      	adds	r3, #59	; 0x3b
 80024e8:	78ba      	ldrb	r2, [r7, #2]
 80024ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80024ec:	78fb      	ldrb	r3, [r7, #3]
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	212c      	movs	r1, #44	; 0x2c
 80024f2:	fb01 f303 	mul.w	r3, r1, r3
 80024f6:	4413      	add	r3, r2
 80024f8:	333f      	adds	r3, #63	; 0x3f
 80024fa:	787a      	ldrb	r2, [r7, #1]
 80024fc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80024fe:	7c3b      	ldrb	r3, [r7, #16]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d112      	bne.n	800252a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002504:	78fb      	ldrb	r3, [r7, #3]
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	212c      	movs	r1, #44	; 0x2c
 800250a:	fb01 f303 	mul.w	r3, r1, r3
 800250e:	4413      	add	r3, r2
 8002510:	3342      	adds	r3, #66	; 0x42
 8002512:	2203      	movs	r2, #3
 8002514:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002516:	78fb      	ldrb	r3, [r7, #3]
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	212c      	movs	r1, #44	; 0x2c
 800251c:	fb01 f303 	mul.w	r3, r1, r3
 8002520:	4413      	add	r3, r2
 8002522:	333d      	adds	r3, #61	; 0x3d
 8002524:	7f3a      	ldrb	r2, [r7, #28]
 8002526:	701a      	strb	r2, [r3, #0]
 8002528:	e008      	b.n	800253c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800252a:	78fb      	ldrb	r3, [r7, #3]
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	212c      	movs	r1, #44	; 0x2c
 8002530:	fb01 f303 	mul.w	r3, r1, r3
 8002534:	4413      	add	r3, r2
 8002536:	3342      	adds	r3, #66	; 0x42
 8002538:	2202      	movs	r2, #2
 800253a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800253c:	787b      	ldrb	r3, [r7, #1]
 800253e:	2b03      	cmp	r3, #3
 8002540:	f200 80c6 	bhi.w	80026d0 <HAL_HCD_HC_SubmitRequest+0x210>
 8002544:	a201      	add	r2, pc, #4	; (adr r2, 800254c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800254a:	bf00      	nop
 800254c:	0800255d 	.word	0x0800255d
 8002550:	080026bd 	.word	0x080026bd
 8002554:	080025c1 	.word	0x080025c1
 8002558:	0800263f 	.word	0x0800263f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800255c:	7c3b      	ldrb	r3, [r7, #16]
 800255e:	2b01      	cmp	r3, #1
 8002560:	f040 80b8 	bne.w	80026d4 <HAL_HCD_HC_SubmitRequest+0x214>
 8002564:	78bb      	ldrb	r3, [r7, #2]
 8002566:	2b00      	cmp	r3, #0
 8002568:	f040 80b4 	bne.w	80026d4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800256c:	8b3b      	ldrh	r3, [r7, #24]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d108      	bne.n	8002584 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002572:	78fb      	ldrb	r3, [r7, #3]
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	212c      	movs	r1, #44	; 0x2c
 8002578:	fb01 f303 	mul.w	r3, r1, r3
 800257c:	4413      	add	r3, r2
 800257e:	3355      	adds	r3, #85	; 0x55
 8002580:	2201      	movs	r2, #1
 8002582:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002584:	78fb      	ldrb	r3, [r7, #3]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	212c      	movs	r1, #44	; 0x2c
 800258a:	fb01 f303 	mul.w	r3, r1, r3
 800258e:	4413      	add	r3, r2
 8002590:	3355      	adds	r3, #85	; 0x55
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d109      	bne.n	80025ac <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002598:	78fb      	ldrb	r3, [r7, #3]
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	212c      	movs	r1, #44	; 0x2c
 800259e:	fb01 f303 	mul.w	r3, r1, r3
 80025a2:	4413      	add	r3, r2
 80025a4:	3342      	adds	r3, #66	; 0x42
 80025a6:	2200      	movs	r2, #0
 80025a8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80025aa:	e093      	b.n	80026d4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025ac:	78fb      	ldrb	r3, [r7, #3]
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	212c      	movs	r1, #44	; 0x2c
 80025b2:	fb01 f303 	mul.w	r3, r1, r3
 80025b6:	4413      	add	r3, r2
 80025b8:	3342      	adds	r3, #66	; 0x42
 80025ba:	2202      	movs	r2, #2
 80025bc:	701a      	strb	r2, [r3, #0]
      break;
 80025be:	e089      	b.n	80026d4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80025c0:	78bb      	ldrb	r3, [r7, #2]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d11d      	bne.n	8002602 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80025c6:	78fb      	ldrb	r3, [r7, #3]
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	212c      	movs	r1, #44	; 0x2c
 80025cc:	fb01 f303 	mul.w	r3, r1, r3
 80025d0:	4413      	add	r3, r2
 80025d2:	3355      	adds	r3, #85	; 0x55
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d109      	bne.n	80025ee <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025da:	78fb      	ldrb	r3, [r7, #3]
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	212c      	movs	r1, #44	; 0x2c
 80025e0:	fb01 f303 	mul.w	r3, r1, r3
 80025e4:	4413      	add	r3, r2
 80025e6:	3342      	adds	r3, #66	; 0x42
 80025e8:	2200      	movs	r2, #0
 80025ea:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80025ec:	e073      	b.n	80026d6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025ee:	78fb      	ldrb	r3, [r7, #3]
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	212c      	movs	r1, #44	; 0x2c
 80025f4:	fb01 f303 	mul.w	r3, r1, r3
 80025f8:	4413      	add	r3, r2
 80025fa:	3342      	adds	r3, #66	; 0x42
 80025fc:	2202      	movs	r2, #2
 80025fe:	701a      	strb	r2, [r3, #0]
      break;
 8002600:	e069      	b.n	80026d6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002602:	78fb      	ldrb	r3, [r7, #3]
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	212c      	movs	r1, #44	; 0x2c
 8002608:	fb01 f303 	mul.w	r3, r1, r3
 800260c:	4413      	add	r3, r2
 800260e:	3354      	adds	r3, #84	; 0x54
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d109      	bne.n	800262a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002616:	78fb      	ldrb	r3, [r7, #3]
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	212c      	movs	r1, #44	; 0x2c
 800261c:	fb01 f303 	mul.w	r3, r1, r3
 8002620:	4413      	add	r3, r2
 8002622:	3342      	adds	r3, #66	; 0x42
 8002624:	2200      	movs	r2, #0
 8002626:	701a      	strb	r2, [r3, #0]
      break;
 8002628:	e055      	b.n	80026d6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800262a:	78fb      	ldrb	r3, [r7, #3]
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	212c      	movs	r1, #44	; 0x2c
 8002630:	fb01 f303 	mul.w	r3, r1, r3
 8002634:	4413      	add	r3, r2
 8002636:	3342      	adds	r3, #66	; 0x42
 8002638:	2202      	movs	r2, #2
 800263a:	701a      	strb	r2, [r3, #0]
      break;
 800263c:	e04b      	b.n	80026d6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800263e:	78bb      	ldrb	r3, [r7, #2]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d11d      	bne.n	8002680 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002644:	78fb      	ldrb	r3, [r7, #3]
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	212c      	movs	r1, #44	; 0x2c
 800264a:	fb01 f303 	mul.w	r3, r1, r3
 800264e:	4413      	add	r3, r2
 8002650:	3355      	adds	r3, #85	; 0x55
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d109      	bne.n	800266c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002658:	78fb      	ldrb	r3, [r7, #3]
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	212c      	movs	r1, #44	; 0x2c
 800265e:	fb01 f303 	mul.w	r3, r1, r3
 8002662:	4413      	add	r3, r2
 8002664:	3342      	adds	r3, #66	; 0x42
 8002666:	2200      	movs	r2, #0
 8002668:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800266a:	e034      	b.n	80026d6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800266c:	78fb      	ldrb	r3, [r7, #3]
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	212c      	movs	r1, #44	; 0x2c
 8002672:	fb01 f303 	mul.w	r3, r1, r3
 8002676:	4413      	add	r3, r2
 8002678:	3342      	adds	r3, #66	; 0x42
 800267a:	2202      	movs	r2, #2
 800267c:	701a      	strb	r2, [r3, #0]
      break;
 800267e:	e02a      	b.n	80026d6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002680:	78fb      	ldrb	r3, [r7, #3]
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	212c      	movs	r1, #44	; 0x2c
 8002686:	fb01 f303 	mul.w	r3, r1, r3
 800268a:	4413      	add	r3, r2
 800268c:	3354      	adds	r3, #84	; 0x54
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d109      	bne.n	80026a8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002694:	78fb      	ldrb	r3, [r7, #3]
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	212c      	movs	r1, #44	; 0x2c
 800269a:	fb01 f303 	mul.w	r3, r1, r3
 800269e:	4413      	add	r3, r2
 80026a0:	3342      	adds	r3, #66	; 0x42
 80026a2:	2200      	movs	r2, #0
 80026a4:	701a      	strb	r2, [r3, #0]
      break;
 80026a6:	e016      	b.n	80026d6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026a8:	78fb      	ldrb	r3, [r7, #3]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	212c      	movs	r1, #44	; 0x2c
 80026ae:	fb01 f303 	mul.w	r3, r1, r3
 80026b2:	4413      	add	r3, r2
 80026b4:	3342      	adds	r3, #66	; 0x42
 80026b6:	2202      	movs	r2, #2
 80026b8:	701a      	strb	r2, [r3, #0]
      break;
 80026ba:	e00c      	b.n	80026d6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026bc:	78fb      	ldrb	r3, [r7, #3]
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	212c      	movs	r1, #44	; 0x2c
 80026c2:	fb01 f303 	mul.w	r3, r1, r3
 80026c6:	4413      	add	r3, r2
 80026c8:	3342      	adds	r3, #66	; 0x42
 80026ca:	2200      	movs	r2, #0
 80026cc:	701a      	strb	r2, [r3, #0]
      break;
 80026ce:	e002      	b.n	80026d6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80026d0:	bf00      	nop
 80026d2:	e000      	b.n	80026d6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80026d4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80026d6:	78fb      	ldrb	r3, [r7, #3]
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	212c      	movs	r1, #44	; 0x2c
 80026dc:	fb01 f303 	mul.w	r3, r1, r3
 80026e0:	4413      	add	r3, r2
 80026e2:	3344      	adds	r3, #68	; 0x44
 80026e4:	697a      	ldr	r2, [r7, #20]
 80026e6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80026e8:	78fb      	ldrb	r3, [r7, #3]
 80026ea:	8b3a      	ldrh	r2, [r7, #24]
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	202c      	movs	r0, #44	; 0x2c
 80026f0:	fb00 f303 	mul.w	r3, r0, r3
 80026f4:	440b      	add	r3, r1
 80026f6:	334c      	adds	r3, #76	; 0x4c
 80026f8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80026fa:	78fb      	ldrb	r3, [r7, #3]
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	212c      	movs	r1, #44	; 0x2c
 8002700:	fb01 f303 	mul.w	r3, r1, r3
 8002704:	4413      	add	r3, r2
 8002706:	3360      	adds	r3, #96	; 0x60
 8002708:	2200      	movs	r2, #0
 800270a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800270c:	78fb      	ldrb	r3, [r7, #3]
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	212c      	movs	r1, #44	; 0x2c
 8002712:	fb01 f303 	mul.w	r3, r1, r3
 8002716:	4413      	add	r3, r2
 8002718:	3350      	adds	r3, #80	; 0x50
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800271e:	78fb      	ldrb	r3, [r7, #3]
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	212c      	movs	r1, #44	; 0x2c
 8002724:	fb01 f303 	mul.w	r3, r1, r3
 8002728:	4413      	add	r3, r2
 800272a:	3339      	adds	r3, #57	; 0x39
 800272c:	78fa      	ldrb	r2, [r7, #3]
 800272e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002730:	78fb      	ldrb	r3, [r7, #3]
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	212c      	movs	r1, #44	; 0x2c
 8002736:	fb01 f303 	mul.w	r3, r1, r3
 800273a:	4413      	add	r3, r2
 800273c:	3361      	adds	r3, #97	; 0x61
 800273e:	2200      	movs	r2, #0
 8002740:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6818      	ldr	r0, [r3, #0]
 8002746:	78fb      	ldrb	r3, [r7, #3]
 8002748:	222c      	movs	r2, #44	; 0x2c
 800274a:	fb02 f303 	mul.w	r3, r2, r3
 800274e:	3338      	adds	r3, #56	; 0x38
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	18d1      	adds	r1, r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	b2db      	uxtb	r3, r3
 800275a:	461a      	mov	r2, r3
 800275c:	f003 fe1e 	bl	800639c <USB_HC_StartXfer>
 8002760:	4603      	mov	r3, r0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop

0800276c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f003 fb4d 	bl	8005e22 <USB_GetMode>
 8002788:	4603      	mov	r3, r0
 800278a:	2b01      	cmp	r3, #1
 800278c:	f040 80f6 	bne.w	800297c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4618      	mov	r0, r3
 8002796:	f003 fb31 	bl	8005dfc <USB_ReadInterrupts>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 80ec 	beq.w	800297a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f003 fb28 	bl	8005dfc <USB_ReadInterrupts>
 80027ac:	4603      	mov	r3, r0
 80027ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027b6:	d104      	bne.n	80027c2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80027c0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f003 fb18 	bl	8005dfc <USB_ReadInterrupts>
 80027cc:	4603      	mov	r3, r0
 80027ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027d6:	d104      	bne.n	80027e2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80027e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f003 fb08 	bl	8005dfc <USB_ReadInterrupts>
 80027ec:	4603      	mov	r3, r0
 80027ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027f6:	d104      	bne.n	8002802 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002800:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f003 faf8 	bl	8005dfc <USB_ReadInterrupts>
 800280c:	4603      	mov	r3, r0
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b02      	cmp	r3, #2
 8002814:	d103      	bne.n	800281e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2202      	movs	r2, #2
 800281c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f003 faea 	bl	8005dfc <USB_ReadInterrupts>
 8002828:	4603      	mov	r3, r0
 800282a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800282e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002832:	d11c      	bne.n	800286e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800283c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10f      	bne.n	800286e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800284e:	2110      	movs	r1, #16
 8002850:	6938      	ldr	r0, [r7, #16]
 8002852:	f003 f9f9 	bl	8005c48 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002856:	6938      	ldr	r0, [r7, #16]
 8002858:	f003 fa1a 	bl	8005c90 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2101      	movs	r1, #1
 8002862:	4618      	mov	r0, r3
 8002864:	f003 fbc6 	bl	8005ff4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f00a fe61 	bl	800d530 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f003 fac2 	bl	8005dfc <USB_ReadInterrupts>
 8002878:	4603      	mov	r3, r0
 800287a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800287e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002882:	d102      	bne.n	800288a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f001 f9ef 	bl	8003c68 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f003 fab4 	bl	8005dfc <USB_ReadInterrupts>
 8002894:	4603      	mov	r3, r0
 8002896:	f003 0308 	and.w	r3, r3, #8
 800289a:	2b08      	cmp	r3, #8
 800289c:	d106      	bne.n	80028ac <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f00a fe2a 	bl	800d4f8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2208      	movs	r2, #8
 80028aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f003 faa3 	bl	8005dfc <USB_ReadInterrupts>
 80028b6:	4603      	mov	r3, r0
 80028b8:	f003 0310 	and.w	r3, r3, #16
 80028bc:	2b10      	cmp	r3, #16
 80028be:	d101      	bne.n	80028c4 <HAL_HCD_IRQHandler+0x158>
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <HAL_HCD_IRQHandler+0x15a>
 80028c4:	2300      	movs	r3, #0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d012      	beq.n	80028f0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	699a      	ldr	r2, [r3, #24]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 0210 	bic.w	r2, r2, #16
 80028d8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f001 f8f2 	bl	8003ac4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699a      	ldr	r2, [r3, #24]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0210 	orr.w	r2, r2, #16
 80028ee:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f003 fa81 	bl	8005dfc <USB_ReadInterrupts>
 80028fa:	4603      	mov	r3, r0
 80028fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002900:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002904:	d13a      	bne.n	800297c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f003 fe88 	bl	8006620 <USB_HC_ReadInterrupt>
 8002910:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002912:	2300      	movs	r3, #0
 8002914:	617b      	str	r3, [r7, #20]
 8002916:	e025      	b.n	8002964 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	fa22 f303 	lsr.w	r3, r2, r3
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b00      	cmp	r3, #0
 800292a:	d018      	beq.n	800295e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	015a      	lsls	r2, r3, #5
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4413      	add	r3, r2
 8002934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800293e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002942:	d106      	bne.n	8002952 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	b2db      	uxtb	r3, r3
 8002948:	4619      	mov	r1, r3
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f897 	bl	8002a7e <HCD_HC_IN_IRQHandler>
 8002950:	e005      	b.n	800295e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	b2db      	uxtb	r3, r3
 8002956:	4619      	mov	r1, r3
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 fcb2 	bl	80032c2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	3301      	adds	r3, #1
 8002962:	617b      	str	r3, [r7, #20]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	429a      	cmp	r2, r3
 800296c:	d3d4      	bcc.n	8002918 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002976:	615a      	str	r2, [r3, #20]
 8002978:	e000      	b.n	800297c <HAL_HCD_IRQHandler+0x210>
      return;
 800297a:	bf00      	nop
    }
  }
}
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b082      	sub	sp, #8
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002990:	2b01      	cmp	r3, #1
 8002992:	d101      	bne.n	8002998 <HAL_HCD_Start+0x16>
 8002994:	2302      	movs	r3, #2
 8002996:	e013      	b.n	80029c0 <HAL_HCD_Start+0x3e>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2101      	movs	r1, #1
 80029a6:	4618      	mov	r0, r3
 80029a8:	f003 fb88 	bl	80060bc <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f003 f8da 	bl	8005b6a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d101      	bne.n	80029de <HAL_HCD_Stop+0x16>
 80029da:	2302      	movs	r3, #2
 80029dc:	e00d      	b.n	80029fa <HAL_HCD_Stop+0x32>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f003 ff82 	bl	80068f4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f003 fb2a 	bl	8006068 <USB_ResetPort>
 8002a14:	4603      	mov	r3, r0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	460b      	mov	r3, r1
 8002a28:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002a2a:	78fb      	ldrb	r3, [r7, #3]
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	212c      	movs	r1, #44	; 0x2c
 8002a30:	fb01 f303 	mul.w	r3, r1, r3
 8002a34:	4413      	add	r3, r2
 8002a36:	3360      	adds	r3, #96	; 0x60
 8002a38:	781b      	ldrb	r3, [r3, #0]
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b082      	sub	sp, #8
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f003 fb82 	bl	800615c <USB_GetCurrentFrame>
 8002a58:	4603      	mov	r3, r0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b082      	sub	sp, #8
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f003 fb5d 	bl	800612e <USB_GetHostSpeed>
 8002a74:	4603      	mov	r3, r0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b086      	sub	sp, #24
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
 8002a86:	460b      	mov	r3, r1
 8002a88:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002a94:	78fb      	ldrb	r3, [r7, #3]
 8002a96:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	015a      	lsls	r2, r3, #5
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 0304 	and.w	r3, r3, #4
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	d119      	bne.n	8002ae2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	015a      	lsls	r2, r3, #5
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aba:	461a      	mov	r2, r3
 8002abc:	2304      	movs	r3, #4
 8002abe:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	015a      	lsls	r2, r3, #5
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	0151      	lsls	r1, r2, #5
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	440a      	add	r2, r1
 8002ad6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ada:	f043 0302 	orr.w	r3, r3, #2
 8002ade:	60d3      	str	r3, [r2, #12]
 8002ae0:	e101      	b.n	8002ce6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	015a      	lsls	r2, r3, #5
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	4413      	add	r3, r2
 8002aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002af8:	d12b      	bne.n	8002b52 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	015a      	lsls	r2, r3, #5
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	4413      	add	r3, r2
 8002b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b06:	461a      	mov	r2, r3
 8002b08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b0c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	212c      	movs	r1, #44	; 0x2c
 8002b14:	fb01 f303 	mul.w	r3, r1, r3
 8002b18:	4413      	add	r3, r2
 8002b1a:	3361      	adds	r3, #97	; 0x61
 8002b1c:	2207      	movs	r2, #7
 8002b1e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	015a      	lsls	r2, r3, #5
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	4413      	add	r3, r2
 8002b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	0151      	lsls	r1, r2, #5
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	440a      	add	r2, r1
 8002b36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b3a:	f043 0302 	orr.w	r3, r3, #2
 8002b3e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	4611      	mov	r1, r2
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f003 fd79 	bl	8006642 <USB_HC_Halt>
 8002b50:	e0c9      	b.n	8002ce6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	015a      	lsls	r2, r3, #5
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	4413      	add	r3, r2
 8002b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 0320 	and.w	r3, r3, #32
 8002b64:	2b20      	cmp	r3, #32
 8002b66:	d109      	bne.n	8002b7c <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	015a      	lsls	r2, r3, #5
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	4413      	add	r3, r2
 8002b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b74:	461a      	mov	r2, r3
 8002b76:	2320      	movs	r3, #32
 8002b78:	6093      	str	r3, [r2, #8]
 8002b7a:	e0b4      	b.n	8002ce6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	015a      	lsls	r2, r3, #5
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 0308 	and.w	r3, r3, #8
 8002b8e:	2b08      	cmp	r3, #8
 8002b90:	d133      	bne.n	8002bfa <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	015a      	lsls	r2, r3, #5
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	4413      	add	r3, r2
 8002b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	0151      	lsls	r1, r2, #5
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	440a      	add	r2, r1
 8002ba8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bac:	f043 0302 	orr.w	r3, r3, #2
 8002bb0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	212c      	movs	r1, #44	; 0x2c
 8002bb8:	fb01 f303 	mul.w	r3, r1, r3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	3361      	adds	r3, #97	; 0x61
 8002bc0:	2205      	movs	r2, #5
 8002bc2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	015a      	lsls	r2, r3, #5
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	4413      	add	r3, r2
 8002bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	2310      	movs	r3, #16
 8002bd4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	015a      	lsls	r2, r3, #5
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	4413      	add	r3, r2
 8002bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be2:	461a      	mov	r2, r3
 8002be4:	2308      	movs	r3, #8
 8002be6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	b2d2      	uxtb	r2, r2
 8002bf0:	4611      	mov	r1, r2
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f003 fd25 	bl	8006642 <USB_HC_Halt>
 8002bf8:	e075      	b.n	8002ce6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	015a      	lsls	r2, r3, #5
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	4413      	add	r3, r2
 8002c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c10:	d134      	bne.n	8002c7c <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	015a      	lsls	r2, r3, #5
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	4413      	add	r3, r2
 8002c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	0151      	lsls	r1, r2, #5
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	440a      	add	r2, r1
 8002c28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c2c:	f043 0302 	orr.w	r3, r3, #2
 8002c30:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	212c      	movs	r1, #44	; 0x2c
 8002c38:	fb01 f303 	mul.w	r3, r1, r3
 8002c3c:	4413      	add	r3, r2
 8002c3e:	3361      	adds	r3, #97	; 0x61
 8002c40:	2208      	movs	r2, #8
 8002c42:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	015a      	lsls	r2, r3, #5
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c50:	461a      	mov	r2, r3
 8002c52:	2310      	movs	r3, #16
 8002c54:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	015a      	lsls	r2, r3, #5
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c62:	461a      	mov	r2, r3
 8002c64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c68:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	b2d2      	uxtb	r2, r2
 8002c72:	4611      	mov	r1, r2
 8002c74:	4618      	mov	r0, r3
 8002c76:	f003 fce4 	bl	8006642 <USB_HC_Halt>
 8002c7a:	e034      	b.n	8002ce6 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	015a      	lsls	r2, r3, #5
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	4413      	add	r3, r2
 8002c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c8e:	2b80      	cmp	r3, #128	; 0x80
 8002c90:	d129      	bne.n	8002ce6 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	015a      	lsls	r2, r3, #5
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	4413      	add	r3, r2
 8002c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	0151      	lsls	r1, r2, #5
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	440a      	add	r2, r1
 8002ca8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cac:	f043 0302 	orr.w	r3, r3, #2
 8002cb0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	212c      	movs	r1, #44	; 0x2c
 8002cb8:	fb01 f303 	mul.w	r3, r1, r3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	3361      	adds	r3, #97	; 0x61
 8002cc0:	2206      	movs	r2, #6
 8002cc2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	4611      	mov	r1, r2
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f003 fcb7 	bl	8006642 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	015a      	lsls	r2, r3, #5
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	4413      	add	r3, r2
 8002cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	2380      	movs	r3, #128	; 0x80
 8002ce4:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	015a      	lsls	r2, r3, #5
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	4413      	add	r3, r2
 8002cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cfc:	d122      	bne.n	8002d44 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	015a      	lsls	r2, r3, #5
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	4413      	add	r3, r2
 8002d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	0151      	lsls	r1, r2, #5
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	440a      	add	r2, r1
 8002d14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d18:	f043 0302 	orr.w	r3, r3, #2
 8002d1c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	b2d2      	uxtb	r2, r2
 8002d26:	4611      	mov	r1, r2
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f003 fc8a 	bl	8006642 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	015a      	lsls	r2, r3, #5
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	4413      	add	r3, r2
 8002d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d40:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002d42:	e2ba      	b.n	80032ba <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	015a      	lsls	r2, r3, #5
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	f040 811b 	bne.w	8002f92 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d019      	beq.n	8002d98 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	212c      	movs	r1, #44	; 0x2c
 8002d6a:	fb01 f303 	mul.w	r3, r1, r3
 8002d6e:	4413      	add	r3, r2
 8002d70:	3348      	adds	r3, #72	; 0x48
 8002d72:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	0159      	lsls	r1, r3, #5
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	440b      	add	r3, r1
 8002d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002d86:	1ad2      	subs	r2, r2, r3
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	202c      	movs	r0, #44	; 0x2c
 8002d8e:	fb00 f303 	mul.w	r3, r0, r3
 8002d92:	440b      	add	r3, r1
 8002d94:	3350      	adds	r3, #80	; 0x50
 8002d96:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	212c      	movs	r1, #44	; 0x2c
 8002d9e:	fb01 f303 	mul.w	r3, r1, r3
 8002da2:	4413      	add	r3, r2
 8002da4:	3361      	adds	r3, #97	; 0x61
 8002da6:	2201      	movs	r2, #1
 8002da8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	212c      	movs	r1, #44	; 0x2c
 8002db0:	fb01 f303 	mul.w	r3, r1, r3
 8002db4:	4413      	add	r3, r2
 8002db6:	335c      	adds	r3, #92	; 0x5c
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	015a      	lsls	r2, r3, #5
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc8:	461a      	mov	r2, r3
 8002dca:	2301      	movs	r3, #1
 8002dcc:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	212c      	movs	r1, #44	; 0x2c
 8002dd4:	fb01 f303 	mul.w	r3, r1, r3
 8002dd8:	4413      	add	r3, r2
 8002dda:	333f      	adds	r3, #63	; 0x3f
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d009      	beq.n	8002df6 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	212c      	movs	r1, #44	; 0x2c
 8002de8:	fb01 f303 	mul.w	r3, r1, r3
 8002dec:	4413      	add	r3, r2
 8002dee:	333f      	adds	r3, #63	; 0x3f
 8002df0:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d121      	bne.n	8002e3a <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	015a      	lsls	r2, r3, #5
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	0151      	lsls	r1, r2, #5
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	440a      	add	r2, r1
 8002e0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e10:	f043 0302 	orr.w	r3, r3, #2
 8002e14:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	4611      	mov	r1, r2
 8002e20:	4618      	mov	r0, r3
 8002e22:	f003 fc0e 	bl	8006642 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	015a      	lsls	r2, r3, #5
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e32:	461a      	mov	r2, r3
 8002e34:	2310      	movs	r3, #16
 8002e36:	6093      	str	r3, [r2, #8]
 8002e38:	e066      	b.n	8002f08 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	212c      	movs	r1, #44	; 0x2c
 8002e40:	fb01 f303 	mul.w	r3, r1, r3
 8002e44:	4413      	add	r3, r2
 8002e46:	333f      	adds	r3, #63	; 0x3f
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	2b03      	cmp	r3, #3
 8002e4c:	d127      	bne.n	8002e9e <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	015a      	lsls	r2, r3, #5
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	4413      	add	r3, r2
 8002e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	0151      	lsls	r1, r2, #5
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	440a      	add	r2, r1
 8002e64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e6c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	212c      	movs	r1, #44	; 0x2c
 8002e74:	fb01 f303 	mul.w	r3, r1, r3
 8002e78:	4413      	add	r3, r2
 8002e7a:	3360      	adds	r3, #96	; 0x60
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	b2d9      	uxtb	r1, r3
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	202c      	movs	r0, #44	; 0x2c
 8002e8a:	fb00 f303 	mul.w	r3, r0, r3
 8002e8e:	4413      	add	r3, r2
 8002e90:	3360      	adds	r3, #96	; 0x60
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	461a      	mov	r2, r3
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f00a fb58 	bl	800d54c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002e9c:	e034      	b.n	8002f08 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	212c      	movs	r1, #44	; 0x2c
 8002ea4:	fb01 f303 	mul.w	r3, r1, r3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	333f      	adds	r3, #63	; 0x3f
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d12a      	bne.n	8002f08 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	212c      	movs	r1, #44	; 0x2c
 8002eb8:	fb01 f303 	mul.w	r3, r1, r3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	3360      	adds	r3, #96	; 0x60
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	212c      	movs	r1, #44	; 0x2c
 8002eca:	fb01 f303 	mul.w	r3, r1, r3
 8002ece:	4413      	add	r3, r2
 8002ed0:	3354      	adds	r3, #84	; 0x54
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	f083 0301 	eor.w	r3, r3, #1
 8002ed8:	b2d8      	uxtb	r0, r3
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	212c      	movs	r1, #44	; 0x2c
 8002ee0:	fb01 f303 	mul.w	r3, r1, r3
 8002ee4:	4413      	add	r3, r2
 8002ee6:	3354      	adds	r3, #84	; 0x54
 8002ee8:	4602      	mov	r2, r0
 8002eea:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	b2d9      	uxtb	r1, r3
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	202c      	movs	r0, #44	; 0x2c
 8002ef6:	fb00 f303 	mul.w	r3, r0, r3
 8002efa:	4413      	add	r3, r2
 8002efc:	3360      	adds	r3, #96	; 0x60
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	461a      	mov	r2, r3
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f00a fb22 	bl	800d54c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d12b      	bne.n	8002f68 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	212c      	movs	r1, #44	; 0x2c
 8002f16:	fb01 f303 	mul.w	r3, r1, r3
 8002f1a:	4413      	add	r3, r2
 8002f1c:	3348      	adds	r3, #72	; 0x48
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6879      	ldr	r1, [r7, #4]
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	202c      	movs	r0, #44	; 0x2c
 8002f26:	fb00 f202 	mul.w	r2, r0, r2
 8002f2a:	440a      	add	r2, r1
 8002f2c:	3240      	adds	r2, #64	; 0x40
 8002f2e:	8812      	ldrh	r2, [r2, #0]
 8002f30:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 81be 	beq.w	80032ba <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	212c      	movs	r1, #44	; 0x2c
 8002f44:	fb01 f303 	mul.w	r3, r1, r3
 8002f48:	4413      	add	r3, r2
 8002f4a:	3354      	adds	r3, #84	; 0x54
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	f083 0301 	eor.w	r3, r3, #1
 8002f52:	b2d8      	uxtb	r0, r3
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	212c      	movs	r1, #44	; 0x2c
 8002f5a:	fb01 f303 	mul.w	r3, r1, r3
 8002f5e:	4413      	add	r3, r2
 8002f60:	3354      	adds	r3, #84	; 0x54
 8002f62:	4602      	mov	r2, r0
 8002f64:	701a      	strb	r2, [r3, #0]
}
 8002f66:	e1a8      	b.n	80032ba <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	212c      	movs	r1, #44	; 0x2c
 8002f6e:	fb01 f303 	mul.w	r3, r1, r3
 8002f72:	4413      	add	r3, r2
 8002f74:	3354      	adds	r3, #84	; 0x54
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	f083 0301 	eor.w	r3, r3, #1
 8002f7c:	b2d8      	uxtb	r0, r3
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	212c      	movs	r1, #44	; 0x2c
 8002f84:	fb01 f303 	mul.w	r3, r1, r3
 8002f88:	4413      	add	r3, r2
 8002f8a:	3354      	adds	r3, #84	; 0x54
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	701a      	strb	r2, [r3, #0]
}
 8002f90:	e193      	b.n	80032ba <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	015a      	lsls	r2, r3, #5
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	4413      	add	r3, r2
 8002f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	f040 8106 	bne.w	80031b6 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	015a      	lsls	r2, r3, #5
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	0151      	lsls	r1, r2, #5
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	440a      	add	r2, r1
 8002fc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fc4:	f023 0302 	bic.w	r3, r3, #2
 8002fc8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	212c      	movs	r1, #44	; 0x2c
 8002fd0:	fb01 f303 	mul.w	r3, r1, r3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	3361      	adds	r3, #97	; 0x61
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d109      	bne.n	8002ff2 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	212c      	movs	r1, #44	; 0x2c
 8002fe4:	fb01 f303 	mul.w	r3, r1, r3
 8002fe8:	4413      	add	r3, r2
 8002fea:	3360      	adds	r3, #96	; 0x60
 8002fec:	2201      	movs	r2, #1
 8002fee:	701a      	strb	r2, [r3, #0]
 8002ff0:	e0c9      	b.n	8003186 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	212c      	movs	r1, #44	; 0x2c
 8002ff8:	fb01 f303 	mul.w	r3, r1, r3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	3361      	adds	r3, #97	; 0x61
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2b05      	cmp	r3, #5
 8003004:	d109      	bne.n	800301a <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	212c      	movs	r1, #44	; 0x2c
 800300c:	fb01 f303 	mul.w	r3, r1, r3
 8003010:	4413      	add	r3, r2
 8003012:	3360      	adds	r3, #96	; 0x60
 8003014:	2205      	movs	r2, #5
 8003016:	701a      	strb	r2, [r3, #0]
 8003018:	e0b5      	b.n	8003186 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	212c      	movs	r1, #44	; 0x2c
 8003020:	fb01 f303 	mul.w	r3, r1, r3
 8003024:	4413      	add	r3, r2
 8003026:	3361      	adds	r3, #97	; 0x61
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	2b06      	cmp	r3, #6
 800302c:	d009      	beq.n	8003042 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	212c      	movs	r1, #44	; 0x2c
 8003034:	fb01 f303 	mul.w	r3, r1, r3
 8003038:	4413      	add	r3, r2
 800303a:	3361      	adds	r3, #97	; 0x61
 800303c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800303e:	2b08      	cmp	r3, #8
 8003040:	d150      	bne.n	80030e4 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	212c      	movs	r1, #44	; 0x2c
 8003048:	fb01 f303 	mul.w	r3, r1, r3
 800304c:	4413      	add	r3, r2
 800304e:	335c      	adds	r3, #92	; 0x5c
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	1c5a      	adds	r2, r3, #1
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	202c      	movs	r0, #44	; 0x2c
 800305a:	fb00 f303 	mul.w	r3, r0, r3
 800305e:	440b      	add	r3, r1
 8003060:	335c      	adds	r3, #92	; 0x5c
 8003062:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	212c      	movs	r1, #44	; 0x2c
 800306a:	fb01 f303 	mul.w	r3, r1, r3
 800306e:	4413      	add	r3, r2
 8003070:	335c      	adds	r3, #92	; 0x5c
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b02      	cmp	r3, #2
 8003076:	d912      	bls.n	800309e <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	212c      	movs	r1, #44	; 0x2c
 800307e:	fb01 f303 	mul.w	r3, r1, r3
 8003082:	4413      	add	r3, r2
 8003084:	335c      	adds	r3, #92	; 0x5c
 8003086:	2200      	movs	r2, #0
 8003088:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	212c      	movs	r1, #44	; 0x2c
 8003090:	fb01 f303 	mul.w	r3, r1, r3
 8003094:	4413      	add	r3, r2
 8003096:	3360      	adds	r3, #96	; 0x60
 8003098:	2204      	movs	r2, #4
 800309a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800309c:	e073      	b.n	8003186 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	212c      	movs	r1, #44	; 0x2c
 80030a4:	fb01 f303 	mul.w	r3, r1, r3
 80030a8:	4413      	add	r3, r2
 80030aa:	3360      	adds	r3, #96	; 0x60
 80030ac:	2202      	movs	r2, #2
 80030ae:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	015a      	lsls	r2, r3, #5
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80030c6:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80030ce:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	015a      	lsls	r2, r3, #5
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	4413      	add	r3, r2
 80030d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030dc:	461a      	mov	r2, r3
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80030e2:	e050      	b.n	8003186 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	212c      	movs	r1, #44	; 0x2c
 80030ea:	fb01 f303 	mul.w	r3, r1, r3
 80030ee:	4413      	add	r3, r2
 80030f0:	3361      	adds	r3, #97	; 0x61
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b03      	cmp	r3, #3
 80030f6:	d122      	bne.n	800313e <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	212c      	movs	r1, #44	; 0x2c
 80030fe:	fb01 f303 	mul.w	r3, r1, r3
 8003102:	4413      	add	r3, r2
 8003104:	3360      	adds	r3, #96	; 0x60
 8003106:	2202      	movs	r2, #2
 8003108:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	015a      	lsls	r2, r3, #5
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	4413      	add	r3, r2
 8003112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003120:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003128:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	015a      	lsls	r2, r3, #5
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	4413      	add	r3, r2
 8003132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003136:	461a      	mov	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	6013      	str	r3, [r2, #0]
 800313c:	e023      	b.n	8003186 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	212c      	movs	r1, #44	; 0x2c
 8003144:	fb01 f303 	mul.w	r3, r1, r3
 8003148:	4413      	add	r3, r2
 800314a:	3361      	adds	r3, #97	; 0x61
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	2b07      	cmp	r3, #7
 8003150:	d119      	bne.n	8003186 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	212c      	movs	r1, #44	; 0x2c
 8003158:	fb01 f303 	mul.w	r3, r1, r3
 800315c:	4413      	add	r3, r2
 800315e:	335c      	adds	r3, #92	; 0x5c
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	1c5a      	adds	r2, r3, #1
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	202c      	movs	r0, #44	; 0x2c
 800316a:	fb00 f303 	mul.w	r3, r0, r3
 800316e:	440b      	add	r3, r1
 8003170:	335c      	adds	r3, #92	; 0x5c
 8003172:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	212c      	movs	r1, #44	; 0x2c
 800317a:	fb01 f303 	mul.w	r3, r1, r3
 800317e:	4413      	add	r3, r2
 8003180:	3360      	adds	r3, #96	; 0x60
 8003182:	2204      	movs	r2, #4
 8003184:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	015a      	lsls	r2, r3, #5
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	4413      	add	r3, r2
 800318e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003192:	461a      	mov	r2, r3
 8003194:	2302      	movs	r3, #2
 8003196:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	b2d9      	uxtb	r1, r3
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	202c      	movs	r0, #44	; 0x2c
 80031a2:	fb00 f303 	mul.w	r3, r0, r3
 80031a6:	4413      	add	r3, r2
 80031a8:	3360      	adds	r3, #96	; 0x60
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	461a      	mov	r2, r3
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f00a f9cc 	bl	800d54c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80031b4:	e081      	b.n	80032ba <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	015a      	lsls	r2, r3, #5
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	4413      	add	r3, r2
 80031be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 0310 	and.w	r3, r3, #16
 80031c8:	2b10      	cmp	r3, #16
 80031ca:	d176      	bne.n	80032ba <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	212c      	movs	r1, #44	; 0x2c
 80031d2:	fb01 f303 	mul.w	r3, r1, r3
 80031d6:	4413      	add	r3, r2
 80031d8:	333f      	adds	r3, #63	; 0x3f
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b03      	cmp	r3, #3
 80031de:	d121      	bne.n	8003224 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	212c      	movs	r1, #44	; 0x2c
 80031e6:	fb01 f303 	mul.w	r3, r1, r3
 80031ea:	4413      	add	r3, r2
 80031ec:	335c      	adds	r3, #92	; 0x5c
 80031ee:	2200      	movs	r2, #0
 80031f0:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	015a      	lsls	r2, r3, #5
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4413      	add	r3, r2
 80031fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	0151      	lsls	r1, r2, #5
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	440a      	add	r2, r1
 8003208:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800320c:	f043 0302 	orr.w	r3, r3, #2
 8003210:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	b2d2      	uxtb	r2, r2
 800321a:	4611      	mov	r1, r2
 800321c:	4618      	mov	r0, r3
 800321e:	f003 fa10 	bl	8006642 <USB_HC_Halt>
 8003222:	e041      	b.n	80032a8 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	212c      	movs	r1, #44	; 0x2c
 800322a:	fb01 f303 	mul.w	r3, r1, r3
 800322e:	4413      	add	r3, r2
 8003230:	333f      	adds	r3, #63	; 0x3f
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d009      	beq.n	800324c <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	212c      	movs	r1, #44	; 0x2c
 800323e:	fb01 f303 	mul.w	r3, r1, r3
 8003242:	4413      	add	r3, r2
 8003244:	333f      	adds	r3, #63	; 0x3f
 8003246:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003248:	2b02      	cmp	r3, #2
 800324a:	d12d      	bne.n	80032a8 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	212c      	movs	r1, #44	; 0x2c
 8003252:	fb01 f303 	mul.w	r3, r1, r3
 8003256:	4413      	add	r3, r2
 8003258:	335c      	adds	r3, #92	; 0x5c
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d120      	bne.n	80032a8 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	212c      	movs	r1, #44	; 0x2c
 800326c:	fb01 f303 	mul.w	r3, r1, r3
 8003270:	4413      	add	r3, r2
 8003272:	3361      	adds	r3, #97	; 0x61
 8003274:	2203      	movs	r2, #3
 8003276:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	015a      	lsls	r2, r3, #5
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	4413      	add	r3, r2
 8003280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	0151      	lsls	r1, r2, #5
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	440a      	add	r2, r1
 800328e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003292:	f043 0302 	orr.w	r3, r3, #2
 8003296:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	4611      	mov	r1, r2
 80032a2:	4618      	mov	r0, r3
 80032a4:	f003 f9cd 	bl	8006642 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	015a      	lsls	r2, r3, #5
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	4413      	add	r3, r2
 80032b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b4:	461a      	mov	r2, r3
 80032b6:	2310      	movs	r3, #16
 80032b8:	6093      	str	r3, [r2, #8]
}
 80032ba:	bf00      	nop
 80032bc:	3718      	adds	r7, #24
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b088      	sub	sp, #32
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
 80032ca:	460b      	mov	r3, r1
 80032cc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80032d8:	78fb      	ldrb	r3, [r7, #3]
 80032da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	015a      	lsls	r2, r3, #5
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	4413      	add	r3, r2
 80032e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 0304 	and.w	r3, r3, #4
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d119      	bne.n	8003326 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	015a      	lsls	r2, r3, #5
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	4413      	add	r3, r2
 80032fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032fe:	461a      	mov	r2, r3
 8003300:	2304      	movs	r3, #4
 8003302:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	015a      	lsls	r2, r3, #5
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	4413      	add	r3, r2
 800330c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	0151      	lsls	r1, r2, #5
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	440a      	add	r2, r1
 800331a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800331e:	f043 0302 	orr.w	r3, r3, #2
 8003322:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003324:	e3ca      	b.n	8003abc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	015a      	lsls	r2, r3, #5
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	4413      	add	r3, r2
 800332e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 0320 	and.w	r3, r3, #32
 8003338:	2b20      	cmp	r3, #32
 800333a:	d13e      	bne.n	80033ba <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	015a      	lsls	r2, r3, #5
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	4413      	add	r3, r2
 8003344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003348:	461a      	mov	r2, r3
 800334a:	2320      	movs	r3, #32
 800334c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	212c      	movs	r1, #44	; 0x2c
 8003354:	fb01 f303 	mul.w	r3, r1, r3
 8003358:	4413      	add	r3, r2
 800335a:	333d      	adds	r3, #61	; 0x3d
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	2b01      	cmp	r3, #1
 8003360:	f040 83ac 	bne.w	8003abc <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	212c      	movs	r1, #44	; 0x2c
 800336a:	fb01 f303 	mul.w	r3, r1, r3
 800336e:	4413      	add	r3, r2
 8003370:	333d      	adds	r3, #61	; 0x3d
 8003372:	2200      	movs	r2, #0
 8003374:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	212c      	movs	r1, #44	; 0x2c
 800337c:	fb01 f303 	mul.w	r3, r1, r3
 8003380:	4413      	add	r3, r2
 8003382:	3360      	adds	r3, #96	; 0x60
 8003384:	2202      	movs	r2, #2
 8003386:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	015a      	lsls	r2, r3, #5
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	4413      	add	r3, r2
 8003390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	0151      	lsls	r1, r2, #5
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	440a      	add	r2, r1
 800339e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033a2:	f043 0302 	orr.w	r3, r3, #2
 80033a6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	b2d2      	uxtb	r2, r2
 80033b0:	4611      	mov	r1, r2
 80033b2:	4618      	mov	r0, r3
 80033b4:	f003 f945 	bl	8006642 <USB_HC_Halt>
}
 80033b8:	e380      	b.n	8003abc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	015a      	lsls	r2, r3, #5
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	4413      	add	r3, r2
 80033c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033d0:	d122      	bne.n	8003418 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	015a      	lsls	r2, r3, #5
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	4413      	add	r3, r2
 80033da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	0151      	lsls	r1, r2, #5
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	440a      	add	r2, r1
 80033e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033ec:	f043 0302 	orr.w	r3, r3, #2
 80033f0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	4611      	mov	r1, r2
 80033fc:	4618      	mov	r0, r3
 80033fe:	f003 f920 	bl	8006642 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	015a      	lsls	r2, r3, #5
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	4413      	add	r3, r2
 800340a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800340e:	461a      	mov	r2, r3
 8003410:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003414:	6093      	str	r3, [r2, #8]
}
 8003416:	e351      	b.n	8003abc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	015a      	lsls	r2, r3, #5
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	4413      	add	r3, r2
 8003420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b01      	cmp	r3, #1
 800342c:	d150      	bne.n	80034d0 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	212c      	movs	r1, #44	; 0x2c
 8003434:	fb01 f303 	mul.w	r3, r1, r3
 8003438:	4413      	add	r3, r2
 800343a:	335c      	adds	r3, #92	; 0x5c
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	015a      	lsls	r2, r3, #5
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	4413      	add	r3, r2
 8003448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003452:	2b40      	cmp	r3, #64	; 0x40
 8003454:	d111      	bne.n	800347a <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	212c      	movs	r1, #44	; 0x2c
 800345c:	fb01 f303 	mul.w	r3, r1, r3
 8003460:	4413      	add	r3, r2
 8003462:	333d      	adds	r3, #61	; 0x3d
 8003464:	2201      	movs	r2, #1
 8003466:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	015a      	lsls	r2, r3, #5
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	4413      	add	r3, r2
 8003470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003474:	461a      	mov	r2, r3
 8003476:	2340      	movs	r3, #64	; 0x40
 8003478:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	015a      	lsls	r2, r3, #5
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	4413      	add	r3, r2
 8003482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	0151      	lsls	r1, r2, #5
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	440a      	add	r2, r1
 8003490:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003494:	f043 0302 	orr.w	r3, r3, #2
 8003498:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	b2d2      	uxtb	r2, r2
 80034a2:	4611      	mov	r1, r2
 80034a4:	4618      	mov	r0, r3
 80034a6:	f003 f8cc 	bl	8006642 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	015a      	lsls	r2, r3, #5
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	4413      	add	r3, r2
 80034b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034b6:	461a      	mov	r2, r3
 80034b8:	2301      	movs	r3, #1
 80034ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	212c      	movs	r1, #44	; 0x2c
 80034c2:	fb01 f303 	mul.w	r3, r1, r3
 80034c6:	4413      	add	r3, r2
 80034c8:	3361      	adds	r3, #97	; 0x61
 80034ca:	2201      	movs	r2, #1
 80034cc:	701a      	strb	r2, [r3, #0]
}
 80034ce:	e2f5      	b.n	8003abc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	015a      	lsls	r2, r3, #5
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	4413      	add	r3, r2
 80034d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e2:	2b40      	cmp	r3, #64	; 0x40
 80034e4:	d13c      	bne.n	8003560 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	212c      	movs	r1, #44	; 0x2c
 80034ec:	fb01 f303 	mul.w	r3, r1, r3
 80034f0:	4413      	add	r3, r2
 80034f2:	3361      	adds	r3, #97	; 0x61
 80034f4:	2204      	movs	r2, #4
 80034f6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	212c      	movs	r1, #44	; 0x2c
 80034fe:	fb01 f303 	mul.w	r3, r1, r3
 8003502:	4413      	add	r3, r2
 8003504:	333d      	adds	r3, #61	; 0x3d
 8003506:	2201      	movs	r2, #1
 8003508:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	212c      	movs	r1, #44	; 0x2c
 8003510:	fb01 f303 	mul.w	r3, r1, r3
 8003514:	4413      	add	r3, r2
 8003516:	335c      	adds	r3, #92	; 0x5c
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	015a      	lsls	r2, r3, #5
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	4413      	add	r3, r2
 8003524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	0151      	lsls	r1, r2, #5
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	440a      	add	r2, r1
 8003532:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003536:	f043 0302 	orr.w	r3, r3, #2
 800353a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	b2d2      	uxtb	r2, r2
 8003544:	4611      	mov	r1, r2
 8003546:	4618      	mov	r0, r3
 8003548:	f003 f87b 	bl	8006642 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	015a      	lsls	r2, r3, #5
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	4413      	add	r3, r2
 8003554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003558:	461a      	mov	r2, r3
 800355a:	2340      	movs	r3, #64	; 0x40
 800355c:	6093      	str	r3, [r2, #8]
}
 800355e:	e2ad      	b.n	8003abc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	015a      	lsls	r2, r3, #5
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	4413      	add	r3, r2
 8003568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	2b08      	cmp	r3, #8
 8003574:	d12a      	bne.n	80035cc <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	015a      	lsls	r2, r3, #5
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	4413      	add	r3, r2
 800357e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003582:	461a      	mov	r2, r3
 8003584:	2308      	movs	r3, #8
 8003586:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	015a      	lsls	r2, r3, #5
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	4413      	add	r3, r2
 8003590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	0151      	lsls	r1, r2, #5
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	440a      	add	r2, r1
 800359e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035a2:	f043 0302 	orr.w	r3, r3, #2
 80035a6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	4611      	mov	r1, r2
 80035b2:	4618      	mov	r0, r3
 80035b4:	f003 f845 	bl	8006642 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	212c      	movs	r1, #44	; 0x2c
 80035be:	fb01 f303 	mul.w	r3, r1, r3
 80035c2:	4413      	add	r3, r2
 80035c4:	3361      	adds	r3, #97	; 0x61
 80035c6:	2205      	movs	r2, #5
 80035c8:	701a      	strb	r2, [r3, #0]
}
 80035ca:	e277      	b.n	8003abc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	015a      	lsls	r2, r3, #5
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 0310 	and.w	r3, r3, #16
 80035de:	2b10      	cmp	r3, #16
 80035e0:	d150      	bne.n	8003684 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	212c      	movs	r1, #44	; 0x2c
 80035e8:	fb01 f303 	mul.w	r3, r1, r3
 80035ec:	4413      	add	r3, r2
 80035ee:	335c      	adds	r3, #92	; 0x5c
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	212c      	movs	r1, #44	; 0x2c
 80035fa:	fb01 f303 	mul.w	r3, r1, r3
 80035fe:	4413      	add	r3, r2
 8003600:	3361      	adds	r3, #97	; 0x61
 8003602:	2203      	movs	r2, #3
 8003604:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	212c      	movs	r1, #44	; 0x2c
 800360c:	fb01 f303 	mul.w	r3, r1, r3
 8003610:	4413      	add	r3, r2
 8003612:	333d      	adds	r3, #61	; 0x3d
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d112      	bne.n	8003640 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	212c      	movs	r1, #44	; 0x2c
 8003620:	fb01 f303 	mul.w	r3, r1, r3
 8003624:	4413      	add	r3, r2
 8003626:	333c      	adds	r3, #60	; 0x3c
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d108      	bne.n	8003640 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	212c      	movs	r1, #44	; 0x2c
 8003634:	fb01 f303 	mul.w	r3, r1, r3
 8003638:	4413      	add	r3, r2
 800363a:	333d      	adds	r3, #61	; 0x3d
 800363c:	2201      	movs	r2, #1
 800363e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	015a      	lsls	r2, r3, #5
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	4413      	add	r3, r2
 8003648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	0151      	lsls	r1, r2, #5
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	440a      	add	r2, r1
 8003656:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800365a:	f043 0302 	orr.w	r3, r3, #2
 800365e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	b2d2      	uxtb	r2, r2
 8003668:	4611      	mov	r1, r2
 800366a:	4618      	mov	r0, r3
 800366c:	f002 ffe9 	bl	8006642 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	015a      	lsls	r2, r3, #5
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	4413      	add	r3, r2
 8003678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800367c:	461a      	mov	r2, r3
 800367e:	2310      	movs	r3, #16
 8003680:	6093      	str	r3, [r2, #8]
}
 8003682:	e21b      	b.n	8003abc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	015a      	lsls	r2, r3, #5
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	4413      	add	r3, r2
 800368c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003696:	2b80      	cmp	r3, #128	; 0x80
 8003698:	d174      	bne.n	8003784 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d121      	bne.n	80036e6 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	212c      	movs	r1, #44	; 0x2c
 80036a8:	fb01 f303 	mul.w	r3, r1, r3
 80036ac:	4413      	add	r3, r2
 80036ae:	3361      	adds	r3, #97	; 0x61
 80036b0:	2206      	movs	r2, #6
 80036b2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	015a      	lsls	r2, r3, #5
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	4413      	add	r3, r2
 80036bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	0151      	lsls	r1, r2, #5
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	440a      	add	r2, r1
 80036ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036ce:	f043 0302 	orr.w	r3, r3, #2
 80036d2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	4611      	mov	r1, r2
 80036de:	4618      	mov	r0, r3
 80036e0:	f002 ffaf 	bl	8006642 <USB_HC_Halt>
 80036e4:	e044      	b.n	8003770 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	212c      	movs	r1, #44	; 0x2c
 80036ec:	fb01 f303 	mul.w	r3, r1, r3
 80036f0:	4413      	add	r3, r2
 80036f2:	335c      	adds	r3, #92	; 0x5c
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	202c      	movs	r0, #44	; 0x2c
 80036fe:	fb00 f303 	mul.w	r3, r0, r3
 8003702:	440b      	add	r3, r1
 8003704:	335c      	adds	r3, #92	; 0x5c
 8003706:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	212c      	movs	r1, #44	; 0x2c
 800370e:	fb01 f303 	mul.w	r3, r1, r3
 8003712:	4413      	add	r3, r2
 8003714:	335c      	adds	r3, #92	; 0x5c
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b02      	cmp	r3, #2
 800371a:	d920      	bls.n	800375e <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	212c      	movs	r1, #44	; 0x2c
 8003722:	fb01 f303 	mul.w	r3, r1, r3
 8003726:	4413      	add	r3, r2
 8003728:	335c      	adds	r3, #92	; 0x5c
 800372a:	2200      	movs	r2, #0
 800372c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	212c      	movs	r1, #44	; 0x2c
 8003734:	fb01 f303 	mul.w	r3, r1, r3
 8003738:	4413      	add	r3, r2
 800373a:	3360      	adds	r3, #96	; 0x60
 800373c:	2204      	movs	r2, #4
 800373e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	b2d9      	uxtb	r1, r3
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	202c      	movs	r0, #44	; 0x2c
 800374a:	fb00 f303 	mul.w	r3, r0, r3
 800374e:	4413      	add	r3, r2
 8003750:	3360      	adds	r3, #96	; 0x60
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	461a      	mov	r2, r3
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f009 fef8 	bl	800d54c <HAL_HCD_HC_NotifyURBChange_Callback>
 800375c:	e008      	b.n	8003770 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	212c      	movs	r1, #44	; 0x2c
 8003764:	fb01 f303 	mul.w	r3, r1, r3
 8003768:	4413      	add	r3, r2
 800376a:	3360      	adds	r3, #96	; 0x60
 800376c:	2202      	movs	r2, #2
 800376e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	015a      	lsls	r2, r3, #5
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	4413      	add	r3, r2
 8003778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800377c:	461a      	mov	r2, r3
 800377e:	2380      	movs	r3, #128	; 0x80
 8003780:	6093      	str	r3, [r2, #8]
}
 8003782:	e19b      	b.n	8003abc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	015a      	lsls	r2, r3, #5
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	4413      	add	r3, r2
 800378c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800379a:	d134      	bne.n	8003806 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	015a      	lsls	r2, r3, #5
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	4413      	add	r3, r2
 80037a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	0151      	lsls	r1, r2, #5
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	440a      	add	r2, r1
 80037b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037b6:	f043 0302 	orr.w	r3, r3, #2
 80037ba:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	4611      	mov	r1, r2
 80037c6:	4618      	mov	r0, r3
 80037c8:	f002 ff3b 	bl	8006642 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d8:	461a      	mov	r2, r3
 80037da:	2310      	movs	r3, #16
 80037dc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	015a      	lsls	r2, r3, #5
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	4413      	add	r3, r2
 80037e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ea:	461a      	mov	r2, r3
 80037ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	212c      	movs	r1, #44	; 0x2c
 80037f8:	fb01 f303 	mul.w	r3, r1, r3
 80037fc:	4413      	add	r3, r2
 80037fe:	3361      	adds	r3, #97	; 0x61
 8003800:	2208      	movs	r2, #8
 8003802:	701a      	strb	r2, [r3, #0]
}
 8003804:	e15a      	b.n	8003abc <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	015a      	lsls	r2, r3, #5
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	4413      	add	r3, r2
 800380e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b02      	cmp	r3, #2
 800381a:	f040 814f 	bne.w	8003abc <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	015a      	lsls	r2, r3, #5
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	4413      	add	r3, r2
 8003826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	0151      	lsls	r1, r2, #5
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	440a      	add	r2, r1
 8003834:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003838:	f023 0302 	bic.w	r3, r3, #2
 800383c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	212c      	movs	r1, #44	; 0x2c
 8003844:	fb01 f303 	mul.w	r3, r1, r3
 8003848:	4413      	add	r3, r2
 800384a:	3361      	adds	r3, #97	; 0x61
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d17d      	bne.n	800394e <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	212c      	movs	r1, #44	; 0x2c
 8003858:	fb01 f303 	mul.w	r3, r1, r3
 800385c:	4413      	add	r3, r2
 800385e:	3360      	adds	r3, #96	; 0x60
 8003860:	2201      	movs	r2, #1
 8003862:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	212c      	movs	r1, #44	; 0x2c
 800386a:	fb01 f303 	mul.w	r3, r1, r3
 800386e:	4413      	add	r3, r2
 8003870:	333f      	adds	r3, #63	; 0x3f
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	2b02      	cmp	r3, #2
 8003876:	d00a      	beq.n	800388e <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	212c      	movs	r1, #44	; 0x2c
 800387e:	fb01 f303 	mul.w	r3, r1, r3
 8003882:	4413      	add	r3, r2
 8003884:	333f      	adds	r3, #63	; 0x3f
 8003886:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003888:	2b03      	cmp	r3, #3
 800388a:	f040 8100 	bne.w	8003a8e <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d113      	bne.n	80038be <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	212c      	movs	r1, #44	; 0x2c
 800389c:	fb01 f303 	mul.w	r3, r1, r3
 80038a0:	4413      	add	r3, r2
 80038a2:	3355      	adds	r3, #85	; 0x55
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	f083 0301 	eor.w	r3, r3, #1
 80038aa:	b2d8      	uxtb	r0, r3
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	212c      	movs	r1, #44	; 0x2c
 80038b2:	fb01 f303 	mul.w	r3, r1, r3
 80038b6:	4413      	add	r3, r2
 80038b8:	3355      	adds	r3, #85	; 0x55
 80038ba:	4602      	mov	r2, r0
 80038bc:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	f040 80e3 	bne.w	8003a8e <HCD_HC_OUT_IRQHandler+0x7cc>
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	212c      	movs	r1, #44	; 0x2c
 80038ce:	fb01 f303 	mul.w	r3, r1, r3
 80038d2:	4413      	add	r3, r2
 80038d4:	334c      	adds	r3, #76	; 0x4c
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 80d8 	beq.w	8003a8e <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	212c      	movs	r1, #44	; 0x2c
 80038e4:	fb01 f303 	mul.w	r3, r1, r3
 80038e8:	4413      	add	r3, r2
 80038ea:	334c      	adds	r3, #76	; 0x4c
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	6879      	ldr	r1, [r7, #4]
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	202c      	movs	r0, #44	; 0x2c
 80038f4:	fb00 f202 	mul.w	r2, r0, r2
 80038f8:	440a      	add	r2, r1
 80038fa:	3240      	adds	r2, #64	; 0x40
 80038fc:	8812      	ldrh	r2, [r2, #0]
 80038fe:	4413      	add	r3, r2
 8003900:	3b01      	subs	r3, #1
 8003902:	6879      	ldr	r1, [r7, #4]
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	202c      	movs	r0, #44	; 0x2c
 8003908:	fb00 f202 	mul.w	r2, r0, r2
 800390c:	440a      	add	r2, r1
 800390e:	3240      	adds	r2, #64	; 0x40
 8003910:	8812      	ldrh	r2, [r2, #0]
 8003912:	fbb3 f3f2 	udiv	r3, r3, r2
 8003916:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	f000 80b5 	beq.w	8003a8e <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	212c      	movs	r1, #44	; 0x2c
 800392a:	fb01 f303 	mul.w	r3, r1, r3
 800392e:	4413      	add	r3, r2
 8003930:	3355      	adds	r3, #85	; 0x55
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	f083 0301 	eor.w	r3, r3, #1
 8003938:	b2d8      	uxtb	r0, r3
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	212c      	movs	r1, #44	; 0x2c
 8003940:	fb01 f303 	mul.w	r3, r1, r3
 8003944:	4413      	add	r3, r2
 8003946:	3355      	adds	r3, #85	; 0x55
 8003948:	4602      	mov	r2, r0
 800394a:	701a      	strb	r2, [r3, #0]
 800394c:	e09f      	b.n	8003a8e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	212c      	movs	r1, #44	; 0x2c
 8003954:	fb01 f303 	mul.w	r3, r1, r3
 8003958:	4413      	add	r3, r2
 800395a:	3361      	adds	r3, #97	; 0x61
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	2b03      	cmp	r3, #3
 8003960:	d109      	bne.n	8003976 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	212c      	movs	r1, #44	; 0x2c
 8003968:	fb01 f303 	mul.w	r3, r1, r3
 800396c:	4413      	add	r3, r2
 800396e:	3360      	adds	r3, #96	; 0x60
 8003970:	2202      	movs	r2, #2
 8003972:	701a      	strb	r2, [r3, #0]
 8003974:	e08b      	b.n	8003a8e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	212c      	movs	r1, #44	; 0x2c
 800397c:	fb01 f303 	mul.w	r3, r1, r3
 8003980:	4413      	add	r3, r2
 8003982:	3361      	adds	r3, #97	; 0x61
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	2b04      	cmp	r3, #4
 8003988:	d109      	bne.n	800399e <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	212c      	movs	r1, #44	; 0x2c
 8003990:	fb01 f303 	mul.w	r3, r1, r3
 8003994:	4413      	add	r3, r2
 8003996:	3360      	adds	r3, #96	; 0x60
 8003998:	2202      	movs	r2, #2
 800399a:	701a      	strb	r2, [r3, #0]
 800399c:	e077      	b.n	8003a8e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	212c      	movs	r1, #44	; 0x2c
 80039a4:	fb01 f303 	mul.w	r3, r1, r3
 80039a8:	4413      	add	r3, r2
 80039aa:	3361      	adds	r3, #97	; 0x61
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	2b05      	cmp	r3, #5
 80039b0:	d109      	bne.n	80039c6 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	212c      	movs	r1, #44	; 0x2c
 80039b8:	fb01 f303 	mul.w	r3, r1, r3
 80039bc:	4413      	add	r3, r2
 80039be:	3360      	adds	r3, #96	; 0x60
 80039c0:	2205      	movs	r2, #5
 80039c2:	701a      	strb	r2, [r3, #0]
 80039c4:	e063      	b.n	8003a8e <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	212c      	movs	r1, #44	; 0x2c
 80039cc:	fb01 f303 	mul.w	r3, r1, r3
 80039d0:	4413      	add	r3, r2
 80039d2:	3361      	adds	r3, #97	; 0x61
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	2b06      	cmp	r3, #6
 80039d8:	d009      	beq.n	80039ee <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	212c      	movs	r1, #44	; 0x2c
 80039e0:	fb01 f303 	mul.w	r3, r1, r3
 80039e4:	4413      	add	r3, r2
 80039e6:	3361      	adds	r3, #97	; 0x61
 80039e8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80039ea:	2b08      	cmp	r3, #8
 80039ec:	d14f      	bne.n	8003a8e <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	212c      	movs	r1, #44	; 0x2c
 80039f4:	fb01 f303 	mul.w	r3, r1, r3
 80039f8:	4413      	add	r3, r2
 80039fa:	335c      	adds	r3, #92	; 0x5c
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	1c5a      	adds	r2, r3, #1
 8003a00:	6879      	ldr	r1, [r7, #4]
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	202c      	movs	r0, #44	; 0x2c
 8003a06:	fb00 f303 	mul.w	r3, r0, r3
 8003a0a:	440b      	add	r3, r1
 8003a0c:	335c      	adds	r3, #92	; 0x5c
 8003a0e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	212c      	movs	r1, #44	; 0x2c
 8003a16:	fb01 f303 	mul.w	r3, r1, r3
 8003a1a:	4413      	add	r3, r2
 8003a1c:	335c      	adds	r3, #92	; 0x5c
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d912      	bls.n	8003a4a <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	212c      	movs	r1, #44	; 0x2c
 8003a2a:	fb01 f303 	mul.w	r3, r1, r3
 8003a2e:	4413      	add	r3, r2
 8003a30:	335c      	adds	r3, #92	; 0x5c
 8003a32:	2200      	movs	r2, #0
 8003a34:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	212c      	movs	r1, #44	; 0x2c
 8003a3c:	fb01 f303 	mul.w	r3, r1, r3
 8003a40:	4413      	add	r3, r2
 8003a42:	3360      	adds	r3, #96	; 0x60
 8003a44:	2204      	movs	r2, #4
 8003a46:	701a      	strb	r2, [r3, #0]
 8003a48:	e021      	b.n	8003a8e <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	212c      	movs	r1, #44	; 0x2c
 8003a50:	fb01 f303 	mul.w	r3, r1, r3
 8003a54:	4413      	add	r3, r2
 8003a56:	3360      	adds	r3, #96	; 0x60
 8003a58:	2202      	movs	r2, #2
 8003a5a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a72:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a7a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a88:	461a      	mov	r2, r3
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	015a      	lsls	r2, r3, #5
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	4413      	add	r3, r2
 8003a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	b2d9      	uxtb	r1, r3
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	202c      	movs	r0, #44	; 0x2c
 8003aaa:	fb00 f303 	mul.w	r3, r0, r3
 8003aae:	4413      	add	r3, r2
 8003ab0:	3360      	adds	r3, #96	; 0x60
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f009 fd48 	bl	800d54c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003abc:	bf00      	nop
 8003abe:	3720      	adds	r7, #32
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b08a      	sub	sp, #40	; 0x28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	f003 030f 	and.w	r3, r3, #15
 8003ae4:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	0c5b      	lsrs	r3, r3, #17
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	091b      	lsrs	r3, r3, #4
 8003af4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003af8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d004      	beq.n	8003b0a <HCD_RXQLVL_IRQHandler+0x46>
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	2b05      	cmp	r3, #5
 8003b04:	f000 80a9 	beq.w	8003c5a <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003b08:	e0aa      	b.n	8003c60 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 80a6 	beq.w	8003c5e <HCD_RXQLVL_IRQHandler+0x19a>
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	212c      	movs	r1, #44	; 0x2c
 8003b18:	fb01 f303 	mul.w	r3, r1, r3
 8003b1c:	4413      	add	r3, r2
 8003b1e:	3344      	adds	r3, #68	; 0x44
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 809b 	beq.w	8003c5e <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	212c      	movs	r1, #44	; 0x2c
 8003b2e:	fb01 f303 	mul.w	r3, r1, r3
 8003b32:	4413      	add	r3, r2
 8003b34:	3350      	adds	r3, #80	; 0x50
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	441a      	add	r2, r3
 8003b3c:	6879      	ldr	r1, [r7, #4]
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	202c      	movs	r0, #44	; 0x2c
 8003b42:	fb00 f303 	mul.w	r3, r0, r3
 8003b46:	440b      	add	r3, r1
 8003b48:	334c      	adds	r3, #76	; 0x4c
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d87a      	bhi.n	8003c46 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6818      	ldr	r0, [r3, #0]
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	212c      	movs	r1, #44	; 0x2c
 8003b5a:	fb01 f303 	mul.w	r3, r1, r3
 8003b5e:	4413      	add	r3, r2
 8003b60:	3344      	adds	r3, #68	; 0x44
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	b292      	uxth	r2, r2
 8003b68:	4619      	mov	r1, r3
 8003b6a:	f002 f8ef 	bl	8005d4c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	212c      	movs	r1, #44	; 0x2c
 8003b74:	fb01 f303 	mul.w	r3, r1, r3
 8003b78:	4413      	add	r3, r2
 8003b7a:	3344      	adds	r3, #68	; 0x44
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	441a      	add	r2, r3
 8003b82:	6879      	ldr	r1, [r7, #4]
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	202c      	movs	r0, #44	; 0x2c
 8003b88:	fb00 f303 	mul.w	r3, r0, r3
 8003b8c:	440b      	add	r3, r1
 8003b8e:	3344      	adds	r3, #68	; 0x44
 8003b90:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	212c      	movs	r1, #44	; 0x2c
 8003b98:	fb01 f303 	mul.w	r3, r1, r3
 8003b9c:	4413      	add	r3, r2
 8003b9e:	3350      	adds	r3, #80	; 0x50
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	441a      	add	r2, r3
 8003ba6:	6879      	ldr	r1, [r7, #4]
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	202c      	movs	r0, #44	; 0x2c
 8003bac:	fb00 f303 	mul.w	r3, r0, r3
 8003bb0:	440b      	add	r3, r1
 8003bb2:	3350      	adds	r3, #80	; 0x50
 8003bb4:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	015a      	lsls	r2, r3, #5
 8003bba:	6a3b      	ldr	r3, [r7, #32]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	0cdb      	lsrs	r3, r3, #19
 8003bc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bca:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	212c      	movs	r1, #44	; 0x2c
 8003bd2:	fb01 f303 	mul.w	r3, r1, r3
 8003bd6:	4413      	add	r3, r2
 8003bd8:	3340      	adds	r3, #64	; 0x40
 8003bda:	881b      	ldrh	r3, [r3, #0]
 8003bdc:	461a      	mov	r2, r3
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d13c      	bne.n	8003c5e <HCD_RXQLVL_IRQHandler+0x19a>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d039      	beq.n	8003c5e <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	015a      	lsls	r2, r3, #5
 8003bee:	6a3b      	ldr	r3, [r7, #32]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c00:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c08:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	015a      	lsls	r2, r3, #5
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	4413      	add	r3, r2
 8003c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c16:	461a      	mov	r2, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	212c      	movs	r1, #44	; 0x2c
 8003c22:	fb01 f303 	mul.w	r3, r1, r3
 8003c26:	4413      	add	r3, r2
 8003c28:	3354      	adds	r3, #84	; 0x54
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	f083 0301 	eor.w	r3, r3, #1
 8003c30:	b2d8      	uxtb	r0, r3
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	212c      	movs	r1, #44	; 0x2c
 8003c38:	fb01 f303 	mul.w	r3, r1, r3
 8003c3c:	4413      	add	r3, r2
 8003c3e:	3354      	adds	r3, #84	; 0x54
 8003c40:	4602      	mov	r2, r0
 8003c42:	701a      	strb	r2, [r3, #0]
      break;
 8003c44:	e00b      	b.n	8003c5e <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	212c      	movs	r1, #44	; 0x2c
 8003c4c:	fb01 f303 	mul.w	r3, r1, r3
 8003c50:	4413      	add	r3, r2
 8003c52:	3360      	adds	r3, #96	; 0x60
 8003c54:	2204      	movs	r2, #4
 8003c56:	701a      	strb	r2, [r3, #0]
      break;
 8003c58:	e001      	b.n	8003c5e <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003c5a:	bf00      	nop
 8003c5c:	e000      	b.n	8003c60 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003c5e:	bf00      	nop
  }
}
 8003c60:	bf00      	nop
 8003c62:	3728      	adds	r7, #40	; 0x28
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003c94:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d10b      	bne.n	8003cb8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d102      	bne.n	8003cb0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f009 fc32 	bl	800d514 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	f043 0302 	orr.w	r3, r3, #2
 8003cb6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f003 0308 	and.w	r3, r3, #8
 8003cbe:	2b08      	cmp	r3, #8
 8003cc0:	d132      	bne.n	8003d28 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	f043 0308 	orr.w	r3, r3, #8
 8003cc8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f003 0304 	and.w	r3, r3, #4
 8003cd0:	2b04      	cmp	r3, #4
 8003cd2:	d126      	bne.n	8003d22 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d113      	bne.n	8003d04 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003ce2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ce6:	d106      	bne.n	8003cf6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2102      	movs	r1, #2
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f002 f980 	bl	8005ff4 <USB_InitFSLSPClkSel>
 8003cf4:	e011      	b.n	8003d1a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f002 f979 	bl	8005ff4 <USB_InitFSLSPClkSel>
 8003d02:	e00a      	b.n	8003d1a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d106      	bne.n	8003d1a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d12:	461a      	mov	r2, r3
 8003d14:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003d18:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f009 fc28 	bl	800d570 <HAL_HCD_PortEnabled_Callback>
 8003d20:	e002      	b.n	8003d28 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f009 fc32 	bl	800d58c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f003 0320 	and.w	r3, r3, #32
 8003d2e:	2b20      	cmp	r3, #32
 8003d30:	d103      	bne.n	8003d3a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	f043 0320 	orr.w	r3, r3, #32
 8003d38:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d40:	461a      	mov	r2, r3
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	6013      	str	r3, [r2, #0]
}
 8003d46:	bf00      	nop
 8003d48:	3718      	adds	r7, #24
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
	...

08003d50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e12b      	b.n	8003fba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d106      	bne.n	8003d7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7fc ffc6 	bl	8000d08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2224      	movs	r2, #36	; 0x24
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 0201 	bic.w	r2, r2, #1
 8003d92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003da2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003db2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003db4:	f000 fa02 	bl	80041bc <HAL_RCC_GetPCLK1Freq>
 8003db8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	4a81      	ldr	r2, [pc, #516]	; (8003fc4 <HAL_I2C_Init+0x274>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d807      	bhi.n	8003dd4 <HAL_I2C_Init+0x84>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4a80      	ldr	r2, [pc, #512]	; (8003fc8 <HAL_I2C_Init+0x278>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	bf94      	ite	ls
 8003dcc:	2301      	movls	r3, #1
 8003dce:	2300      	movhi	r3, #0
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	e006      	b.n	8003de2 <HAL_I2C_Init+0x92>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4a7d      	ldr	r2, [pc, #500]	; (8003fcc <HAL_I2C_Init+0x27c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	bf94      	ite	ls
 8003ddc:	2301      	movls	r3, #1
 8003dde:	2300      	movhi	r3, #0
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e0e7      	b.n	8003fba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	4a78      	ldr	r2, [pc, #480]	; (8003fd0 <HAL_I2C_Init+0x280>)
 8003dee:	fba2 2303 	umull	r2, r3, r2, r3
 8003df2:	0c9b      	lsrs	r3, r3, #18
 8003df4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	4a6a      	ldr	r2, [pc, #424]	; (8003fc4 <HAL_I2C_Init+0x274>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d802      	bhi.n	8003e24 <HAL_I2C_Init+0xd4>
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	3301      	adds	r3, #1
 8003e22:	e009      	b.n	8003e38 <HAL_I2C_Init+0xe8>
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e2a:	fb02 f303 	mul.w	r3, r2, r3
 8003e2e:	4a69      	ldr	r2, [pc, #420]	; (8003fd4 <HAL_I2C_Init+0x284>)
 8003e30:	fba2 2303 	umull	r2, r3, r2, r3
 8003e34:	099b      	lsrs	r3, r3, #6
 8003e36:	3301      	adds	r3, #1
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	6812      	ldr	r2, [r2, #0]
 8003e3c:	430b      	orrs	r3, r1
 8003e3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	495c      	ldr	r1, [pc, #368]	; (8003fc4 <HAL_I2C_Init+0x274>)
 8003e54:	428b      	cmp	r3, r1
 8003e56:	d819      	bhi.n	8003e8c <HAL_I2C_Init+0x13c>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	1e59      	subs	r1, r3, #1
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	005b      	lsls	r3, r3, #1
 8003e62:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e66:	1c59      	adds	r1, r3, #1
 8003e68:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e6c:	400b      	ands	r3, r1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00a      	beq.n	8003e88 <HAL_I2C_Init+0x138>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	1e59      	subs	r1, r3, #1
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e80:	3301      	adds	r3, #1
 8003e82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e86:	e051      	b.n	8003f2c <HAL_I2C_Init+0x1dc>
 8003e88:	2304      	movs	r3, #4
 8003e8a:	e04f      	b.n	8003f2c <HAL_I2C_Init+0x1dc>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d111      	bne.n	8003eb8 <HAL_I2C_Init+0x168>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	1e58      	subs	r0, r3, #1
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6859      	ldr	r1, [r3, #4]
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	440b      	add	r3, r1
 8003ea2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	bf0c      	ite	eq
 8003eb0:	2301      	moveq	r3, #1
 8003eb2:	2300      	movne	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	e012      	b.n	8003ede <HAL_I2C_Init+0x18e>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	1e58      	subs	r0, r3, #1
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6859      	ldr	r1, [r3, #4]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	0099      	lsls	r1, r3, #2
 8003ec8:	440b      	add	r3, r1
 8003eca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ece:	3301      	adds	r3, #1
 8003ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	bf0c      	ite	eq
 8003ed8:	2301      	moveq	r3, #1
 8003eda:	2300      	movne	r3, #0
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <HAL_I2C_Init+0x196>
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e022      	b.n	8003f2c <HAL_I2C_Init+0x1dc>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10e      	bne.n	8003f0c <HAL_I2C_Init+0x1bc>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	1e58      	subs	r0, r3, #1
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6859      	ldr	r1, [r3, #4]
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	440b      	add	r3, r1
 8003efc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f00:	3301      	adds	r3, #1
 8003f02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f0a:	e00f      	b.n	8003f2c <HAL_I2C_Init+0x1dc>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	1e58      	subs	r0, r3, #1
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6859      	ldr	r1, [r3, #4]
 8003f14:	460b      	mov	r3, r1
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	0099      	lsls	r1, r3, #2
 8003f1c:	440b      	add	r3, r1
 8003f1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f22:	3301      	adds	r3, #1
 8003f24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f2c:	6879      	ldr	r1, [r7, #4]
 8003f2e:	6809      	ldr	r1, [r1, #0]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	69da      	ldr	r2, [r3, #28]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	431a      	orrs	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	6911      	ldr	r1, [r2, #16]
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	68d2      	ldr	r2, [r2, #12]
 8003f66:	4311      	orrs	r1, r2
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	6812      	ldr	r2, [r2, #0]
 8003f6c:	430b      	orrs	r3, r1
 8003f6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	695a      	ldr	r2, [r3, #20]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	431a      	orrs	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0201 	orr.w	r2, r2, #1
 8003f9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	000186a0 	.word	0x000186a0
 8003fc8:	001e847f 	.word	0x001e847f
 8003fcc:	003d08ff 	.word	0x003d08ff
 8003fd0:	431bde83 	.word	0x431bde83
 8003fd4:	10624dd3 	.word	0x10624dd3

08003fd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d101      	bne.n	8003fec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e0cc      	b.n	8004186 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fec:	4b68      	ldr	r3, [pc, #416]	; (8004190 <HAL_RCC_ClockConfig+0x1b8>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 030f 	and.w	r3, r3, #15
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d90c      	bls.n	8004014 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ffa:	4b65      	ldr	r3, [pc, #404]	; (8004190 <HAL_RCC_ClockConfig+0x1b8>)
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	b2d2      	uxtb	r2, r2
 8004000:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004002:	4b63      	ldr	r3, [pc, #396]	; (8004190 <HAL_RCC_ClockConfig+0x1b8>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 030f 	and.w	r3, r3, #15
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	429a      	cmp	r2, r3
 800400e:	d001      	beq.n	8004014 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e0b8      	b.n	8004186 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d020      	beq.n	8004062 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0304 	and.w	r3, r3, #4
 8004028:	2b00      	cmp	r3, #0
 800402a:	d005      	beq.n	8004038 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800402c:	4b59      	ldr	r3, [pc, #356]	; (8004194 <HAL_RCC_ClockConfig+0x1bc>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	4a58      	ldr	r2, [pc, #352]	; (8004194 <HAL_RCC_ClockConfig+0x1bc>)
 8004032:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004036:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0308 	and.w	r3, r3, #8
 8004040:	2b00      	cmp	r3, #0
 8004042:	d005      	beq.n	8004050 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004044:	4b53      	ldr	r3, [pc, #332]	; (8004194 <HAL_RCC_ClockConfig+0x1bc>)
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	4a52      	ldr	r2, [pc, #328]	; (8004194 <HAL_RCC_ClockConfig+0x1bc>)
 800404a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800404e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004050:	4b50      	ldr	r3, [pc, #320]	; (8004194 <HAL_RCC_ClockConfig+0x1bc>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	494d      	ldr	r1, [pc, #308]	; (8004194 <HAL_RCC_ClockConfig+0x1bc>)
 800405e:	4313      	orrs	r3, r2
 8004060:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	d044      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d107      	bne.n	8004086 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004076:	4b47      	ldr	r3, [pc, #284]	; (8004194 <HAL_RCC_ClockConfig+0x1bc>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d119      	bne.n	80040b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e07f      	b.n	8004186 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	2b02      	cmp	r3, #2
 800408c:	d003      	beq.n	8004096 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004092:	2b03      	cmp	r3, #3
 8004094:	d107      	bne.n	80040a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004096:	4b3f      	ldr	r3, [pc, #252]	; (8004194 <HAL_RCC_ClockConfig+0x1bc>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d109      	bne.n	80040b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e06f      	b.n	8004186 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040a6:	4b3b      	ldr	r3, [pc, #236]	; (8004194 <HAL_RCC_ClockConfig+0x1bc>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e067      	b.n	8004186 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040b6:	4b37      	ldr	r3, [pc, #220]	; (8004194 <HAL_RCC_ClockConfig+0x1bc>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f023 0203 	bic.w	r2, r3, #3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	4934      	ldr	r1, [pc, #208]	; (8004194 <HAL_RCC_ClockConfig+0x1bc>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040c8:	f7fd f8ca 	bl	8001260 <HAL_GetTick>
 80040cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ce:	e00a      	b.n	80040e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040d0:	f7fd f8c6 	bl	8001260 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	f241 3288 	movw	r2, #5000	; 0x1388
 80040de:	4293      	cmp	r3, r2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e04f      	b.n	8004186 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040e6:	4b2b      	ldr	r3, [pc, #172]	; (8004194 <HAL_RCC_ClockConfig+0x1bc>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f003 020c 	and.w	r2, r3, #12
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d1eb      	bne.n	80040d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040f8:	4b25      	ldr	r3, [pc, #148]	; (8004190 <HAL_RCC_ClockConfig+0x1b8>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 030f 	and.w	r3, r3, #15
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	429a      	cmp	r2, r3
 8004104:	d20c      	bcs.n	8004120 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004106:	4b22      	ldr	r3, [pc, #136]	; (8004190 <HAL_RCC_ClockConfig+0x1b8>)
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	b2d2      	uxtb	r2, r2
 800410c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800410e:	4b20      	ldr	r3, [pc, #128]	; (8004190 <HAL_RCC_ClockConfig+0x1b8>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 030f 	and.w	r3, r3, #15
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	429a      	cmp	r2, r3
 800411a:	d001      	beq.n	8004120 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e032      	b.n	8004186 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	2b00      	cmp	r3, #0
 800412a:	d008      	beq.n	800413e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800412c:	4b19      	ldr	r3, [pc, #100]	; (8004194 <HAL_RCC_ClockConfig+0x1bc>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	4916      	ldr	r1, [pc, #88]	; (8004194 <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	4313      	orrs	r3, r2
 800413c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0308 	and.w	r3, r3, #8
 8004146:	2b00      	cmp	r3, #0
 8004148:	d009      	beq.n	800415e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800414a:	4b12      	ldr	r3, [pc, #72]	; (8004194 <HAL_RCC_ClockConfig+0x1bc>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	490e      	ldr	r1, [pc, #56]	; (8004194 <HAL_RCC_ClockConfig+0x1bc>)
 800415a:	4313      	orrs	r3, r2
 800415c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800415e:	f000 fbb1 	bl	80048c4 <HAL_RCC_GetSysClockFreq>
 8004162:	4602      	mov	r2, r0
 8004164:	4b0b      	ldr	r3, [pc, #44]	; (8004194 <HAL_RCC_ClockConfig+0x1bc>)
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	091b      	lsrs	r3, r3, #4
 800416a:	f003 030f 	and.w	r3, r3, #15
 800416e:	490a      	ldr	r1, [pc, #40]	; (8004198 <HAL_RCC_ClockConfig+0x1c0>)
 8004170:	5ccb      	ldrb	r3, [r1, r3]
 8004172:	fa22 f303 	lsr.w	r3, r2, r3
 8004176:	4a09      	ldr	r2, [pc, #36]	; (800419c <HAL_RCC_ClockConfig+0x1c4>)
 8004178:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800417a:	4b09      	ldr	r3, [pc, #36]	; (80041a0 <HAL_RCC_ClockConfig+0x1c8>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4618      	mov	r0, r3
 8004180:	f7fc ff56 	bl	8001030 <HAL_InitTick>

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	40023c00 	.word	0x40023c00
 8004194:	40023800 	.word	0x40023800
 8004198:	0800dce0 	.word	0x0800dce0
 800419c:	20000000 	.word	0x20000000
 80041a0:	20000004 	.word	0x20000004

080041a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041a8:	4b03      	ldr	r3, [pc, #12]	; (80041b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80041aa:	681b      	ldr	r3, [r3, #0]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	20000000 	.word	0x20000000

080041bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041c0:	f7ff fff0 	bl	80041a4 <HAL_RCC_GetHCLKFreq>
 80041c4:	4602      	mov	r2, r0
 80041c6:	4b05      	ldr	r3, [pc, #20]	; (80041dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	0a9b      	lsrs	r3, r3, #10
 80041cc:	f003 0307 	and.w	r3, r3, #7
 80041d0:	4903      	ldr	r1, [pc, #12]	; (80041e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041d2:	5ccb      	ldrb	r3, [r1, r3]
 80041d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041d8:	4618      	mov	r0, r3
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	40023800 	.word	0x40023800
 80041e0:	0800dcf0 	.word	0x0800dcf0

080041e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80041e8:	f7ff ffdc 	bl	80041a4 <HAL_RCC_GetHCLKFreq>
 80041ec:	4602      	mov	r2, r0
 80041ee:	4b05      	ldr	r3, [pc, #20]	; (8004204 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	0b5b      	lsrs	r3, r3, #13
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	4903      	ldr	r1, [pc, #12]	; (8004208 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041fa:	5ccb      	ldrb	r3, [r1, r3]
 80041fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004200:	4618      	mov	r0, r3
 8004202:	bd80      	pop	{r7, pc}
 8004204:	40023800 	.word	0x40023800
 8004208:	0800dcf0 	.word	0x0800dcf0

0800420c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	220f      	movs	r2, #15
 800421a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800421c:	4b12      	ldr	r3, [pc, #72]	; (8004268 <HAL_RCC_GetClockConfig+0x5c>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f003 0203 	and.w	r2, r3, #3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004228:	4b0f      	ldr	r3, [pc, #60]	; (8004268 <HAL_RCC_GetClockConfig+0x5c>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004234:	4b0c      	ldr	r3, [pc, #48]	; (8004268 <HAL_RCC_GetClockConfig+0x5c>)
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004240:	4b09      	ldr	r3, [pc, #36]	; (8004268 <HAL_RCC_GetClockConfig+0x5c>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	08db      	lsrs	r3, r3, #3
 8004246:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800424e:	4b07      	ldr	r3, [pc, #28]	; (800426c <HAL_RCC_GetClockConfig+0x60>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 020f 	and.w	r2, r3, #15
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	601a      	str	r2, [r3, #0]
}
 800425a:	bf00      	nop
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	40023800 	.word	0x40023800
 800426c:	40023c00 	.word	0x40023c00

08004270 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b08c      	sub	sp, #48	; 0x30
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004278:	2300      	movs	r3, #0
 800427a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800427c:	2300      	movs	r3, #0
 800427e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8004280:	2300      	movs	r3, #0
 8004282:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8004284:	2300      	movs	r3, #0
 8004286:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8004288:	2300      	movs	r3, #0
 800428a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800428c:	2300      	movs	r3, #0
 800428e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004290:	2300      	movs	r3, #0
 8004292:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8004294:	2300      	movs	r3, #0
 8004296:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8004298:	2300      	movs	r3, #0
 800429a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d010      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80042a8:	4b6f      	ldr	r3, [pc, #444]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042ae:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b6:	496c      	ldr	r1, [pc, #432]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80042c6:	2301      	movs	r3, #1
 80042c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d010      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80042d6:	4b64      	ldr	r3, [pc, #400]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042dc:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e4:	4960      	ldr	r1, [pc, #384]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d101      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80042f4:	2301      	movs	r3, #1
 80042f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b00      	cmp	r3, #0
 8004302:	d017      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004304:	4b58      	ldr	r3, [pc, #352]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004306:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800430a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004312:	4955      	ldr	r1, [pc, #340]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004314:	4313      	orrs	r3, r2
 8004316:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004322:	d101      	bne.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004324:	2301      	movs	r3, #1
 8004326:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004330:	2301      	movs	r3, #1
 8004332:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0308 	and.w	r3, r3, #8
 800433c:	2b00      	cmp	r3, #0
 800433e:	d017      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004340:	4b49      	ldr	r3, [pc, #292]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004342:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004346:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800434e:	4946      	ldr	r1, [pc, #280]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004350:	4313      	orrs	r3, r2
 8004352:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800435a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800435e:	d101      	bne.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004360:	2301      	movs	r3, #1
 8004362:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004368:	2b00      	cmp	r3, #0
 800436a:	d101      	bne.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800436c:	2301      	movs	r3, #1
 800436e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0320 	and.w	r3, r3, #32
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 808a 	beq.w	8004492 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800437e:	2300      	movs	r3, #0
 8004380:	60bb      	str	r3, [r7, #8]
 8004382:	4b39      	ldr	r3, [pc, #228]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	4a38      	ldr	r2, [pc, #224]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800438c:	6413      	str	r3, [r2, #64]	; 0x40
 800438e:	4b36      	ldr	r3, [pc, #216]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004396:	60bb      	str	r3, [r7, #8]
 8004398:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800439a:	4b34      	ldr	r3, [pc, #208]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a33      	ldr	r2, [pc, #204]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80043a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043a4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043a6:	f7fc ff5b 	bl	8001260 <HAL_GetTick>
 80043aa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043ac:	e008      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80043ae:	f7fc ff57 	bl	8001260 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d901      	bls.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e278      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043c0:	4b2a      	ldr	r3, [pc, #168]	; (800446c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d0f0      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043cc:	4b26      	ldr	r3, [pc, #152]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80043ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043d4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043d6:	6a3b      	ldr	r3, [r7, #32]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d02f      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e4:	6a3a      	ldr	r2, [r7, #32]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d028      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043ea:	4b1f      	ldr	r3, [pc, #124]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80043ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043f2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043f4:	4b1e      	ldr	r3, [pc, #120]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80043f6:	2201      	movs	r2, #1
 80043f8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043fa:	4b1d      	ldr	r3, [pc, #116]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004400:	4a19      	ldr	r2, [pc, #100]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004402:	6a3b      	ldr	r3, [r7, #32]
 8004404:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004406:	4b18      	ldr	r3, [pc, #96]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b01      	cmp	r3, #1
 8004410:	d114      	bne.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004412:	f7fc ff25 	bl	8001260 <HAL_GetTick>
 8004416:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004418:	e00a      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800441a:	f7fc ff21 	bl	8001260 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	f241 3288 	movw	r2, #5000	; 0x1388
 8004428:	4293      	cmp	r3, r2
 800442a:	d901      	bls.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e240      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004430:	4b0d      	ldr	r3, [pc, #52]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d0ee      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004440:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004444:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004448:	d114      	bne.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800444a:	4b07      	ldr	r3, [pc, #28]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800445a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800445e:	4902      	ldr	r1, [pc, #8]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004460:	4313      	orrs	r3, r2
 8004462:	608b      	str	r3, [r1, #8]
 8004464:	e00c      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004466:	bf00      	nop
 8004468:	40023800 	.word	0x40023800
 800446c:	40007000 	.word	0x40007000
 8004470:	42470e40 	.word	0x42470e40
 8004474:	4b4a      	ldr	r3, [pc, #296]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	4a49      	ldr	r2, [pc, #292]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800447a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800447e:	6093      	str	r3, [r2, #8]
 8004480:	4b47      	ldr	r3, [pc, #284]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004482:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800448c:	4944      	ldr	r1, [pc, #272]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800448e:	4313      	orrs	r3, r2
 8004490:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0310 	and.w	r3, r3, #16
 800449a:	2b00      	cmp	r3, #0
 800449c:	d004      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80044a4:	4b3f      	ldr	r3, [pc, #252]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80044a6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00a      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80044b4:	4b3a      	ldr	r3, [pc, #232]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80044b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044c2:	4937      	ldr	r1, [pc, #220]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00a      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80044d6:	4b32      	ldr	r3, [pc, #200]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80044d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044dc:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044e4:	492e      	ldr	r1, [pc, #184]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d011      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80044f8:	4b29      	ldr	r3, [pc, #164]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80044fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044fe:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004506:	4926      	ldr	r1, [pc, #152]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004508:	4313      	orrs	r3, r2
 800450a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004512:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004516:	d101      	bne.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004518:	2301      	movs	r3, #1
 800451a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00a      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004528:	4b1d      	ldr	r3, [pc, #116]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800452a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800452e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004536:	491a      	ldr	r1, [pc, #104]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004538:	4313      	orrs	r3, r2
 800453a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004546:	2b00      	cmp	r3, #0
 8004548:	d011      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800454a:	4b15      	ldr	r3, [pc, #84]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800454c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004550:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004558:	4911      	ldr	r1, [pc, #68]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800455a:	4313      	orrs	r3, r2
 800455c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004564:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004568:	d101      	bne.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800456a:	2301      	movs	r3, #1
 800456c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800456e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004570:	2b01      	cmp	r3, #1
 8004572:	d005      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800457c:	f040 80ff 	bne.w	800477e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004580:	4b09      	ldr	r3, [pc, #36]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004582:	2200      	movs	r2, #0
 8004584:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004586:	f7fc fe6b 	bl	8001260 <HAL_GetTick>
 800458a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800458c:	e00e      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800458e:	f7fc fe67 	bl	8001260 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	2b02      	cmp	r3, #2
 800459a:	d907      	bls.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e188      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80045a0:	40023800 	.word	0x40023800
 80045a4:	424711e0 	.word	0x424711e0
 80045a8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045ac:	4b7e      	ldr	r3, [pc, #504]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1ea      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d003      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d009      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d028      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d124      	bne.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80045e0:	4b71      	ldr	r3, [pc, #452]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80045e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045e6:	0c1b      	lsrs	r3, r3, #16
 80045e8:	f003 0303 	and.w	r3, r3, #3
 80045ec:	3301      	adds	r3, #1
 80045ee:	005b      	lsls	r3, r3, #1
 80045f0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80045f2:	4b6d      	ldr	r3, [pc, #436]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80045f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045f8:	0e1b      	lsrs	r3, r3, #24
 80045fa:	f003 030f 	and.w	r3, r3, #15
 80045fe:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	019b      	lsls	r3, r3, #6
 800460a:	431a      	orrs	r2, r3
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	085b      	lsrs	r3, r3, #1
 8004610:	3b01      	subs	r3, #1
 8004612:	041b      	lsls	r3, r3, #16
 8004614:	431a      	orrs	r2, r3
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	061b      	lsls	r3, r3, #24
 800461a:	431a      	orrs	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	071b      	lsls	r3, r3, #28
 8004622:	4961      	ldr	r1, [pc, #388]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004624:	4313      	orrs	r3, r2
 8004626:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0304 	and.w	r3, r3, #4
 8004632:	2b00      	cmp	r3, #0
 8004634:	d004      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800463e:	d00a      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004648:	2b00      	cmp	r3, #0
 800464a:	d035      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004650:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004654:	d130      	bne.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004656:	4b54      	ldr	r3, [pc, #336]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800465c:	0c1b      	lsrs	r3, r3, #16
 800465e:	f003 0303 	and.w	r3, r3, #3
 8004662:	3301      	adds	r3, #1
 8004664:	005b      	lsls	r3, r3, #1
 8004666:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004668:	4b4f      	ldr	r3, [pc, #316]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800466a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800466e:	0f1b      	lsrs	r3, r3, #28
 8004670:	f003 0307 	and.w	r3, r3, #7
 8004674:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685a      	ldr	r2, [r3, #4]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	019b      	lsls	r3, r3, #6
 8004680:	431a      	orrs	r2, r3
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	085b      	lsrs	r3, r3, #1
 8004686:	3b01      	subs	r3, #1
 8004688:	041b      	lsls	r3, r3, #16
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	061b      	lsls	r3, r3, #24
 8004692:	431a      	orrs	r2, r3
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	071b      	lsls	r3, r3, #28
 8004698:	4943      	ldr	r1, [pc, #268]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800469a:	4313      	orrs	r3, r2
 800469c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80046a0:	4b41      	ldr	r3, [pc, #260]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80046a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046a6:	f023 021f 	bic.w	r2, r3, #31
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ae:	3b01      	subs	r3, #1
 80046b0:	493d      	ldr	r1, [pc, #244]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d029      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046cc:	d124      	bne.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80046ce:	4b36      	ldr	r3, [pc, #216]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80046d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046d4:	0c1b      	lsrs	r3, r3, #16
 80046d6:	f003 0303 	and.w	r3, r3, #3
 80046da:	3301      	adds	r3, #1
 80046dc:	005b      	lsls	r3, r3, #1
 80046de:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80046e0:	4b31      	ldr	r3, [pc, #196]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80046e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046e6:	0f1b      	lsrs	r3, r3, #28
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	019b      	lsls	r3, r3, #6
 80046f8:	431a      	orrs	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	085b      	lsrs	r3, r3, #1
 8004700:	3b01      	subs	r3, #1
 8004702:	041b      	lsls	r3, r3, #16
 8004704:	431a      	orrs	r2, r3
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	061b      	lsls	r3, r3, #24
 800470a:	431a      	orrs	r2, r3
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	071b      	lsls	r3, r3, #28
 8004710:	4925      	ldr	r1, [pc, #148]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004712:	4313      	orrs	r3, r2
 8004714:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004720:	2b00      	cmp	r3, #0
 8004722:	d016      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	019b      	lsls	r3, r3, #6
 800472e:	431a      	orrs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	085b      	lsrs	r3, r3, #1
 8004736:	3b01      	subs	r3, #1
 8004738:	041b      	lsls	r3, r3, #16
 800473a:	431a      	orrs	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	061b      	lsls	r3, r3, #24
 8004742:	431a      	orrs	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	071b      	lsls	r3, r3, #28
 800474a:	4917      	ldr	r1, [pc, #92]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800474c:	4313      	orrs	r3, r2
 800474e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004752:	4b16      	ldr	r3, [pc, #88]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004754:	2201      	movs	r2, #1
 8004756:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004758:	f7fc fd82 	bl	8001260 <HAL_GetTick>
 800475c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800475e:	e008      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004760:	f7fc fd7e 	bl	8001260 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d901      	bls.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e09f      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004772:	4b0d      	ldr	r3, [pc, #52]	; (80047a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d0f0      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800477e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004780:	2b01      	cmp	r3, #1
 8004782:	f040 8095 	bne.w	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004786:	4b0a      	ldr	r3, [pc, #40]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800478c:	f7fc fd68 	bl	8001260 <HAL_GetTick>
 8004790:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004792:	e00f      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004794:	f7fc fd64 	bl	8001260 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d908      	bls.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e085      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80047a6:	bf00      	nop
 80047a8:	40023800 	.word	0x40023800
 80047ac:	42470068 	.word	0x42470068
 80047b0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80047b4:	4b41      	ldr	r3, [pc, #260]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047c0:	d0e8      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0304 	and.w	r3, r3, #4
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d003      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d009      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d02b      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d127      	bne.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80047ea:	4b34      	ldr	r3, [pc, #208]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80047ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f0:	0c1b      	lsrs	r3, r3, #16
 80047f2:	f003 0303 	and.w	r3, r3, #3
 80047f6:	3301      	adds	r3, #1
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	699a      	ldr	r2, [r3, #24]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	69db      	ldr	r3, [r3, #28]
 8004804:	019b      	lsls	r3, r3, #6
 8004806:	431a      	orrs	r2, r3
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	085b      	lsrs	r3, r3, #1
 800480c:	3b01      	subs	r3, #1
 800480e:	041b      	lsls	r3, r3, #16
 8004810:	431a      	orrs	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	061b      	lsls	r3, r3, #24
 8004818:	4928      	ldr	r1, [pc, #160]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800481a:	4313      	orrs	r3, r2
 800481c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004820:	4b26      	ldr	r3, [pc, #152]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004822:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004826:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482e:	3b01      	subs	r3, #1
 8004830:	021b      	lsls	r3, r3, #8
 8004832:	4922      	ldr	r1, [pc, #136]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004834:	4313      	orrs	r3, r2
 8004836:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004842:	2b00      	cmp	r3, #0
 8004844:	d01d      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800484a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800484e:	d118      	bne.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004850:	4b1a      	ldr	r3, [pc, #104]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004856:	0e1b      	lsrs	r3, r3, #24
 8004858:	f003 030f 	and.w	r3, r3, #15
 800485c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	699a      	ldr	r2, [r3, #24]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	019b      	lsls	r3, r3, #6
 8004868:	431a      	orrs	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	085b      	lsrs	r3, r3, #1
 8004870:	3b01      	subs	r3, #1
 8004872:	041b      	lsls	r3, r3, #16
 8004874:	431a      	orrs	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	061b      	lsls	r3, r3, #24
 800487a:	4910      	ldr	r1, [pc, #64]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800487c:	4313      	orrs	r3, r2
 800487e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004882:	4b0f      	ldr	r3, [pc, #60]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004884:	2201      	movs	r2, #1
 8004886:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004888:	f7fc fcea 	bl	8001260 <HAL_GetTick>
 800488c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800488e:	e008      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004890:	f7fc fce6 	bl	8001260 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b02      	cmp	r3, #2
 800489c:	d901      	bls.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e007      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048a2:	4b06      	ldr	r3, [pc, #24]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048ae:	d1ef      	bne.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3730      	adds	r7, #48	; 0x30
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	40023800 	.word	0x40023800
 80048c0:	42470070 	.word	0x42470070

080048c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048c8:	b088      	sub	sp, #32
 80048ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80048d0:	2300      	movs	r3, #0
 80048d2:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80048d4:	2300      	movs	r3, #0
 80048d6:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80048d8:	2300      	movs	r3, #0
 80048da:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80048dc:	2300      	movs	r3, #0
 80048de:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048e0:	4bce      	ldr	r3, [pc, #824]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x358>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f003 030c 	and.w	r3, r3, #12
 80048e8:	2b0c      	cmp	r3, #12
 80048ea:	f200 818d 	bhi.w	8004c08 <HAL_RCC_GetSysClockFreq+0x344>
 80048ee:	a201      	add	r2, pc, #4	; (adr r2, 80048f4 <HAL_RCC_GetSysClockFreq+0x30>)
 80048f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f4:	08004929 	.word	0x08004929
 80048f8:	08004c09 	.word	0x08004c09
 80048fc:	08004c09 	.word	0x08004c09
 8004900:	08004c09 	.word	0x08004c09
 8004904:	0800492f 	.word	0x0800492f
 8004908:	08004c09 	.word	0x08004c09
 800490c:	08004c09 	.word	0x08004c09
 8004910:	08004c09 	.word	0x08004c09
 8004914:	08004935 	.word	0x08004935
 8004918:	08004c09 	.word	0x08004c09
 800491c:	08004c09 	.word	0x08004c09
 8004920:	08004c09 	.word	0x08004c09
 8004924:	08004aa9 	.word	0x08004aa9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004928:	4bbd      	ldr	r3, [pc, #756]	; (8004c20 <HAL_RCC_GetSysClockFreq+0x35c>)
 800492a:	61bb      	str	r3, [r7, #24]
       break;
 800492c:	e16f      	b.n	8004c0e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800492e:	4bbd      	ldr	r3, [pc, #756]	; (8004c24 <HAL_RCC_GetSysClockFreq+0x360>)
 8004930:	61bb      	str	r3, [r7, #24]
      break;
 8004932:	e16c      	b.n	8004c0e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004934:	4bb9      	ldr	r3, [pc, #740]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x358>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800493c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800493e:	4bb7      	ldr	r3, [pc, #732]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x358>)
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d053      	beq.n	80049f2 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800494a:	4bb4      	ldr	r3, [pc, #720]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x358>)
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	099b      	lsrs	r3, r3, #6
 8004950:	461a      	mov	r2, r3
 8004952:	f04f 0300 	mov.w	r3, #0
 8004956:	f240 10ff 	movw	r0, #511	; 0x1ff
 800495a:	f04f 0100 	mov.w	r1, #0
 800495e:	ea02 0400 	and.w	r4, r2, r0
 8004962:	603c      	str	r4, [r7, #0]
 8004964:	400b      	ands	r3, r1
 8004966:	607b      	str	r3, [r7, #4]
 8004968:	e9d7 4500 	ldrd	r4, r5, [r7]
 800496c:	4620      	mov	r0, r4
 800496e:	4629      	mov	r1, r5
 8004970:	f04f 0200 	mov.w	r2, #0
 8004974:	f04f 0300 	mov.w	r3, #0
 8004978:	014b      	lsls	r3, r1, #5
 800497a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800497e:	0142      	lsls	r2, r0, #5
 8004980:	4610      	mov	r0, r2
 8004982:	4619      	mov	r1, r3
 8004984:	4623      	mov	r3, r4
 8004986:	1ac0      	subs	r0, r0, r3
 8004988:	462b      	mov	r3, r5
 800498a:	eb61 0103 	sbc.w	r1, r1, r3
 800498e:	f04f 0200 	mov.w	r2, #0
 8004992:	f04f 0300 	mov.w	r3, #0
 8004996:	018b      	lsls	r3, r1, #6
 8004998:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800499c:	0182      	lsls	r2, r0, #6
 800499e:	1a12      	subs	r2, r2, r0
 80049a0:	eb63 0301 	sbc.w	r3, r3, r1
 80049a4:	f04f 0000 	mov.w	r0, #0
 80049a8:	f04f 0100 	mov.w	r1, #0
 80049ac:	00d9      	lsls	r1, r3, #3
 80049ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049b2:	00d0      	lsls	r0, r2, #3
 80049b4:	4602      	mov	r2, r0
 80049b6:	460b      	mov	r3, r1
 80049b8:	4621      	mov	r1, r4
 80049ba:	1852      	adds	r2, r2, r1
 80049bc:	4629      	mov	r1, r5
 80049be:	eb43 0101 	adc.w	r1, r3, r1
 80049c2:	460b      	mov	r3, r1
 80049c4:	f04f 0000 	mov.w	r0, #0
 80049c8:	f04f 0100 	mov.w	r1, #0
 80049cc:	0259      	lsls	r1, r3, #9
 80049ce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80049d2:	0250      	lsls	r0, r2, #9
 80049d4:	4602      	mov	r2, r0
 80049d6:	460b      	mov	r3, r1
 80049d8:	4610      	mov	r0, r2
 80049da:	4619      	mov	r1, r3
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	461a      	mov	r2, r3
 80049e0:	f04f 0300 	mov.w	r3, #0
 80049e4:	f7fb fc14 	bl	8000210 <__aeabi_uldivmod>
 80049e8:	4602      	mov	r2, r0
 80049ea:	460b      	mov	r3, r1
 80049ec:	4613      	mov	r3, r2
 80049ee:	61fb      	str	r3, [r7, #28]
 80049f0:	e04c      	b.n	8004a8c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049f2:	4b8a      	ldr	r3, [pc, #552]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x358>)
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	099b      	lsrs	r3, r3, #6
 80049f8:	461a      	mov	r2, r3
 80049fa:	f04f 0300 	mov.w	r3, #0
 80049fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a02:	f04f 0100 	mov.w	r1, #0
 8004a06:	ea02 0a00 	and.w	sl, r2, r0
 8004a0a:	ea03 0b01 	and.w	fp, r3, r1
 8004a0e:	4650      	mov	r0, sl
 8004a10:	4659      	mov	r1, fp
 8004a12:	f04f 0200 	mov.w	r2, #0
 8004a16:	f04f 0300 	mov.w	r3, #0
 8004a1a:	014b      	lsls	r3, r1, #5
 8004a1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a20:	0142      	lsls	r2, r0, #5
 8004a22:	4610      	mov	r0, r2
 8004a24:	4619      	mov	r1, r3
 8004a26:	ebb0 000a 	subs.w	r0, r0, sl
 8004a2a:	eb61 010b 	sbc.w	r1, r1, fp
 8004a2e:	f04f 0200 	mov.w	r2, #0
 8004a32:	f04f 0300 	mov.w	r3, #0
 8004a36:	018b      	lsls	r3, r1, #6
 8004a38:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a3c:	0182      	lsls	r2, r0, #6
 8004a3e:	1a12      	subs	r2, r2, r0
 8004a40:	eb63 0301 	sbc.w	r3, r3, r1
 8004a44:	f04f 0000 	mov.w	r0, #0
 8004a48:	f04f 0100 	mov.w	r1, #0
 8004a4c:	00d9      	lsls	r1, r3, #3
 8004a4e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a52:	00d0      	lsls	r0, r2, #3
 8004a54:	4602      	mov	r2, r0
 8004a56:	460b      	mov	r3, r1
 8004a58:	eb12 020a 	adds.w	r2, r2, sl
 8004a5c:	eb43 030b 	adc.w	r3, r3, fp
 8004a60:	f04f 0000 	mov.w	r0, #0
 8004a64:	f04f 0100 	mov.w	r1, #0
 8004a68:	0299      	lsls	r1, r3, #10
 8004a6a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004a6e:	0290      	lsls	r0, r2, #10
 8004a70:	4602      	mov	r2, r0
 8004a72:	460b      	mov	r3, r1
 8004a74:	4610      	mov	r0, r2
 8004a76:	4619      	mov	r1, r3
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	f04f 0300 	mov.w	r3, #0
 8004a80:	f7fb fbc6 	bl	8000210 <__aeabi_uldivmod>
 8004a84:	4602      	mov	r2, r0
 8004a86:	460b      	mov	r3, r1
 8004a88:	4613      	mov	r3, r2
 8004a8a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a8c:	4b63      	ldr	r3, [pc, #396]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x358>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	0c1b      	lsrs	r3, r3, #16
 8004a92:	f003 0303 	and.w	r3, r3, #3
 8004a96:	3301      	adds	r3, #1
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8004a9c:	69fa      	ldr	r2, [r7, #28]
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa4:	61bb      	str	r3, [r7, #24]
      break;
 8004aa6:	e0b2      	b.n	8004c0e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004aa8:	4b5c      	ldr	r3, [pc, #368]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x358>)
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ab0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ab2:	4b5a      	ldr	r3, [pc, #360]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x358>)
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d04d      	beq.n	8004b5a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004abe:	4b57      	ldr	r3, [pc, #348]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x358>)
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	099b      	lsrs	r3, r3, #6
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	f04f 0300 	mov.w	r3, #0
 8004aca:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004ace:	f04f 0100 	mov.w	r1, #0
 8004ad2:	ea02 0800 	and.w	r8, r2, r0
 8004ad6:	ea03 0901 	and.w	r9, r3, r1
 8004ada:	4640      	mov	r0, r8
 8004adc:	4649      	mov	r1, r9
 8004ade:	f04f 0200 	mov.w	r2, #0
 8004ae2:	f04f 0300 	mov.w	r3, #0
 8004ae6:	014b      	lsls	r3, r1, #5
 8004ae8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004aec:	0142      	lsls	r2, r0, #5
 8004aee:	4610      	mov	r0, r2
 8004af0:	4619      	mov	r1, r3
 8004af2:	ebb0 0008 	subs.w	r0, r0, r8
 8004af6:	eb61 0109 	sbc.w	r1, r1, r9
 8004afa:	f04f 0200 	mov.w	r2, #0
 8004afe:	f04f 0300 	mov.w	r3, #0
 8004b02:	018b      	lsls	r3, r1, #6
 8004b04:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004b08:	0182      	lsls	r2, r0, #6
 8004b0a:	1a12      	subs	r2, r2, r0
 8004b0c:	eb63 0301 	sbc.w	r3, r3, r1
 8004b10:	f04f 0000 	mov.w	r0, #0
 8004b14:	f04f 0100 	mov.w	r1, #0
 8004b18:	00d9      	lsls	r1, r3, #3
 8004b1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b1e:	00d0      	lsls	r0, r2, #3
 8004b20:	4602      	mov	r2, r0
 8004b22:	460b      	mov	r3, r1
 8004b24:	eb12 0208 	adds.w	r2, r2, r8
 8004b28:	eb43 0309 	adc.w	r3, r3, r9
 8004b2c:	f04f 0000 	mov.w	r0, #0
 8004b30:	f04f 0100 	mov.w	r1, #0
 8004b34:	0259      	lsls	r1, r3, #9
 8004b36:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004b3a:	0250      	lsls	r0, r2, #9
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	460b      	mov	r3, r1
 8004b40:	4610      	mov	r0, r2
 8004b42:	4619      	mov	r1, r3
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	461a      	mov	r2, r3
 8004b48:	f04f 0300 	mov.w	r3, #0
 8004b4c:	f7fb fb60 	bl	8000210 <__aeabi_uldivmod>
 8004b50:	4602      	mov	r2, r0
 8004b52:	460b      	mov	r3, r1
 8004b54:	4613      	mov	r3, r2
 8004b56:	61fb      	str	r3, [r7, #28]
 8004b58:	e04a      	b.n	8004bf0 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b5a:	4b30      	ldr	r3, [pc, #192]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x358>)
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	099b      	lsrs	r3, r3, #6
 8004b60:	461a      	mov	r2, r3
 8004b62:	f04f 0300 	mov.w	r3, #0
 8004b66:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004b6a:	f04f 0100 	mov.w	r1, #0
 8004b6e:	ea02 0400 	and.w	r4, r2, r0
 8004b72:	ea03 0501 	and.w	r5, r3, r1
 8004b76:	4620      	mov	r0, r4
 8004b78:	4629      	mov	r1, r5
 8004b7a:	f04f 0200 	mov.w	r2, #0
 8004b7e:	f04f 0300 	mov.w	r3, #0
 8004b82:	014b      	lsls	r3, r1, #5
 8004b84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004b88:	0142      	lsls	r2, r0, #5
 8004b8a:	4610      	mov	r0, r2
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	1b00      	subs	r0, r0, r4
 8004b90:	eb61 0105 	sbc.w	r1, r1, r5
 8004b94:	f04f 0200 	mov.w	r2, #0
 8004b98:	f04f 0300 	mov.w	r3, #0
 8004b9c:	018b      	lsls	r3, r1, #6
 8004b9e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004ba2:	0182      	lsls	r2, r0, #6
 8004ba4:	1a12      	subs	r2, r2, r0
 8004ba6:	eb63 0301 	sbc.w	r3, r3, r1
 8004baa:	f04f 0000 	mov.w	r0, #0
 8004bae:	f04f 0100 	mov.w	r1, #0
 8004bb2:	00d9      	lsls	r1, r3, #3
 8004bb4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004bb8:	00d0      	lsls	r0, r2, #3
 8004bba:	4602      	mov	r2, r0
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	1912      	adds	r2, r2, r4
 8004bc0:	eb45 0303 	adc.w	r3, r5, r3
 8004bc4:	f04f 0000 	mov.w	r0, #0
 8004bc8:	f04f 0100 	mov.w	r1, #0
 8004bcc:	0299      	lsls	r1, r3, #10
 8004bce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004bd2:	0290      	lsls	r0, r2, #10
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	4610      	mov	r0, r2
 8004bda:	4619      	mov	r1, r3
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	461a      	mov	r2, r3
 8004be0:	f04f 0300 	mov.w	r3, #0
 8004be4:	f7fb fb14 	bl	8000210 <__aeabi_uldivmod>
 8004be8:	4602      	mov	r2, r0
 8004bea:	460b      	mov	r3, r1
 8004bec:	4613      	mov	r3, r2
 8004bee:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004bf0:	4b0a      	ldr	r3, [pc, #40]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x358>)
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	0f1b      	lsrs	r3, r3, #28
 8004bf6:	f003 0307 	and.w	r3, r3, #7
 8004bfa:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8004bfc:	69fa      	ldr	r2, [r7, #28]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c04:	61bb      	str	r3, [r7, #24]
      break;
 8004c06:	e002      	b.n	8004c0e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c08:	4b05      	ldr	r3, [pc, #20]	; (8004c20 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004c0a:	61bb      	str	r3, [r7, #24]
      break;
 8004c0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c0e:	69bb      	ldr	r3, [r7, #24]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3720      	adds	r7, #32
 8004c14:	46bd      	mov	sp, r7
 8004c16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c1a:	bf00      	nop
 8004c1c:	40023800 	.word	0x40023800
 8004c20:	00f42400 	.word	0x00f42400
 8004c24:	007a1200 	.word	0x007a1200

08004c28 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e28d      	b.n	8005156 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f000 8083 	beq.w	8004d4e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004c48:	4b94      	ldr	r3, [pc, #592]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f003 030c 	and.w	r3, r3, #12
 8004c50:	2b04      	cmp	r3, #4
 8004c52:	d019      	beq.n	8004c88 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c54:	4b91      	ldr	r3, [pc, #580]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004c5c:	2b08      	cmp	r3, #8
 8004c5e:	d106      	bne.n	8004c6e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c60:	4b8e      	ldr	r3, [pc, #568]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c6c:	d00c      	beq.n	8004c88 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c6e:	4b8b      	ldr	r3, [pc, #556]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c76:	2b0c      	cmp	r3, #12
 8004c78:	d112      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c7a:	4b88      	ldr	r3, [pc, #544]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c86:	d10b      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c88:	4b84      	ldr	r3, [pc, #528]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d05b      	beq.n	8004d4c <HAL_RCC_OscConfig+0x124>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d157      	bne.n	8004d4c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e25a      	b.n	8005156 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ca8:	d106      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x90>
 8004caa:	4b7c      	ldr	r3, [pc, #496]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a7b      	ldr	r2, [pc, #492]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cb4:	6013      	str	r3, [r2, #0]
 8004cb6:	e01d      	b.n	8004cf4 <HAL_RCC_OscConfig+0xcc>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cc0:	d10c      	bne.n	8004cdc <HAL_RCC_OscConfig+0xb4>
 8004cc2:	4b76      	ldr	r3, [pc, #472]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a75      	ldr	r2, [pc, #468]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ccc:	6013      	str	r3, [r2, #0]
 8004cce:	4b73      	ldr	r3, [pc, #460]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a72      	ldr	r2, [pc, #456]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd8:	6013      	str	r3, [r2, #0]
 8004cda:	e00b      	b.n	8004cf4 <HAL_RCC_OscConfig+0xcc>
 8004cdc:	4b6f      	ldr	r3, [pc, #444]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a6e      	ldr	r2, [pc, #440]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ce6:	6013      	str	r3, [r2, #0]
 8004ce8:	4b6c      	ldr	r3, [pc, #432]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a6b      	ldr	r2, [pc, #428]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d013      	beq.n	8004d24 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfc:	f7fc fab0 	bl	8001260 <HAL_GetTick>
 8004d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d04:	f7fc faac 	bl	8001260 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b64      	cmp	r3, #100	; 0x64
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e21f      	b.n	8005156 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d16:	4b61      	ldr	r3, [pc, #388]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d0f0      	beq.n	8004d04 <HAL_RCC_OscConfig+0xdc>
 8004d22:	e014      	b.n	8004d4e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d24:	f7fc fa9c 	bl	8001260 <HAL_GetTick>
 8004d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d2c:	f7fc fa98 	bl	8001260 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b64      	cmp	r3, #100	; 0x64
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e20b      	b.n	8005156 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d3e:	4b57      	ldr	r3, [pc, #348]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1f0      	bne.n	8004d2c <HAL_RCC_OscConfig+0x104>
 8004d4a:	e000      	b.n	8004d4e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d06f      	beq.n	8004e3a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004d5a:	4b50      	ldr	r3, [pc, #320]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f003 030c 	and.w	r3, r3, #12
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d017      	beq.n	8004d96 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d66:	4b4d      	ldr	r3, [pc, #308]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004d6e:	2b08      	cmp	r3, #8
 8004d70:	d105      	bne.n	8004d7e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d72:	4b4a      	ldr	r3, [pc, #296]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00b      	beq.n	8004d96 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d7e:	4b47      	ldr	r3, [pc, #284]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d86:	2b0c      	cmp	r3, #12
 8004d88:	d11c      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d8a:	4b44      	ldr	r3, [pc, #272]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d116      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d96:	4b41      	ldr	r3, [pc, #260]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d005      	beq.n	8004dae <HAL_RCC_OscConfig+0x186>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d001      	beq.n	8004dae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e1d3      	b.n	8005156 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dae:	4b3b      	ldr	r3, [pc, #236]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	00db      	lsls	r3, r3, #3
 8004dbc:	4937      	ldr	r1, [pc, #220]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dc2:	e03a      	b.n	8004e3a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d020      	beq.n	8004e0e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dcc:	4b34      	ldr	r3, [pc, #208]	; (8004ea0 <HAL_RCC_OscConfig+0x278>)
 8004dce:	2201      	movs	r2, #1
 8004dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd2:	f7fc fa45 	bl	8001260 <HAL_GetTick>
 8004dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dd8:	e008      	b.n	8004dec <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dda:	f7fc fa41 	bl	8001260 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d901      	bls.n	8004dec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e1b4      	b.n	8005156 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dec:	4b2b      	ldr	r3, [pc, #172]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d0f0      	beq.n	8004dda <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004df8:	4b28      	ldr	r3, [pc, #160]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	00db      	lsls	r3, r3, #3
 8004e06:	4925      	ldr	r1, [pc, #148]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	600b      	str	r3, [r1, #0]
 8004e0c:	e015      	b.n	8004e3a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e0e:	4b24      	ldr	r3, [pc, #144]	; (8004ea0 <HAL_RCC_OscConfig+0x278>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e14:	f7fc fa24 	bl	8001260 <HAL_GetTick>
 8004e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e1a:	e008      	b.n	8004e2e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e1c:	f7fc fa20 	bl	8001260 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e193      	b.n	8005156 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e2e:	4b1b      	ldr	r3, [pc, #108]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1f0      	bne.n	8004e1c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0308 	and.w	r3, r3, #8
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d036      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d016      	beq.n	8004e7c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e4e:	4b15      	ldr	r3, [pc, #84]	; (8004ea4 <HAL_RCC_OscConfig+0x27c>)
 8004e50:	2201      	movs	r2, #1
 8004e52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e54:	f7fc fa04 	bl	8001260 <HAL_GetTick>
 8004e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e5c:	f7fc fa00 	bl	8001260 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e173      	b.n	8005156 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e6e:	4b0b      	ldr	r3, [pc, #44]	; (8004e9c <HAL_RCC_OscConfig+0x274>)
 8004e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d0f0      	beq.n	8004e5c <HAL_RCC_OscConfig+0x234>
 8004e7a:	e01b      	b.n	8004eb4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e7c:	4b09      	ldr	r3, [pc, #36]	; (8004ea4 <HAL_RCC_OscConfig+0x27c>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e82:	f7fc f9ed 	bl	8001260 <HAL_GetTick>
 8004e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e88:	e00e      	b.n	8004ea8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e8a:	f7fc f9e9 	bl	8001260 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d907      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e15c      	b.n	8005156 <HAL_RCC_OscConfig+0x52e>
 8004e9c:	40023800 	.word	0x40023800
 8004ea0:	42470000 	.word	0x42470000
 8004ea4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ea8:	4b8a      	ldr	r3, [pc, #552]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 8004eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eac:	f003 0302 	and.w	r3, r3, #2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1ea      	bne.n	8004e8a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0304 	and.w	r3, r3, #4
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f000 8097 	beq.w	8004ff0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ec6:	4b83      	ldr	r3, [pc, #524]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10f      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60bb      	str	r3, [r7, #8]
 8004ed6:	4b7f      	ldr	r3, [pc, #508]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eda:	4a7e      	ldr	r2, [pc, #504]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 8004edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ee2:	4b7c      	ldr	r3, [pc, #496]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eea:	60bb      	str	r3, [r7, #8]
 8004eec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ef2:	4b79      	ldr	r3, [pc, #484]	; (80050d8 <HAL_RCC_OscConfig+0x4b0>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d118      	bne.n	8004f30 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004efe:	4b76      	ldr	r3, [pc, #472]	; (80050d8 <HAL_RCC_OscConfig+0x4b0>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a75      	ldr	r2, [pc, #468]	; (80050d8 <HAL_RCC_OscConfig+0x4b0>)
 8004f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f0a:	f7fc f9a9 	bl	8001260 <HAL_GetTick>
 8004f0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f10:	e008      	b.n	8004f24 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f12:	f7fc f9a5 	bl	8001260 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d901      	bls.n	8004f24 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e118      	b.n	8005156 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f24:	4b6c      	ldr	r3, [pc, #432]	; (80050d8 <HAL_RCC_OscConfig+0x4b0>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d0f0      	beq.n	8004f12 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d106      	bne.n	8004f46 <HAL_RCC_OscConfig+0x31e>
 8004f38:	4b66      	ldr	r3, [pc, #408]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 8004f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f3c:	4a65      	ldr	r2, [pc, #404]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 8004f3e:	f043 0301 	orr.w	r3, r3, #1
 8004f42:	6713      	str	r3, [r2, #112]	; 0x70
 8004f44:	e01c      	b.n	8004f80 <HAL_RCC_OscConfig+0x358>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	2b05      	cmp	r3, #5
 8004f4c:	d10c      	bne.n	8004f68 <HAL_RCC_OscConfig+0x340>
 8004f4e:	4b61      	ldr	r3, [pc, #388]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 8004f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f52:	4a60      	ldr	r2, [pc, #384]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 8004f54:	f043 0304 	orr.w	r3, r3, #4
 8004f58:	6713      	str	r3, [r2, #112]	; 0x70
 8004f5a:	4b5e      	ldr	r3, [pc, #376]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 8004f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5e:	4a5d      	ldr	r2, [pc, #372]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 8004f60:	f043 0301 	orr.w	r3, r3, #1
 8004f64:	6713      	str	r3, [r2, #112]	; 0x70
 8004f66:	e00b      	b.n	8004f80 <HAL_RCC_OscConfig+0x358>
 8004f68:	4b5a      	ldr	r3, [pc, #360]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 8004f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6c:	4a59      	ldr	r2, [pc, #356]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 8004f6e:	f023 0301 	bic.w	r3, r3, #1
 8004f72:	6713      	str	r3, [r2, #112]	; 0x70
 8004f74:	4b57      	ldr	r3, [pc, #348]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 8004f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f78:	4a56      	ldr	r2, [pc, #344]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 8004f7a:	f023 0304 	bic.w	r3, r3, #4
 8004f7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d015      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f88:	f7fc f96a 	bl	8001260 <HAL_GetTick>
 8004f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f8e:	e00a      	b.n	8004fa6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f90:	f7fc f966 	bl	8001260 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e0d7      	b.n	8005156 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fa6:	4b4b      	ldr	r3, [pc, #300]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 8004fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d0ee      	beq.n	8004f90 <HAL_RCC_OscConfig+0x368>
 8004fb2:	e014      	b.n	8004fde <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb4:	f7fc f954 	bl	8001260 <HAL_GetTick>
 8004fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fba:	e00a      	b.n	8004fd2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fbc:	f7fc f950 	bl	8001260 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e0c1      	b.n	8005156 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fd2:	4b40      	ldr	r3, [pc, #256]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 8004fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1ee      	bne.n	8004fbc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fde:	7dfb      	ldrb	r3, [r7, #23]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d105      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fe4:	4b3b      	ldr	r3, [pc, #236]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 8004fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe8:	4a3a      	ldr	r2, [pc, #232]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 8004fea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 80ad 	beq.w	8005154 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ffa:	4b36      	ldr	r3, [pc, #216]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f003 030c 	and.w	r3, r3, #12
 8005002:	2b08      	cmp	r3, #8
 8005004:	d060      	beq.n	80050c8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	2b02      	cmp	r3, #2
 800500c:	d145      	bne.n	800509a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800500e:	4b33      	ldr	r3, [pc, #204]	; (80050dc <HAL_RCC_OscConfig+0x4b4>)
 8005010:	2200      	movs	r2, #0
 8005012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005014:	f7fc f924 	bl	8001260 <HAL_GetTick>
 8005018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800501a:	e008      	b.n	800502e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800501c:	f7fc f920 	bl	8001260 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b02      	cmp	r3, #2
 8005028:	d901      	bls.n	800502e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e093      	b.n	8005156 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800502e:	4b29      	ldr	r3, [pc, #164]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1f0      	bne.n	800501c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	69da      	ldr	r2, [r3, #28]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	431a      	orrs	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	019b      	lsls	r3, r3, #6
 800504a:	431a      	orrs	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005050:	085b      	lsrs	r3, r3, #1
 8005052:	3b01      	subs	r3, #1
 8005054:	041b      	lsls	r3, r3, #16
 8005056:	431a      	orrs	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505c:	061b      	lsls	r3, r3, #24
 800505e:	431a      	orrs	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005064:	071b      	lsls	r3, r3, #28
 8005066:	491b      	ldr	r1, [pc, #108]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 8005068:	4313      	orrs	r3, r2
 800506a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800506c:	4b1b      	ldr	r3, [pc, #108]	; (80050dc <HAL_RCC_OscConfig+0x4b4>)
 800506e:	2201      	movs	r2, #1
 8005070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005072:	f7fc f8f5 	bl	8001260 <HAL_GetTick>
 8005076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005078:	e008      	b.n	800508c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800507a:	f7fc f8f1 	bl	8001260 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	2b02      	cmp	r3, #2
 8005086:	d901      	bls.n	800508c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e064      	b.n	8005156 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800508c:	4b11      	ldr	r3, [pc, #68]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d0f0      	beq.n	800507a <HAL_RCC_OscConfig+0x452>
 8005098:	e05c      	b.n	8005154 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800509a:	4b10      	ldr	r3, [pc, #64]	; (80050dc <HAL_RCC_OscConfig+0x4b4>)
 800509c:	2200      	movs	r2, #0
 800509e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a0:	f7fc f8de 	bl	8001260 <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050a8:	f7fc f8da 	bl	8001260 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e04d      	b.n	8005156 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ba:	4b06      	ldr	r3, [pc, #24]	; (80050d4 <HAL_RCC_OscConfig+0x4ac>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1f0      	bne.n	80050a8 <HAL_RCC_OscConfig+0x480>
 80050c6:	e045      	b.n	8005154 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d107      	bne.n	80050e0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e040      	b.n	8005156 <HAL_RCC_OscConfig+0x52e>
 80050d4:	40023800 	.word	0x40023800
 80050d8:	40007000 	.word	0x40007000
 80050dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050e0:	4b1f      	ldr	r3, [pc, #124]	; (8005160 <HAL_RCC_OscConfig+0x538>)
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d030      	beq.n	8005150 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d129      	bne.n	8005150 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005106:	429a      	cmp	r2, r3
 8005108:	d122      	bne.n	8005150 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005110:	4013      	ands	r3, r2
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005116:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005118:	4293      	cmp	r3, r2
 800511a:	d119      	bne.n	8005150 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005126:	085b      	lsrs	r3, r3, #1
 8005128:	3b01      	subs	r3, #1
 800512a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800512c:	429a      	cmp	r2, r3
 800512e:	d10f      	bne.n	8005150 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800513c:	429a      	cmp	r2, r3
 800513e:	d107      	bne.n	8005150 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800514c:	429a      	cmp	r2, r3
 800514e:	d001      	beq.n	8005154 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e000      	b.n	8005156 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3718      	adds	r7, #24
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	40023800 	.word	0x40023800

08005164 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d101      	bne.n	8005176 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e041      	b.n	80051fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d106      	bne.n	8005190 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f839 	bl	8005202 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2202      	movs	r2, #2
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	3304      	adds	r3, #4
 80051a0:	4619      	mov	r1, r3
 80051a2:	4610      	mov	r0, r2
 80051a4:	f000 f94e 	bl	8005444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005202:	b480      	push	{r7}
 8005204:	b083      	sub	sp, #12
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800520a:	bf00      	nop
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
	...

08005218 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b01      	cmp	r3, #1
 800522a:	d001      	beq.n	8005230 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e04e      	b.n	80052ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2202      	movs	r2, #2
 8005234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68da      	ldr	r2, [r3, #12]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f042 0201 	orr.w	r2, r2, #1
 8005246:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a23      	ldr	r2, [pc, #140]	; (80052dc <HAL_TIM_Base_Start_IT+0xc4>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d022      	beq.n	8005298 <HAL_TIM_Base_Start_IT+0x80>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800525a:	d01d      	beq.n	8005298 <HAL_TIM_Base_Start_IT+0x80>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a1f      	ldr	r2, [pc, #124]	; (80052e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d018      	beq.n	8005298 <HAL_TIM_Base_Start_IT+0x80>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a1e      	ldr	r2, [pc, #120]	; (80052e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d013      	beq.n	8005298 <HAL_TIM_Base_Start_IT+0x80>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a1c      	ldr	r2, [pc, #112]	; (80052e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d00e      	beq.n	8005298 <HAL_TIM_Base_Start_IT+0x80>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a1b      	ldr	r2, [pc, #108]	; (80052ec <HAL_TIM_Base_Start_IT+0xd4>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d009      	beq.n	8005298 <HAL_TIM_Base_Start_IT+0x80>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a19      	ldr	r2, [pc, #100]	; (80052f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d004      	beq.n	8005298 <HAL_TIM_Base_Start_IT+0x80>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a18      	ldr	r2, [pc, #96]	; (80052f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d111      	bne.n	80052bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f003 0307 	and.w	r3, r3, #7
 80052a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2b06      	cmp	r3, #6
 80052a8:	d010      	beq.n	80052cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f042 0201 	orr.w	r2, r2, #1
 80052b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ba:	e007      	b.n	80052cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f042 0201 	orr.w	r2, r2, #1
 80052ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	40010000 	.word	0x40010000
 80052e0:	40000400 	.word	0x40000400
 80052e4:	40000800 	.word	0x40000800
 80052e8:	40000c00 	.word	0x40000c00
 80052ec:	40010400 	.word	0x40010400
 80052f0:	40014000 	.word	0x40014000
 80052f4:	40001800 	.word	0x40001800

080052f8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b086      	sub	sp, #24
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e097      	b.n	800543c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b00      	cmp	r3, #0
 8005316:	d106      	bne.n	8005326 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f7fb fd39 	bl	8000d98 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2202      	movs	r2, #2
 800532a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	6812      	ldr	r2, [r2, #0]
 8005338:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800533c:	f023 0307 	bic.w	r3, r3, #7
 8005340:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	3304      	adds	r3, #4
 800534a:	4619      	mov	r1, r3
 800534c:	4610      	mov	r0, r2
 800534e:	f000 f879 	bl	8005444 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	6a1b      	ldr	r3, [r3, #32]
 8005368:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	4313      	orrs	r3, r2
 8005372:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800537a:	f023 0303 	bic.w	r3, r3, #3
 800537e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	689a      	ldr	r2, [r3, #8]
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	021b      	lsls	r3, r3, #8
 800538a:	4313      	orrs	r3, r2
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	4313      	orrs	r3, r2
 8005390:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005398:	f023 030c 	bic.w	r3, r3, #12
 800539c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	68da      	ldr	r2, [r3, #12]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	021b      	lsls	r3, r3, #8
 80053b4:	4313      	orrs	r3, r2
 80053b6:	693a      	ldr	r2, [r7, #16]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	011a      	lsls	r2, r3, #4
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	031b      	lsls	r3, r3, #12
 80053c8:	4313      	orrs	r3, r2
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80053d6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80053de:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	695b      	ldr	r3, [r3, #20]
 80053e8:	011b      	lsls	r3, r3, #4
 80053ea:	4313      	orrs	r3, r2
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3718      	adds	r7, #24
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a40      	ldr	r2, [pc, #256]	; (8005558 <TIM_Base_SetConfig+0x114>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d013      	beq.n	8005484 <TIM_Base_SetConfig+0x40>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005462:	d00f      	beq.n	8005484 <TIM_Base_SetConfig+0x40>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a3d      	ldr	r2, [pc, #244]	; (800555c <TIM_Base_SetConfig+0x118>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d00b      	beq.n	8005484 <TIM_Base_SetConfig+0x40>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a3c      	ldr	r2, [pc, #240]	; (8005560 <TIM_Base_SetConfig+0x11c>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d007      	beq.n	8005484 <TIM_Base_SetConfig+0x40>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a3b      	ldr	r2, [pc, #236]	; (8005564 <TIM_Base_SetConfig+0x120>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d003      	beq.n	8005484 <TIM_Base_SetConfig+0x40>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a3a      	ldr	r2, [pc, #232]	; (8005568 <TIM_Base_SetConfig+0x124>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d108      	bne.n	8005496 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	4313      	orrs	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a2f      	ldr	r2, [pc, #188]	; (8005558 <TIM_Base_SetConfig+0x114>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d02b      	beq.n	80054f6 <TIM_Base_SetConfig+0xb2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054a4:	d027      	beq.n	80054f6 <TIM_Base_SetConfig+0xb2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a2c      	ldr	r2, [pc, #176]	; (800555c <TIM_Base_SetConfig+0x118>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d023      	beq.n	80054f6 <TIM_Base_SetConfig+0xb2>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a2b      	ldr	r2, [pc, #172]	; (8005560 <TIM_Base_SetConfig+0x11c>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d01f      	beq.n	80054f6 <TIM_Base_SetConfig+0xb2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a2a      	ldr	r2, [pc, #168]	; (8005564 <TIM_Base_SetConfig+0x120>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d01b      	beq.n	80054f6 <TIM_Base_SetConfig+0xb2>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a29      	ldr	r2, [pc, #164]	; (8005568 <TIM_Base_SetConfig+0x124>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d017      	beq.n	80054f6 <TIM_Base_SetConfig+0xb2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a28      	ldr	r2, [pc, #160]	; (800556c <TIM_Base_SetConfig+0x128>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d013      	beq.n	80054f6 <TIM_Base_SetConfig+0xb2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a27      	ldr	r2, [pc, #156]	; (8005570 <TIM_Base_SetConfig+0x12c>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d00f      	beq.n	80054f6 <TIM_Base_SetConfig+0xb2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a26      	ldr	r2, [pc, #152]	; (8005574 <TIM_Base_SetConfig+0x130>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d00b      	beq.n	80054f6 <TIM_Base_SetConfig+0xb2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a25      	ldr	r2, [pc, #148]	; (8005578 <TIM_Base_SetConfig+0x134>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d007      	beq.n	80054f6 <TIM_Base_SetConfig+0xb2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a24      	ldr	r2, [pc, #144]	; (800557c <TIM_Base_SetConfig+0x138>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d003      	beq.n	80054f6 <TIM_Base_SetConfig+0xb2>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a23      	ldr	r2, [pc, #140]	; (8005580 <TIM_Base_SetConfig+0x13c>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d108      	bne.n	8005508 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	4313      	orrs	r3, r2
 8005506:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	4313      	orrs	r3, r2
 8005514:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	689a      	ldr	r2, [r3, #8]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a0a      	ldr	r2, [pc, #40]	; (8005558 <TIM_Base_SetConfig+0x114>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d003      	beq.n	800553c <TIM_Base_SetConfig+0xf8>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a0c      	ldr	r2, [pc, #48]	; (8005568 <TIM_Base_SetConfig+0x124>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d103      	bne.n	8005544 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	691a      	ldr	r2, [r3, #16]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	615a      	str	r2, [r3, #20]
}
 800554a:	bf00      	nop
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	40010000 	.word	0x40010000
 800555c:	40000400 	.word	0x40000400
 8005560:	40000800 	.word	0x40000800
 8005564:	40000c00 	.word	0x40000c00
 8005568:	40010400 	.word	0x40010400
 800556c:	40014000 	.word	0x40014000
 8005570:	40014400 	.word	0x40014400
 8005574:	40014800 	.word	0x40014800
 8005578:	40001800 	.word	0x40001800
 800557c:	40001c00 	.word	0x40001c00
 8005580:	40002000 	.word	0x40002000

08005584 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005594:	2b01      	cmp	r3, #1
 8005596:	d101      	bne.n	800559c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005598:	2302      	movs	r3, #2
 800559a:	e05a      	b.n	8005652 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2202      	movs	r2, #2
 80055a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a21      	ldr	r2, [pc, #132]	; (8005660 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d022      	beq.n	8005626 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055e8:	d01d      	beq.n	8005626 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a1d      	ldr	r2, [pc, #116]	; (8005664 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d018      	beq.n	8005626 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a1b      	ldr	r2, [pc, #108]	; (8005668 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d013      	beq.n	8005626 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a1a      	ldr	r2, [pc, #104]	; (800566c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d00e      	beq.n	8005626 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a18      	ldr	r2, [pc, #96]	; (8005670 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d009      	beq.n	8005626 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a17      	ldr	r2, [pc, #92]	; (8005674 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d004      	beq.n	8005626 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a15      	ldr	r2, [pc, #84]	; (8005678 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d10c      	bne.n	8005640 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800562c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	4313      	orrs	r3, r2
 8005636:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3714      	adds	r7, #20
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	40010000 	.word	0x40010000
 8005664:	40000400 	.word	0x40000400
 8005668:	40000800 	.word	0x40000800
 800566c:	40000c00 	.word	0x40000c00
 8005670:	40010400 	.word	0x40010400
 8005674:	40014000 	.word	0x40014000
 8005678:	40001800 	.word	0x40001800

0800567c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e03f      	b.n	800570e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b00      	cmp	r3, #0
 8005698:	d106      	bne.n	80056a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f7fb fc5c 	bl	8000f60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2224      	movs	r2, #36	; 0x24
 80056ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68da      	ldr	r2, [r3, #12]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 f829 	bl	8005718 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	691a      	ldr	r2, [r3, #16]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	695a      	ldr	r2, [r3, #20]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68da      	ldr	r2, [r3, #12]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2220      	movs	r2, #32
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2220      	movs	r2, #32
 8005708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3708      	adds	r7, #8
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
	...

08005718 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800571c:	b09f      	sub	sp, #124	; 0x7c
 800571e:	af00      	add	r7, sp, #0
 8005720:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800572c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800572e:	68d9      	ldr	r1, [r3, #12]
 8005730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	ea40 0301 	orr.w	r3, r0, r1
 8005738:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800573a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800573c:	689a      	ldr	r2, [r3, #8]
 800573e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	431a      	orrs	r2, r3
 8005744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005746:	695b      	ldr	r3, [r3, #20]
 8005748:	431a      	orrs	r2, r3
 800574a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	4313      	orrs	r3, r2
 8005750:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800575c:	f021 010c 	bic.w	r1, r1, #12
 8005760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005766:	430b      	orrs	r3, r1
 8005768:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800576a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	695b      	ldr	r3, [r3, #20]
 8005770:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005776:	6999      	ldr	r1, [r3, #24]
 8005778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	ea40 0301 	orr.w	r3, r0, r1
 8005780:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	4bc5      	ldr	r3, [pc, #788]	; (8005a9c <UART_SetConfig+0x384>)
 8005788:	429a      	cmp	r2, r3
 800578a:	d004      	beq.n	8005796 <UART_SetConfig+0x7e>
 800578c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	4bc3      	ldr	r3, [pc, #780]	; (8005aa0 <UART_SetConfig+0x388>)
 8005792:	429a      	cmp	r2, r3
 8005794:	d103      	bne.n	800579e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005796:	f7fe fd25 	bl	80041e4 <HAL_RCC_GetPCLK2Freq>
 800579a:	6778      	str	r0, [r7, #116]	; 0x74
 800579c:	e002      	b.n	80057a4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800579e:	f7fe fd0d 	bl	80041bc <HAL_RCC_GetPCLK1Freq>
 80057a2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057a6:	69db      	ldr	r3, [r3, #28]
 80057a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057ac:	f040 80b6 	bne.w	800591c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057b2:	461c      	mov	r4, r3
 80057b4:	f04f 0500 	mov.w	r5, #0
 80057b8:	4622      	mov	r2, r4
 80057ba:	462b      	mov	r3, r5
 80057bc:	1891      	adds	r1, r2, r2
 80057be:	6439      	str	r1, [r7, #64]	; 0x40
 80057c0:	415b      	adcs	r3, r3
 80057c2:	647b      	str	r3, [r7, #68]	; 0x44
 80057c4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80057c8:	1912      	adds	r2, r2, r4
 80057ca:	eb45 0303 	adc.w	r3, r5, r3
 80057ce:	f04f 0000 	mov.w	r0, #0
 80057d2:	f04f 0100 	mov.w	r1, #0
 80057d6:	00d9      	lsls	r1, r3, #3
 80057d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057dc:	00d0      	lsls	r0, r2, #3
 80057de:	4602      	mov	r2, r0
 80057e0:	460b      	mov	r3, r1
 80057e2:	1911      	adds	r1, r2, r4
 80057e4:	6639      	str	r1, [r7, #96]	; 0x60
 80057e6:	416b      	adcs	r3, r5
 80057e8:	667b      	str	r3, [r7, #100]	; 0x64
 80057ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	461a      	mov	r2, r3
 80057f0:	f04f 0300 	mov.w	r3, #0
 80057f4:	1891      	adds	r1, r2, r2
 80057f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80057f8:	415b      	adcs	r3, r3
 80057fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005800:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005804:	f7fa fd04 	bl	8000210 <__aeabi_uldivmod>
 8005808:	4602      	mov	r2, r0
 800580a:	460b      	mov	r3, r1
 800580c:	4ba5      	ldr	r3, [pc, #660]	; (8005aa4 <UART_SetConfig+0x38c>)
 800580e:	fba3 2302 	umull	r2, r3, r3, r2
 8005812:	095b      	lsrs	r3, r3, #5
 8005814:	011e      	lsls	r6, r3, #4
 8005816:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005818:	461c      	mov	r4, r3
 800581a:	f04f 0500 	mov.w	r5, #0
 800581e:	4622      	mov	r2, r4
 8005820:	462b      	mov	r3, r5
 8005822:	1891      	adds	r1, r2, r2
 8005824:	6339      	str	r1, [r7, #48]	; 0x30
 8005826:	415b      	adcs	r3, r3
 8005828:	637b      	str	r3, [r7, #52]	; 0x34
 800582a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800582e:	1912      	adds	r2, r2, r4
 8005830:	eb45 0303 	adc.w	r3, r5, r3
 8005834:	f04f 0000 	mov.w	r0, #0
 8005838:	f04f 0100 	mov.w	r1, #0
 800583c:	00d9      	lsls	r1, r3, #3
 800583e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005842:	00d0      	lsls	r0, r2, #3
 8005844:	4602      	mov	r2, r0
 8005846:	460b      	mov	r3, r1
 8005848:	1911      	adds	r1, r2, r4
 800584a:	65b9      	str	r1, [r7, #88]	; 0x58
 800584c:	416b      	adcs	r3, r5
 800584e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	461a      	mov	r2, r3
 8005856:	f04f 0300 	mov.w	r3, #0
 800585a:	1891      	adds	r1, r2, r2
 800585c:	62b9      	str	r1, [r7, #40]	; 0x28
 800585e:	415b      	adcs	r3, r3
 8005860:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005862:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005866:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800586a:	f7fa fcd1 	bl	8000210 <__aeabi_uldivmod>
 800586e:	4602      	mov	r2, r0
 8005870:	460b      	mov	r3, r1
 8005872:	4b8c      	ldr	r3, [pc, #560]	; (8005aa4 <UART_SetConfig+0x38c>)
 8005874:	fba3 1302 	umull	r1, r3, r3, r2
 8005878:	095b      	lsrs	r3, r3, #5
 800587a:	2164      	movs	r1, #100	; 0x64
 800587c:	fb01 f303 	mul.w	r3, r1, r3
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	00db      	lsls	r3, r3, #3
 8005884:	3332      	adds	r3, #50	; 0x32
 8005886:	4a87      	ldr	r2, [pc, #540]	; (8005aa4 <UART_SetConfig+0x38c>)
 8005888:	fba2 2303 	umull	r2, r3, r2, r3
 800588c:	095b      	lsrs	r3, r3, #5
 800588e:	005b      	lsls	r3, r3, #1
 8005890:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005894:	441e      	add	r6, r3
 8005896:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005898:	4618      	mov	r0, r3
 800589a:	f04f 0100 	mov.w	r1, #0
 800589e:	4602      	mov	r2, r0
 80058a0:	460b      	mov	r3, r1
 80058a2:	1894      	adds	r4, r2, r2
 80058a4:	623c      	str	r4, [r7, #32]
 80058a6:	415b      	adcs	r3, r3
 80058a8:	627b      	str	r3, [r7, #36]	; 0x24
 80058aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058ae:	1812      	adds	r2, r2, r0
 80058b0:	eb41 0303 	adc.w	r3, r1, r3
 80058b4:	f04f 0400 	mov.w	r4, #0
 80058b8:	f04f 0500 	mov.w	r5, #0
 80058bc:	00dd      	lsls	r5, r3, #3
 80058be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80058c2:	00d4      	lsls	r4, r2, #3
 80058c4:	4622      	mov	r2, r4
 80058c6:	462b      	mov	r3, r5
 80058c8:	1814      	adds	r4, r2, r0
 80058ca:	653c      	str	r4, [r7, #80]	; 0x50
 80058cc:	414b      	adcs	r3, r1
 80058ce:	657b      	str	r3, [r7, #84]	; 0x54
 80058d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	461a      	mov	r2, r3
 80058d6:	f04f 0300 	mov.w	r3, #0
 80058da:	1891      	adds	r1, r2, r2
 80058dc:	61b9      	str	r1, [r7, #24]
 80058de:	415b      	adcs	r3, r3
 80058e0:	61fb      	str	r3, [r7, #28]
 80058e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058e6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80058ea:	f7fa fc91 	bl	8000210 <__aeabi_uldivmod>
 80058ee:	4602      	mov	r2, r0
 80058f0:	460b      	mov	r3, r1
 80058f2:	4b6c      	ldr	r3, [pc, #432]	; (8005aa4 <UART_SetConfig+0x38c>)
 80058f4:	fba3 1302 	umull	r1, r3, r3, r2
 80058f8:	095b      	lsrs	r3, r3, #5
 80058fa:	2164      	movs	r1, #100	; 0x64
 80058fc:	fb01 f303 	mul.w	r3, r1, r3
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	00db      	lsls	r3, r3, #3
 8005904:	3332      	adds	r3, #50	; 0x32
 8005906:	4a67      	ldr	r2, [pc, #412]	; (8005aa4 <UART_SetConfig+0x38c>)
 8005908:	fba2 2303 	umull	r2, r3, r2, r3
 800590c:	095b      	lsrs	r3, r3, #5
 800590e:	f003 0207 	and.w	r2, r3, #7
 8005912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4432      	add	r2, r6
 8005918:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800591a:	e0b9      	b.n	8005a90 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800591c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800591e:	461c      	mov	r4, r3
 8005920:	f04f 0500 	mov.w	r5, #0
 8005924:	4622      	mov	r2, r4
 8005926:	462b      	mov	r3, r5
 8005928:	1891      	adds	r1, r2, r2
 800592a:	6139      	str	r1, [r7, #16]
 800592c:	415b      	adcs	r3, r3
 800592e:	617b      	str	r3, [r7, #20]
 8005930:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005934:	1912      	adds	r2, r2, r4
 8005936:	eb45 0303 	adc.w	r3, r5, r3
 800593a:	f04f 0000 	mov.w	r0, #0
 800593e:	f04f 0100 	mov.w	r1, #0
 8005942:	00d9      	lsls	r1, r3, #3
 8005944:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005948:	00d0      	lsls	r0, r2, #3
 800594a:	4602      	mov	r2, r0
 800594c:	460b      	mov	r3, r1
 800594e:	eb12 0804 	adds.w	r8, r2, r4
 8005952:	eb43 0905 	adc.w	r9, r3, r5
 8005956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	4618      	mov	r0, r3
 800595c:	f04f 0100 	mov.w	r1, #0
 8005960:	f04f 0200 	mov.w	r2, #0
 8005964:	f04f 0300 	mov.w	r3, #0
 8005968:	008b      	lsls	r3, r1, #2
 800596a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800596e:	0082      	lsls	r2, r0, #2
 8005970:	4640      	mov	r0, r8
 8005972:	4649      	mov	r1, r9
 8005974:	f7fa fc4c 	bl	8000210 <__aeabi_uldivmod>
 8005978:	4602      	mov	r2, r0
 800597a:	460b      	mov	r3, r1
 800597c:	4b49      	ldr	r3, [pc, #292]	; (8005aa4 <UART_SetConfig+0x38c>)
 800597e:	fba3 2302 	umull	r2, r3, r3, r2
 8005982:	095b      	lsrs	r3, r3, #5
 8005984:	011e      	lsls	r6, r3, #4
 8005986:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005988:	4618      	mov	r0, r3
 800598a:	f04f 0100 	mov.w	r1, #0
 800598e:	4602      	mov	r2, r0
 8005990:	460b      	mov	r3, r1
 8005992:	1894      	adds	r4, r2, r2
 8005994:	60bc      	str	r4, [r7, #8]
 8005996:	415b      	adcs	r3, r3
 8005998:	60fb      	str	r3, [r7, #12]
 800599a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800599e:	1812      	adds	r2, r2, r0
 80059a0:	eb41 0303 	adc.w	r3, r1, r3
 80059a4:	f04f 0400 	mov.w	r4, #0
 80059a8:	f04f 0500 	mov.w	r5, #0
 80059ac:	00dd      	lsls	r5, r3, #3
 80059ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80059b2:	00d4      	lsls	r4, r2, #3
 80059b4:	4622      	mov	r2, r4
 80059b6:	462b      	mov	r3, r5
 80059b8:	1814      	adds	r4, r2, r0
 80059ba:	64bc      	str	r4, [r7, #72]	; 0x48
 80059bc:	414b      	adcs	r3, r1
 80059be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	4618      	mov	r0, r3
 80059c6:	f04f 0100 	mov.w	r1, #0
 80059ca:	f04f 0200 	mov.w	r2, #0
 80059ce:	f04f 0300 	mov.w	r3, #0
 80059d2:	008b      	lsls	r3, r1, #2
 80059d4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80059d8:	0082      	lsls	r2, r0, #2
 80059da:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80059de:	f7fa fc17 	bl	8000210 <__aeabi_uldivmod>
 80059e2:	4602      	mov	r2, r0
 80059e4:	460b      	mov	r3, r1
 80059e6:	4b2f      	ldr	r3, [pc, #188]	; (8005aa4 <UART_SetConfig+0x38c>)
 80059e8:	fba3 1302 	umull	r1, r3, r3, r2
 80059ec:	095b      	lsrs	r3, r3, #5
 80059ee:	2164      	movs	r1, #100	; 0x64
 80059f0:	fb01 f303 	mul.w	r3, r1, r3
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	011b      	lsls	r3, r3, #4
 80059f8:	3332      	adds	r3, #50	; 0x32
 80059fa:	4a2a      	ldr	r2, [pc, #168]	; (8005aa4 <UART_SetConfig+0x38c>)
 80059fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005a00:	095b      	lsrs	r3, r3, #5
 8005a02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a06:	441e      	add	r6, r3
 8005a08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f04f 0100 	mov.w	r1, #0
 8005a10:	4602      	mov	r2, r0
 8005a12:	460b      	mov	r3, r1
 8005a14:	1894      	adds	r4, r2, r2
 8005a16:	603c      	str	r4, [r7, #0]
 8005a18:	415b      	adcs	r3, r3
 8005a1a:	607b      	str	r3, [r7, #4]
 8005a1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a20:	1812      	adds	r2, r2, r0
 8005a22:	eb41 0303 	adc.w	r3, r1, r3
 8005a26:	f04f 0400 	mov.w	r4, #0
 8005a2a:	f04f 0500 	mov.w	r5, #0
 8005a2e:	00dd      	lsls	r5, r3, #3
 8005a30:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a34:	00d4      	lsls	r4, r2, #3
 8005a36:	4622      	mov	r2, r4
 8005a38:	462b      	mov	r3, r5
 8005a3a:	eb12 0a00 	adds.w	sl, r2, r0
 8005a3e:	eb43 0b01 	adc.w	fp, r3, r1
 8005a42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f04f 0100 	mov.w	r1, #0
 8005a4c:	f04f 0200 	mov.w	r2, #0
 8005a50:	f04f 0300 	mov.w	r3, #0
 8005a54:	008b      	lsls	r3, r1, #2
 8005a56:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a5a:	0082      	lsls	r2, r0, #2
 8005a5c:	4650      	mov	r0, sl
 8005a5e:	4659      	mov	r1, fp
 8005a60:	f7fa fbd6 	bl	8000210 <__aeabi_uldivmod>
 8005a64:	4602      	mov	r2, r0
 8005a66:	460b      	mov	r3, r1
 8005a68:	4b0e      	ldr	r3, [pc, #56]	; (8005aa4 <UART_SetConfig+0x38c>)
 8005a6a:	fba3 1302 	umull	r1, r3, r3, r2
 8005a6e:	095b      	lsrs	r3, r3, #5
 8005a70:	2164      	movs	r1, #100	; 0x64
 8005a72:	fb01 f303 	mul.w	r3, r1, r3
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	011b      	lsls	r3, r3, #4
 8005a7a:	3332      	adds	r3, #50	; 0x32
 8005a7c:	4a09      	ldr	r2, [pc, #36]	; (8005aa4 <UART_SetConfig+0x38c>)
 8005a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a82:	095b      	lsrs	r3, r3, #5
 8005a84:	f003 020f 	and.w	r2, r3, #15
 8005a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4432      	add	r2, r6
 8005a8e:	609a      	str	r2, [r3, #8]
}
 8005a90:	bf00      	nop
 8005a92:	377c      	adds	r7, #124	; 0x7c
 8005a94:	46bd      	mov	sp, r7
 8005a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a9a:	bf00      	nop
 8005a9c:	40011000 	.word	0x40011000
 8005aa0:	40011400 	.word	0x40011400
 8005aa4:	51eb851f 	.word	0x51eb851f

08005aa8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005aa8:	b084      	sub	sp, #16
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b084      	sub	sp, #16
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
 8005ab2:	f107 001c 	add.w	r0, r7, #28
 8005ab6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d122      	bne.n	8005b06 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005ad4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d105      	bne.n	8005afa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 f9a0 	bl	8005e40 <USB_CoreReset>
 8005b00:	4603      	mov	r3, r0
 8005b02:	73fb      	strb	r3, [r7, #15]
 8005b04:	e01a      	b.n	8005b3c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f994 	bl	8005e40 <USB_CoreReset>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005b1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d106      	bne.n	8005b30 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	639a      	str	r2, [r3, #56]	; 0x38
 8005b2e:	e005      	b.n	8005b3c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d10b      	bne.n	8005b5a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	f043 0206 	orr.w	r2, r3, #6
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f043 0220 	orr.w	r2, r3, #32
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b66:	b004      	add	sp, #16
 8005b68:	4770      	bx	lr

08005b6a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b083      	sub	sp, #12
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f043 0201 	orr.w	r2, r3, #1
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f023 0201 	bic.w	r2, r3, #1
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	370c      	adds	r7, #12
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr

08005bae <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b084      	sub	sp, #16
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005bca:	78fb      	ldrb	r3, [r7, #3]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d115      	bne.n	8005bfc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005bdc:	2001      	movs	r0, #1
 8005bde:	f7fb fb4b 	bl	8001278 <HAL_Delay>
      ms++;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	3301      	adds	r3, #1
 8005be6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 f91a 	bl	8005e22 <USB_GetMode>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d01e      	beq.n	8005c32 <USB_SetCurrentMode+0x84>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2b31      	cmp	r3, #49	; 0x31
 8005bf8:	d9f0      	bls.n	8005bdc <USB_SetCurrentMode+0x2e>
 8005bfa:	e01a      	b.n	8005c32 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005bfc:	78fb      	ldrb	r3, [r7, #3]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d115      	bne.n	8005c2e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c0e:	2001      	movs	r0, #1
 8005c10:	f7fb fb32 	bl	8001278 <HAL_Delay>
      ms++;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	3301      	adds	r3, #1
 8005c18:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f901 	bl	8005e22 <USB_GetMode>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d005      	beq.n	8005c32 <USB_SetCurrentMode+0x84>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2b31      	cmp	r3, #49	; 0x31
 8005c2a:	d9f0      	bls.n	8005c0e <USB_SetCurrentMode+0x60>
 8005c2c:	e001      	b.n	8005c32 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e005      	b.n	8005c3e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2b32      	cmp	r3, #50	; 0x32
 8005c36:	d101      	bne.n	8005c3c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e000      	b.n	8005c3e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
	...

08005c48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	019b      	lsls	r3, r3, #6
 8005c5a:	f043 0220 	orr.w	r2, r3, #32
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	3301      	adds	r3, #1
 8005c66:	60fb      	str	r3, [r7, #12]
 8005c68:	4a08      	ldr	r2, [pc, #32]	; (8005c8c <USB_FlushTxFifo+0x44>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d901      	bls.n	8005c72 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e006      	b.n	8005c80 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	f003 0320 	and.w	r3, r3, #32
 8005c7a:	2b20      	cmp	r3, #32
 8005c7c:	d0f1      	beq.n	8005c62 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3714      	adds	r7, #20
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr
 8005c8c:	00030d40 	.word	0x00030d40

08005c90 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2210      	movs	r2, #16
 8005ca0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	60fb      	str	r3, [r7, #12]
 8005ca8:	4a08      	ldr	r2, [pc, #32]	; (8005ccc <USB_FlushRxFifo+0x3c>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d901      	bls.n	8005cb2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e006      	b.n	8005cc0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	f003 0310 	and.w	r3, r3, #16
 8005cba:	2b10      	cmp	r3, #16
 8005cbc:	d0f1      	beq.n	8005ca2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3714      	adds	r7, #20
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr
 8005ccc:	00030d40 	.word	0x00030d40

08005cd0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b089      	sub	sp, #36	; 0x24
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	4611      	mov	r1, r2
 8005cdc:	461a      	mov	r2, r3
 8005cde:	460b      	mov	r3, r1
 8005ce0:	71fb      	strb	r3, [r7, #7]
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005cee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d123      	bne.n	8005d3e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005cf6:	88bb      	ldrh	r3, [r7, #4]
 8005cf8:	3303      	adds	r3, #3
 8005cfa:	089b      	lsrs	r3, r3, #2
 8005cfc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005cfe:	2300      	movs	r3, #0
 8005d00:	61bb      	str	r3, [r7, #24]
 8005d02:	e018      	b.n	8005d36 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005d04:	79fb      	ldrb	r3, [r7, #7]
 8005d06:	031a      	lsls	r2, r3, #12
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d10:	461a      	mov	r2, r3
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	3301      	adds	r3, #1
 8005d22:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	3301      	adds	r3, #1
 8005d28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	3301      	adds	r3, #1
 8005d34:	61bb      	str	r3, [r7, #24]
 8005d36:	69ba      	ldr	r2, [r7, #24]
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d3e2      	bcc.n	8005d04 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3724      	adds	r7, #36	; 0x24
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b08b      	sub	sp, #44	; 0x2c
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	4613      	mov	r3, r2
 8005d58:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005d62:	88fb      	ldrh	r3, [r7, #6]
 8005d64:	089b      	lsrs	r3, r3, #2
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005d6a:	88fb      	ldrh	r3, [r7, #6]
 8005d6c:	f003 0303 	and.w	r3, r3, #3
 8005d70:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005d72:	2300      	movs	r3, #0
 8005d74:	623b      	str	r3, [r7, #32]
 8005d76:	e014      	b.n	8005da2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d82:	601a      	str	r2, [r3, #0]
    pDest++;
 8005d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d86:	3301      	adds	r3, #1
 8005d88:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d92:	3301      	adds	r3, #1
 8005d94:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d98:	3301      	adds	r3, #1
 8005d9a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	623b      	str	r3, [r7, #32]
 8005da2:	6a3a      	ldr	r2, [r7, #32]
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d3e6      	bcc.n	8005d78 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005daa:	8bfb      	ldrh	r3, [r7, #30]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d01e      	beq.n	8005dee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005db0:	2300      	movs	r3, #0
 8005db2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dba:	461a      	mov	r2, r3
 8005dbc:	f107 0310 	add.w	r3, r7, #16
 8005dc0:	6812      	ldr	r2, [r2, #0]
 8005dc2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	6a3b      	ldr	r3, [r7, #32]
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	00db      	lsls	r3, r3, #3
 8005dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd4:	701a      	strb	r2, [r3, #0]
      i++;
 8005dd6:	6a3b      	ldr	r3, [r7, #32]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	623b      	str	r3, [r7, #32]
      pDest++;
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dde:	3301      	adds	r3, #1
 8005de0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005de2:	8bfb      	ldrh	r3, [r7, #30]
 8005de4:	3b01      	subs	r3, #1
 8005de6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005de8:	8bfb      	ldrh	r3, [r7, #30]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1ea      	bne.n	8005dc4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	372c      	adds	r7, #44	; 0x2c
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	695b      	ldr	r3, [r3, #20]
 8005e08:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	4013      	ands	r3, r2
 8005e12:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005e14:	68fb      	ldr	r3, [r7, #12]
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3714      	adds	r7, #20
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b083      	sub	sp, #12
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	f003 0301 	and.w	r3, r3, #1
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
	...

08005e40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	60fb      	str	r3, [r7, #12]
 8005e52:	4a13      	ldr	r2, [pc, #76]	; (8005ea0 <USB_CoreReset+0x60>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d901      	bls.n	8005e5c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e01a      	b.n	8005e92 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	daf3      	bge.n	8005e4c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e64:	2300      	movs	r3, #0
 8005e66:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	f043 0201 	orr.w	r2, r3, #1
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	3301      	adds	r3, #1
 8005e78:	60fb      	str	r3, [r7, #12]
 8005e7a:	4a09      	ldr	r2, [pc, #36]	; (8005ea0 <USB_CoreReset+0x60>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d901      	bls.n	8005e84 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e006      	b.n	8005e92 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d0f1      	beq.n	8005e74 <USB_CoreReset+0x34>

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3714      	adds	r7, #20
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	00030d40 	.word	0x00030d40

08005ea4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ea4:	b084      	sub	sp, #16
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b084      	sub	sp, #16
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
 8005eae:	f107 001c 	add.w	r0, r7, #28
 8005eb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eca:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d018      	beq.n	8005f10 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d10a      	bne.n	8005efa <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ef2:	f043 0304 	orr.w	r3, r3, #4
 8005ef6:	6013      	str	r3, [r2, #0]
 8005ef8:	e014      	b.n	8005f24 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68ba      	ldr	r2, [r7, #8]
 8005f04:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f08:	f023 0304 	bic.w	r3, r3, #4
 8005f0c:	6013      	str	r3, [r2, #0]
 8005f0e:	e009      	b.n	8005f24 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f1e:	f023 0304 	bic.w	r3, r3, #4
 8005f22:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005f24:	2110      	movs	r1, #16
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7ff fe8e 	bl	8005c48 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f7ff feaf 	bl	8005c90 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005f32:	2300      	movs	r3, #0
 8005f34:	60fb      	str	r3, [r7, #12]
 8005f36:	e015      	b.n	8005f64 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f44:	461a      	mov	r2, r3
 8005f46:	f04f 33ff 	mov.w	r3, #4294967295
 8005f4a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	015a      	lsls	r2, r3, #5
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	4413      	add	r3, r2
 8005f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f58:	461a      	mov	r2, r3
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	3301      	adds	r3, #1
 8005f62:	60fb      	str	r3, [r7, #12]
 8005f64:	6a3b      	ldr	r3, [r7, #32]
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d3e5      	bcc.n	8005f38 <USB_HostInit+0x94>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f04f 32ff 	mov.w	r2, #4294967295
 8005f78:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00b      	beq.n	8005f9e <USB_HostInit+0xfa>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f8c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a13      	ldr	r2, [pc, #76]	; (8005fe0 <USB_HostInit+0x13c>)
 8005f92:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a13      	ldr	r2, [pc, #76]	; (8005fe4 <USB_HostInit+0x140>)
 8005f98:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005f9c:	e009      	b.n	8005fb2 <USB_HostInit+0x10e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2280      	movs	r2, #128	; 0x80
 8005fa2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a10      	ldr	r2, [pc, #64]	; (8005fe8 <USB_HostInit+0x144>)
 8005fa8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a0f      	ldr	r2, [pc, #60]	; (8005fec <USB_HostInit+0x148>)
 8005fae:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d105      	bne.n	8005fc4 <USB_HostInit+0x120>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	699b      	ldr	r3, [r3, #24]
 8005fbc:	f043 0210 	orr.w	r2, r3, #16
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	699a      	ldr	r2, [r3, #24]
 8005fc8:	4b09      	ldr	r3, [pc, #36]	; (8005ff0 <USB_HostInit+0x14c>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3710      	adds	r7, #16
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fdc:	b004      	add	sp, #16
 8005fde:	4770      	bx	lr
 8005fe0:	01000200 	.word	0x01000200
 8005fe4:	00e00300 	.word	0x00e00300
 8005fe8:	00600080 	.word	0x00600080
 8005fec:	004000e0 	.word	0x004000e0
 8005ff0:	a3200008 	.word	0xa3200008

08005ff4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006012:	f023 0303 	bic.w	r3, r3, #3
 8006016:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	78fb      	ldrb	r3, [r7, #3]
 8006022:	f003 0303 	and.w	r3, r3, #3
 8006026:	68f9      	ldr	r1, [r7, #12]
 8006028:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800602c:	4313      	orrs	r3, r2
 800602e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006030:	78fb      	ldrb	r3, [r7, #3]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d107      	bne.n	8006046 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800603c:	461a      	mov	r2, r3
 800603e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006042:	6053      	str	r3, [r2, #4]
 8006044:	e009      	b.n	800605a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006046:	78fb      	ldrb	r3, [r7, #3]
 8006048:	2b02      	cmp	r3, #2
 800604a:	d106      	bne.n	800605a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006052:	461a      	mov	r2, r3
 8006054:	f241 7370 	movw	r3, #6000	; 0x1770
 8006058:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3714      	adds	r7, #20
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006074:	2300      	movs	r3, #0
 8006076:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006088:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006096:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006098:	2064      	movs	r0, #100	; 0x64
 800609a:	f7fb f8ed 	bl	8001278 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80060a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060aa:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80060ac:	200a      	movs	r0, #10
 80060ae:	f7fb f8e3 	bl	8001278 <HAL_Delay>

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3710      	adds	r7, #16
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	460b      	mov	r3, r1
 80060c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80060cc:	2300      	movs	r3, #0
 80060ce:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80060e0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d109      	bne.n	8006100 <USB_DriveVbus+0x44>
 80060ec:	78fb      	ldrb	r3, [r7, #3]
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d106      	bne.n	8006100 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80060fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80060fe:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800610a:	d109      	bne.n	8006120 <USB_DriveVbus+0x64>
 800610c:	78fb      	ldrb	r3, [r7, #3]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d106      	bne.n	8006120 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800611a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800611e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800612e:	b480      	push	{r7}
 8006130:	b085      	sub	sp, #20
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800613a:	2300      	movs	r3, #0
 800613c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	0c5b      	lsrs	r3, r3, #17
 800614c:	f003 0303 	and.w	r3, r3, #3
}
 8006150:	4618      	mov	r0, r3
 8006152:	3714      	adds	r7, #20
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	b29b      	uxth	r3, r3
}
 8006172:	4618      	mov	r0, r3
 8006174:	3714      	adds	r7, #20
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
	...

08006180 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b088      	sub	sp, #32
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	4608      	mov	r0, r1
 800618a:	4611      	mov	r1, r2
 800618c:	461a      	mov	r2, r3
 800618e:	4603      	mov	r3, r0
 8006190:	70fb      	strb	r3, [r7, #3]
 8006192:	460b      	mov	r3, r1
 8006194:	70bb      	strb	r3, [r7, #2]
 8006196:	4613      	mov	r3, r2
 8006198:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800619a:	2300      	movs	r3, #0
 800619c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80061a2:	78fb      	ldrb	r3, [r7, #3]
 80061a4:	015a      	lsls	r2, r3, #5
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	4413      	add	r3, r2
 80061aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ae:	461a      	mov	r2, r3
 80061b0:	f04f 33ff 	mov.w	r3, #4294967295
 80061b4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80061b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80061ba:	2b03      	cmp	r3, #3
 80061bc:	d87e      	bhi.n	80062bc <USB_HC_Init+0x13c>
 80061be:	a201      	add	r2, pc, #4	; (adr r2, 80061c4 <USB_HC_Init+0x44>)
 80061c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c4:	080061d5 	.word	0x080061d5
 80061c8:	0800627f 	.word	0x0800627f
 80061cc:	080061d5 	.word	0x080061d5
 80061d0:	08006241 	.word	0x08006241
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80061d4:	78fb      	ldrb	r3, [r7, #3]
 80061d6:	015a      	lsls	r2, r3, #5
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	4413      	add	r3, r2
 80061dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e0:	461a      	mov	r2, r3
 80061e2:	f240 439d 	movw	r3, #1181	; 0x49d
 80061e6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80061e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	da10      	bge.n	8006212 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80061f0:	78fb      	ldrb	r3, [r7, #3]
 80061f2:	015a      	lsls	r2, r3, #5
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	78fa      	ldrb	r2, [r7, #3]
 8006200:	0151      	lsls	r1, r2, #5
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	440a      	add	r2, r1
 8006206:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800620a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800620e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006210:	e057      	b.n	80062c2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800621a:	2b00      	cmp	r3, #0
 800621c:	d051      	beq.n	80062c2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800621e:	78fb      	ldrb	r3, [r7, #3]
 8006220:	015a      	lsls	r2, r3, #5
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	4413      	add	r3, r2
 8006226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	78fa      	ldrb	r2, [r7, #3]
 800622e:	0151      	lsls	r1, r2, #5
 8006230:	693a      	ldr	r2, [r7, #16]
 8006232:	440a      	add	r2, r1
 8006234:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006238:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800623c:	60d3      	str	r3, [r2, #12]
      break;
 800623e:	e040      	b.n	80062c2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006240:	78fb      	ldrb	r3, [r7, #3]
 8006242:	015a      	lsls	r2, r3, #5
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	4413      	add	r3, r2
 8006248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800624c:	461a      	mov	r2, r3
 800624e:	f240 639d 	movw	r3, #1693	; 0x69d
 8006252:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006254:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006258:	2b00      	cmp	r3, #0
 800625a:	da34      	bge.n	80062c6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800625c:	78fb      	ldrb	r3, [r7, #3]
 800625e:	015a      	lsls	r2, r3, #5
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	4413      	add	r3, r2
 8006264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	78fa      	ldrb	r2, [r7, #3]
 800626c:	0151      	lsls	r1, r2, #5
 800626e:	693a      	ldr	r2, [r7, #16]
 8006270:	440a      	add	r2, r1
 8006272:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800627a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800627c:	e023      	b.n	80062c6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800627e:	78fb      	ldrb	r3, [r7, #3]
 8006280:	015a      	lsls	r2, r3, #5
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	4413      	add	r3, r2
 8006286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800628a:	461a      	mov	r2, r3
 800628c:	f240 2325 	movw	r3, #549	; 0x225
 8006290:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006292:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006296:	2b00      	cmp	r3, #0
 8006298:	da17      	bge.n	80062ca <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800629a:	78fb      	ldrb	r3, [r7, #3]
 800629c:	015a      	lsls	r2, r3, #5
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	78fa      	ldrb	r2, [r7, #3]
 80062aa:	0151      	lsls	r1, r2, #5
 80062ac:	693a      	ldr	r2, [r7, #16]
 80062ae:	440a      	add	r2, r1
 80062b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062b4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80062b8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80062ba:	e006      	b.n	80062ca <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	77fb      	strb	r3, [r7, #31]
      break;
 80062c0:	e004      	b.n	80062cc <USB_HC_Init+0x14c>
      break;
 80062c2:	bf00      	nop
 80062c4:	e002      	b.n	80062cc <USB_HC_Init+0x14c>
      break;
 80062c6:	bf00      	nop
 80062c8:	e000      	b.n	80062cc <USB_HC_Init+0x14c>
      break;
 80062ca:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062d2:	699a      	ldr	r2, [r3, #24]
 80062d4:	78fb      	ldrb	r3, [r7, #3]
 80062d6:	f003 030f 	and.w	r3, r3, #15
 80062da:	2101      	movs	r1, #1
 80062dc:	fa01 f303 	lsl.w	r3, r1, r3
 80062e0:	6939      	ldr	r1, [r7, #16]
 80062e2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80062e6:	4313      	orrs	r3, r2
 80062e8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80062f6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	da03      	bge.n	8006306 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80062fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006302:	61bb      	str	r3, [r7, #24]
 8006304:	e001      	b.n	800630a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006306:	2300      	movs	r3, #0
 8006308:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f7ff ff0f 	bl	800612e <USB_GetHostSpeed>
 8006310:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006312:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006316:	2b02      	cmp	r3, #2
 8006318:	d106      	bne.n	8006328 <USB_HC_Init+0x1a8>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2b02      	cmp	r3, #2
 800631e:	d003      	beq.n	8006328 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006320:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006324:	617b      	str	r3, [r7, #20]
 8006326:	e001      	b.n	800632c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006328:	2300      	movs	r3, #0
 800632a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800632c:	787b      	ldrb	r3, [r7, #1]
 800632e:	059b      	lsls	r3, r3, #22
 8006330:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006334:	78bb      	ldrb	r3, [r7, #2]
 8006336:	02db      	lsls	r3, r3, #11
 8006338:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800633c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800633e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006342:	049b      	lsls	r3, r3, #18
 8006344:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006348:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800634a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800634c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006350:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006356:	78fb      	ldrb	r3, [r7, #3]
 8006358:	0159      	lsls	r1, r3, #5
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	440b      	add	r3, r1
 800635e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006362:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006368:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800636a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800636e:	2b03      	cmp	r3, #3
 8006370:	d10f      	bne.n	8006392 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006372:	78fb      	ldrb	r3, [r7, #3]
 8006374:	015a      	lsls	r2, r3, #5
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	4413      	add	r3, r2
 800637a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	78fa      	ldrb	r2, [r7, #3]
 8006382:	0151      	lsls	r1, r2, #5
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	440a      	add	r2, r1
 8006388:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800638c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006390:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006392:	7ffb      	ldrb	r3, [r7, #31]
}
 8006394:	4618      	mov	r0, r3
 8006396:	3720      	adds	r7, #32
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b08c      	sub	sp, #48	; 0x30
 80063a0:	af02      	add	r7, sp, #8
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	4613      	mov	r3, r2
 80063a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	785b      	ldrb	r3, [r3, #1]
 80063b2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80063b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80063b8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d02d      	beq.n	8006422 <USB_HC_StartXfer+0x86>
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	791b      	ldrb	r3, [r3, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d129      	bne.n	8006422 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80063ce:	79fb      	ldrb	r3, [r7, #7]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d117      	bne.n	8006404 <USB_HC_StartXfer+0x68>
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	79db      	ldrb	r3, [r3, #7]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d003      	beq.n	80063e4 <USB_HC_StartXfer+0x48>
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	79db      	ldrb	r3, [r3, #7]
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d10f      	bne.n	8006404 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	015a      	lsls	r2, r3, #5
 80063e8:	6a3b      	ldr	r3, [r7, #32]
 80063ea:	4413      	add	r3, r2
 80063ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	69fa      	ldr	r2, [r7, #28]
 80063f4:	0151      	lsls	r1, r2, #5
 80063f6:	6a3a      	ldr	r2, [r7, #32]
 80063f8:	440a      	add	r2, r1
 80063fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006402:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006404:	79fb      	ldrb	r3, [r7, #7]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d10b      	bne.n	8006422 <USB_HC_StartXfer+0x86>
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	795b      	ldrb	r3, [r3, #5]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d107      	bne.n	8006422 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	785b      	ldrb	r3, [r3, #1]
 8006416:	4619      	mov	r1, r3
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f000 fa2f 	bl	800687c <USB_DoPing>
      return HAL_OK;
 800641e:	2300      	movs	r3, #0
 8006420:	e0f8      	b.n	8006614 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	695b      	ldr	r3, [r3, #20]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d018      	beq.n	800645c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	8912      	ldrh	r2, [r2, #8]
 8006432:	4413      	add	r3, r2
 8006434:	3b01      	subs	r3, #1
 8006436:	68ba      	ldr	r2, [r7, #8]
 8006438:	8912      	ldrh	r2, [r2, #8]
 800643a:	fbb3 f3f2 	udiv	r3, r3, r2
 800643e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006440:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006442:	8b7b      	ldrh	r3, [r7, #26]
 8006444:	429a      	cmp	r2, r3
 8006446:	d90b      	bls.n	8006460 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006448:	8b7b      	ldrh	r3, [r7, #26]
 800644a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800644c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800644e:	68ba      	ldr	r2, [r7, #8]
 8006450:	8912      	ldrh	r2, [r2, #8]
 8006452:	fb02 f203 	mul.w	r2, r2, r3
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	611a      	str	r2, [r3, #16]
 800645a:	e001      	b.n	8006460 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800645c:	2301      	movs	r3, #1
 800645e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	78db      	ldrb	r3, [r3, #3]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d007      	beq.n	8006478 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006468:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800646a:	68ba      	ldr	r2, [r7, #8]
 800646c:	8912      	ldrh	r2, [r2, #8]
 800646e:	fb02 f203 	mul.w	r2, r2, r3
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	611a      	str	r2, [r3, #16]
 8006476:	e003      	b.n	8006480 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	695a      	ldr	r2, [r3, #20]
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006488:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800648a:	04d9      	lsls	r1, r3, #19
 800648c:	4b63      	ldr	r3, [pc, #396]	; (800661c <USB_HC_StartXfer+0x280>)
 800648e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006490:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	7a9b      	ldrb	r3, [r3, #10]
 8006496:	075b      	lsls	r3, r3, #29
 8006498:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800649c:	69f9      	ldr	r1, [r7, #28]
 800649e:	0148      	lsls	r0, r1, #5
 80064a0:	6a39      	ldr	r1, [r7, #32]
 80064a2:	4401      	add	r1, r0
 80064a4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80064a8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80064aa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80064ac:	79fb      	ldrb	r3, [r7, #7]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d009      	beq.n	80064c6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	68d9      	ldr	r1, [r3, #12]
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	015a      	lsls	r2, r3, #5
 80064ba:	6a3b      	ldr	r3, [r7, #32]
 80064bc:	4413      	add	r3, r2
 80064be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064c2:	460a      	mov	r2, r1
 80064c4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80064c6:	6a3b      	ldr	r3, [r7, #32]
 80064c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	f003 0301 	and.w	r3, r3, #1
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	bf0c      	ite	eq
 80064d6:	2301      	moveq	r3, #1
 80064d8:	2300      	movne	r3, #0
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	015a      	lsls	r2, r3, #5
 80064e2:	6a3b      	ldr	r3, [r7, #32]
 80064e4:	4413      	add	r3, r2
 80064e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	69fa      	ldr	r2, [r7, #28]
 80064ee:	0151      	lsls	r1, r2, #5
 80064f0:	6a3a      	ldr	r2, [r7, #32]
 80064f2:	440a      	add	r2, r1
 80064f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064f8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80064fc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	015a      	lsls	r2, r3, #5
 8006502:	6a3b      	ldr	r3, [r7, #32]
 8006504:	4413      	add	r3, r2
 8006506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	7e7b      	ldrb	r3, [r7, #25]
 800650e:	075b      	lsls	r3, r3, #29
 8006510:	69f9      	ldr	r1, [r7, #28]
 8006512:	0148      	lsls	r0, r1, #5
 8006514:	6a39      	ldr	r1, [r7, #32]
 8006516:	4401      	add	r1, r0
 8006518:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800651c:	4313      	orrs	r3, r2
 800651e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	015a      	lsls	r2, r3, #5
 8006524:	6a3b      	ldr	r3, [r7, #32]
 8006526:	4413      	add	r3, r2
 8006528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006536:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	78db      	ldrb	r3, [r3, #3]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d004      	beq.n	800654a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006546:	613b      	str	r3, [r7, #16]
 8006548:	e003      	b.n	8006552 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006550:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006558:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	015a      	lsls	r2, r3, #5
 800655e:	6a3b      	ldr	r3, [r7, #32]
 8006560:	4413      	add	r3, r2
 8006562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006566:	461a      	mov	r2, r3
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800656c:	79fb      	ldrb	r3, [r7, #7]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d001      	beq.n	8006576 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006572:	2300      	movs	r3, #0
 8006574:	e04e      	b.n	8006614 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	78db      	ldrb	r3, [r3, #3]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d149      	bne.n	8006612 <USB_HC_StartXfer+0x276>
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d045      	beq.n	8006612 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	79db      	ldrb	r3, [r3, #7]
 800658a:	2b03      	cmp	r3, #3
 800658c:	d830      	bhi.n	80065f0 <USB_HC_StartXfer+0x254>
 800658e:	a201      	add	r2, pc, #4	; (adr r2, 8006594 <USB_HC_StartXfer+0x1f8>)
 8006590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006594:	080065a5 	.word	0x080065a5
 8006598:	080065c9 	.word	0x080065c9
 800659c:	080065a5 	.word	0x080065a5
 80065a0:	080065c9 	.word	0x080065c9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	695b      	ldr	r3, [r3, #20]
 80065a8:	3303      	adds	r3, #3
 80065aa:	089b      	lsrs	r3, r3, #2
 80065ac:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80065ae:	8afa      	ldrh	r2, [r7, #22]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d91c      	bls.n	80065f4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	f043 0220 	orr.w	r2, r3, #32
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	619a      	str	r2, [r3, #24]
        }
        break;
 80065c6:	e015      	b.n	80065f4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	695b      	ldr	r3, [r3, #20]
 80065cc:	3303      	adds	r3, #3
 80065ce:	089b      	lsrs	r3, r3, #2
 80065d0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80065d2:	8afa      	ldrh	r2, [r7, #22]
 80065d4:	6a3b      	ldr	r3, [r7, #32]
 80065d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	b29b      	uxth	r3, r3
 80065de:	429a      	cmp	r2, r3
 80065e0:	d90a      	bls.n	80065f8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	619a      	str	r2, [r3, #24]
        }
        break;
 80065ee:	e003      	b.n	80065f8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80065f0:	bf00      	nop
 80065f2:	e002      	b.n	80065fa <USB_HC_StartXfer+0x25e>
        break;
 80065f4:	bf00      	nop
 80065f6:	e000      	b.n	80065fa <USB_HC_StartXfer+0x25e>
        break;
 80065f8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	68d9      	ldr	r1, [r3, #12]
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	785a      	ldrb	r2, [r3, #1]
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	695b      	ldr	r3, [r3, #20]
 8006606:	b29b      	uxth	r3, r3
 8006608:	2000      	movs	r0, #0
 800660a:	9000      	str	r0, [sp, #0]
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f7ff fb5f 	bl	8005cd0 <USB_WritePacket>
  }

  return HAL_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3728      	adds	r7, #40	; 0x28
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	1ff80000 	.word	0x1ff80000

08006620 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006632:	695b      	ldr	r3, [r3, #20]
 8006634:	b29b      	uxth	r3, r3
}
 8006636:	4618      	mov	r0, r3
 8006638:	3714      	adds	r7, #20
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006642:	b480      	push	{r7}
 8006644:	b089      	sub	sp, #36	; 0x24
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
 800664a:	460b      	mov	r3, r1
 800664c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8006652:	78fb      	ldrb	r3, [r7, #3]
 8006654:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8006656:	2300      	movs	r3, #0
 8006658:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	015a      	lsls	r2, r3, #5
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	4413      	add	r3, r2
 8006662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	0c9b      	lsrs	r3, r3, #18
 800666a:	f003 0303 	and.w	r3, r3, #3
 800666e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	015a      	lsls	r2, r3, #5
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	4413      	add	r3, r2
 8006678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	0fdb      	lsrs	r3, r3, #31
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f003 0320 	and.w	r3, r3, #32
 800668e:	2b20      	cmp	r3, #32
 8006690:	d104      	bne.n	800669c <USB_HC_Halt+0x5a>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d101      	bne.n	800669c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006698:	2300      	movs	r3, #0
 800669a:	e0e8      	b.n	800686e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d002      	beq.n	80066a8 <USB_HC_Halt+0x66>
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d173      	bne.n	8006790 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	015a      	lsls	r2, r3, #5
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	4413      	add	r3, r2
 80066b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	0151      	lsls	r1, r2, #5
 80066ba:	69ba      	ldr	r2, [r7, #24]
 80066bc:	440a      	add	r2, r1
 80066be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066c6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	f003 0320 	and.w	r3, r3, #32
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f040 80cb 	bne.w	800686c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d143      	bne.n	800676a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	015a      	lsls	r2, r3, #5
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	4413      	add	r3, r2
 80066ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	697a      	ldr	r2, [r7, #20]
 80066f2:	0151      	lsls	r1, r2, #5
 80066f4:	69ba      	ldr	r2, [r7, #24]
 80066f6:	440a      	add	r2, r1
 80066f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006700:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	015a      	lsls	r2, r3, #5
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	4413      	add	r3, r2
 800670a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	0151      	lsls	r1, r2, #5
 8006714:	69ba      	ldr	r2, [r7, #24]
 8006716:	440a      	add	r2, r1
 8006718:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800671c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006720:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	015a      	lsls	r2, r3, #5
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	4413      	add	r3, r2
 800672a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	697a      	ldr	r2, [r7, #20]
 8006732:	0151      	lsls	r1, r2, #5
 8006734:	69ba      	ldr	r2, [r7, #24]
 8006736:	440a      	add	r2, r1
 8006738:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800673c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006740:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	3301      	adds	r3, #1
 8006746:	61fb      	str	r3, [r7, #28]
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800674e:	d81d      	bhi.n	800678c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	015a      	lsls	r2, r3, #5
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	4413      	add	r3, r2
 8006758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006762:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006766:	d0ec      	beq.n	8006742 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006768:	e080      	b.n	800686c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	015a      	lsls	r2, r3, #5
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	4413      	add	r3, r2
 8006772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	697a      	ldr	r2, [r7, #20]
 800677a:	0151      	lsls	r1, r2, #5
 800677c:	69ba      	ldr	r2, [r7, #24]
 800677e:	440a      	add	r2, r1
 8006780:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006784:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006788:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800678a:	e06f      	b.n	800686c <USB_HC_Halt+0x22a>
            break;
 800678c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800678e:	e06d      	b.n	800686c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	4413      	add	r3, r2
 8006798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	697a      	ldr	r2, [r7, #20]
 80067a0:	0151      	lsls	r1, r2, #5
 80067a2:	69ba      	ldr	r2, [r7, #24]
 80067a4:	440a      	add	r2, r1
 80067a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067ae:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d143      	bne.n	8006848 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	015a      	lsls	r2, r3, #5
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	4413      	add	r3, r2
 80067c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	0151      	lsls	r1, r2, #5
 80067d2:	69ba      	ldr	r2, [r7, #24]
 80067d4:	440a      	add	r2, r1
 80067d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067de:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	015a      	lsls	r2, r3, #5
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	4413      	add	r3, r2
 80067e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	697a      	ldr	r2, [r7, #20]
 80067f0:	0151      	lsls	r1, r2, #5
 80067f2:	69ba      	ldr	r2, [r7, #24]
 80067f4:	440a      	add	r2, r1
 80067f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067fe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	015a      	lsls	r2, r3, #5
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	4413      	add	r3, r2
 8006808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	697a      	ldr	r2, [r7, #20]
 8006810:	0151      	lsls	r1, r2, #5
 8006812:	69ba      	ldr	r2, [r7, #24]
 8006814:	440a      	add	r2, r1
 8006816:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800681a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800681e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	3301      	adds	r3, #1
 8006824:	61fb      	str	r3, [r7, #28]
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800682c:	d81d      	bhi.n	800686a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	015a      	lsls	r2, r3, #5
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	4413      	add	r3, r2
 8006836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006840:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006844:	d0ec      	beq.n	8006820 <USB_HC_Halt+0x1de>
 8006846:	e011      	b.n	800686c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	015a      	lsls	r2, r3, #5
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	4413      	add	r3, r2
 8006850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	697a      	ldr	r2, [r7, #20]
 8006858:	0151      	lsls	r1, r2, #5
 800685a:	69ba      	ldr	r2, [r7, #24]
 800685c:	440a      	add	r2, r1
 800685e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006862:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006866:	6013      	str	r3, [r2, #0]
 8006868:	e000      	b.n	800686c <USB_HC_Halt+0x22a>
          break;
 800686a:	bf00      	nop
    }
  }

  return HAL_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3724      	adds	r7, #36	; 0x24
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr
	...

0800687c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800687c:	b480      	push	{r7}
 800687e:	b087      	sub	sp, #28
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	460b      	mov	r3, r1
 8006886:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800688c:	78fb      	ldrb	r3, [r7, #3]
 800688e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006890:	2301      	movs	r3, #1
 8006892:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	04da      	lsls	r2, r3, #19
 8006898:	4b15      	ldr	r3, [pc, #84]	; (80068f0 <USB_DoPing+0x74>)
 800689a:	4013      	ands	r3, r2
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	0151      	lsls	r1, r2, #5
 80068a0:	697a      	ldr	r2, [r7, #20]
 80068a2:	440a      	add	r2, r1
 80068a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068ac:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	015a      	lsls	r2, r3, #5
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	4413      	add	r3, r2
 80068b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80068c4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068cc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	015a      	lsls	r2, r3, #5
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	4413      	add	r3, r2
 80068d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068da:	461a      	mov	r2, r3
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	371c      	adds	r7, #28
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	1ff80000 	.word	0x1ff80000

080068f4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b086      	sub	sp, #24
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006900:	2300      	movs	r3, #0
 8006902:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f7ff f941 	bl	8005b8c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800690a:	2110      	movs	r1, #16
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f7ff f99b 	bl	8005c48 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f7ff f9bc 	bl	8005c90 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006918:	2300      	movs	r3, #0
 800691a:	613b      	str	r3, [r7, #16]
 800691c:	e01f      	b.n	800695e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	015a      	lsls	r2, r3, #5
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	4413      	add	r3, r2
 8006926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006934:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800693c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006944:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	015a      	lsls	r2, r3, #5
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	4413      	add	r3, r2
 800694e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006952:	461a      	mov	r2, r3
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	3301      	adds	r3, #1
 800695c:	613b      	str	r3, [r7, #16]
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	2b0f      	cmp	r3, #15
 8006962:	d9dc      	bls.n	800691e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006964:	2300      	movs	r3, #0
 8006966:	613b      	str	r3, [r7, #16]
 8006968:	e034      	b.n	80069d4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	015a      	lsls	r2, r3, #5
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	4413      	add	r3, r2
 8006972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006980:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006988:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006990:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	015a      	lsls	r2, r3, #5
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	4413      	add	r3, r2
 800699a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800699e:	461a      	mov	r2, r3
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	3301      	adds	r3, #1
 80069a8:	617b      	str	r3, [r7, #20]
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069b0:	d80c      	bhi.n	80069cc <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	015a      	lsls	r2, r3, #5
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	4413      	add	r3, r2
 80069ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069c8:	d0ec      	beq.n	80069a4 <USB_StopHost+0xb0>
 80069ca:	e000      	b.n	80069ce <USB_StopHost+0xda>
        break;
 80069cc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	3301      	adds	r3, #1
 80069d2:	613b      	str	r3, [r7, #16]
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	2b0f      	cmp	r3, #15
 80069d8:	d9c7      	bls.n	800696a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069e0:	461a      	mov	r2, r3
 80069e2:	f04f 33ff 	mov.w	r3, #4294967295
 80069e6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f04f 32ff 	mov.w	r2, #4294967295
 80069ee:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f7ff f8ba 	bl	8005b6a <USB_EnableGlobalInt>

  return HAL_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3718      	adds	r7, #24
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <USBH_AUDIO_InterfaceInit>:
  *         The function init the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006a00:	b590      	push	{r4, r7, lr}
 8006a02:	b08b      	sub	sp, #44	; 0x2c
 8006a04:	af04      	add	r7, sp, #16
 8006a06:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef out_status, in_status;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  uint8_t  interface, index;
  uint16_t ep_size_out = 0U;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	82bb      	strh	r3, [r7, #20]
  uint16_t ep_size_in = 0U;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	827b      	strh	r3, [r7, #18]

  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0x00U);
 8006a10:	2300      	movs	r3, #0
 8006a12:	2201      	movs	r2, #1
 8006a14:	2101      	movs	r1, #1
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f002 f842 	bl	8008aa0 <USBH_FindInterface>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	747b      	strb	r3, [r7, #17]

  if (interface == 0xFFU) /* Not Valid Interface */
 8006a20:	7c7b      	ldrb	r3, [r7, #17]
 8006a22:	2bff      	cmp	r3, #255	; 0xff
 8006a24:	d101      	bne.n	8006a2a <USBH_AUDIO_InterfaceInit+0x2a>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006a26:	2302      	movs	r3, #2
 8006a28:	e1a5      	b.n	8006d76 <USBH_AUDIO_InterfaceInit+0x376>
  }

  phost->pActiveClass->pData = (AUDIO_HandleTypeDef *)USBH_malloc(sizeof(AUDIO_HandleTypeDef));
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8d3 453c 	ldr.w	r4, [r3, #1340]	; 0x53c
 8006a30:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8006a34:	f006 ffc4 	bl	800d9c0 <malloc>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	61e3      	str	r3, [r4, #28]
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8006a42:	69db      	ldr	r3, [r3, #28]
 8006a44:	60fb      	str	r3, [r7, #12]

  if (AUDIO_Handle == NULL)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d101      	bne.n	8006a50 <USBH_AUDIO_InterfaceInit+0x50>
  {
    USBH_DbgLog("Cannot allocate memory for AUDIO Handle");
    return USBH_FAIL;
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	e192      	b.n	8006d76 <USBH_AUDIO_InterfaceInit+0x376>
  }

  /* Initialize audio handler */
  USBH_memset(AUDIO_Handle, 0, sizeof(AUDIO_HandleTypeDef));
 8006a50:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8006a54:	2100      	movs	r1, #0
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f006 ffd0 	bl	800d9fc <memset>

  /* 1st Step:  Find Audio Interfaces */
  out_status = USBH_AUDIO_FindAudioStreamingIN(phost);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 fc64 	bl	800732a <USBH_AUDIO_FindAudioStreamingIN>
 8006a62:	4603      	mov	r3, r0
 8006a64:	72fb      	strb	r3, [r7, #11]

  in_status = USBH_AUDIO_FindAudioStreamingOUT(phost);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 fd1e 	bl	80074a8 <USBH_AUDIO_FindAudioStreamingOUT>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	72bb      	strb	r3, [r7, #10]

  if ((out_status == USBH_FAIL) && (in_status == USBH_FAIL))
 8006a70:	7afb      	ldrb	r3, [r7, #11]
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d104      	bne.n	8006a80 <USBH_AUDIO_InterfaceInit+0x80>
 8006a76:	7abb      	ldrb	r3, [r7, #10]
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d101      	bne.n	8006a80 <USBH_AUDIO_InterfaceInit+0x80>
  {
    USBH_DbgLog("%s class configuration not supported.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	e17a      	b.n	8006d76 <USBH_AUDIO_InterfaceInit+0x376>
  }

  /* 2nd Step:  Select Audio Streaming Interfaces with largest endpoint size : default behavior */
  for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 8006a80:	2300      	movs	r3, #0
 8006a82:	75fb      	strb	r3, [r7, #23]
 8006a84:	e0c6      	b.n	8006c14 <USBH_AUDIO_InterfaceInit+0x214>
  {
    if (AUDIO_Handle->stream_out[index].valid == 1U)
 8006a86:	7dfa      	ldrb	r2, [r7, #23]
 8006a88:	68f9      	ldr	r1, [r7, #12]
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	4413      	add	r3, r2
 8006a90:	005b      	lsls	r3, r3, #1
 8006a92:	440b      	add	r3, r1
 8006a94:	333e      	adds	r3, #62	; 0x3e
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d156      	bne.n	8006b4a <USBH_AUDIO_InterfaceInit+0x14a>
    {
      if (ep_size_out < AUDIO_Handle->stream_out[index].EpSize)
 8006a9c:	7dfa      	ldrb	r2, [r7, #23]
 8006a9e:	68f9      	ldr	r1, [r7, #12]
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	4413      	add	r3, r2
 8006aa6:	005b      	lsls	r3, r3, #1
 8006aa8:	440b      	add	r3, r1
 8006aaa:	333a      	adds	r3, #58	; 0x3a
 8006aac:	881b      	ldrh	r3, [r3, #0]
 8006aae:	8aba      	ldrh	r2, [r7, #20]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d24a      	bcs.n	8006b4a <USBH_AUDIO_InterfaceInit+0x14a>
      {
        ep_size_out = AUDIO_Handle->stream_out[index].EpSize;
 8006ab4:	7dfa      	ldrb	r2, [r7, #23]
 8006ab6:	68f9      	ldr	r1, [r7, #12]
 8006ab8:	4613      	mov	r3, r2
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	4413      	add	r3, r2
 8006abe:	005b      	lsls	r3, r3, #1
 8006ac0:	440b      	add	r3, r1
 8006ac2:	333a      	adds	r3, #58	; 0x3a
 8006ac4:	881b      	ldrh	r3, [r3, #0]
 8006ac6:	82bb      	strh	r3, [r7, #20]
        AUDIO_Handle->headphone.interface = AUDIO_Handle->stream_out[index].interface;
 8006ac8:	7dfa      	ldrb	r2, [r7, #23]
 8006aca:	68f9      	ldr	r1, [r7, #12]
 8006acc:	4613      	mov	r3, r2
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	4413      	add	r3, r2
 8006ad2:	005b      	lsls	r3, r3, #1
 8006ad4:	440b      	add	r3, r1
 8006ad6:	333d      	adds	r3, #61	; 0x3d
 8006ad8:	781a      	ldrb	r2, [r3, #0]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
        AUDIO_Handle->headphone.AltSettings = AUDIO_Handle->stream_out[index].AltSettings;
 8006ae0:	7dfa      	ldrb	r2, [r7, #23]
 8006ae2:	68f9      	ldr	r1, [r7, #12]
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4413      	add	r3, r2
 8006aea:	005b      	lsls	r3, r3, #1
 8006aec:	440b      	add	r3, r1
 8006aee:	333c      	adds	r3, #60	; 0x3c
 8006af0:	781a      	ldrb	r2, [r3, #0]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
        AUDIO_Handle->headphone.Ep = AUDIO_Handle->stream_out[index].Ep;
 8006af8:	7dfa      	ldrb	r2, [r7, #23]
 8006afa:	68f9      	ldr	r1, [r7, #12]
 8006afc:	4613      	mov	r3, r2
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	4413      	add	r3, r2
 8006b02:	005b      	lsls	r3, r3, #1
 8006b04:	440b      	add	r3, r1
 8006b06:	3338      	adds	r3, #56	; 0x38
 8006b08:	781a      	ldrb	r2, [r3, #0]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
        AUDIO_Handle->headphone.EpSize = AUDIO_Handle->stream_out[index].EpSize;
 8006b10:	7dfa      	ldrb	r2, [r7, #23]
 8006b12:	68f9      	ldr	r1, [r7, #12]
 8006b14:	4613      	mov	r3, r2
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4413      	add	r3, r2
 8006b1a:	005b      	lsls	r3, r3, #1
 8006b1c:	440b      	add	r3, r1
 8006b1e:	333a      	adds	r3, #58	; 0x3a
 8006b20:	881a      	ldrh	r2, [r3, #0]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
        AUDIO_Handle->headphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 8006b28:	7dfa      	ldrb	r2, [r7, #23]
 8006b2a:	68f9      	ldr	r1, [r7, #12]
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	4413      	add	r3, r2
 8006b32:	005b      	lsls	r3, r3, #1
 8006b34:	440b      	add	r3, r1
 8006b36:	3340      	adds	r3, #64	; 0x40
 8006b38:	881b      	ldrh	r3, [r3, #0]
 8006b3a:	b2da      	uxtb	r2, r3
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
        AUDIO_Handle->headphone.supported = 1U;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2201      	movs	r2, #1
 8006b46:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
      }
    }

    if (AUDIO_Handle->stream_in[index].valid == 1U)
 8006b4a:	7dfa      	ldrb	r2, [r7, #23]
 8006b4c:	68f9      	ldr	r1, [r7, #12]
 8006b4e:	4613      	mov	r3, r2
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	4413      	add	r3, r2
 8006b54:	005b      	lsls	r3, r3, #1
 8006b56:	440b      	add	r3, r1
 8006b58:	330c      	adds	r3, #12
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d156      	bne.n	8006c0e <USBH_AUDIO_InterfaceInit+0x20e>
    {
      if (ep_size_in < AUDIO_Handle->stream_in[index].EpSize)
 8006b60:	7dfa      	ldrb	r2, [r7, #23]
 8006b62:	68f9      	ldr	r1, [r7, #12]
 8006b64:	4613      	mov	r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4413      	add	r3, r2
 8006b6a:	005b      	lsls	r3, r3, #1
 8006b6c:	440b      	add	r3, r1
 8006b6e:	3308      	adds	r3, #8
 8006b70:	881b      	ldrh	r3, [r3, #0]
 8006b72:	8a7a      	ldrh	r2, [r7, #18]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d24a      	bcs.n	8006c0e <USBH_AUDIO_InterfaceInit+0x20e>
      {
        ep_size_in = AUDIO_Handle->stream_in[index].EpSize;
 8006b78:	7dfa      	ldrb	r2, [r7, #23]
 8006b7a:	68f9      	ldr	r1, [r7, #12]
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	4413      	add	r3, r2
 8006b82:	005b      	lsls	r3, r3, #1
 8006b84:	440b      	add	r3, r1
 8006b86:	3308      	adds	r3, #8
 8006b88:	881b      	ldrh	r3, [r3, #0]
 8006b8a:	827b      	strh	r3, [r7, #18]
        AUDIO_Handle->microphone.interface = AUDIO_Handle->stream_in[index].interface;
 8006b8c:	7dfa      	ldrb	r2, [r7, #23]
 8006b8e:	68f9      	ldr	r1, [r7, #12]
 8006b90:	4613      	mov	r3, r2
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	4413      	add	r3, r2
 8006b96:	005b      	lsls	r3, r3, #1
 8006b98:	440b      	add	r3, r1
 8006b9a:	330b      	adds	r3, #11
 8006b9c:	781a      	ldrb	r2, [r3, #0]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
        AUDIO_Handle->microphone.AltSettings = AUDIO_Handle->stream_in[index].AltSettings;
 8006ba4:	7dfa      	ldrb	r2, [r7, #23]
 8006ba6:	68f9      	ldr	r1, [r7, #12]
 8006ba8:	4613      	mov	r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	4413      	add	r3, r2
 8006bae:	005b      	lsls	r3, r3, #1
 8006bb0:	440b      	add	r3, r1
 8006bb2:	330a      	adds	r3, #10
 8006bb4:	781a      	ldrb	r2, [r3, #0]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
        AUDIO_Handle->microphone.Ep = AUDIO_Handle->stream_in[index].Ep;
 8006bbc:	7dfa      	ldrb	r2, [r7, #23]
 8006bbe:	68f9      	ldr	r1, [r7, #12]
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	4413      	add	r3, r2
 8006bc6:	005b      	lsls	r3, r3, #1
 8006bc8:	440b      	add	r3, r1
 8006bca:	3306      	adds	r3, #6
 8006bcc:	781a      	ldrb	r2, [r3, #0]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
        AUDIO_Handle->microphone.EpSize = AUDIO_Handle->stream_in[index].EpSize;
 8006bd4:	7dfa      	ldrb	r2, [r7, #23]
 8006bd6:	68f9      	ldr	r1, [r7, #12]
 8006bd8:	4613      	mov	r3, r2
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4413      	add	r3, r2
 8006bde:	005b      	lsls	r3, r3, #1
 8006be0:	440b      	add	r3, r1
 8006be2:	3308      	adds	r3, #8
 8006be4:	881a      	ldrh	r2, [r3, #0]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
        AUDIO_Handle->microphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 8006bec:	7dfa      	ldrb	r2, [r7, #23]
 8006bee:	68f9      	ldr	r1, [r7, #12]
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	4413      	add	r3, r2
 8006bf6:	005b      	lsls	r3, r3, #1
 8006bf8:	440b      	add	r3, r1
 8006bfa:	3340      	adds	r3, #64	; 0x40
 8006bfc:	881b      	ldrh	r3, [r3, #0]
 8006bfe:	b2da      	uxtb	r2, r3
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
        AUDIO_Handle->microphone.supported = 1U;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
  for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 8006c0e:	7dfb      	ldrb	r3, [r7, #23]
 8006c10:	3301      	adds	r3, #1
 8006c12:	75fb      	strb	r3, [r7, #23]
 8006c14:	7dfb      	ldrb	r3, [r7, #23]
 8006c16:	2b04      	cmp	r3, #4
 8006c18:	f67f af35 	bls.w	8006a86 <USBH_AUDIO_InterfaceInit+0x86>
      }
    }
  }

  if (USBH_AUDIO_FindHIDControl(phost) == USBH_OK)
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 fd02 	bl	8007626 <USBH_AUDIO_FindHIDControl>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d103      	bne.n	8006c30 <USBH_AUDIO_InterfaceInit+0x230>
  {
    AUDIO_Handle->control.supported = 1U;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
  }

  /* 3rd Step:  Find and Parse Audio interfaces */
  USBH_AUDIO_ParseCSDescriptors(phost);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 fd7a 	bl	800772a <USBH_AUDIO_ParseCSDescriptors>


  /* 4th Step:  Open the Audio streaming pipes*/
  if (AUDIO_Handle->headphone.supported == 1U)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d12e      	bne.n	8006c9e <USBH_AUDIO_InterfaceInit+0x29e>
  {
    USBH_AUDIO_BuildHeadphonePath(phost);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 ffbd 	bl	8007bc0 <USBH_AUDIO_BuildHeadphonePath>

    AUDIO_Handle->headphone.Pipe = USBH_AllocPipe(phost, AUDIO_Handle->headphone.Ep);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f003 fb86 	bl	800a360 <USBH_AllocPipe>
 8006c54:	4603      	mov	r3, r0
 8006c56:	461a      	mov	r2, r3
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb

    /* Open pipe for IN endpoint */
    USBH_OpenPipe(phost,
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f893 10fb 	ldrb.w	r1, [r3, #251]	; 0xfb
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f893 00f4 	ldrb.w	r0, [r3, #244]	; 0xf4
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	f8b2 20f6 	ldrh.w	r2, [r2, #246]	; 0xf6
 8006c7c:	9202      	str	r2, [sp, #8]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	9201      	str	r2, [sp, #4]
 8006c82:	9300      	str	r3, [sp, #0]
 8006c84:	4623      	mov	r3, r4
 8006c86:	4602      	mov	r2, r0
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f003 fb3a 	bl	800a302 <USBH_OpenPipe>
                  phost->device.address,
                  phost->device.speed,
                  USB_EP_TYPE_ISOC,
                  AUDIO_Handle->headphone.EpSize);

    USBH_LL_SetToggle(phost,  AUDIO_Handle->headphone.Pipe, 0U);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8006c94:	2200      	movs	r2, #0
 8006c96:	4619      	mov	r1, r3
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f006 fde2 	bl	800d862 <USBH_LL_SetToggle>
  }

  if (AUDIO_Handle->microphone.supported == 1U)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d12e      	bne.n	8006d06 <USBH_AUDIO_InterfaceInit+0x306>
  {
    USBH_AUDIO_BuildMicrophonePath(phost);
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 ff01 	bl	8007ab0 <USBH_AUDIO_BuildMicrophonePath>
    AUDIO_Handle->microphone.Pipe = USBH_AllocPipe(phost, AUDIO_Handle->microphone.Ep);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f003 fb52 	bl	800a360 <USBH_AllocPipe>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143

    /* Open pipe for IN endpoint */
    USBH_OpenPipe(phost,
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f893 1143 	ldrb.w	r1, [r3, #323]	; 0x143
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f893 013c 	ldrb.w	r0, [r3, #316]	; 0x13c
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	f8b2 213e 	ldrh.w	r2, [r2, #318]	; 0x13e
 8006ce4:	9202      	str	r2, [sp, #8]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	9201      	str	r2, [sp, #4]
 8006cea:	9300      	str	r3, [sp, #0]
 8006cec:	4623      	mov	r3, r4
 8006cee:	4602      	mov	r2, r0
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f003 fb06 	bl	800a302 <USBH_OpenPipe>
                  phost->device.address,
                  phost->device.speed,
                  USB_EP_TYPE_ISOC,
                  AUDIO_Handle->microphone.EpSize);

    USBH_LL_SetToggle(phost,  AUDIO_Handle->microphone.Pipe, 0U);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	4619      	mov	r1, r3
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f006 fdae 	bl	800d862 <USBH_LL_SetToggle>
  }

  if (AUDIO_Handle->control.supported == 1U)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d12b      	bne.n	8006d68 <USBH_AUDIO_InterfaceInit+0x368>
  {
    AUDIO_Handle->control.Pipe  = USBH_AllocPipe(phost, AUDIO_Handle->control.Ep);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 8006d16:	4619      	mov	r1, r3
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f003 fb21 	bl	800a360 <USBH_AllocPipe>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	461a      	mov	r2, r3
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a

    /* Open pipe for IN endpoint */
    USBH_OpenPipe(phost,
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f893 118a 	ldrb.w	r1, [r3, #394]	; 0x18a
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f893 0184 	ldrb.w	r0, [r3, #388]	; 0x184
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	f8b2 2186 	ldrh.w	r2, [r2, #390]	; 0x186
 8006d46:	9202      	str	r2, [sp, #8]
 8006d48:	2203      	movs	r2, #3
 8006d4a:	9201      	str	r2, [sp, #4]
 8006d4c:	9300      	str	r3, [sp, #0]
 8006d4e:	4623      	mov	r3, r4
 8006d50:	4602      	mov	r2, r0
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f003 fad5 	bl	800a302 <USBH_OpenPipe>
                  phost->device.address,
                  phost->device.speed,
                  USB_EP_TYPE_INTR,
                  AUDIO_Handle->control.EpSize);

    USBH_LL_SetToggle(phost,  AUDIO_Handle->control.Pipe, 0U);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8006d5e:	2200      	movs	r2, #0
 8006d60:	4619      	mov	r1, r3
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f006 fd7d 	bl	800d862 <USBH_LL_SetToggle>

  }

  AUDIO_Handle->req_state = AUDIO_REQ_INIT;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	701a      	strb	r2, [r3, #0]
  AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2201      	movs	r2, #1
 8006d72:	70da      	strb	r2, [r3, #3]

  return USBH_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	371c      	adds	r7, #28
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd90      	pop	{r4, r7, pc}

08006d7e <USBH_AUDIO_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b084      	sub	sp, #16
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	60fb      	str	r3, [r7, #12]

  if (AUDIO_Handle->microphone.Pipe != 0x00U)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d011      	beq.n	8006dbe <USBH_AUDIO_InterfaceDeInit+0x40>
  {
    USBH_ClosePipe(phost, AUDIO_Handle->microphone.Pipe);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8006da0:	4619      	mov	r1, r3
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f003 facc 	bl	800a340 <USBH_ClosePipe>
    USBH_FreePipe(phost, AUDIO_Handle->microphone.Pipe);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8006dae:	4619      	mov	r1, r3
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f003 faf7 	bl	800a3a4 <USBH_FreePipe>
    AUDIO_Handle->microphone.Pipe = 0U;     /* Reset the pipe as Free */
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
  }

  if (AUDIO_Handle->headphone.Pipe != 0x00U)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d011      	beq.n	8006dec <USBH_AUDIO_InterfaceDeInit+0x6e>
  {
    USBH_ClosePipe(phost,  AUDIO_Handle->headphone.Pipe);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8006dce:	4619      	mov	r1, r3
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f003 fab5 	bl	800a340 <USBH_ClosePipe>
    USBH_FreePipe(phost,  AUDIO_Handle->headphone.Pipe);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8006ddc:	4619      	mov	r1, r3
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f003 fae0 	bl	800a3a4 <USBH_FreePipe>
    AUDIO_Handle->headphone.Pipe = 0U;     /* Reset the pipe as Free */
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
  }

  if (AUDIO_Handle->control.Pipe != 0x00U)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d011      	beq.n	8006e1a <USBH_AUDIO_InterfaceDeInit+0x9c>
  {
    USBH_ClosePipe(phost,  AUDIO_Handle->control.Pipe);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f003 fa9e 	bl	800a340 <USBH_ClosePipe>
    USBH_FreePipe(phost,  AUDIO_Handle->control.Pipe);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f003 fac9 	bl	800a3a4 <USBH_FreePipe>
    AUDIO_Handle->control.Pipe = 0U;     /* Reset the pipe as Free */
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
  }

  if (phost->pActiveClass->pData)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8006e20:	69db      	ldr	r3, [r3, #28]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00b      	beq.n	8006e3e <USBH_AUDIO_InterfaceDeInit+0xc0>
  {
    USBH_free(phost->pActiveClass->pData);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8006e2c:	69db      	ldr	r3, [r3, #28]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f006 fdce 	bl	800d9d0 <free>
    phost->pActiveClass->pData = 0U;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	61da      	str	r2, [r3, #28]
  }
  return USBH_OK ;
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3710      	adds	r7, #16
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <USBH_AUDIO_ClassRequest>:
  *         for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b086      	sub	sp, #24
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8006e56:	69db      	ldr	r3, [r3, #28]
 8006e58:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	73fb      	strb	r3, [r7, #15]

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->req_state)
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	3b01      	subs	r3, #1
 8006e68:	2b06      	cmp	r3, #6
 8006e6a:	f200 8106 	bhi.w	800707a <USBH_AUDIO_ClassRequest+0x232>
 8006e6e:	a201      	add	r2, pc, #4	; (adr r2, 8006e74 <USBH_AUDIO_ClassRequest+0x2c>)
 8006e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e74:	08006e91 	.word	0x08006e91
 8006e78:	08007047 	.word	0x08007047
 8006e7c:	08006e91 	.word	0x08006e91
 8006e80:	08006eef 	.word	0x08006eef
 8006e84:	08006f87 	.word	0x08006f87
 8006e88:	08006fe7 	.word	0x08006fe7
 8006e8c:	08006f71 	.word	0x08006f71
  {
  case AUDIO_REQ_INIT:
  case AUDIO_REQ_SET_DEFAULT_IN_INTERFACE:
    if (AUDIO_Handle->microphone.supported == 1U)
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d117      	bne.n	8006eca <USBH_AUDIO_ClassRequest+0x82>
    {
      req_status = USBH_SetInterface(phost,
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f002 fcec 	bl	8009882 <USBH_SetInterface>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->microphone.interface,
                                     0U);

      if (req_status == USBH_OK)
 8006eae:	7bfb      	ldrb	r3, [r7, #15]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d103      	bne.n	8006ebc <USBH_AUDIO_ClassRequest+0x74>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	2204      	movs	r2, #4
 8006eb8:	701a      	strb	r2, [r3, #0]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006eba:	e0e0      	b.n	800707e <USBH_AUDIO_ClassRequest+0x236>
      else if (req_status == USBH_NOT_SUPPORTED)
 8006ebc:	7bfb      	ldrb	r3, [r7, #15]
 8006ebe:	2b03      	cmp	r3, #3
 8006ec0:	f040 80dd 	bne.w	800707e <USBH_AUDIO_ClassRequest+0x236>
        status = USBH_FAIL;
 8006ec4:	2302      	movs	r3, #2
 8006ec6:	75fb      	strb	r3, [r7, #23]
    break;
 8006ec8:	e0d9      	b.n	800707e <USBH_AUDIO_ClassRequest+0x236>
      AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	2204      	movs	r2, #4
 8006ece:	701a      	strb	r2, [r3, #0]
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f003 fc50 	bl	800a78c <osMessageQueuePut>
    break;
 8006eec:	e0c7      	b.n	800707e <USBH_AUDIO_ClassRequest+0x236>

  case AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE:
    if (AUDIO_Handle->headphone.supported == 1U)
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d126      	bne.n	8006f46 <USBH_AUDIO_ClassRequest+0xfe>
    {
      req_status = USBH_SetInterface(phost,
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 8006efe:	2200      	movs	r2, #0
 8006f00:	4619      	mov	r1, r3
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f002 fcbd 	bl	8009882 <USBH_SetInterface>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->headphone.interface,
                                     0U);

      if (req_status == USBH_OK)
 8006f0c:	7bfb      	ldrb	r3, [r7, #15]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d112      	bne.n	8006f38 <USBH_AUDIO_ClassRequest+0xf0>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	2207      	movs	r2, #7
 8006f16:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	2206      	movs	r2, #6
 8006f1c:	705a      	strb	r2, [r3, #1]

        AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
        AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006f36:	e0a4      	b.n	8007082 <USBH_AUDIO_ClassRequest+0x23a>
      else if (req_status == USBH_NOT_SUPPORTED)
 8006f38:	7bfb      	ldrb	r3, [r7, #15]
 8006f3a:	2b03      	cmp	r3, #3
 8006f3c:	f040 80a1 	bne.w	8007082 <USBH_AUDIO_ClassRequest+0x23a>
        status = USBH_FAIL;
 8006f40:	2302      	movs	r3, #2
 8006f42:	75fb      	strb	r3, [r7, #23]
    break;
 8006f44:	e09d      	b.n	8007082 <USBH_AUDIO_ClassRequest+0x23a>
      AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	2207      	movs	r2, #7
 8006f4a:	701a      	strb	r2, [r3, #0]
      AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	2206      	movs	r2, #6
 8006f50:	705a      	strb	r2, [r3, #1]
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2202      	movs	r2, #2
 8006f56:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 8006f66:	2300      	movs	r3, #0
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f003 fc0f 	bl	800a78c <osMessageQueuePut>
    break;
 8006f6e:	e088      	b.n	8007082 <USBH_AUDIO_ClassRequest+0x23a>

  case AUDIO_REQ_CS_REQUESTS:
    if (USBH_AUDIO_HandleCSRequest(phost) == USBH_OK)
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 f963 	bl	800723c <USBH_AUDIO_HandleCSRequest>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f040 8084 	bne.w	8007086 <USBH_AUDIO_ClassRequest+0x23e>
    {
      AUDIO_Handle->req_state = AUDIO_REQ_SET_IN_INTERFACE;
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	2205      	movs	r2, #5
 8006f82:	701a      	strb	r2, [r3, #0]
    }
    break;
 8006f84:	e07f      	b.n	8007086 <USBH_AUDIO_ClassRequest+0x23e>

  case AUDIO_REQ_SET_IN_INTERFACE:
    if (AUDIO_Handle->microphone.supported == 1U)
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d118      	bne.n	8006fc2 <USBH_AUDIO_ClassRequest+0x17a>
    {
      req_status = USBH_SetInterface(phost,
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	f893 1140 	ldrb.w	r1, [r3, #320]	; 0x140
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f002 fc6f 	bl	8009882 <USBH_SetInterface>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->microphone.interface,
                                     AUDIO_Handle->microphone.AltSettings);

      if (req_status == USBH_OK)
 8006fa8:	7bfb      	ldrb	r3, [r7, #15]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d103      	bne.n	8006fb6 <USBH_AUDIO_ClassRequest+0x16e>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	2206      	movs	r2, #6
 8006fb2:	701a      	strb	r2, [r3, #0]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006fb4:	e069      	b.n	800708a <USBH_AUDIO_ClassRequest+0x242>
      else if (req_status == USBH_NOT_SUPPORTED)
 8006fb6:	7bfb      	ldrb	r3, [r7, #15]
 8006fb8:	2b03      	cmp	r3, #3
 8006fba:	d166      	bne.n	800708a <USBH_AUDIO_ClassRequest+0x242>
        status = USBH_FAIL;
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	75fb      	strb	r3, [r7, #23]
    break;
 8006fc0:	e063      	b.n	800708a <USBH_AUDIO_ClassRequest+0x242>
      AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	2206      	movs	r2, #6
 8006fc6:	701a      	strb	r2, [r3, #0]
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2202      	movs	r2, #2
 8006fcc:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 8006fdc:	2300      	movs	r3, #0
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f003 fbd4 	bl	800a78c <osMessageQueuePut>
    break;
 8006fe4:	e051      	b.n	800708a <USBH_AUDIO_ClassRequest+0x242>
  case AUDIO_REQ_SET_OUT_INTERFACE:
    if (AUDIO_Handle->headphone.supported == 1U)
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d118      	bne.n	8007022 <USBH_AUDIO_ClassRequest+0x1da>
    {
      req_status = USBH_SetInterface(phost,
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	f893 10f8 	ldrb.w	r1, [r3, #248]	; 0xf8
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f002 fc3f 	bl	8009882 <USBH_SetInterface>
 8007004:	4603      	mov	r3, r0
 8007006:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->headphone.interface,
                                     AUDIO_Handle->headphone.AltSettings);

      if (req_status == USBH_OK)
 8007008:	7bfb      	ldrb	r3, [r7, #15]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d103      	bne.n	8007016 <USBH_AUDIO_ClassRequest+0x1ce>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	2202      	movs	r2, #2
 8007012:	701a      	strb	r2, [r3, #0]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007014:	e03b      	b.n	800708e <USBH_AUDIO_ClassRequest+0x246>
      else if (req_status == USBH_NOT_SUPPORTED)
 8007016:	7bfb      	ldrb	r3, [r7, #15]
 8007018:	2b03      	cmp	r3, #3
 800701a:	d138      	bne.n	800708e <USBH_AUDIO_ClassRequest+0x246>
        status = USBH_FAIL;
 800701c:	2302      	movs	r3, #2
 800701e:	75fb      	strb	r3, [r7, #23]
    break;
 8007020:	e035      	b.n	800708e <USBH_AUDIO_ClassRequest+0x246>
      AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	2202      	movs	r2, #2
 8007026:	701a      	strb	r2, [r3, #0]
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2202      	movs	r2, #2
 800702c:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 800703c:	2300      	movs	r3, #0
 800703e:	2200      	movs	r2, #0
 8007040:	f003 fba4 	bl	800a78c <osMessageQueuePut>
    break;
 8007044:	e023      	b.n	800708e <USBH_AUDIO_ClassRequest+0x246>
  case AUDIO_REQ_IDLE:
    AUDIO_Handle->play_state = AUDIO_PLAYBACK_INIT;
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	2201      	movs	r2, #1
 800704a:	709a      	strb	r2, [r3, #2]
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 3594 	ldr.w	r3, [r3, #1428]	; 0x594
 8007052:	2102      	movs	r1, #2
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	4798      	blx	r3
    status  = USBH_OK;
 8007058:	2300      	movs	r3, #0
 800705a:	75fb      	strb	r3, [r7, #23]

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2204      	movs	r2, #4
 8007060:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 8007070:	2300      	movs	r3, #0
 8007072:	2200      	movs	r2, #0
 8007074:	f003 fb8a 	bl	800a78c <osMessageQueuePut>
#endif
#endif
    break;
 8007078:	e00a      	b.n	8007090 <USBH_AUDIO_ClassRequest+0x248>

  default:
    break;
 800707a:	bf00      	nop
 800707c:	e008      	b.n	8007090 <USBH_AUDIO_ClassRequest+0x248>
    break;
 800707e:	bf00      	nop
 8007080:	e006      	b.n	8007090 <USBH_AUDIO_ClassRequest+0x248>
    break;
 8007082:	bf00      	nop
 8007084:	e004      	b.n	8007090 <USBH_AUDIO_ClassRequest+0x248>
    break;
 8007086:	bf00      	nop
 8007088:	e002      	b.n	8007090 <USBH_AUDIO_ClassRequest+0x248>
    break;
 800708a:	bf00      	nop
 800708c:	e000      	b.n	8007090 <USBH_AUDIO_ClassRequest+0x248>
    break;
 800708e:	bf00      	nop
  }
  return status;
 8007090:	7dfb      	ldrb	r3, [r7, #23]
}
 8007092:	4618      	mov	r0, r3
 8007094:	3718      	adds	r7, #24
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop

0800709c <USBH_AUDIO_CSRequest>:
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_CSRequest(USBH_HandleTypeDef *phost,
                                               uint8_t feature, uint8_t channel)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b088      	sub	sp, #32
 80070a0:	af02      	add	r7, sp, #8
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	460b      	mov	r3, r1
 80070a6:	70fb      	strb	r3, [r7, #3]
 80070a8:	4613      	mov	r3, r2
 80070aa:	70bb      	strb	r3, [r7, #2]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 80070b2:	69db      	ldr	r3, [r3, #28]
 80070b4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 80070b6:	2301      	movs	r3, #1
 80070b8:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 80070ba:	2301      	movs	r3, #1
 80070bc:	73fb      	strb	r3, [r7, #15]
  uint16_t VolumeCtl, ResolutionCtl;

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->cs_req_state)
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	785b      	ldrb	r3, [r3, #1]
 80070c2:	3b04      	subs	r3, #4
 80070c4:	2b04      	cmp	r3, #4
 80070c6:	f200 80aa 	bhi.w	800721e <USBH_AUDIO_CSRequest+0x182>
 80070ca:	a201      	add	r2, pc, #4	; (adr r2, 80070d0 <USBH_AUDIO_CSRequest+0x34>)
 80070cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d0:	0800712d 	.word	0x0800712d
 80070d4:	08007173 	.word	0x08007173
 80070d8:	080070e5 	.word	0x080070e5
 80070dc:	080071d3 	.word	0x080071d3
 80070e0:	08007219 	.word	0x08007219
  {
    case AUDIO_REQ_GET_VOLUME:
      req_status = USBH_AC_GetCur(phost,
 80070e4:	78fa      	ldrb	r2, [r7, #3]
 80070e6:	2302      	movs	r3, #2
 80070e8:	9301      	str	r3, [sp, #4]
 80070ea:	78bb      	ldrb	r3, [r7, #2]
 80070ec:	9300      	str	r3, [sp, #0]
 80070ee:	2302      	movs	r3, #2
 80070f0:	2106      	movs	r1, #6
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 fea2 	bl	8007e3c <USBH_AC_GetCur>
 80070f8:	4603      	mov	r3, r0
 80070fa:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 80070fc:	7bfb      	ldrb	r3, [r7, #15]
 80070fe:	2b01      	cmp	r3, #1
 8007100:	f000 808f 	beq.w	8007222 <USBH_AUDIO_CSRequest+0x186>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MIN_VOLUME;
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	2204      	movs	r2, #4
 8007108:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8007116:	3302      	adds	r3, #2
 8007118:	881b      	ldrh	r3, [r3, #0]
 800711a:	021b      	lsls	r3, r3, #8
 800711c:	b29b      	uxth	r3, r3
 800711e:	4313      	orrs	r3, r2
 8007120:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volume = (uint32_t)VolumeCtl;
 8007122:	897a      	ldrh	r2, [r7, #10]
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      }
      break;
 800712a:	e07a      	b.n	8007222 <USBH_AUDIO_CSRequest+0x186>

    case AUDIO_REQ_GET_MIN_VOLUME:
      req_status = USBH_AC_GetMin(phost,
 800712c:	78fa      	ldrb	r2, [r7, #3]
 800712e:	2302      	movs	r3, #2
 8007130:	9301      	str	r3, [sp, #4]
 8007132:	78bb      	ldrb	r3, [r7, #2]
 8007134:	9300      	str	r3, [sp, #0]
 8007136:	2302      	movs	r3, #2
 8007138:	2106      	movs	r1, #6
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f001 f843 	bl	80081c6 <USBH_AC_GetMin>
 8007140:	4603      	mov	r3, r0
 8007142:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8007144:	7bfb      	ldrb	r3, [r7, #15]
 8007146:	2b01      	cmp	r3, #1
 8007148:	d06d      	beq.n	8007226 <USBH_AUDIO_CSRequest+0x18a>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MAX_VOLUME;
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	2205      	movs	r2, #5
 800714e:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800715c:	3302      	adds	r3, #2
 800715e:	881b      	ldrh	r3, [r3, #0]
 8007160:	021b      	lsls	r3, r3, #8
 8007162:	b29b      	uxth	r3, r3
 8007164:	4313      	orrs	r3, r2
 8007166:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volumeMin = (uint32_t)VolumeCtl;
 8007168:	897a      	ldrh	r2, [r7, #10]
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
      }
      break;
 8007170:	e059      	b.n	8007226 <USBH_AUDIO_CSRequest+0x18a>

    case AUDIO_REQ_GET_MAX_VOLUME:
      req_status = USBH_AC_GetMax(phost,
 8007172:	78fa      	ldrb	r2, [r7, #3]
 8007174:	2302      	movs	r3, #2
 8007176:	9301      	str	r3, [sp, #4]
 8007178:	78bb      	ldrb	r3, [r7, #2]
 800717a:	9300      	str	r3, [sp, #0]
 800717c:	2302      	movs	r3, #2
 800717e:	2106      	movs	r1, #6
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 fef2 	bl	8007f6a <USBH_AC_GetMax>
 8007186:	4603      	mov	r3, r0
 8007188:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 800718a:	7bfb      	ldrb	r3, [r7, #15]
 800718c:	2b01      	cmp	r3, #1
 800718e:	d04c      	beq.n	800722a <USBH_AUDIO_CSRequest+0x18e>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_RESOLUTION;
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	2207      	movs	r2, #7
 8007194:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80071a2:	3302      	adds	r3, #2
 80071a4:	881b      	ldrh	r3, [r3, #0]
 80071a6:	021b      	lsls	r3, r3, #8
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	4313      	orrs	r3, r2
 80071ac:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volumeMax = (uint32_t)VolumeCtl;
 80071ae:	897a      	ldrh	r2, [r7, #10]
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        if (AUDIO_Handle->headphone.attribute.volumeMax < AUDIO_Handle->headphone.attribute.volumeMin)
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d231      	bcs.n	800722a <USBH_AUDIO_CSRequest+0x18e>
        {
          AUDIO_Handle->headphone.attribute.volumeMax = 0xFF00U;
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 80071cc:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        }
      }
      break;
 80071d0:	e02b      	b.n	800722a <USBH_AUDIO_CSRequest+0x18e>

    case AUDIO_REQ_GET_RESOLUTION:
      req_status = USBH_AC_GetRes(phost,
 80071d2:	78fa      	ldrb	r2, [r7, #3]
 80071d4:	2302      	movs	r3, #2
 80071d6:	9301      	str	r3, [sp, #4]
 80071d8:	78bb      	ldrb	r3, [r7, #2]
 80071da:	9300      	str	r3, [sp, #0]
 80071dc:	2302      	movs	r3, #2
 80071de:	2106      	movs	r1, #6
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 ff59 	bl	8008098 <USBH_AC_GetRes>
 80071e6:	4603      	mov	r3, r0
 80071e8:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);                /* length   */
      if (req_status != USBH_BUSY)
 80071ea:	7bfb      	ldrb	r3, [r7, #15]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d01e      	beq.n	800722e <USBH_AUDIO_CSRequest+0x192>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_CS_IDLE;
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	2208      	movs	r2, #8
 80071f4:	705a      	strb	r2, [r3, #1]
        ResolutionCtl = LE16(&AUDIO_Handle->mem[0]);
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8007202:	3302      	adds	r3, #2
 8007204:	881b      	ldrh	r3, [r3, #0]
 8007206:	021b      	lsls	r3, r3, #8
 8007208:	b29b      	uxth	r3, r3
 800720a:	4313      	orrs	r3, r2
 800720c:	81bb      	strh	r3, [r7, #12]
        AUDIO_Handle->headphone.attribute.resolution = (uint32_t)ResolutionCtl;
 800720e:	89ba      	ldrh	r2, [r7, #12]
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
      }
      break;
 8007216:	e00a      	b.n	800722e <USBH_AUDIO_CSRequest+0x192>


    case AUDIO_REQ_CS_IDLE:
      status = USBH_OK;
 8007218:	2300      	movs	r3, #0
 800721a:	75fb      	strb	r3, [r7, #23]
      break;
 800721c:	e008      	b.n	8007230 <USBH_AUDIO_CSRequest+0x194>

    default:
      break;
 800721e:	bf00      	nop
 8007220:	e006      	b.n	8007230 <USBH_AUDIO_CSRequest+0x194>
      break;
 8007222:	bf00      	nop
 8007224:	e004      	b.n	8007230 <USBH_AUDIO_CSRequest+0x194>
      break;
 8007226:	bf00      	nop
 8007228:	e002      	b.n	8007230 <USBH_AUDIO_CSRequest+0x194>
      break;
 800722a:	bf00      	nop
 800722c:	e000      	b.n	8007230 <USBH_AUDIO_CSRequest+0x194>
      break;
 800722e:	bf00      	nop
  }
  return status;
 8007230:	7dfb      	ldrb	r3, [r7, #23]
}
 8007232:	4618      	mov	r0, r3
 8007234:	3718      	adds	r7, #24
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop

0800723c <USBH_AUDIO_HandleCSRequest>:
  *         and associated channels for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_HandleCSRequest(USBH_HandleTypeDef *phost)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_BUSY;
 8007244:	2301      	movs	r3, #1
 8007246:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef cs_status = USBH_BUSY;
 8007248:	2301      	movs	r3, #1
 800724a:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8007252:	69db      	ldr	r3, [r3, #28]
 8007254:	60bb      	str	r3, [r7, #8]

  cs_status = USBH_AUDIO_CSRequest(phost,
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	f893 11a0 	ldrb.w	r1, [r3, #416]	; 0x1a0
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8007262:	461a      	mov	r2, r3
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f7ff ff19 	bl	800709c <USBH_AUDIO_CSRequest>
 800726a:	4603      	mov	r3, r0
 800726c:	73bb      	strb	r3, [r7, #14]
                                   AUDIO_Handle->temp_feature,
                                   AUDIO_Handle->temp_channels);

  if (cs_status != USBH_BUSY)
 800726e:	7bbb      	ldrb	r3, [r7, #14]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d02a      	beq.n	80072ca <USBH_AUDIO_HandleCSRequest+0x8e>
  {

    if (AUDIO_Handle->temp_channels == 1U)
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800727a:	2b01      	cmp	r3, #1
 800727c:	d10c      	bne.n	8007298 <USBH_AUDIO_HandleCSRequest+0x5c>
    {
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
      AUDIO_Handle->temp_channels = 0U;
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
      status = USBH_OK;
 8007292:	2300      	movs	r3, #0
 8007294:	73fb      	strb	r3, [r7, #15]
 8007296:	e007      	b.n	80072a8 <USBH_AUDIO_HandleCSRequest+0x6c>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800729e:	3b01      	subs	r3, #1
 80072a0:	b2da      	uxtb	r2, r3
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	2206      	movs	r2, #6
 80072ac:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2202      	movs	r2, #2
 80072b2:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 80072c2:	2300      	movs	r3, #0
 80072c4:	2200      	movs	r2, #0
 80072c6:	f003 fa61 	bl	800a78c <osMessageQueuePut>
#endif
#endif
  }

  return status;
 80072ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3710      	adds	r7, #16
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <USBH_AUDIO_Process>:
  *         The function is for managing state machine for Audio data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Process(USBH_HandleTypeDef *phost)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80072dc:	2301      	movs	r3, #1
 80072de:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *)  phost->pActiveClass->pData;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 80072e6:	69db      	ldr	r3, [r3, #28]
 80072e8:	60bb      	str	r3, [r7, #8]

  if (AUDIO_Handle->headphone.supported == 1U)
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d102      	bne.n	80072fa <USBH_AUDIO_Process+0x26>
  {
    USBH_AUDIO_OutputStream(phost);
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f001 f8e7 	bl	80084c8 <USBH_AUDIO_OutputStream>
  }

  if (AUDIO_Handle->microphone.supported == 1U)
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8007300:	2b01      	cmp	r3, #1
 8007302:	d102      	bne.n	800730a <USBH_AUDIO_Process+0x36>
  {
    USBH_AUDIO_InputStream(phost);
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f001 f81d 	bl	8008344 <USBH_AUDIO_InputStream>
  }

  return status;
 800730a:	7bfb      	ldrb	r3, [r7, #15]
}
 800730c:	4618      	mov	r0, r3
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <USBH_AUDIO_SOFProcess>:
  *         The function is for managing the SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	370c      	adds	r7, #12
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr

0800732a <USBH_AUDIO_FindAudioStreamingIN>:
  * @brief  Find IN Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingIN(USBH_HandleTypeDef *phost)
{
 800732a:	b480      	push	{r7}
 800732c:	b085      	sub	sp, #20
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL ;
 8007332:	2302      	movs	r3, #2
 8007334:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 800733c:	69db      	ldr	r3, [r3, #28]
 800733e:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 8007340:	2300      	movs	r3, #0
 8007342:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8007344:	2300      	movs	r3, #0
 8007346:	73fb      	strb	r3, [r7, #15]
 8007348:	e09e      	b.n	8007488 <USBH_AUDIO_FindAudioStreamingIN+0x15e>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 800734a:	7bfb      	ldrb	r3, [r7, #15]
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	2132      	movs	r1, #50	; 0x32
 8007350:	fb01 f303 	mul.w	r3, r1, r3
 8007354:	4413      	add	r3, r2
 8007356:	f203 3347 	addw	r3, r3, #839	; 0x347
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	2b01      	cmp	r3, #1
 800735e:	f040 8090 	bne.w	8007482 <USBH_AUDIO_FindAudioStreamingIN+0x158>
        (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 8007362:	7bfb      	ldrb	r3, [r7, #15]
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	2132      	movs	r1, #50	; 0x32
 8007368:	fb01 f303 	mul.w	r3, r1, r3
 800736c:	4413      	add	r3, r2
 800736e:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8007372:	781b      	ldrb	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8007374:	2b02      	cmp	r3, #2
 8007376:	f040 8084 	bne.w	8007482 <USBH_AUDIO_FindAudioStreamingIN+0x158>
    {
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) &&
 800737a:	7bfb      	ldrb	r3, [r7, #15]
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	2132      	movs	r1, #50	; 0x32
 8007380:	fb01 f303 	mul.w	r3, r1, r3
 8007384:	4413      	add	r3, r2
 8007386:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	b25b      	sxtb	r3, r3
 800738e:	2b00      	cmp	r3, #0
 8007390:	da77      	bge.n	8007482 <USBH_AUDIO_FindAudioStreamingIN+0x158>
          (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 8007392:	7bfb      	ldrb	r3, [r7, #15]
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	2132      	movs	r1, #50	; 0x32
 8007398:	fb01 f303 	mul.w	r3, r1, r3
 800739c:	4413      	add	r3, r2
 800739e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80073a2:	881b      	ldrh	r3, [r3, #0]
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) &&
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d06c      	beq.n	8007482 <USBH_AUDIO_FindAudioStreamingIN+0x158>
      {
        AUDIO_Handle->stream_in[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80073a8:	7bfb      	ldrb	r3, [r7, #15]
 80073aa:	7bba      	ldrb	r2, [r7, #14]
 80073ac:	6879      	ldr	r1, [r7, #4]
 80073ae:	2032      	movs	r0, #50	; 0x32
 80073b0:	fb00 f303 	mul.w	r3, r0, r3
 80073b4:	440b      	add	r3, r1
 80073b6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80073ba:	7818      	ldrb	r0, [r3, #0]
 80073bc:	68b9      	ldr	r1, [r7, #8]
 80073be:	4613      	mov	r3, r2
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4413      	add	r3, r2
 80073c4:	005b      	lsls	r3, r3, #1
 80073c6:	440b      	add	r3, r1
 80073c8:	3306      	adds	r3, #6
 80073ca:	4602      	mov	r2, r0
 80073cc:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80073ce:	7bfb      	ldrb	r3, [r7, #15]
 80073d0:	7bba      	ldrb	r2, [r7, #14]
 80073d2:	6879      	ldr	r1, [r7, #4]
 80073d4:	2032      	movs	r0, #50	; 0x32
 80073d6:	fb00 f303 	mul.w	r3, r0, r3
 80073da:	440b      	add	r3, r1
 80073dc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80073e0:	8818      	ldrh	r0, [r3, #0]
 80073e2:	68b9      	ldr	r1, [r7, #8]
 80073e4:	4613      	mov	r3, r2
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	4413      	add	r3, r2
 80073ea:	005b      	lsls	r3, r3, #1
 80073ec:	440b      	add	r3, r1
 80073ee:	3308      	adds	r3, #8
 80073f0:	4602      	mov	r2, r0
 80073f2:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 80073f4:	7bfb      	ldrb	r3, [r7, #15]
 80073f6:	7bba      	ldrb	r2, [r7, #14]
 80073f8:	6879      	ldr	r1, [r7, #4]
 80073fa:	2032      	movs	r0, #50	; 0x32
 80073fc:	fb00 f303 	mul.w	r3, r0, r3
 8007400:	440b      	add	r3, r1
 8007402:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8007406:	7818      	ldrb	r0, [r3, #0]
 8007408:	68b9      	ldr	r1, [r7, #8]
 800740a:	4613      	mov	r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	4413      	add	r3, r2
 8007410:	005b      	lsls	r3, r3, #1
 8007412:	440b      	add	r3, r1
 8007414:	330b      	adds	r3, #11
 8007416:	4602      	mov	r2, r0
 8007418:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 800741a:	7bfb      	ldrb	r3, [r7, #15]
 800741c:	7bba      	ldrb	r2, [r7, #14]
 800741e:	6879      	ldr	r1, [r7, #4]
 8007420:	2032      	movs	r0, #50	; 0x32
 8007422:	fb00 f303 	mul.w	r3, r0, r3
 8007426:	440b      	add	r3, r1
 8007428:	f203 3345 	addw	r3, r3, #837	; 0x345
 800742c:	7818      	ldrb	r0, [r3, #0]
 800742e:	68b9      	ldr	r1, [r7, #8]
 8007430:	4613      	mov	r3, r2
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	4413      	add	r3, r2
 8007436:	005b      	lsls	r3, r3, #1
 8007438:	440b      	add	r3, r1
 800743a:	330a      	adds	r3, #10
 800743c:	4602      	mov	r2, r0
 800743e:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8007440:	7bfb      	ldrb	r3, [r7, #15]
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	2132      	movs	r1, #50	; 0x32
 8007446:	fb01 f303 	mul.w	r3, r1, r3
 800744a:	4413      	add	r3, r2
 800744c:	f203 3352 	addw	r3, r3, #850	; 0x352
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	7bba      	ldrb	r2, [r7, #14]
 8007454:	b298      	uxth	r0, r3
 8007456:	68b9      	ldr	r1, [r7, #8]
 8007458:	4613      	mov	r3, r2
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	4413      	add	r3, r2
 800745e:	005b      	lsls	r3, r3, #1
 8007460:	440b      	add	r3, r1
 8007462:	330e      	adds	r3, #14
 8007464:	4602      	mov	r2, r0
 8007466:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].valid = 1U;
 8007468:	7bba      	ldrb	r2, [r7, #14]
 800746a:	68b9      	ldr	r1, [r7, #8]
 800746c:	4613      	mov	r3, r2
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	4413      	add	r3, r2
 8007472:	005b      	lsls	r3, r3, #1
 8007474:	440b      	add	r3, r1
 8007476:	330c      	adds	r3, #12
 8007478:	2201      	movs	r2, #1
 800747a:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 800747c:	7bbb      	ldrb	r3, [r7, #14]
 800747e:	3301      	adds	r3, #1
 8007480:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8007482:	7bfb      	ldrb	r3, [r7, #15]
 8007484:	3301      	adds	r3, #1
 8007486:	73fb      	strb	r3, [r7, #15]
 8007488:	7bfb      	ldrb	r3, [r7, #15]
 800748a:	2b09      	cmp	r3, #9
 800748c:	f67f af5d 	bls.w	800734a <USBH_AUDIO_FindAudioStreamingIN+0x20>
      }
    }
  }

  if (alt_settings > 0U)
 8007490:	7bbb      	ldrb	r3, [r7, #14]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d001      	beq.n	800749a <USBH_AUDIO_FindAudioStreamingIN+0x170>
  {
    status = USBH_OK;
 8007496:	2300      	movs	r3, #0
 8007498:	737b      	strb	r3, [r7, #13]
  }

  return status;
 800749a:	7b7b      	ldrb	r3, [r7, #13]
}
 800749c:	4618      	mov	r0, r3
 800749e:	3714      	adds	r7, #20
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <USBH_AUDIO_FindAudioStreamingOUT>:
  * @brief  Find OUT Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingOUT(USBH_HandleTypeDef *phost)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL ;
 80074b0:	2302      	movs	r3, #2
 80074b2:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 80074ba:	69db      	ldr	r3, [r3, #28]
 80074bc:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 80074be:	2300      	movs	r3, #0
 80074c0:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 80074c2:	2300      	movs	r3, #0
 80074c4:	73fb      	strb	r3, [r7, #15]
 80074c6:	e09e      	b.n	8007606 <USBH_AUDIO_FindAudioStreamingOUT+0x15e>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 80074c8:	7bfb      	ldrb	r3, [r7, #15]
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	2132      	movs	r1, #50	; 0x32
 80074ce:	fb01 f303 	mul.w	r3, r1, r3
 80074d2:	4413      	add	r3, r2
 80074d4:	f203 3347 	addw	r3, r3, #839	; 0x347
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	2b01      	cmp	r3, #1
 80074dc:	f040 8090 	bne.w	8007600 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
        (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 80074e0:	7bfb      	ldrb	r3, [r7, #15]
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	2132      	movs	r1, #50	; 0x32
 80074e6:	fb01 f303 	mul.w	r3, r1, r3
 80074ea:	4413      	add	r3, r2
 80074ec:	f503 7352 	add.w	r3, r3, #840	; 0x348
 80074f0:	781b      	ldrb	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	f040 8084 	bne.w	8007600 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
    {
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 80074f8:	7bfb      	ldrb	r3, [r7, #15]
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	2132      	movs	r1, #50	; 0x32
 80074fe:	fb01 f303 	mul.w	r3, r1, r3
 8007502:	4413      	add	r3, r2
 8007504:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	b25b      	sxtb	r3, r3
 800750c:	2b00      	cmp	r3, #0
 800750e:	db77      	blt.n	8007600 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
          (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 8007510:	7bfb      	ldrb	r3, [r7, #15]
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	2132      	movs	r1, #50	; 0x32
 8007516:	fb01 f303 	mul.w	r3, r1, r3
 800751a:	4413      	add	r3, r2
 800751c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007520:	881b      	ldrh	r3, [r3, #0]
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 8007522:	2b00      	cmp	r3, #0
 8007524:	d06c      	beq.n	8007600 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
      {
        AUDIO_Handle->stream_out[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007526:	7bfb      	ldrb	r3, [r7, #15]
 8007528:	7bba      	ldrb	r2, [r7, #14]
 800752a:	6879      	ldr	r1, [r7, #4]
 800752c:	2032      	movs	r0, #50	; 0x32
 800752e:	fb00 f303 	mul.w	r3, r0, r3
 8007532:	440b      	add	r3, r1
 8007534:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007538:	7818      	ldrb	r0, [r3, #0]
 800753a:	68b9      	ldr	r1, [r7, #8]
 800753c:	4613      	mov	r3, r2
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	4413      	add	r3, r2
 8007542:	005b      	lsls	r3, r3, #1
 8007544:	440b      	add	r3, r1
 8007546:	3338      	adds	r3, #56	; 0x38
 8007548:	4602      	mov	r2, r0
 800754a:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800754c:	7bfb      	ldrb	r3, [r7, #15]
 800754e:	7bba      	ldrb	r2, [r7, #14]
 8007550:	6879      	ldr	r1, [r7, #4]
 8007552:	2032      	movs	r0, #50	; 0x32
 8007554:	fb00 f303 	mul.w	r3, r0, r3
 8007558:	440b      	add	r3, r1
 800755a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800755e:	8818      	ldrh	r0, [r3, #0]
 8007560:	68b9      	ldr	r1, [r7, #8]
 8007562:	4613      	mov	r3, r2
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	4413      	add	r3, r2
 8007568:	005b      	lsls	r3, r3, #1
 800756a:	440b      	add	r3, r1
 800756c:	333a      	adds	r3, #58	; 0x3a
 800756e:	4602      	mov	r2, r0
 8007570:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 8007572:	7bfb      	ldrb	r3, [r7, #15]
 8007574:	7bba      	ldrb	r2, [r7, #14]
 8007576:	6879      	ldr	r1, [r7, #4]
 8007578:	2032      	movs	r0, #50	; 0x32
 800757a:	fb00 f303 	mul.w	r3, r0, r3
 800757e:	440b      	add	r3, r1
 8007580:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8007584:	7818      	ldrb	r0, [r3, #0]
 8007586:	68b9      	ldr	r1, [r7, #8]
 8007588:	4613      	mov	r3, r2
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	4413      	add	r3, r2
 800758e:	005b      	lsls	r3, r3, #1
 8007590:	440b      	add	r3, r1
 8007592:	333d      	adds	r3, #61	; 0x3d
 8007594:	4602      	mov	r2, r0
 8007596:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 8007598:	7bfb      	ldrb	r3, [r7, #15]
 800759a:	7bba      	ldrb	r2, [r7, #14]
 800759c:	6879      	ldr	r1, [r7, #4]
 800759e:	2032      	movs	r0, #50	; 0x32
 80075a0:	fb00 f303 	mul.w	r3, r0, r3
 80075a4:	440b      	add	r3, r1
 80075a6:	f203 3345 	addw	r3, r3, #837	; 0x345
 80075aa:	7818      	ldrb	r0, [r3, #0]
 80075ac:	68b9      	ldr	r1, [r7, #8]
 80075ae:	4613      	mov	r3, r2
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	4413      	add	r3, r2
 80075b4:	005b      	lsls	r3, r3, #1
 80075b6:	440b      	add	r3, r1
 80075b8:	333c      	adds	r3, #60	; 0x3c
 80075ba:	4602      	mov	r2, r0
 80075bc:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 80075be:	7bfb      	ldrb	r3, [r7, #15]
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	2132      	movs	r1, #50	; 0x32
 80075c4:	fb01 f303 	mul.w	r3, r1, r3
 80075c8:	4413      	add	r3, r2
 80075ca:	f203 3352 	addw	r3, r3, #850	; 0x352
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	7bba      	ldrb	r2, [r7, #14]
 80075d2:	b298      	uxth	r0, r3
 80075d4:	68b9      	ldr	r1, [r7, #8]
 80075d6:	4613      	mov	r3, r2
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	4413      	add	r3, r2
 80075dc:	005b      	lsls	r3, r3, #1
 80075de:	440b      	add	r3, r1
 80075e0:	3340      	adds	r3, #64	; 0x40
 80075e2:	4602      	mov	r2, r0
 80075e4:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].valid = 1U;
 80075e6:	7bba      	ldrb	r2, [r7, #14]
 80075e8:	68b9      	ldr	r1, [r7, #8]
 80075ea:	4613      	mov	r3, r2
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	4413      	add	r3, r2
 80075f0:	005b      	lsls	r3, r3, #1
 80075f2:	440b      	add	r3, r1
 80075f4:	333e      	adds	r3, #62	; 0x3e
 80075f6:	2201      	movs	r2, #1
 80075f8:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 80075fa:	7bbb      	ldrb	r3, [r7, #14]
 80075fc:	3301      	adds	r3, #1
 80075fe:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8007600:	7bfb      	ldrb	r3, [r7, #15]
 8007602:	3301      	adds	r3, #1
 8007604:	73fb      	strb	r3, [r7, #15]
 8007606:	7bfb      	ldrb	r3, [r7, #15]
 8007608:	2b09      	cmp	r3, #9
 800760a:	f67f af5d 	bls.w	80074c8 <USBH_AUDIO_FindAudioStreamingOUT+0x20>
      }
    }
  }

  if (alt_settings > 0U)
 800760e:	7bbb      	ldrb	r3, [r7, #14]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d001      	beq.n	8007618 <USBH_AUDIO_FindAudioStreamingOUT+0x170>
  {
    status = USBH_OK;
 8007614:	2300      	movs	r3, #0
 8007616:	737b      	strb	r3, [r7, #13]
  }

  return status;
 8007618:	7b7b      	ldrb	r3, [r7, #13]
}
 800761a:	4618      	mov	r0, r3
 800761c:	3714      	adds	r7, #20
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr

08007626 <USBH_AUDIO_FindHIDControl>:
  * @brief  Find HID Control interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindHIDControl(USBH_HandleTypeDef *phost)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b084      	sub	sp, #16
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  uint8_t interface;
  USBH_StatusTypeDef status = USBH_FAIL;
 800762e:	2302      	movs	r3, #2
 8007630:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8007638:	69db      	ldr	r3, [r3, #28]
 800763a:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOCONTROL  interface */
  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0xFFU);
 800763c:	23ff      	movs	r3, #255	; 0xff
 800763e:	2201      	movs	r2, #1
 8007640:	2101      	movs	r1, #1
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f001 fa2c 	bl	8008aa0 <USBH_FindInterface>
 8007648:	4603      	mov	r3, r0
 800764a:	73fb      	strb	r3, [r7, #15]
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES))
 800764c:	7bfb      	ldrb	r3, [r7, #15]
 800764e:	2bff      	cmp	r3, #255	; 0xff
 8007650:	d002      	beq.n	8007658 <USBH_AUDIO_FindHIDControl+0x32>
 8007652:	7bfb      	ldrb	r3, [r7, #15]
 8007654:	2b09      	cmp	r3, #9
 8007656:	d901      	bls.n	800765c <USBH_AUDIO_FindHIDControl+0x36>
  {
    return USBH_FAIL;
 8007658:	2302      	movs	r3, #2
 800765a:	e062      	b.n	8007722 <USBH_AUDIO_FindHIDControl+0xfc>
  }

  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 800765c:	2300      	movs	r3, #0
 800765e:	73fb      	strb	r3, [r7, #15]
 8007660:	e05b      	b.n	800771a <USBH_AUDIO_FindHIDControl+0xf4>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 8007662:	7bfb      	ldrb	r3, [r7, #15]
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	2132      	movs	r1, #50	; 0x32
 8007668:	fb01 f303 	mul.w	r3, r1, r3
 800766c:	4413      	add	r3, r2
 800766e:	f203 3347 	addw	r3, r3, #839	; 0x347
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	2b03      	cmp	r3, #3
 8007676:	d14d      	bne.n	8007714 <USBH_AUDIO_FindHIDControl+0xee>
        (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 8007678:	7bfb      	ldrb	r3, [r7, #15]
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	2132      	movs	r1, #50	; 0x32
 800767e:	fb01 f303 	mul.w	r3, r1, r3
 8007682:	4413      	add	r3, r2
 8007684:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007688:	881b      	ldrh	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 800768a:	2b00      	cmp	r3, #0
 800768c:	d042      	beq.n	8007714 <USBH_AUDIO_FindHIDControl+0xee>
    {
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x80U)
 800768e:	7bfb      	ldrb	r3, [r7, #15]
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	2132      	movs	r1, #50	; 0x32
 8007694:	fb01 f303 	mul.w	r3, r1, r3
 8007698:	4413      	add	r3, r2
 800769a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	b25b      	sxtb	r3, r3
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	da36      	bge.n	8007714 <USBH_AUDIO_FindHIDControl+0xee>
      {
        AUDIO_Handle->control.Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80076a6:	7bfb      	ldrb	r3, [r7, #15]
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	2132      	movs	r1, #50	; 0x32
 80076ac:	fb01 f303 	mul.w	r3, r1, r3
 80076b0:	4413      	add	r3, r2
 80076b2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80076b6:	781a      	ldrb	r2, [r3, #0]
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
        AUDIO_Handle->control.EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80076be:	7bfb      	ldrb	r3, [r7, #15]
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	2132      	movs	r1, #50	; 0x32
 80076c4:	fb01 f303 	mul.w	r3, r1, r3
 80076c8:	4413      	add	r3, r2
 80076ca:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80076ce:	881a      	ldrh	r2, [r3, #0]
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	f8a3 2186 	strh.w	r2, [r3, #390]	; 0x186
        AUDIO_Handle->control.interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 80076d6:	7bfb      	ldrb	r3, [r7, #15]
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	2132      	movs	r1, #50	; 0x32
 80076dc:	fb01 f303 	mul.w	r3, r1, r3
 80076e0:	4413      	add	r3, r2
 80076e2:	f503 7351 	add.w	r3, r3, #836	; 0x344
 80076e6:	781a      	ldrb	r2, [r3, #0]
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
        AUDIO_Handle->control.Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 80076ee:	7bfb      	ldrb	r3, [r7, #15]
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	2132      	movs	r1, #50	; 0x32
 80076f4:	fb01 f303 	mul.w	r3, r1, r3
 80076f8:	4413      	add	r3, r2
 80076fa:	f203 3352 	addw	r3, r3, #850	; 0x352
 80076fe:	781a      	ldrb	r2, [r3, #0]
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
        AUDIO_Handle->control.supported = 1U;
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	2201      	movs	r2, #1
 800770a:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
        status = USBH_OK;
 800770e:	2300      	movs	r3, #0
 8007710:	73bb      	strb	r3, [r7, #14]
        break;
 8007712:	e005      	b.n	8007720 <USBH_AUDIO_FindHIDControl+0xfa>
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8007714:	7bfb      	ldrb	r3, [r7, #15]
 8007716:	3301      	adds	r3, #1
 8007718:	73fb      	strb	r3, [r7, #15]
 800771a:	7bfb      	ldrb	r3, [r7, #15]
 800771c:	2b09      	cmp	r3, #9
 800771e:	d9a0      	bls.n	8007662 <USBH_AUDIO_FindHIDControl+0x3c>
      }
    }
  }

  return status;
 8007720:	7bbb      	ldrb	r3, [r7, #14]
}
 8007722:	4618      	mov	r0, r3
 8007724:	3710      	adds	r7, #16
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <USBH_AUDIO_ParseCSDescriptors>:
  * @brief  Parse AC and interfaces Descriptors
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ParseCSDescriptors(USBH_HandleTypeDef *phost)
{
 800772a:	b580      	push	{r7, lr}
 800772c:	b088      	sub	sp, #32
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007732:	2300      	movs	r3, #0
 8007734:	77fb      	strb	r3, [r7, #31]
  USBH_DescHeader_t            *pdesc;
  uint16_t                      ptr;
  uint8_t                       itf_index = 0U;
 8007736:	2300      	movs	r3, #0
 8007738:	75fb      	strb	r3, [r7, #23]
  uint8_t                       itf_number = 0U;
 800773a:	2300      	movs	r3, #0
 800773c:	75bb      	strb	r3, [r7, #22]
  uint8_t                       alt_setting;
  AUDIO_HandleTypeDef           *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8007744:	69db      	ldr	r3, [r3, #28]
 8007746:	613b      	str	r3, [r7, #16]
  pdesc   = (USBH_DescHeader_t *)(void *)(phost->device.CfgDesc_Raw);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	331c      	adds	r3, #28
 800774c:	61bb      	str	r3, [r7, #24]
  ptr = USB_LEN_CFG_DESC;
 800774e:	2309      	movs	r3, #9
 8007750:	81bb      	strh	r3, [r7, #12]

  AUDIO_Handle->class_desc.FeatureUnitNum = 0U;
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	2200      	movs	r2, #0
 8007756:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee
  AUDIO_Handle->class_desc.InputTerminalNum = 0U;
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	2200      	movs	r2, #0
 800775e:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
  AUDIO_Handle->class_desc.OutputTerminalNum = 0U;
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	2200      	movs	r2, #0
 8007766:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
  AUDIO_Handle->class_desc.ASNum = 0U;
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	2200      	movs	r2, #0
 800776e:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8

  while (ptr < phost->device.CfgDesc.wTotalLength)
 8007772:	e03d      	b.n	80077f0 <USBH_AUDIO_ParseCSDescriptors+0xc6>
  {
    pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007774:	f107 030c 	add.w	r3, r7, #12
 8007778:	4619      	mov	r1, r3
 800777a:	69b8      	ldr	r0, [r7, #24]
 800777c:	f002 fa6d 	bl	8009c5a <USBH_GetNextDesc>
 8007780:	61b8      	str	r0, [r7, #24]

    switch (pdesc->bDescriptorType)
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	785b      	ldrb	r3, [r3, #1]
 8007786:	2b04      	cmp	r3, #4
 8007788:	d002      	beq.n	8007790 <USBH_AUDIO_ParseCSDescriptors+0x66>
 800778a:	2b24      	cmp	r3, #36	; 0x24
 800778c:	d00f      	beq.n	80077ae <USBH_AUDIO_ParseCSDescriptors+0x84>
 800778e:	e02e      	b.n	80077ee <USBH_AUDIO_ParseCSDescriptors+0xc4>
    {

      case USB_DESC_TYPE_INTERFACE:
        itf_number = *((uint8_t *)(void *)pdesc + 2U);
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	789b      	ldrb	r3, [r3, #2]
 8007794:	75bb      	strb	r3, [r7, #22]
        alt_setting = *((uint8_t *)(void *)pdesc + 3U);
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	78db      	ldrb	r3, [r3, #3]
 800779a:	73fb      	strb	r3, [r7, #15]
        itf_index = USBH_FindInterfaceIndex(phost, itf_number, alt_setting);
 800779c:	7bfa      	ldrb	r2, [r7, #15]
 800779e:	7dbb      	ldrb	r3, [r7, #22]
 80077a0:	4619      	mov	r1, r3
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f001 f9c2 	bl	8008b2c <USBH_FindInterfaceIndex>
 80077a8:	4603      	mov	r3, r0
 80077aa:	75fb      	strb	r3, [r7, #23]
        break;
 80077ac:	e020      	b.n	80077f0 <USBH_AUDIO_ParseCSDescriptors+0xc6>

      case USB_DESC_TYPE_CS_INTERFACE:
        if (itf_number <= phost->device.CfgDesc.bNumInterfaces)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80077b4:	7dba      	ldrb	r2, [r7, #22]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d81a      	bhi.n	80077f0 <USBH_AUDIO_ParseCSDescriptors+0xc6>
        {
          if ((itf_index == 0xFFU) || (itf_index >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80077ba:	7dfb      	ldrb	r3, [r7, #23]
 80077bc:	2bff      	cmp	r3, #255	; 0xff
 80077be:	d002      	beq.n	80077c6 <USBH_AUDIO_ParseCSDescriptors+0x9c>
 80077c0:	7dfb      	ldrb	r3, [r7, #23]
 80077c2:	2b09      	cmp	r3, #9
 80077c4:	d902      	bls.n	80077cc <USBH_AUDIO_ParseCSDescriptors+0xa2>
          {
            USBH_DbgLog("Cannot Find the audio interface index for %s class.", phost->pActiveClass->Name);
            status = USBH_FAIL;
 80077c6:	2302      	movs	r3, #2
 80077c8:	77fb      	strb	r3, [r7, #31]
 80077ca:	e00f      	b.n	80077ec <USBH_AUDIO_ParseCSDescriptors+0xc2>
          }
          else
          {

            ParseCSDescriptors(&AUDIO_Handle->class_desc,
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 80077d2:	7dfb      	ldrb	r3, [r7, #23]
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	2132      	movs	r1, #50	; 0x32
 80077d8:	fb01 f303 	mul.w	r3, r1, r3
 80077dc:	4413      	add	r3, r2
 80077de:	f503 7352 	add.w	r3, r3, #840	; 0x348
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	69ba      	ldr	r2, [r7, #24]
 80077e6:	4619      	mov	r1, r3
 80077e8:	f000 f80e 	bl	8007808 <ParseCSDescriptors>
                               phost->device.CfgDesc.Itf_Desc[itf_index].bInterfaceSubClass,
                               (uint8_t *)pdesc);
          }
        }
        break;
 80077ec:	e000      	b.n	80077f0 <USBH_AUDIO_ParseCSDescriptors+0xc6>

      default:
        break;
 80077ee:	bf00      	nop
  while (ptr < phost->device.CfgDesc.wTotalLength)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8b3 233a 	ldrh.w	r2, [r3, #826]	; 0x33a
 80077f6:	89bb      	ldrh	r3, [r7, #12]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d8bb      	bhi.n	8007774 <USBH_AUDIO_ParseCSDescriptors+0x4a>
    }
  }

  return status;
 80077fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3720      	adds	r7, #32
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
	...

08007808 <ParseCSDescriptors>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef ParseCSDescriptors(AUDIO_ClassSpecificDescTypedef *class_desc,
                                             uint8_t ac_subclass,
                                             uint8_t *pdesc)
{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	460b      	mov	r3, r1
 8007812:	607a      	str	r2, [r7, #4]
 8007814:	72fb      	strb	r3, [r7, #11]
  if (ac_subclass == USB_SUBCLASS_AUDIOCONTROL)
 8007816:	7afb      	ldrb	r3, [r7, #11]
 8007818:	2b01      	cmp	r3, #1
 800781a:	d163      	bne.n	80078e4 <ParseCSDescriptors+0xdc>
  {
    switch (pdesc[2])
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	3302      	adds	r3, #2
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	3b01      	subs	r3, #1
 8007824:	2b05      	cmp	r3, #5
 8007826:	f200 8081 	bhi.w	800792c <ParseCSDescriptors+0x124>
 800782a:	a201      	add	r2, pc, #4	; (adr r2, 8007830 <ParseCSDescriptors+0x28>)
 800782c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007830:	08007849 	.word	0x08007849
 8007834:	08007851 	.word	0x08007851
 8007838:	0800786d 	.word	0x0800786d
 800783c:	080078c7 	.word	0x080078c7
 8007840:	080078a9 	.word	0x080078a9
 8007844:	0800788b 	.word	0x0800788b
    {
      case UAC_HEADER:
        class_desc->cs_desc.HeaderDesc = (AUDIO_HeaderDescTypeDef *)(void *)pdesc;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	601a      	str	r2, [r3, #0]
        break;
 800784e:	e070      	b.n	8007932 <ParseCSDescriptors+0x12a>

      case UAC_INPUT_TERMINAL:
        class_desc->cs_desc.InputTerminalDesc[class_desc->InputTerminalNum++] = (AUDIO_ITDescTypeDef *)(void *)pdesc;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8007856:	1c5a      	adds	r2, r3, #1
 8007858:	b291      	uxth	r1, r2
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	f8a2 107e 	strh.w	r1, [r2, #126]	; 0x7e
 8007860:	68fa      	ldr	r2, [r7, #12]
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	4413      	add	r3, r2
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	605a      	str	r2, [r3, #4]
        break;
 800786a:	e062      	b.n	8007932 <ParseCSDescriptors+0x12a>

      case UAC_OUTPUT_TERMINAL:
        class_desc->cs_desc.OutputTerminalDesc[class_desc->OutputTerminalNum++] = (AUDIO_OTDescTypeDef *)(void *)pdesc;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8007872:	1c5a      	adds	r2, r3, #1
 8007874:	b291      	uxth	r1, r2
 8007876:	68fa      	ldr	r2, [r7, #12]
 8007878:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80
 800787c:	68fa      	ldr	r2, [r7, #12]
 800787e:	3304      	adds	r3, #4
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	4413      	add	r3, r2
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	605a      	str	r2, [r3, #4]
        break;
 8007888:	e053      	b.n	8007932 <ParseCSDescriptors+0x12a>

      case UAC_FEATURE_UNIT:
        class_desc->cs_desc.FeatureUnitDesc[class_desc->FeatureUnitNum++] = (AUDIO_FeatureDescTypeDef *)(void *)pdesc;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8007890:	1c5a      	adds	r2, r3, #1
 8007892:	b291      	uxth	r1, r2
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	f8a2 1082 	strh.w	r1, [r2, #130]	; 0x82
 800789a:	68fa      	ldr	r2, [r7, #12]
 800789c:	3308      	adds	r3, #8
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	4413      	add	r3, r2
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	605a      	str	r2, [r3, #4]
        break;
 80078a6:	e044      	b.n	8007932 <ParseCSDescriptors+0x12a>

      case UAC_SELECTOR_UNIT:
        class_desc->cs_desc.SelectorUnitDesc[class_desc->SelectorUnitNum++] = (AUDIO_SelectorDescTypeDef *)(void *)pdesc;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80078ae:	1c5a      	adds	r2, r3, #1
 80078b0:	b291      	uxth	r1, r2
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	3310      	adds	r3, #16
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	4413      	add	r3, r2
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	605a      	str	r2, [r3, #4]
        break;
 80078c4:	e035      	b.n	8007932 <ParseCSDescriptors+0x12a>

      case UAC_MIXER_UNIT:
        class_desc->cs_desc.MixerUnitDesc[class_desc->MixerUnitNum++] = (AUDIO_MixerDescTypeDef *)(void *)pdesc;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80078cc:	1c5a      	adds	r2, r3, #1
 80078ce:	b291      	uxth	r1, r2
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	f8a2 1086 	strh.w	r1, [r2, #134]	; 0x86
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	330c      	adds	r3, #12
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	4413      	add	r3, r2
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	605a      	str	r2, [r3, #4]
        break;
 80078e2:	e026      	b.n	8007932 <ParseCSDescriptors+0x12a>
        break;
    }
  }
  else
  {
    if (ac_subclass == USB_SUBCLASS_AUDIOSTREAMING)
 80078e4:	7afb      	ldrb	r3, [r7, #11]
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	d122      	bne.n	8007930 <ParseCSDescriptors+0x128>
    {
      switch (pdesc[2])
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	3302      	adds	r3, #2
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d002      	beq.n	80078fa <ParseCSDescriptors+0xf2>
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	d00a      	beq.n	800790e <ParseCSDescriptors+0x106>
          break;
        case UAC_FORMAT_TYPE:
          class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef *)(void *)pdesc;
          break;
        default:
          break;
 80078f8:	e01b      	b.n	8007932 <ParseCSDescriptors+0x12a>
          class_desc->as_desc[class_desc->ASNum].GeneralDesc = (AUDIO_ASGeneralDescTypeDef *)(void *)pdesc;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	330a      	adds	r3, #10
 8007904:	00db      	lsls	r3, r3, #3
 8007906:	4413      	add	r3, r2
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	605a      	str	r2, [r3, #4]
          break;
 800790c:	e011      	b.n	8007932 <ParseCSDescriptors+0x12a>
          class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef *)(void *)pdesc;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8007914:	1c5a      	adds	r2, r3, #1
 8007916:	b291      	uxth	r1, r2
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	f8a2 107c 	strh.w	r1, [r2, #124]	; 0x7c
 800791e:	68fa      	ldr	r2, [r7, #12]
 8007920:	330a      	adds	r3, #10
 8007922:	00db      	lsls	r3, r3, #3
 8007924:	4413      	add	r3, r2
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	609a      	str	r2, [r3, #8]
          break;
 800792a:	e002      	b.n	8007932 <ParseCSDescriptors+0x12a>
        break;
 800792c:	bf00      	nop
 800792e:	e000      	b.n	8007932 <ParseCSDescriptors+0x12a>
      }
    }
 8007930:	bf00      	nop
  }

  return USBH_OK;
 8007932:	2300      	movs	r3, #0
}
 8007934:	4618      	mov	r0, r3
 8007936:	3714      	adds	r7, #20
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <USBH_AUDIO_FindLinkedUnit>:
  * @param  phost: Host handle
  * @param  UnitID: Unit identifer
  * @retval UnitID, Index and Type of the associated Unit
  */
static uint32_t USBH_AUDIO_FindLinkedUnit(USBH_HandleTypeDef *phost, uint8_t UnitID)
{
 8007940:	b480      	push	{r7}
 8007942:	b085      	sub	sp, #20
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	460b      	mov	r3, r1
 800794a:	70fb      	strb	r3, [r7, #3]
  uint8_t Index;
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8007952:	69db      	ldr	r3, [r3, #28]
 8007954:	60bb      	str	r3, [r7, #8]

  /* Find Feature Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 8007956:	2300      	movs	r3, #0
 8007958:	73fb      	strb	r3, [r7, #15]
 800795a:	e01b      	b.n	8007994 <USBH_AUDIO_FindLinkedUnit+0x54>
  {
    if (AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bSourceID == UnitID)
 800795c:	7bfb      	ldrb	r3, [r7, #15]
 800795e:	68ba      	ldr	r2, [r7, #8]
 8007960:	3322      	adds	r3, #34	; 0x22
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	4413      	add	r3, r2
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	791b      	ldrb	r3, [r3, #4]
 800796a:	78fa      	ldrb	r2, [r7, #3]
 800796c:	429a      	cmp	r2, r3
 800796e:	d10e      	bne.n	800798e <USBH_AUDIO_FindLinkedUnit+0x4e>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bUnitID;
 8007970:	7bfb      	ldrb	r3, [r7, #15]
 8007972:	68ba      	ldr	r2, [r7, #8]
 8007974:	3322      	adds	r3, #34	; 0x22
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	4413      	add	r3, r2
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	78db      	ldrb	r3, [r3, #3]
 800797e:	70fb      	strb	r3, [r7, #3]

      return (((uint32_t)UnitID << 16U) | (UAC_FEATURE_UNIT << 8U) | (uint32_t)Index);
 8007980:	78fb      	ldrb	r3, [r7, #3]
 8007982:	041a      	lsls	r2, r3, #16
 8007984:	7bfb      	ldrb	r3, [r7, #15]
 8007986:	4313      	orrs	r3, r2
 8007988:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800798c:	e089      	b.n	8007aa2 <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 800798e:	7bfb      	ldrb	r3, [r7, #15]
 8007990:	3301      	adds	r3, #1
 8007992:	73fb      	strb	r3, [r7, #15]
 8007994:	7bfb      	ldrb	r3, [r7, #15]
 8007996:	b29a      	uxth	r2, r3
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	; 0xee
 800799e:	429a      	cmp	r2, r3
 80079a0:	d3dc      	bcc.n	800795c <USBH_AUDIO_FindLinkedUnit+0x1c>
    }
  }

  /* Find Mixer Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 80079a2:	2300      	movs	r3, #0
 80079a4:	73fb      	strb	r3, [r7, #15]
 80079a6:	e026      	b.n	80079f6 <USBH_AUDIO_FindLinkedUnit+0xb6>
  {
    if ((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID) ||
 80079a8:	7bfb      	ldrb	r3, [r7, #15]
 80079aa:	68ba      	ldr	r2, [r7, #8]
 80079ac:	3326      	adds	r3, #38	; 0x26
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	4413      	add	r3, r2
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	795b      	ldrb	r3, [r3, #5]
 80079b6:	78fa      	ldrb	r2, [r7, #3]
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d009      	beq.n	80079d0 <USBH_AUDIO_FindLinkedUnit+0x90>
        (AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID1 == UnitID))
 80079bc:	7bfb      	ldrb	r3, [r7, #15]
 80079be:	68ba      	ldr	r2, [r7, #8]
 80079c0:	3326      	adds	r3, #38	; 0x26
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	4413      	add	r3, r2
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	799b      	ldrb	r3, [r3, #6]
    if ((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID) ||
 80079ca:	78fa      	ldrb	r2, [r7, #3]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d10f      	bne.n	80079f0 <USBH_AUDIO_FindLinkedUnit+0xb0>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bUnitID;
 80079d0:	7bfb      	ldrb	r3, [r7, #15]
 80079d2:	68ba      	ldr	r2, [r7, #8]
 80079d4:	3326      	adds	r3, #38	; 0x26
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	4413      	add	r3, r2
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	78db      	ldrb	r3, [r3, #3]
 80079de:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_MIXER_UNIT << 8U) | Index);
 80079e0:	78fb      	ldrb	r3, [r7, #3]
 80079e2:	041b      	lsls	r3, r3, #16
 80079e4:	461a      	mov	r2, r3
 80079e6:	7bfb      	ldrb	r3, [r7, #15]
 80079e8:	4313      	orrs	r3, r2
 80079ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80079ee:	e058      	b.n	8007aa2 <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 80079f0:	7bfb      	ldrb	r3, [r7, #15]
 80079f2:	3301      	adds	r3, #1
 80079f4:	73fb      	strb	r3, [r7, #15]
 80079f6:	7bfb      	ldrb	r3, [r7, #15]
 80079f8:	b29a      	uxth	r2, r3
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d3d1      	bcc.n	80079a8 <USBH_AUDIO_FindLinkedUnit+0x68>
    }
  }

  /* Find Selector Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 8007a04:	2300      	movs	r3, #0
 8007a06:	73fb      	strb	r3, [r7, #15]
 8007a08:	e01c      	b.n	8007a44 <USBH_AUDIO_FindLinkedUnit+0x104>
  {
    if (AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bSourceID0 == UnitID)
 8007a0a:	7bfb      	ldrb	r3, [r7, #15]
 8007a0c:	68ba      	ldr	r2, [r7, #8]
 8007a0e:	332a      	adds	r3, #42	; 0x2a
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	4413      	add	r3, r2
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	795b      	ldrb	r3, [r3, #5]
 8007a18:	78fa      	ldrb	r2, [r7, #3]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d10f      	bne.n	8007a3e <USBH_AUDIO_FindLinkedUnit+0xfe>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bUnitID;
 8007a1e:	7bfb      	ldrb	r3, [r7, #15]
 8007a20:	68ba      	ldr	r2, [r7, #8]
 8007a22:	332a      	adds	r3, #42	; 0x2a
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	4413      	add	r3, r2
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	78db      	ldrb	r3, [r3, #3]
 8007a2c:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_SELECTOR_UNIT << 8U) | Index);
 8007a2e:	78fb      	ldrb	r3, [r7, #3]
 8007a30:	041b      	lsls	r3, r3, #16
 8007a32:	461a      	mov	r2, r3
 8007a34:	7bfb      	ldrb	r3, [r7, #15]
 8007a36:	4313      	orrs	r3, r2
 8007a38:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8007a3c:	e031      	b.n	8007aa2 <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 8007a3e:	7bfb      	ldrb	r3, [r7, #15]
 8007a40:	3301      	adds	r3, #1
 8007a42:	73fb      	strb	r3, [r7, #15]
 8007a44:	7bfb      	ldrb	r3, [r7, #15]
 8007a46:	b29a      	uxth	r2, r3
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d3db      	bcc.n	8007a0a <USBH_AUDIO_FindLinkedUnit+0xca>
    }
  }

  /* Find OT Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 8007a52:	2300      	movs	r3, #0
 8007a54:	73fb      	strb	r3, [r7, #15]
 8007a56:	e01c      	b.n	8007a92 <USBH_AUDIO_FindLinkedUnit+0x152>
  {
    if (AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bSourceID == UnitID)
 8007a58:	7bfb      	ldrb	r3, [r7, #15]
 8007a5a:	68ba      	ldr	r2, [r7, #8]
 8007a5c:	331e      	adds	r3, #30
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	4413      	add	r3, r2
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	79db      	ldrb	r3, [r3, #7]
 8007a66:	78fa      	ldrb	r2, [r7, #3]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d10f      	bne.n	8007a8c <USBH_AUDIO_FindLinkedUnit+0x14c>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bTerminalID;
 8007a6c:	7bfb      	ldrb	r3, [r7, #15]
 8007a6e:	68ba      	ldr	r2, [r7, #8]
 8007a70:	331e      	adds	r3, #30
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	4413      	add	r3, r2
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	78db      	ldrb	r3, [r3, #3]
 8007a7a:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_OUTPUT_TERMINAL << 8U) | Index);
 8007a7c:	78fb      	ldrb	r3, [r7, #3]
 8007a7e:	041b      	lsls	r3, r3, #16
 8007a80:	461a      	mov	r2, r3
 8007a82:	7bfb      	ldrb	r3, [r7, #15]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007a8a:	e00a      	b.n	8007aa2 <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 8007a8c:	7bfb      	ldrb	r3, [r7, #15]
 8007a8e:	3301      	adds	r3, #1
 8007a90:	73fb      	strb	r3, [r7, #15]
 8007a92:	7bfb      	ldrb	r3, [r7, #15]
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d3db      	bcc.n	8007a58 <USBH_AUDIO_FindLinkedUnit+0x118>
    }
  }

  /* No associated Unit found return undefined ID 0x00*/
  return 0U;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3714      	adds	r7, #20
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr
	...

08007ab0 <USBH_AUDIO_BuildMicrophonePath>:
  * @brief  Build full path for Microphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildMicrophonePath(USBH_HandleTypeDef *phost)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 8007abc:	2300      	movs	r3, #0
 8007abe:	757b      	strb	r3, [r7, #21]

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8007ac6:	69db      	ldr	r3, [r3, #28]
 8007ac8:	613b      	str	r3, [r7, #16]

  /*Find microphone IT*/
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8007aca:	2300      	movs	r3, #0
 8007acc:	75bb      	strb	r3, [r7, #22]
 8007ace:	e02c      	b.n	8007b2a <USBH_AUDIO_BuildMicrophonePath+0x7a>
  {
    if (LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x201)
 8007ad0:	7dbb      	ldrb	r3, [r7, #22]
 8007ad2:	693a      	ldr	r2, [r7, #16]
 8007ad4:	331a      	adds	r3, #26
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	4413      	add	r3, r2
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	791b      	ldrb	r3, [r3, #4]
 8007ade:	4619      	mov	r1, r3
 8007ae0:	7dbb      	ldrb	r3, [r7, #22]
 8007ae2:	693a      	ldr	r2, [r7, #16]
 8007ae4:	331a      	adds	r3, #26
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	4413      	add	r3, r2
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	795b      	ldrb	r3, [r3, #5]
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	021b      	lsls	r3, r3, #8
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	430b      	orrs	r3, r1
 8007af6:	f240 2201 	movw	r2, #513	; 0x201
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d112      	bne.n	8007b24 <USBH_AUDIO_BuildMicrophonePath+0x74>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 8007afe:	7dbb      	ldrb	r3, [r7, #22]
 8007b00:	693a      	ldr	r2, [r7, #16]
 8007b02:	331a      	adds	r3, #26
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	4413      	add	r3, r2
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	78db      	ldrb	r3, [r3, #3]
 8007b0c:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->microphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 8007b0e:	7dbb      	ldrb	r3, [r7, #22]
 8007b10:	693a      	ldr	r2, [r7, #16]
 8007b12:	331a      	adds	r3, #26
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	4413      	add	r3, r2
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	79da      	ldrb	r2, [r3, #7]
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
      break;
 8007b22:	e009      	b.n	8007b38 <USBH_AUDIO_BuildMicrophonePath+0x88>
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8007b24:	7dbb      	ldrb	r3, [r7, #22]
 8007b26:	3301      	adds	r3, #1
 8007b28:	75bb      	strb	r3, [r7, #22]
 8007b2a:	7dbb      	ldrb	r3, [r7, #22]
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	; 0xea
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d3cb      	bcc.n	8007ad0 <USBH_AUDIO_BuildMicrophonePath+0x20>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 8007b38:	7dfb      	ldrb	r3, [r7, #23]
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f7ff feff 	bl	8007940 <USBH_AUDIO_FindLinkedUnit>
 8007b42:	60f8      	str	r0, [r7, #12]

    if (!value)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d101      	bne.n	8007b4e <USBH_AUDIO_BuildMicrophonePath+0x9e>
    {
      return USBH_FAIL;
 8007b4a:	2302      	movs	r3, #2
 8007b4c:	e034      	b.n	8007bb8 <USBH_AUDIO_BuildMicrophonePath+0x108>
    }

    Index = (uint8_t)(value & 0xFFU);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	72fb      	strb	r3, [r7, #11]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	0a1b      	lsrs	r3, r3, #8
 8007b56:	72bb      	strb	r3, [r7, #10]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	0c1b      	lsrs	r3, r3, #16
 8007b5c:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 8007b5e:	7abb      	ldrb	r3, [r7, #10]
 8007b60:	3b03      	subs	r3, #3
 8007b62:	2b03      	cmp	r3, #3
 8007b64:	d81e      	bhi.n	8007ba4 <USBH_AUDIO_BuildMicrophonePath+0xf4>
 8007b66:	a201      	add	r2, pc, #4	; (adr r2, 8007b6c <USBH_AUDIO_BuildMicrophonePath+0xbc>)
 8007b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b6c:	08007b9b 	.word	0x08007b9b
 8007b70:	08007b87 	.word	0x08007b87
 8007b74:	08007b91 	.word	0x08007b91
 8007b78:	08007b7d 	.word	0x08007b7d
    {
      case UAC_FEATURE_UNIT:
        AUDIO_Handle->microphone.asociated_feature = Index;
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	7afa      	ldrb	r2, [r7, #11]
 8007b80:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
        break;
 8007b84:	e011      	b.n	8007baa <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_MIXER_UNIT:
        AUDIO_Handle->microphone.asociated_mixer = Index;
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	7afa      	ldrb	r2, [r7, #11]
 8007b8a:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
        break;
 8007b8e:	e00c      	b.n	8007baa <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_SELECTOR_UNIT:
        AUDIO_Handle->microphone.asociated_selector = Index;
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	7afa      	ldrb	r2, [r7, #11]
 8007b94:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
        break;
 8007b98:	e007      	b.n	8007baa <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_OUTPUT_TERMINAL:
        AUDIO_Handle->microphone.asociated_terminal = Index;
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	7afa      	ldrb	r2, [r7, #11]
 8007b9e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
        break;
 8007ba2:	e002      	b.n	8007baa <USBH_AUDIO_BuildMicrophonePath+0xfa>

      default:
        ret = USBH_FAIL;
 8007ba4:	2302      	movs	r3, #2
 8007ba6:	757b      	strb	r3, [r7, #21]
        break;
 8007ba8:	bf00      	nop
    }
  }
  while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 8007baa:	7abb      	ldrb	r3, [r7, #10]
 8007bac:	2b03      	cmp	r3, #3
 8007bae:	d002      	beq.n	8007bb6 <USBH_AUDIO_BuildMicrophonePath+0x106>
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1c0      	bne.n	8007b38 <USBH_AUDIO_BuildMicrophonePath+0x88>

  return ret;
 8007bb6:	7d7b      	ldrb	r3, [r7, #21]
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3718      	adds	r7, #24
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <USBH_AUDIO_BuildHeadphonePath>:
  * @brief  Build full path for Headphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildHeadphonePath(USBH_HandleTypeDef *phost)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b086      	sub	sp, #24
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	753b      	strb	r3, [r7, #20]

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8007bd6:	69db      	ldr	r3, [r3, #28]
 8007bd8:	613b      	str	r3, [r7, #16]

  /* Find association between audio streaming and microphone */
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8007bda:	2300      	movs	r3, #0
 8007bdc:	757b      	strb	r3, [r7, #21]
 8007bde:	e02c      	b.n	8007c3a <USBH_AUDIO_BuildHeadphonePath+0x7a>
  {
    if (LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x101)
 8007be0:	7d7b      	ldrb	r3, [r7, #21]
 8007be2:	693a      	ldr	r2, [r7, #16]
 8007be4:	331a      	adds	r3, #26
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	4413      	add	r3, r2
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	791b      	ldrb	r3, [r3, #4]
 8007bee:	4619      	mov	r1, r3
 8007bf0:	7d7b      	ldrb	r3, [r7, #21]
 8007bf2:	693a      	ldr	r2, [r7, #16]
 8007bf4:	331a      	adds	r3, #26
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	4413      	add	r3, r2
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	795b      	ldrb	r3, [r3, #5]
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	021b      	lsls	r3, r3, #8
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	430b      	orrs	r3, r1
 8007c06:	f240 1201 	movw	r2, #257	; 0x101
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d112      	bne.n	8007c34 <USBH_AUDIO_BuildHeadphonePath+0x74>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 8007c0e:	7d7b      	ldrb	r3, [r7, #21]
 8007c10:	693a      	ldr	r2, [r7, #16]
 8007c12:	331a      	adds	r3, #26
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	4413      	add	r3, r2
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	78db      	ldrb	r3, [r3, #3]
 8007c1c:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->headphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 8007c1e:	7d7b      	ldrb	r3, [r7, #21]
 8007c20:	693a      	ldr	r2, [r7, #16]
 8007c22:	331a      	adds	r3, #26
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	4413      	add	r3, r2
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	79da      	ldrb	r2, [r3, #7]
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
      break;
 8007c32:	e009      	b.n	8007c48 <USBH_AUDIO_BuildHeadphonePath+0x88>
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8007c34:	7d7b      	ldrb	r3, [r7, #21]
 8007c36:	3301      	adds	r3, #1
 8007c38:	757b      	strb	r3, [r7, #21]
 8007c3a:	7d7b      	ldrb	r3, [r7, #21]
 8007c3c:	b29a      	uxth	r2, r3
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	; 0xea
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d3cb      	bcc.n	8007be0 <USBH_AUDIO_BuildHeadphonePath+0x20>
    }
  }

  for (Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 8007c48:	2300      	movs	r3, #0
 8007c4a:	75bb      	strb	r3, [r7, #22]
 8007c4c:	e011      	b.n	8007c72 <USBH_AUDIO_BuildHeadphonePath+0xb2>
  {
    if (AUDIO_Handle->class_desc.as_desc[Index].GeneralDesc->bTerminalLink == UnitID)
 8007c4e:	7dbb      	ldrb	r3, [r7, #22]
 8007c50:	693a      	ldr	r2, [r7, #16]
 8007c52:	3317      	adds	r3, #23
 8007c54:	00db      	lsls	r3, r3, #3
 8007c56:	4413      	add	r3, r2
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	78db      	ldrb	r3, [r3, #3]
 8007c5c:	7dfa      	ldrb	r2, [r7, #23]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d104      	bne.n	8007c6c <USBH_AUDIO_BuildHeadphonePath+0xac>
    {
      AUDIO_Handle->headphone.asociated_as = Index;
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	7dba      	ldrb	r2, [r7, #22]
 8007c66:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
      break;
 8007c6a:	e009      	b.n	8007c80 <USBH_AUDIO_BuildHeadphonePath+0xc0>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 8007c6c:	7dbb      	ldrb	r3, [r7, #22]
 8007c6e:	3301      	adds	r3, #1
 8007c70:	75bb      	strb	r3, [r7, #22]
 8007c72:	7dbb      	ldrb	r3, [r7, #22]
 8007c74:	b29a      	uxth	r2, r3
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d3e6      	bcc.n	8007c4e <USBH_AUDIO_BuildHeadphonePath+0x8e>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 8007c80:	7dfb      	ldrb	r3, [r7, #23]
 8007c82:	4619      	mov	r1, r3
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f7ff fe5b 	bl	8007940 <USBH_AUDIO_FindLinkedUnit>
 8007c8a:	60f8      	str	r0, [r7, #12]

    if (!value)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d101      	bne.n	8007c96 <USBH_AUDIO_BuildHeadphonePath+0xd6>
    {
      return USBH_FAIL;
 8007c92:	2302      	movs	r3, #2
 8007c94:	e053      	b.n	8007d3e <USBH_AUDIO_BuildHeadphonePath+0x17e>
    }

    Index = (uint8_t)(value & 0xFFU);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	75bb      	strb	r3, [r7, #22]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	0a1b      	lsrs	r3, r3, #8
 8007c9e:	72fb      	strb	r3, [r7, #11]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	0c1b      	lsrs	r3, r3, #16
 8007ca4:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 8007ca6:	7afb      	ldrb	r3, [r7, #11]
 8007ca8:	3b03      	subs	r3, #3
 8007caa:	2b03      	cmp	r3, #3
 8007cac:	d83c      	bhi.n	8007d28 <USBH_AUDIO_BuildHeadphonePath+0x168>
 8007cae:	a201      	add	r2, pc, #4	; (adr r2, 8007cb4 <USBH_AUDIO_BuildHeadphonePath+0xf4>)
 8007cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb4:	08007ce3 	.word	0x08007ce3
 8007cb8:	08007ccf 	.word	0x08007ccf
 8007cbc:	08007cd9 	.word	0x08007cd9
 8007cc0:	08007cc5 	.word	0x08007cc5
    {
      case UAC_FEATURE_UNIT:
        AUDIO_Handle->headphone.asociated_feature = Index;
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	7dba      	ldrb	r2, [r7, #22]
 8007cc8:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
        break;
 8007ccc:	e030      	b.n	8007d30 <USBH_AUDIO_BuildHeadphonePath+0x170>

      case UAC_MIXER_UNIT:
        AUDIO_Handle->headphone.asociated_mixer = Index;
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	7dba      	ldrb	r2, [r7, #22]
 8007cd2:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
        break;
 8007cd6:	e02b      	b.n	8007d30 <USBH_AUDIO_BuildHeadphonePath+0x170>

      case UAC_SELECTOR_UNIT:
        AUDIO_Handle->headphone.asociated_selector = Index;
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	7dba      	ldrb	r2, [r7, #22]
 8007cdc:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
        break;
 8007ce0:	e026      	b.n	8007d30 <USBH_AUDIO_BuildHeadphonePath+0x170>

      case UAC_OUTPUT_TERMINAL:
        AUDIO_Handle->headphone.asociated_terminal = Index;
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	7dba      	ldrb	r2, [r7, #22]
 8007ce6:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
        if (Index < AUDIO_MAX_NUM_OUT_TERMINAL)
 8007cea:	7dbb      	ldrb	r3, [r7, #22]
 8007cec:	2b03      	cmp	r3, #3
 8007cee:	d818      	bhi.n	8007d22 <USBH_AUDIO_BuildHeadphonePath+0x162>
        {
          if (LE16(AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->wTerminalType) != 0x103)
 8007cf0:	7dbb      	ldrb	r3, [r7, #22]
 8007cf2:	693a      	ldr	r2, [r7, #16]
 8007cf4:	331e      	adds	r3, #30
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	4413      	add	r3, r2
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	791b      	ldrb	r3, [r3, #4]
 8007cfe:	4619      	mov	r1, r3
 8007d00:	7dbb      	ldrb	r3, [r7, #22]
 8007d02:	693a      	ldr	r2, [r7, #16]
 8007d04:	331e      	adds	r3, #30
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	4413      	add	r3, r2
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	795b      	ldrb	r3, [r3, #5]
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	021b      	lsls	r3, r3, #8
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	430b      	orrs	r3, r1
 8007d16:	f240 1203 	movw	r2, #259	; 0x103
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d007      	beq.n	8007d2e <USBH_AUDIO_BuildHeadphonePath+0x16e>
          {
            return  USBH_OK;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	e00d      	b.n	8007d3e <USBH_AUDIO_BuildHeadphonePath+0x17e>
          }
        }
        else
        {
          ret = USBH_FAIL;
 8007d22:	2302      	movs	r3, #2
 8007d24:	753b      	strb	r3, [r7, #20]
        }
        break;
 8007d26:	e002      	b.n	8007d2e <USBH_AUDIO_BuildHeadphonePath+0x16e>

      default:
        ret = USBH_FAIL;
 8007d28:	2302      	movs	r3, #2
 8007d2a:	753b      	strb	r3, [r7, #20]
        break;
 8007d2c:	e000      	b.n	8007d30 <USBH_AUDIO_BuildHeadphonePath+0x170>
        break;
 8007d2e:	bf00      	nop
    }
  }
  while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 8007d30:	7afb      	ldrb	r3, [r7, #11]
 8007d32:	2b03      	cmp	r3, #3
 8007d34:	d002      	beq.n	8007d3c <USBH_AUDIO_BuildHeadphonePath+0x17c>
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d1a1      	bne.n	8007c80 <USBH_AUDIO_BuildHeadphonePath+0xc0>

  return ret;
 8007d3c:	7d3b      	ldrb	r3, [r7, #20]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3718      	adds	r7, #24
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop

08007d48 <USBH_AC_SetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b086      	sub	sp, #24
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	4608      	mov	r0, r1
 8007d52:	4611      	mov	r1, r2
 8007d54:	461a      	mov	r2, r3
 8007d56:	4603      	mov	r3, r0
 8007d58:	70fb      	strb	r3, [r7, #3]
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	70bb      	strb	r3, [r7, #2]
 8007d5e:	4613      	mov	r3, r2
 8007d60:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8007d62:	2300      	movs	r3, #0
 8007d64:	82fb      	strh	r3, [r7, #22]
 8007d66:	2300      	movs	r3, #0
 8007d68:	82bb      	strh	r3, [r7, #20]
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID, InterfaceNum;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8007d74:	69db      	ldr	r3, [r3, #28]
 8007d76:	60fb      	str	r3, [r7, #12]
  USBH_StatusTypeDef ret = USBH_OK;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8007d7c:	78fb      	ldrb	r3, [r7, #3]
 8007d7e:	2b02      	cmp	r3, #2
 8007d80:	d002      	beq.n	8007d88 <USBH_AC_SetCur+0x40>
 8007d82:	2b06      	cmp	r3, #6
 8007d84:	d018      	beq.n	8007db8 <USBH_AC_SetCur+0x70>
 8007d86:	e035      	b.n	8007df4 <USBH_AC_SetCur+0xac>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d8c:	78db      	ldrb	r3, [r3, #3]
 8007d8e:	72fb      	strb	r3, [r7, #11]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8007d90:	2300      	movs	r3, #0
 8007d92:	72bb      	strb	r3, [r7, #10]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8007d94:	7afb      	ldrb	r3, [r7, #11]
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	021b      	lsls	r3, r3, #8
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	7abb      	ldrb	r3, [r7, #10]
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	4313      	orrs	r3, r2
 8007da2:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8007da4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007da8:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2200      	movs	r2, #0
 8007dae:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 8007db2:	2301      	movs	r3, #1
 8007db4:	827b      	strh	r3, [r7, #18]
      break;
 8007db6:	e020      	b.n	8007dfa <USBH_AC_SetCur+0xb2>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8007db8:	78bb      	ldrb	r3, [r7, #2]
 8007dba:	68fa      	ldr	r2, [r7, #12]
 8007dbc:	3322      	adds	r3, #34	; 0x22
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	4413      	add	r3, r2
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	78db      	ldrb	r3, [r3, #3]
 8007dc6:	72fb      	strb	r3, [r7, #11]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8007dc8:	2300      	movs	r3, #0
 8007dca:	72bb      	strb	r3, [r7, #10]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 8007dcc:	7afb      	ldrb	r3, [r7, #11]
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	021b      	lsls	r3, r3, #8
 8007dd2:	b29a      	uxth	r2, r3
 8007dd4:	7abb      	ldrb	r3, [r7, #10]
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8007ddc:	787b      	ldrb	r3, [r7, #1]
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	021b      	lsls	r3, r3, #8
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	4313      	orrs	r3, r2
 8007dec:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8007dee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007df0:	827b      	strh	r3, [r7, #18]
      break;
 8007df2:	e002      	b.n	8007dfa <USBH_AC_SetCur+0xb2>

    default:
      ret = USBH_FAIL;
 8007df4:	2302      	movs	r3, #2
 8007df6:	747b      	strb	r3, [r7, #17]
      break;
 8007df8:	bf00      	nop
  }

  if (ret != USBH_OK)
 8007dfa:	7c7b      	ldrb	r3, [r7, #17]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d001      	beq.n	8007e04 <USBH_AC_SetCur+0xbc>
  {
    return ret;
 8007e00:	7c7b      	ldrb	r3, [r7, #17]
 8007e02:	e017      	b.n	8007e34 <USBH_AC_SetCur+0xec>
  }

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2221      	movs	r2, #33	; 0x21
 8007e08:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	8afa      	ldrh	r2, [r7, #22]
 8007e14:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	8aba      	ldrh	r2, [r7, #20]
 8007e1a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	8a7a      	ldrh	r2, [r7, #18]
 8007e20:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8007e28:	8a7a      	ldrh	r2, [r7, #18]
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f001 ff2f 	bl	8009c90 <USBH_CtlReq>
 8007e32:	4603      	mov	r3, r0
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3718      	adds	r7, #24
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <USBH_AC_GetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b086      	sub	sp, #24
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	4608      	mov	r0, r1
 8007e46:	4611      	mov	r1, r2
 8007e48:	461a      	mov	r2, r3
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	70fb      	strb	r3, [r7, #3]
 8007e4e:	460b      	mov	r3, r1
 8007e50:	70bb      	strb	r3, [r7, #2]
 8007e52:	4613      	mov	r3, r2
 8007e54:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8007e56:	2300      	movs	r3, #0
 8007e58:	82fb      	strh	r3, [r7, #22]
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	82bb      	strh	r3, [r7, #20]
 8007e5e:	2300      	movs	r3, #0
 8007e60:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8007e62:	2300      	movs	r3, #0
 8007e64:	743b      	strb	r3, [r7, #16]
 8007e66:	2300      	movs	r3, #0
 8007e68:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8007e70:	69db      	ldr	r3, [r3, #28]
 8007e72:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8007e74:	2300      	movs	r3, #0
 8007e76:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8007e78:	78fb      	ldrb	r3, [r7, #3]
 8007e7a:	2b06      	cmp	r3, #6
 8007e7c:	d01e      	beq.n	8007ebc <USBH_AC_GetCur+0x80>
 8007e7e:	2b06      	cmp	r3, #6
 8007e80:	dc4f      	bgt.n	8007f22 <USBH_AC_GetCur+0xe6>
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	d002      	beq.n	8007e8c <USBH_AC_GetCur+0x50>
 8007e86:	2b03      	cmp	r3, #3
 8007e88:	d036      	beq.n	8007ef8 <USBH_AC_GetCur+0xbc>
 8007e8a:	e04a      	b.n	8007f22 <USBH_AC_GetCur+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e90:	78db      	ldrb	r3, [r3, #3]
 8007e92:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8007e94:	2300      	movs	r3, #0
 8007e96:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8007e98:	7c3b      	ldrb	r3, [r7, #16]
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	021b      	lsls	r3, r3, #8
 8007e9e:	b29a      	uxth	r2, r3
 8007ea0:	7bfb      	ldrb	r3, [r7, #15]
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8007ea8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007eac:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	827b      	strh	r3, [r7, #18]
      break;
 8007eba:	e035      	b.n	8007f28 <USBH_AC_GetCur+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8007ebc:	78bb      	ldrb	r3, [r7, #2]
 8007ebe:	68ba      	ldr	r2, [r7, #8]
 8007ec0:	3322      	adds	r3, #34	; 0x22
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	4413      	add	r3, r2
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	78db      	ldrb	r3, [r3, #3]
 8007eca:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8007ecc:	2300      	movs	r3, #0
 8007ece:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8007ed0:	7c3b      	ldrb	r3, [r7, #16]
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	021b      	lsls	r3, r3, #8
 8007ed6:	b29a      	uxth	r2, r3
 8007ed8:	7bfb      	ldrb	r3, [r7, #15]
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	4313      	orrs	r3, r2
 8007ede:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8007ee0:	787b      	ldrb	r3, [r7, #1]
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	021b      	lsls	r3, r3, #8
 8007ee6:	b29a      	uxth	r2, r3
 8007ee8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8007ef2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ef4:	827b      	strh	r3, [r7, #18]
      break;
 8007ef6:	e017      	b.n	8007f28 <USBH_AC_GetCur+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007efe:	78db      	ldrb	r3, [r3, #3]
 8007f00:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8007f02:	2300      	movs	r3, #0
 8007f04:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8007f06:	7c3b      	ldrb	r3, [r7, #16]
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	021b      	lsls	r3, r3, #8
 8007f0c:	b29a      	uxth	r2, r3
 8007f0e:	7bfb      	ldrb	r3, [r7, #15]
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	4313      	orrs	r3, r2
 8007f14:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8007f16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f1a:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	827b      	strh	r3, [r7, #18]
      break;
 8007f20:	e002      	b.n	8007f28 <USBH_AC_GetCur+0xec>

    default:
      ret = USBH_FAIL;
 8007f22:	2302      	movs	r3, #2
 8007f24:	747b      	strb	r3, [r7, #17]
      break;
 8007f26:	bf00      	nop
  }

  if (ret != USBH_OK)
 8007f28:	7c7b      	ldrb	r3, [r7, #17]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d001      	beq.n	8007f32 <USBH_AC_GetCur+0xf6>
  {
    return ret;
 8007f2e:	7c7b      	ldrb	r3, [r7, #17]
 8007f30:	e017      	b.n	8007f62 <USBH_AC_GetCur+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	22a1      	movs	r2, #161	; 0xa1
 8007f36:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_CUR;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2281      	movs	r2, #129	; 0x81
 8007f3c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	8afa      	ldrh	r2, [r7, #22]
 8007f42:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	8aba      	ldrh	r2, [r7, #20]
 8007f48:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	8a7a      	ldrh	r2, [r7, #18]
 8007f4e:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8007f56:	8a7a      	ldrh	r2, [r7, #18]
 8007f58:	4619      	mov	r1, r3
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f001 fe98 	bl	8009c90 <USBH_CtlReq>
 8007f60:	4603      	mov	r3, r0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3718      	adds	r7, #24
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <USBH_AC_GetMax>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b086      	sub	sp, #24
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
 8007f72:	4608      	mov	r0, r1
 8007f74:	4611      	mov	r1, r2
 8007f76:	461a      	mov	r2, r3
 8007f78:	4603      	mov	r3, r0
 8007f7a:	70fb      	strb	r3, [r7, #3]
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	70bb      	strb	r3, [r7, #2]
 8007f80:	4613      	mov	r3, r2
 8007f82:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8007f84:	2300      	movs	r3, #0
 8007f86:	82fb      	strh	r3, [r7, #22]
 8007f88:	2300      	movs	r3, #0
 8007f8a:	82bb      	strh	r3, [r7, #20]
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8007f90:	2300      	movs	r3, #0
 8007f92:	743b      	strb	r3, [r7, #16]
 8007f94:	2300      	movs	r3, #0
 8007f96:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8007f9e:	69db      	ldr	r3, [r3, #28]
 8007fa0:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8007fa6:	78fb      	ldrb	r3, [r7, #3]
 8007fa8:	2b06      	cmp	r3, #6
 8007faa:	d01e      	beq.n	8007fea <USBH_AC_GetMax+0x80>
 8007fac:	2b06      	cmp	r3, #6
 8007fae:	dc4f      	bgt.n	8008050 <USBH_AC_GetMax+0xe6>
 8007fb0:	2b02      	cmp	r3, #2
 8007fb2:	d002      	beq.n	8007fba <USBH_AC_GetMax+0x50>
 8007fb4:	2b03      	cmp	r3, #3
 8007fb6:	d036      	beq.n	8008026 <USBH_AC_GetMax+0xbc>
 8007fb8:	e04a      	b.n	8008050 <USBH_AC_GetMax+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fbe:	78db      	ldrb	r3, [r3, #3]
 8007fc0:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8007fc6:	7c3b      	ldrb	r3, [r7, #16]
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	021b      	lsls	r3, r3, #8
 8007fcc:	b29a      	uxth	r2, r3
 8007fce:	7bfb      	ldrb	r3, [r7, #15]
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8007fd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007fda:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	827b      	strh	r3, [r7, #18]
      break;
 8007fe8:	e035      	b.n	8008056 <USBH_AC_GetMax+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8007fea:	78bb      	ldrb	r3, [r7, #2]
 8007fec:	68ba      	ldr	r2, [r7, #8]
 8007fee:	3322      	adds	r3, #34	; 0x22
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	4413      	add	r3, r2
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	78db      	ldrb	r3, [r3, #3]
 8007ff8:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 8007ffe:	7c3b      	ldrb	r3, [r7, #16]
 8008000:	b29b      	uxth	r3, r3
 8008002:	021b      	lsls	r3, r3, #8
 8008004:	b29a      	uxth	r2, r3
 8008006:	7bfb      	ldrb	r3, [r7, #15]
 8008008:	b29b      	uxth	r3, r3
 800800a:	4313      	orrs	r3, r2
 800800c:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 800800e:	787b      	ldrb	r3, [r7, #1]
 8008010:	b29b      	uxth	r3, r3
 8008012:	021b      	lsls	r3, r3, #8
 8008014:	b29a      	uxth	r2, r3
 8008016:	f897 3020 	ldrb.w	r3, [r7, #32]
 800801a:	b29b      	uxth	r3, r3
 800801c:	4313      	orrs	r3, r2
 800801e:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8008020:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008022:	827b      	strh	r3, [r7, #18]
      break;
 8008024:	e017      	b.n	8008056 <USBH_AC_GetMax+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800802c:	78db      	ldrb	r3, [r3, #3]
 800802e:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8008030:	2300      	movs	r3, #0
 8008032:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 8008034:	7c3b      	ldrb	r3, [r7, #16]
 8008036:	b29b      	uxth	r3, r3
 8008038:	021b      	lsls	r3, r3, #8
 800803a:	b29a      	uxth	r2, r3
 800803c:	7bfb      	ldrb	r3, [r7, #15]
 800803e:	b29b      	uxth	r3, r3
 8008040:	4313      	orrs	r3, r2
 8008042:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U) ;
 8008044:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008048:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 800804a:	2301      	movs	r3, #1
 800804c:	827b      	strh	r3, [r7, #18]
      break;
 800804e:	e002      	b.n	8008056 <USBH_AC_GetMax+0xec>

    default:
      ret = USBH_FAIL;
 8008050:	2302      	movs	r3, #2
 8008052:	747b      	strb	r3, [r7, #17]
      break;
 8008054:	bf00      	nop
  }

  if (ret != USBH_OK)
 8008056:	7c7b      	ldrb	r3, [r7, #17]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d001      	beq.n	8008060 <USBH_AC_GetMax+0xf6>
  {
    return ret;
 800805c:	7c7b      	ldrb	r3, [r7, #17]
 800805e:	e017      	b.n	8008090 <USBH_AC_GetMax+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	22a1      	movs	r2, #161	; 0xa1
 8008064:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MAX;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2283      	movs	r2, #131	; 0x83
 800806a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	8afa      	ldrh	r2, [r7, #22]
 8008070:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	8aba      	ldrh	r2, [r7, #20]
 8008076:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	8a7a      	ldrh	r2, [r7, #18]
 800807c:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008084:	8a7a      	ldrh	r2, [r7, #18]
 8008086:	4619      	mov	r1, r3
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f001 fe01 	bl	8009c90 <USBH_CtlReq>
 800808e:	4603      	mov	r3, r0

}
 8008090:	4618      	mov	r0, r3
 8008092:	3718      	adds	r7, #24
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <USBH_AC_GetRes>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b086      	sub	sp, #24
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	4608      	mov	r0, r1
 80080a2:	4611      	mov	r1, r2
 80080a4:	461a      	mov	r2, r3
 80080a6:	4603      	mov	r3, r0
 80080a8:	70fb      	strb	r3, [r7, #3]
 80080aa:	460b      	mov	r3, r1
 80080ac:	70bb      	strb	r3, [r7, #2]
 80080ae:	4613      	mov	r3, r2
 80080b0:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 80080b2:	2300      	movs	r3, #0
 80080b4:	82fb      	strh	r3, [r7, #22]
 80080b6:	2300      	movs	r3, #0
 80080b8:	82bb      	strh	r3, [r7, #20]
 80080ba:	2300      	movs	r3, #0
 80080bc:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 80080be:	2300      	movs	r3, #0
 80080c0:	743b      	strb	r3, [r7, #16]
 80080c2:	2300      	movs	r3, #0
 80080c4:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 80080cc:	69db      	ldr	r3, [r3, #28]
 80080ce:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 80080d0:	2300      	movs	r3, #0
 80080d2:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 80080d4:	78fb      	ldrb	r3, [r7, #3]
 80080d6:	2b06      	cmp	r3, #6
 80080d8:	d01e      	beq.n	8008118 <USBH_AC_GetRes+0x80>
 80080da:	2b06      	cmp	r3, #6
 80080dc:	dc4f      	bgt.n	800817e <USBH_AC_GetRes+0xe6>
 80080de:	2b02      	cmp	r3, #2
 80080e0:	d002      	beq.n	80080e8 <USBH_AC_GetRes+0x50>
 80080e2:	2b03      	cmp	r3, #3
 80080e4:	d036      	beq.n	8008154 <USBH_AC_GetRes+0xbc>
 80080e6:	e04a      	b.n	800817e <USBH_AC_GetRes+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ec:	78db      	ldrb	r3, [r3, #3]
 80080ee:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80080f0:	2300      	movs	r3, #0
 80080f2:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80080f4:	7c3b      	ldrb	r3, [r7, #16]
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	021b      	lsls	r3, r3, #8
 80080fa:	b29a      	uxth	r2, r3
 80080fc:	7bfb      	ldrb	r3, [r7, #15]
 80080fe:	b29b      	uxth	r3, r3
 8008100:	4313      	orrs	r3, r2
 8008102:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U) ;
 8008104:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008108:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	2200      	movs	r2, #0
 800810e:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 8008112:	2301      	movs	r3, #1
 8008114:	827b      	strh	r3, [r7, #18]
      break;
 8008116:	e035      	b.n	8008184 <USBH_AC_GetRes+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8008118:	78bb      	ldrb	r3, [r7, #2]
 800811a:	68ba      	ldr	r2, [r7, #8]
 800811c:	3322      	adds	r3, #34	; 0x22
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	4413      	add	r3, r2
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	78db      	ldrb	r3, [r3, #3]
 8008126:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8008128:	2300      	movs	r3, #0
 800812a:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 800812c:	7c3b      	ldrb	r3, [r7, #16]
 800812e:	b29b      	uxth	r3, r3
 8008130:	021b      	lsls	r3, r3, #8
 8008132:	b29a      	uxth	r2, r3
 8008134:	7bfb      	ldrb	r3, [r7, #15]
 8008136:	b29b      	uxth	r3, r3
 8008138:	4313      	orrs	r3, r2
 800813a:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 800813c:	787b      	ldrb	r3, [r7, #1]
 800813e:	b29b      	uxth	r3, r3
 8008140:	021b      	lsls	r3, r3, #8
 8008142:	b29a      	uxth	r2, r3
 8008144:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008148:	b29b      	uxth	r3, r3
 800814a:	4313      	orrs	r3, r2
 800814c:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 800814e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008150:	827b      	strh	r3, [r7, #18]
      break;
 8008152:	e017      	b.n	8008184 <USBH_AC_GetRes+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800815a:	78db      	ldrb	r3, [r3, #3]
 800815c:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 800815e:	2300      	movs	r3, #0
 8008160:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8008162:	7c3b      	ldrb	r3, [r7, #16]
 8008164:	b29b      	uxth	r3, r3
 8008166:	021b      	lsls	r3, r3, #8
 8008168:	b29a      	uxth	r2, r3
 800816a:	7bfb      	ldrb	r3, [r7, #15]
 800816c:	b29b      	uxth	r3, r3
 800816e:	4313      	orrs	r3, r2
 8008170:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U) ;
 8008172:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008176:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8008178:	2301      	movs	r3, #1
 800817a:	827b      	strh	r3, [r7, #18]
      break;
 800817c:	e002      	b.n	8008184 <USBH_AC_GetRes+0xec>

    default:
      ret = USBH_FAIL;
 800817e:	2302      	movs	r3, #2
 8008180:	747b      	strb	r3, [r7, #17]
      break;
 8008182:	bf00      	nop
  }

  if (ret != USBH_OK)
 8008184:	7c7b      	ldrb	r3, [r7, #17]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d001      	beq.n	800818e <USBH_AC_GetRes+0xf6>
  {
    return ret;
 800818a:	7c7b      	ldrb	r3, [r7, #17]
 800818c:	e017      	b.n	80081be <USBH_AC_GetRes+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	22a1      	movs	r2, #161	; 0xa1
 8008192:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_RES;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2284      	movs	r2, #132	; 0x84
 8008198:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	8afa      	ldrh	r2, [r7, #22]
 800819e:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	8aba      	ldrh	r2, [r7, #20]
 80081a4:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	8a7a      	ldrh	r2, [r7, #18]
 80081aa:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80081b2:	8a7a      	ldrh	r2, [r7, #18]
 80081b4:	4619      	mov	r1, r3
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f001 fd6a 	bl	8009c90 <USBH_CtlReq>
 80081bc:	4603      	mov	r3, r0

}
 80081be:	4618      	mov	r0, r3
 80081c0:	3718      	adds	r7, #24
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}

080081c6 <USBH_AC_GetMin>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b086      	sub	sp, #24
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
 80081ce:	4608      	mov	r0, r1
 80081d0:	4611      	mov	r1, r2
 80081d2:	461a      	mov	r2, r3
 80081d4:	4603      	mov	r3, r0
 80081d6:	70fb      	strb	r3, [r7, #3]
 80081d8:	460b      	mov	r3, r1
 80081da:	70bb      	strb	r3, [r7, #2]
 80081dc:	4613      	mov	r3, r2
 80081de:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 80081e0:	2300      	movs	r3, #0
 80081e2:	82fb      	strh	r3, [r7, #22]
 80081e4:	2300      	movs	r3, #0
 80081e6:	82bb      	strh	r3, [r7, #20]
 80081e8:	2300      	movs	r3, #0
 80081ea:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 80081ec:	2300      	movs	r3, #0
 80081ee:	743b      	strb	r3, [r7, #16]
 80081f0:	2300      	movs	r3, #0
 80081f2:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 80081fa:	69db      	ldr	r3, [r3, #28]
 80081fc:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 80081fe:	2300      	movs	r3, #0
 8008200:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8008202:	78fb      	ldrb	r3, [r7, #3]
 8008204:	2b06      	cmp	r3, #6
 8008206:	d01e      	beq.n	8008246 <USBH_AC_GetMin+0x80>
 8008208:	2b06      	cmp	r3, #6
 800820a:	dc4f      	bgt.n	80082ac <USBH_AC_GetMin+0xe6>
 800820c:	2b02      	cmp	r3, #2
 800820e:	d002      	beq.n	8008216 <USBH_AC_GetMin+0x50>
 8008210:	2b03      	cmp	r3, #3
 8008212:	d036      	beq.n	8008282 <USBH_AC_GetMin+0xbc>
 8008214:	e04a      	b.n	80082ac <USBH_AC_GetMin+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800821a:	78db      	ldrb	r3, [r3, #3]
 800821c:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 800821e:	2300      	movs	r3, #0
 8008220:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8008222:	7c3b      	ldrb	r3, [r7, #16]
 8008224:	b29b      	uxth	r3, r3
 8008226:	021b      	lsls	r3, r3, #8
 8008228:	b29a      	uxth	r2, r3
 800822a:	7bfb      	ldrb	r3, [r7, #15]
 800822c:	b29b      	uxth	r3, r3
 800822e:	4313      	orrs	r3, r2
 8008230:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8008232:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008236:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	2200      	movs	r2, #0
 800823c:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 8008240:	2301      	movs	r3, #1
 8008242:	827b      	strh	r3, [r7, #18]
      break;
 8008244:	e035      	b.n	80082b2 <USBH_AC_GetMin+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8008246:	78bb      	ldrb	r3, [r7, #2]
 8008248:	68ba      	ldr	r2, [r7, #8]
 800824a:	3322      	adds	r3, #34	; 0x22
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	4413      	add	r3, r2
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	78db      	ldrb	r3, [r3, #3]
 8008254:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8008256:	2300      	movs	r3, #0
 8008258:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 800825a:	7c3b      	ldrb	r3, [r7, #16]
 800825c:	b29b      	uxth	r3, r3
 800825e:	021b      	lsls	r3, r3, #8
 8008260:	b29a      	uxth	r2, r3
 8008262:	7bfb      	ldrb	r3, [r7, #15]
 8008264:	b29b      	uxth	r3, r3
 8008266:	4313      	orrs	r3, r2
 8008268:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 800826a:	787b      	ldrb	r3, [r7, #1]
 800826c:	b29b      	uxth	r3, r3
 800826e:	021b      	lsls	r3, r3, #8
 8008270:	b29a      	uxth	r2, r3
 8008272:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008276:	b29b      	uxth	r3, r3
 8008278:	4313      	orrs	r3, r2
 800827a:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 800827c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800827e:	827b      	strh	r3, [r7, #18]
      break;
 8008280:	e017      	b.n	80082b2 <USBH_AC_GetMin+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008288:	78db      	ldrb	r3, [r3, #3]
 800828a:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 800828c:	2300      	movs	r3, #0
 800828e:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8008290:	7c3b      	ldrb	r3, [r7, #16]
 8008292:	b29b      	uxth	r3, r3
 8008294:	021b      	lsls	r3, r3, #8
 8008296:	b29a      	uxth	r2, r3
 8008298:	7bfb      	ldrb	r3, [r7, #15]
 800829a:	b29b      	uxth	r3, r3
 800829c:	4313      	orrs	r3, r2
 800829e:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 80082a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082a4:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 80082a6:	2301      	movs	r3, #1
 80082a8:	827b      	strh	r3, [r7, #18]
      break;
 80082aa:	e002      	b.n	80082b2 <USBH_AC_GetMin+0xec>

    default:
      ret = USBH_FAIL;
 80082ac:	2302      	movs	r3, #2
 80082ae:	747b      	strb	r3, [r7, #17]
      break;
 80082b0:	bf00      	nop
  }

  if (ret != USBH_OK)
 80082b2:	7c7b      	ldrb	r3, [r7, #17]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d001      	beq.n	80082bc <USBH_AC_GetMin+0xf6>
  {
    return ret;
 80082b8:	7c7b      	ldrb	r3, [r7, #17]
 80082ba:	e017      	b.n	80082ec <USBH_AC_GetMin+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	22a1      	movs	r2, #161	; 0xa1
 80082c0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MIN;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2282      	movs	r2, #130	; 0x82
 80082c6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	8afa      	ldrh	r2, [r7, #22]
 80082cc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	8aba      	ldrh	r2, [r7, #20]
 80082d2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	8a7a      	ldrh	r2, [r7, #18]
 80082d8:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80082e0:	8a7a      	ldrh	r2, [r7, #18]
 80082e2:	4619      	mov	r1, r3
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f001 fcd3 	bl	8009c90 <USBH_CtlReq>
 80082ea:	4603      	mov	r3, r0

}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3718      	adds	r7, #24
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <USBH_AUDIO_SetEndpointControls>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetEndpointControls(USBH_HandleTypeDef *phost,
                                                         uint8_t  Ep,
                                                         uint8_t *buff)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b086      	sub	sp, #24
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	460b      	mov	r3, r1
 80082fe:	607a      	str	r2, [r7, #4]
 8008300:	72fb      	strb	r3, [r7, #11]
  uint16_t wValue, wIndex, wLength;

  wValue = SAMPLING_FREQ_CONTROL << 8U;
 8008302:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008306:	82fb      	strh	r3, [r7, #22]
  wIndex = Ep;
 8008308:	7afb      	ldrb	r3, [r7, #11]
 800830a:	82bb      	strh	r3, [r7, #20]
  wLength = 3U; /*length of the frequency parameter*/
 800830c:	2303      	movs	r3, #3
 800830e:	827b      	strh	r3, [r7, #18]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT | \
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2222      	movs	r2, #34	; 0x22
 8008314:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2201      	movs	r2, #1
 800831a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	8afa      	ldrh	r2, [r7, #22]
 8008320:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	8aba      	ldrh	r2, [r7, #20]
 8008326:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	8a7a      	ldrh	r2, [r7, #18]
 800832c:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)buff, wLength));
 800832e:	8a7b      	ldrh	r3, [r7, #18]
 8008330:	461a      	mov	r2, r3
 8008332:	6879      	ldr	r1, [r7, #4]
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	f001 fcab 	bl	8009c90 <USBH_CtlReq>
 800833a:	4603      	mov	r3, r0

}
 800833c:	4618      	mov	r0, r3
 800833e:	3718      	adds	r7, #24
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <USBH_AUDIO_InputStream>:
  * @brief  Handle Input stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InputStream(USBH_HandleTypeDef *phost)
{
 8008344:	b480      	push	{r7}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  USBH_StatusTypeDef status = USBH_BUSY;
 800834c:	2301      	movs	r3, #1
 800834e:	73fb      	strb	r3, [r7, #15]

  return status;
 8008350:	7bfb      	ldrb	r3, [r7, #15]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3714      	adds	r7, #20
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr
	...

08008360 <USBH_AUDIO_Control>:
  * @brief  Handle HID Control process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Control(USBH_HandleTypeDef *phost)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b086      	sub	sp, #24
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 8008368:	2301      	movs	r3, #1
 800836a:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8008372:	69db      	ldr	r3, [r3, #28]
 8008374:	613b      	str	r3, [r7, #16]
  uint16_t attribute  = 0U;
 8008376:	2300      	movs	r3, #0
 8008378:	81fb      	strh	r3, [r7, #14]

  switch (AUDIO_Handle->control_state)
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	78db      	ldrb	r3, [r3, #3]
 800837e:	3b01      	subs	r3, #1
 8008380:	2b04      	cmp	r3, #4
 8008382:	f200 8090 	bhi.w	80084a6 <USBH_AUDIO_Control+0x146>
 8008386:	a201      	add	r2, pc, #4	; (adr r2, 800838c <USBH_AUDIO_Control+0x2c>)
 8008388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838c:	080083a1 	.word	0x080083a1
 8008390:	080083f5 	.word	0x080083f5
 8008394:	080084a7 	.word	0x080084a7
 8008398:	08008473 	.word	0x08008473
 800839c:	0800848d 	.word	0x0800848d
  {
    case AUDIO_CONTROL_INIT:
      if ((phost->Timer & 1U) == 0U)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 80083a6:	f003 0301 	and.w	r3, r3, #1
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d17d      	bne.n	80084aa <USBH_AUDIO_Control+0x14a>
      {
        AUDIO_Handle->control.timer = phost->Timer;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8d3 2584 	ldr.w	r2, [r3, #1412]	; 0x584
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
        USBH_InterruptReceiveData(phost,
                                  (uint8_t *)(void *)(AUDIO_Handle->mem),
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	f503 71c8 	add.w	r1, r3, #400	; 0x190
                                  (uint8_t)AUDIO_Handle->control.EpSize,
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
        USBH_InterruptReceiveData(phost,
 80083c6:	b2da      	uxtb	r2, r3
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f001 ff5d 	bl	800a28e <USBH_InterruptReceiveData>
                                  AUDIO_Handle->control.Pipe);

        AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
        AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1

        AUDIO_Handle->control_state = AUDIO_CONTROL_CHANGE ;
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	2202      	movs	r2, #2
 80083f0:	70da      	strb	r2, [r3, #3]
      }
      break;
 80083f2:	e05a      	b.n	80084aa <USBH_AUDIO_Control+0x14a>

    case AUDIO_CONTROL_CHANGE:
      if (USBH_LL_GetURBState(phost, AUDIO_Handle->control.Pipe) == USBH_URB_DONE)
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 80083fa:	4619      	mov	r1, r3
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f005 fa06 	bl	800d80e <USBH_LL_GetURBState>
 8008402:	4603      	mov	r3, r0
 8008404:	2b01      	cmp	r3, #1
 8008406:	d114      	bne.n	8008432 <USBH_AUDIO_Control+0xd2>
      {
        attribute = LE16(&AUDIO_Handle->mem[0]);
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008414:	3302      	adds	r3, #2
 8008416:	881b      	ldrh	r3, [r3, #0]
 8008418:	021b      	lsls	r3, r3, #8
 800841a:	b29b      	uxth	r3, r3
 800841c:	4313      	orrs	r3, r2
 800841e:	81fb      	strh	r3, [r7, #14]
        if (USBH_AUDIO_SetControlAttribute(phost, (uint8_t)attribute) == USBH_BUSY)
 8008420:	89fb      	ldrh	r3, [r7, #14]
 8008422:	b2db      	uxtb	r3, r3
 8008424:	4619      	mov	r1, r3
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 f9a5 	bl	8008776 <USBH_AUDIO_SetControlAttribute>
 800842c:	4603      	mov	r3, r0
 800842e:	2b01      	cmp	r3, #1
 8008430:	d03d      	beq.n	80084ae <USBH_AUDIO_Control+0x14e>
        {
          break;
        }
      }

      if ((phost->Timer - AUDIO_Handle->control.timer) >= AUDIO_Handle->control.Poll)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 2584 	ldr.w	r2, [r3, #1412]	; 0x584
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 800843e:	1ad3      	subs	r3, r2, r3
 8008440:	693a      	ldr	r2, [r7, #16]
 8008442:	f892 218b 	ldrb.w	r2, [r2, #395]	; 0x18b
 8008446:	4293      	cmp	r3, r2
 8008448:	d333      	bcc.n	80084b2 <USBH_AUDIO_Control+0x152>
      {
        AUDIO_Handle->control.timer = phost->Timer;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8d3 2584 	ldr.w	r2, [r3, #1412]	; 0x584
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c

        USBH_InterruptReceiveData(phost,
                                  (uint8_t *)(void *)(AUDIO_Handle->mem),
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	f503 71c8 	add.w	r1, r3, #400	; 0x190
                                  (uint8_t)AUDIO_Handle->control.EpSize,
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
        USBH_InterruptReceiveData(phost,
 8008462:	b2da      	uxtb	r2, r3
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f001 ff0f 	bl	800a28e <USBH_InterruptReceiveData>
                                  AUDIO_Handle->control.Pipe);

      }
      break;
 8008470:	e01f      	b.n	80084b2 <USBH_AUDIO_Control+0x152>

    case AUDIO_CONTROL_VOLUME_UP:
      if (USBH_AUDIO_SetControlAttribute(phost, 1U) == USBH_OK)
 8008472:	2101      	movs	r1, #1
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 f97e 	bl	8008776 <USBH_AUDIO_SetControlAttribute>
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d11a      	bne.n	80084b6 <USBH_AUDIO_Control+0x156>
      {
        AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	2201      	movs	r2, #1
 8008484:	70da      	strb	r2, [r3, #3]
        status = USBH_OK;
 8008486:	2300      	movs	r3, #0
 8008488:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800848a:	e014      	b.n	80084b6 <USBH_AUDIO_Control+0x156>

    case AUDIO_CONTROL_VOLUME_DOWN:
      if (USBH_AUDIO_SetControlAttribute(phost, 2U) == USBH_OK)
 800848c:	2102      	movs	r1, #2
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 f971 	bl	8008776 <USBH_AUDIO_SetControlAttribute>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d10f      	bne.n	80084ba <USBH_AUDIO_Control+0x15a>
      {
        AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	2201      	movs	r2, #1
 800849e:	70da      	strb	r2, [r3, #3]
        status = USBH_OK;
 80084a0:	2300      	movs	r3, #0
 80084a2:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80084a4:	e009      	b.n	80084ba <USBH_AUDIO_Control+0x15a>

    case AUDIO_CONTROL_IDLE:
    default:
      break;
 80084a6:	bf00      	nop
 80084a8:	e008      	b.n	80084bc <USBH_AUDIO_Control+0x15c>
      break;
 80084aa:	bf00      	nop
 80084ac:	e006      	b.n	80084bc <USBH_AUDIO_Control+0x15c>
          break;
 80084ae:	bf00      	nop
 80084b0:	e004      	b.n	80084bc <USBH_AUDIO_Control+0x15c>
      break;
 80084b2:	bf00      	nop
 80084b4:	e002      	b.n	80084bc <USBH_AUDIO_Control+0x15c>
      break;
 80084b6:	bf00      	nop
 80084b8:	e000      	b.n	80084bc <USBH_AUDIO_Control+0x15c>
      break;
 80084ba:	bf00      	nop
  }

  return status;
 80084bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3718      	adds	r7, #24
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop

080084c8 <USBH_AUDIO_OutputStream>:
  * @brief  Handle Output stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_OutputStream(USBH_HandleTypeDef *phost)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b086      	sub	sp, #24
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 80084d0:	2301      	movs	r3, #1
 80084d2:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 80084da:	69db      	ldr	r3, [r3, #28]
 80084dc:	613b      	str	r3, [r7, #16]
  uint8_t *buff;


  switch (AUDIO_Handle->play_state)
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	789b      	ldrb	r3, [r3, #2]
 80084e2:	3b01      	subs	r3, #1
 80084e4:	2b04      	cmp	r3, #4
 80084e6:	d878      	bhi.n	80085da <USBH_AUDIO_OutputStream+0x112>
 80084e8:	a201      	add	r2, pc, #4	; (adr r2, 80084f0 <USBH_AUDIO_OutputStream+0x28>)
 80084ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ee:	bf00      	nop
 80084f0:	08008505 	.word	0x08008505
 80084f4:	0800857d 	.word	0x0800857d
 80084f8:	08008547 	.word	0x08008547
 80084fc:	080085cf 	.word	0x080085cf
 8008500:	080085ad 	.word	0x080085ad
  {
    case AUDIO_PLAYBACK_INIT:

      if (AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->bSamFreqType == 0U)
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800850a:	693a      	ldr	r2, [r7, #16]
 800850c:	3317      	adds	r3, #23
 800850e:	00db      	lsls	r3, r3, #3
 8008510:	4413      	add	r3, r2
 8008512:	68db      	ldr	r3, [r3, #12]
 8008514:	79db      	ldrb	r3, [r3, #7]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d103      	bne.n	8008522 <USBH_AUDIO_OutputStream+0x5a>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP_FREQ;
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	2203      	movs	r2, #3
 800851e:	709a      	strb	r2, [r3, #2]
 8008520:	e002      	b.n	8008528 <USBH_AUDIO_OutputStream+0x60>
      }
      else
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP;
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	2202      	movs	r2, #2
 8008526:	709a      	strb	r2, [r3, #2]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2202      	movs	r2, #2
 800852c:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 800853c:	2300      	movs	r3, #0
 800853e:	2200      	movs	r2, #0
 8008540:	f002 f924 	bl	800a78c <osMessageQueuePut>
#endif
#endif
      break;
 8008544:	e04e      	b.n	80085e4 <USBH_AUDIO_OutputStream+0x11c>

    case AUDIO_PLAYBACK_SET_EP_FREQ:

      buff = (uint8_t *)AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->tSamFreq[0];
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800854c:	693a      	ldr	r2, [r7, #16]
 800854e:	3317      	adds	r3, #23
 8008550:	00db      	lsls	r3, r3, #3
 8008552:	4413      	add	r3, r2
 8008554:	68db      	ldr	r3, [r3, #12]
 8008556:	3308      	adds	r3, #8
 8008558:	60fb      	str	r3, [r7, #12]

      status = USBH_AUDIO_SetEndpointControls(phost, AUDIO_Handle->headphone.Ep, buff);
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8008560:	68fa      	ldr	r2, [r7, #12]
 8008562:	4619      	mov	r1, r3
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f7ff fec5 	bl	80082f4 <USBH_AUDIO_SetEndpointControls>
 800856a:	4603      	mov	r3, r0
 800856c:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800856e:	7dfb      	ldrb	r3, [r7, #23]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d134      	bne.n	80085de <USBH_AUDIO_OutputStream+0x116>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	2205      	movs	r2, #5
 8008578:	709a      	strb	r2, [r3, #2]
      }
      break;
 800857a:	e030      	b.n	80085de <USBH_AUDIO_OutputStream+0x116>

    case AUDIO_PLAYBACK_SET_EP:
      buff = (uint8_t *)(void *)&AUDIO_Handle->headphone.frequency;
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8008582:	60fb      	str	r3, [r7, #12]
      status = USBH_AUDIO_SetEndpointControls(phost, AUDIO_Handle->headphone.Ep, buff);
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 800858a:	68fa      	ldr	r2, [r7, #12]
 800858c:	4619      	mov	r1, r3
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f7ff feb0 	bl	80082f4 <USBH_AUDIO_SetEndpointControls>
 8008594:	4603      	mov	r3, r0
 8008596:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8008598:	7dfb      	ldrb	r3, [r7, #23]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d121      	bne.n	80085e2 <USBH_AUDIO_OutputStream+0x11a>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	2205      	movs	r2, #5
 80085a2:	709a      	strb	r2, [r3, #2]
        USBH_AUDIO_FrequencySet(phost);
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 f98b 	bl	80088c0 <USBH_AUDIO_FrequencySet>
      }
      break;
 80085aa:	e01a      	b.n	80085e2 <USBH_AUDIO_OutputStream+0x11a>

    case AUDIO_PLAYBACK_IDLE:
      status = USBH_OK;
 80085ac:	2300      	movs	r3, #0
 80085ae:	75fb      	strb	r3, [r7, #23]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2204      	movs	r2, #4
 80085b4:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 80085c4:	2300      	movs	r3, #0
 80085c6:	2200      	movs	r2, #0
 80085c8:	f002 f8e0 	bl	800a78c <osMessageQueuePut>
#endif
#endif
      break;
 80085cc:	e00a      	b.n	80085e4 <USBH_AUDIO_OutputStream+0x11c>

    case AUDIO_PLAYBACK_PLAY:
      USBH_AUDIO_Transmit(phost);
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 f80e 	bl	80085f0 <USBH_AUDIO_Transmit>
      status = USBH_OK;
 80085d4:	2300      	movs	r3, #0
 80085d6:	75fb      	strb	r3, [r7, #23]
      break;
 80085d8:	e004      	b.n	80085e4 <USBH_AUDIO_OutputStream+0x11c>

    default:
      break;
 80085da:	bf00      	nop
 80085dc:	e002      	b.n	80085e4 <USBH_AUDIO_OutputStream+0x11c>
      break;
 80085de:	bf00      	nop
 80085e0:	e000      	b.n	80085e4 <USBH_AUDIO_OutputStream+0x11c>
      break;
 80085e2:	bf00      	nop
  }

  return status;
 80085e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3718      	adds	r7, #24
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop

080085f0 <USBH_AUDIO_Transmit>:
  * @brief  Handle Transmission process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Transmit(USBH_HandleTypeDef *phost)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 80085f8:	2301      	movs	r3, #1
 80085fa:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8008602:	69db      	ldr	r3, [r3, #28]
 8008604:	60bb      	str	r3, [r7, #8]

  switch (AUDIO_Handle->processing_state)
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	791b      	ldrb	r3, [r3, #4]
 800860a:	2b01      	cmp	r3, #1
 800860c:	d002      	beq.n	8008614 <USBH_AUDIO_Transmit+0x24>
 800860e:	2b02      	cmp	r3, #2
 8008610:	d044      	beq.n	800869c <USBH_AUDIO_Transmit+0xac>
 8008612:	e0a7      	b.n	8008764 <USBH_AUDIO_Transmit+0x174>
  {
    case AUDIO_DATA_START_OUT:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) == 0U)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 800861a:	f003 0301 	and.w	r3, r3, #1
 800861e:	2b00      	cmp	r3, #0
 8008620:	d12a      	bne.n	8008678 <USBH_AUDIO_Transmit+0x88>
      {
        AUDIO_Handle->headphone.timer = phost->Timer;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f8d3 2584 	ldr.w	r2, [r3, #1412]	; 0x584
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        AUDIO_Handle->processing_state = AUDIO_DATA_OUT;
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	2202      	movs	r2, #2
 8008632:	711a      	strb	r2, [r3, #4]
        USBH_IsocSendData(phost,
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
                          AUDIO_Handle->headphone.buf,
                          (uint32_t)AUDIO_Handle->headphone.frame_length,
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
        USBH_IsocSendData(phost,
 8008640:	461a      	mov	r2, r3
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f001 fe3f 	bl	800a2cc <USBH_IsocSendData>
                          AUDIO_Handle->headphone.Pipe);

        AUDIO_Handle->headphone.partial_ptr = AUDIO_Handle->headphone.frame_length;
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 8008654:	461a      	mov	r2, r3
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        AUDIO_Handle->headphone.global_ptr = AUDIO_Handle->headphone.frame_length;
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 8008662:	461a      	mov	r2, r3
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        AUDIO_Handle->headphone.cbuf = AUDIO_Handle->headphone.buf;
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008676:	e079      	b.n	800876c <USBH_AUDIO_Transmit+0x17c>
        osDelay(1);
 8008678:	2001      	movs	r0, #1
 800867a:	f001 fff9 	bl	800a670 <osDelay>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2204      	movs	r2, #4
 8008682:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 8008692:	2300      	movs	r3, #0
 8008694:	2200      	movs	r2, #0
 8008696:	f002 f879 	bl	800a78c <osMessageQueuePut>
      break;
 800869a:	e067      	b.n	800876c <USBH_AUDIO_Transmit+0x17c>

    case AUDIO_DATA_OUT:
      if ((USBH_LL_GetURBState(phost, AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE) &&
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 80086a2:	4619      	mov	r1, r3
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f005 f8b2 	bl	800d80e <USBH_LL_GetURBState>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d15c      	bne.n	800876a <USBH_AUDIO_Transmit+0x17a>
          ((phost->Timer - AUDIO_Handle->headphone.timer) >= AUDIO_Handle->headphone.Poll))
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 2584 	ldr.w	r2, [r3, #1412]	; 0x584
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80086bc:	1ad3      	subs	r3, r2, r3
 80086be:	68ba      	ldr	r2, [r7, #8]
 80086c0:	f892 20fc 	ldrb.w	r2, [r2, #252]	; 0xfc
      if ((USBH_LL_GetURBState(phost, AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE) &&
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d350      	bcc.n	800876a <USBH_AUDIO_Transmit+0x17a>
      {
        AUDIO_Handle->headphone.timer = phost->Timer;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 2584 	ldr.w	r2, [r3, #1412]	; 0x584
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

        if (AUDIO_Handle->control.supported == 1U)
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d102      	bne.n	80086e4 <USBH_AUDIO_Transmit+0xf4>
        {
          USBH_AUDIO_Control(phost);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f7ff fe3e 	bl	8008360 <USBH_AUDIO_Control>
        }

        if (AUDIO_Handle->headphone.global_ptr <= AUDIO_Handle->headphone.total_length)
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d82b      	bhi.n	800874c <USBH_AUDIO_Transmit+0x15c>
        {
          USBH_IsocSendData(phost,
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
                            AUDIO_Handle->headphone.cbuf,
                            (uint32_t)AUDIO_Handle->headphone.frame_length,
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
          USBH_IsocSendData(phost,
 8008700:	461a      	mov	r2, r3
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f001 fddf 	bl	800a2cc <USBH_IsocSendData>
                            AUDIO_Handle->headphone.Pipe);

          AUDIO_Handle->headphone.cbuf += AUDIO_Handle->headphone.frame_length;
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8008714:	68ba      	ldr	r2, [r7, #8]
 8008716:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 800871a:	441a      	add	r2, r3
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
          AUDIO_Handle->headphone.partial_ptr += AUDIO_Handle->headphone.frame_length;
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8008728:	68ba      	ldr	r2, [r7, #8]
 800872a:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 800872e:	441a      	add	r2, r3
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
          AUDIO_Handle->headphone.global_ptr += AUDIO_Handle->headphone.frame_length;
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800873c:	68ba      	ldr	r2, [r7, #8]
 800873e:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 8008742:	441a      	add	r2, r3
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
          AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
          AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
          USBH_AUDIO_BufferEmptyCallback(phost);
        }
      }
      break;
 800874a:	e00e      	b.n	800876a <USBH_AUDIO_Transmit+0x17a>
          AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	f04f 32ff 	mov.w	r2, #4294967295
 8008752:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
          AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	2205      	movs	r2, #5
 800875a:	709a      	strb	r2, [r3, #2]
          USBH_AUDIO_BufferEmptyCallback(phost);
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 f8b9 	bl	80088d4 <USBH_AUDIO_BufferEmptyCallback>
      break;
 8008762:	e002      	b.n	800876a <USBH_AUDIO_Transmit+0x17a>

    default:
      status = USBH_FAIL;
 8008764:	2302      	movs	r3, #2
 8008766:	73fb      	strb	r3, [r7, #15]
      break;
 8008768:	e000      	b.n	800876c <USBH_AUDIO_Transmit+0x17c>
      break;
 800876a:	bf00      	nop
  }
  return status;
 800876c:	7bfb      	ldrb	r3, [r7, #15]
}
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <USBH_AUDIO_SetControlAttribute>:
  * @param  phost: Host handle
  * @param  attrib: control attribute
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetControlAttribute(USBH_HandleTypeDef *phost, uint8_t attrib)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b084      	sub	sp, #16
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
 800877e:	460b      	mov	r3, r1
 8008780:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008782:	2301      	movs	r3, #1
 8008784:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 800878c:	69db      	ldr	r3, [r3, #28]
 800878e:	60bb      	str	r3, [r7, #8]

  switch (attrib)
 8008790:	78fb      	ldrb	r3, [r7, #3]
 8008792:	2b01      	cmp	r3, #1
 8008794:	d002      	beq.n	800879c <USBH_AUDIO_SetControlAttribute+0x26>
 8008796:	2b02      	cmp	r3, #2
 8008798:	d00b      	beq.n	80087b2 <USBH_AUDIO_SetControlAttribute+0x3c>
 800879a:	e015      	b.n	80087c8 <USBH_AUDIO_SetControlAttribute+0x52>
  {
    case 0x01:
      AUDIO_Handle->headphone.attribute.volume += AUDIO_Handle->headphone.attribute.resolution;
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80087a8:	441a      	add	r2, r3
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      break;
 80087b0:	e00d      	b.n	80087ce <USBH_AUDIO_SetControlAttribute+0x58>

    case 0x02:
      AUDIO_Handle->headphone.attribute.volume -= AUDIO_Handle->headphone.attribute.resolution;
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80087be:	1ad2      	subs	r2, r2, r3
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      break;
 80087c6:	e002      	b.n	80087ce <USBH_AUDIO_SetControlAttribute+0x58>

    default :
      status = USBH_FAIL;
 80087c8:	2302      	movs	r3, #2
 80087ca:	73fb      	strb	r3, [r7, #15]
      break;
 80087cc:	bf00      	nop
  }

  if (AUDIO_Handle->headphone.attribute.volume > AUDIO_Handle->headphone.attribute.volumeMax)
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 80087da:	429a      	cmp	r2, r3
 80087dc:	d905      	bls.n	80087ea <USBH_AUDIO_SetControlAttribute+0x74>
  {
    AUDIO_Handle->headphone.attribute.volume = AUDIO_Handle->headphone.attribute.volumeMax;
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  }

  if (AUDIO_Handle->headphone.attribute.volume < AUDIO_Handle->headphone.attribute.volumeMin)
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d205      	bcs.n	8008806 <USBH_AUDIO_SetControlAttribute+0x90>
  {
    AUDIO_Handle->headphone.attribute.volume = AUDIO_Handle->headphone.attribute.volumeMin;
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  }

  if (AUDIO_SetVolume(phost,
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	f893 11a0 	ldrb.w	r1, [r3, #416]	; 0x1a0
                      AUDIO_Handle->temp_feature,
                      (uint8_t)AUDIO_Handle->temp_channels,
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	f893 21a1 	ldrb.w	r2, [r3, #417]	; 0x1a1
                      (uint16_t)AUDIO_Handle->headphone.attribute.volume) != USBH_BUSY)
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
  if (AUDIO_SetVolume(phost,
 8008818:	b29b      	uxth	r3, r3
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 f827 	bl	800886e <AUDIO_SetVolume>
 8008820:	4603      	mov	r3, r0
 8008822:	2b01      	cmp	r3, #1
 8008824:	d01e      	beq.n	8008864 <USBH_AUDIO_SetControlAttribute+0xee>
  {

    if (AUDIO_Handle->temp_channels == 1U)
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800882c:	2b01      	cmp	r3, #1
 800882e:	d10e      	bne.n	800884e <USBH_AUDIO_SetControlAttribute+0xd8>
    {
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
      AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
      status = USBH_OK;
 8008848:	2300      	movs	r3, #0
 800884a:	73fb      	strb	r3, [r7, #15]
 800884c:	e007      	b.n	800885e <USBH_AUDIO_SetControlAttribute+0xe8>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8008854:	3b01      	subs	r3, #1
 8008856:	b2da      	uxtb	r2, r3
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	2206      	movs	r2, #6
 8008862:	705a      	strb	r2, [r3, #1]
  }


  return status;
 8008864:	7bfb      	ldrb	r3, [r7, #15]
}
 8008866:	4618      	mov	r0, r3
 8008868:	3710      	adds	r7, #16
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <AUDIO_SetVolume>:
  * @param  channel: channel index
  * @param  volume: new volume
  * @retval USBH Status
  */
static USBH_StatusTypeDef AUDIO_SetVolume(USBH_HandleTypeDef *phost, uint8_t feature, uint8_t channel, uint16_t volume)
{
 800886e:	b580      	push	{r7, lr}
 8008870:	b086      	sub	sp, #24
 8008872:	af02      	add	r7, sp, #8
 8008874:	6078      	str	r0, [r7, #4]
 8008876:	4608      	mov	r0, r1
 8008878:	4611      	mov	r1, r2
 800887a:	461a      	mov	r2, r3
 800887c:	4603      	mov	r3, r0
 800887e:	70fb      	strb	r3, [r7, #3]
 8008880:	460b      	mov	r3, r1
 8008882:	70bb      	strb	r3, [r7, #2]
 8008884:	4613      	mov	r3, r2
 8008886:	803b      	strh	r3, [r7, #0]
  USBH_StatusTypeDef status = USBH_BUSY ;
 8008888:	2301      	movs	r3, #1
 800888a:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8008892:	69db      	ldr	r3, [r3, #28]
 8008894:	60bb      	str	r3, [r7, #8]

  AUDIO_Handle->mem[0] = volume;
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	883a      	ldrh	r2, [r7, #0]
 800889a:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

  status = USBH_AC_SetCur(phost, UAC_FEATURE_UNIT, feature,
 800889e:	78fa      	ldrb	r2, [r7, #3]
 80088a0:	2302      	movs	r3, #2
 80088a2:	9301      	str	r3, [sp, #4]
 80088a4:	78bb      	ldrb	r3, [r7, #2]
 80088a6:	9300      	str	r3, [sp, #0]
 80088a8:	2302      	movs	r3, #2
 80088aa:	2106      	movs	r1, #6
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f7ff fa4b 	bl	8007d48 <USBH_AC_SetCur>
 80088b2:	4603      	mov	r3, r0
 80088b4:	73fb      	strb	r3, [r7, #15]
                          VOLUME_CONTROL, channel, 2U);

  return status;
 80088b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3710      	adds	r7, #16
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <USBH_AUDIO_FrequencySet>:
  * @brief  The function informs user that Settings have been changed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void USBH_AUDIO_FrequencySet(USBH_HandleTypeDef *phost)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b083      	sub	sp, #12
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80088c8:	bf00      	nop
 80088ca:	370c      	adds	r7, #12
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <USBH_AUDIO_BufferEmptyCallback>:
  * @brief  The function informs user that User data are processed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void  USBH_AUDIO_BufferEmptyCallback(USBH_HandleTypeDef *phost)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80088dc:	bf00      	nop
 80088de:	370c      	adds	r7, #12
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr

080088e8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b084      	sub	sp, #16
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	60f8      	str	r0, [r7, #12]
 80088f0:	60b9      	str	r1, [r7, #8]
 80088f2:	4613      	mov	r3, r2
 80088f4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d101      	bne.n	8008900 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80088fc:	2302      	movs	r3, #2
 80088fe:	e044      	b.n	800898a <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	79fa      	ldrb	r2, [r7, #7]
 8008904:	f883 258c 	strb.w	r2, [r3, #1420]	; 0x58c

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2200      	movs	r2, #0
 800890c:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
  phost->ClassNumber = 0U;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2200      	movs	r2, #0
 8008914:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8008918:	68f8      	ldr	r0, [r7, #12]
 800891a:	f000 f841 	bl	80089a0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2200      	movs	r2, #0
 8008922:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2200      	movs	r2, #0
 800892a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2200      	movs	r2, #0
 800893a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d003      	beq.n	800894c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	68ba      	ldr	r2, [r7, #8]
 8008948:	f8c3 2594 	str.w	r2, [r3, #1428]	; 0x594
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800894c:	2200      	movs	r2, #0
 800894e:	2104      	movs	r1, #4
 8008950:	2010      	movs	r0, #16
 8008952:	f001 fea8 	bl	800a6a6 <osMessageQueueNew>
 8008956:	4602      	mov	r2, r0
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f8c3 2598 	str.w	r2, [r3, #1432]	; 0x598

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800895e:	4b0d      	ldr	r3, [pc, #52]	; (8008994 <USBH_Init+0xac>)
 8008960:	4a0d      	ldr	r2, [pc, #52]	; (8008998 <USBH_Init+0xb0>)
 8008962:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8008964:	4b0b      	ldr	r3, [pc, #44]	; (8008994 <USBH_Init+0xac>)
 8008966:	2280      	movs	r2, #128	; 0x80
 8008968:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800896a:	4b0a      	ldr	r3, [pc, #40]	; (8008994 <USBH_Init+0xac>)
 800896c:	2218      	movs	r2, #24
 800896e:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8008970:	4a08      	ldr	r2, [pc, #32]	; (8008994 <USBH_Init+0xac>)
 8008972:	68f9      	ldr	r1, [r7, #12]
 8008974:	4809      	ldr	r0, [pc, #36]	; (800899c <USBH_Init+0xb4>)
 8008976:	f001 fde9 	bl	800a54c <osThreadNew>
 800897a:	4602      	mov	r2, r0
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f8c3 259c 	str.w	r2, [r3, #1436]	; 0x59c

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8008982:	68f8      	ldr	r0, [r7, #12]
 8008984:	f004 fe10 	bl	800d5a8 <USBH_LL_Init>

  return USBH_OK;
 8008988:	2300      	movs	r3, #0
}
 800898a:	4618      	mov	r0, r3
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	20004d40 	.word	0x20004d40
 8008998:	0800dc98 	.word	0x0800dc98
 800899c:	08009641 	.word	0x08009641

080089a0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b085      	sub	sp, #20
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80089a8:	2300      	movs	r3, #0
 80089aa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80089ac:	2300      	movs	r3, #0
 80089ae:	60fb      	str	r3, [r7, #12]
 80089b0:	e00a      	b.n	80089c8 <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	4413      	add	r3, r2
 80089be:	2200      	movs	r2, #0
 80089c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	3301      	adds	r3, #1
 80089c6:	60fb      	str	r3, [r7, #12]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2b0e      	cmp	r3, #14
 80089cc:	d9f1      	bls.n	80089b2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80089ce:	2300      	movs	r3, #0
 80089d0:	60fb      	str	r3, [r7, #12]
 80089d2:	e009      	b.n	80089e8 <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	4413      	add	r3, r2
 80089da:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80089de:	2200      	movs	r2, #0
 80089e0:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	3301      	adds	r3, #1
 80089e6:	60fb      	str	r3, [r7, #12]
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089ee:	d3f1      	bcc.n	80089d4 <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2201      	movs	r2, #1
 8008a00:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584

  phost->Control.state = CTRL_SETUP;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2240      	movs	r2, #64	; 0x40
 8008a14:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3714      	adds	r7, #20
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr

08008a4a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008a4a:	b480      	push	{r7}
 8008a4c:	b085      	sub	sp, #20
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
 8008a52:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008a54:	2300      	movs	r3, #0
 8008a56:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d017      	beq.n	8008a8e <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d10f      	bne.n	8008a88 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
 8008a6e:	1c59      	adds	r1, r3, #1
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	f503 73a7 	add.w	r3, r3, #334	; 0x14e
 8008a7c:	6839      	ldr	r1, [r7, #0]
 8008a7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008a82:	2300      	movs	r3, #0
 8008a84:	73fb      	strb	r3, [r7, #15]
 8008a86:	e004      	b.n	8008a92 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008a88:	2302      	movs	r3, #2
 8008a8a:	73fb      	strb	r3, [r7, #15]
 8008a8c:	e001      	b.n	8008a92 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008a8e:	2302      	movs	r3, #2
 8008a90:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3714      	adds	r7, #20
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b087      	sub	sp, #28
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	4608      	mov	r0, r1
 8008aaa:	4611      	mov	r1, r2
 8008aac:	461a      	mov	r2, r3
 8008aae:	4603      	mov	r3, r0
 8008ab0:	70fb      	strb	r3, [r7, #3]
 8008ab2:	460b      	mov	r3, r1
 8008ab4:	70bb      	strb	r3, [r7, #2]
 8008ab6:	4613      	mov	r3, r2
 8008ab8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008aba:	2300      	movs	r3, #0
 8008abc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008ac8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008aca:	e025      	b.n	8008b18 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008acc:	7dfb      	ldrb	r3, [r7, #23]
 8008ace:	2232      	movs	r2, #50	; 0x32
 8008ad0:	fb02 f303 	mul.w	r3, r2, r3
 8008ad4:	3308      	adds	r3, #8
 8008ad6:	68fa      	ldr	r2, [r7, #12]
 8008ad8:	4413      	add	r3, r2
 8008ada:	3302      	adds	r3, #2
 8008adc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	795b      	ldrb	r3, [r3, #5]
 8008ae2:	78fa      	ldrb	r2, [r7, #3]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d002      	beq.n	8008aee <USBH_FindInterface+0x4e>
 8008ae8:	78fb      	ldrb	r3, [r7, #3]
 8008aea:	2bff      	cmp	r3, #255	; 0xff
 8008aec:	d111      	bne.n	8008b12 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008af2:	78ba      	ldrb	r2, [r7, #2]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d002      	beq.n	8008afe <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008af8:	78bb      	ldrb	r3, [r7, #2]
 8008afa:	2bff      	cmp	r3, #255	; 0xff
 8008afc:	d109      	bne.n	8008b12 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008b02:	787a      	ldrb	r2, [r7, #1]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d002      	beq.n	8008b0e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008b08:	787b      	ldrb	r3, [r7, #1]
 8008b0a:	2bff      	cmp	r3, #255	; 0xff
 8008b0c:	d101      	bne.n	8008b12 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008b0e:	7dfb      	ldrb	r3, [r7, #23]
 8008b10:	e006      	b.n	8008b20 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008b12:	7dfb      	ldrb	r3, [r7, #23]
 8008b14:	3301      	adds	r3, #1
 8008b16:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008b18:	7dfb      	ldrb	r3, [r7, #23]
 8008b1a:	2b09      	cmp	r3, #9
 8008b1c:	d9d6      	bls.n	8008acc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008b1e:	23ff      	movs	r3, #255	; 0xff
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	371c      	adds	r7, #28
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr

08008b2c <USBH_FindInterfaceIndex>:
  * @param  alt_settings    : alternate setting number
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterfaceIndex(USBH_HandleTypeDef *phost, uint8_t interface_number, uint8_t alt_settings)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b087      	sub	sp, #28
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	460b      	mov	r3, r1
 8008b36:	70fb      	strb	r3, [r7, #3]
 8008b38:	4613      	mov	r3, r2
 8008b3a:	70bb      	strb	r3, [r7, #2]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8008b40:	2300      	movs	r3, #0
 8008b42:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008b4a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008b4c:	e017      	b.n	8008b7e <USBH_FindInterfaceIndex+0x52>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008b4e:	7dfb      	ldrb	r3, [r7, #23]
 8008b50:	2232      	movs	r2, #50	; 0x32
 8008b52:	fb02 f303 	mul.w	r3, r2, r3
 8008b56:	3308      	adds	r3, #8
 8008b58:	68fa      	ldr	r2, [r7, #12]
 8008b5a:	4413      	add	r3, r2
 8008b5c:	3302      	adds	r3, #2
 8008b5e:	613b      	str	r3, [r7, #16]
    if ((pif->bInterfaceNumber == interface_number) && (pif->bAlternateSetting == alt_settings))
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	789b      	ldrb	r3, [r3, #2]
 8008b64:	78fa      	ldrb	r2, [r7, #3]
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d106      	bne.n	8008b78 <USBH_FindInterfaceIndex+0x4c>
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	78db      	ldrb	r3, [r3, #3]
 8008b6e:	78ba      	ldrb	r2, [r7, #2]
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d101      	bne.n	8008b78 <USBH_FindInterfaceIndex+0x4c>
    {
      return  if_ix;
 8008b74:	7dfb      	ldrb	r3, [r7, #23]
 8008b76:	e006      	b.n	8008b86 <USBH_FindInterfaceIndex+0x5a>
    }
    if_ix++;
 8008b78:	7dfb      	ldrb	r3, [r7, #23]
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008b7e:	7dfb      	ldrb	r3, [r7, #23]
 8008b80:	2b09      	cmp	r3, #9
 8008b82:	d9e4      	bls.n	8008b4e <USBH_FindInterfaceIndex+0x22>
  }
  return 0xFFU;
 8008b84:	23ff      	movs	r3, #255	; 0xff
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	371c      	adds	r7, #28
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr

08008b92 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b082      	sub	sp, #8
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f004 fd40 	bl	800d620 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8008ba0:	2101      	movs	r1, #1
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f004 fe46 	bl	800d834 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3708      	adds	r7, #8
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
	...

08008bb4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b088      	sub	sp, #32
 8008bb8:	af04      	add	r7, sp, #16
 8008bba:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008bbc:	2302      	movs	r3, #2
 8008bbe:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d102      	bne.n	8008bd6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2203      	movs	r2, #3
 8008bd4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	b2db      	uxtb	r3, r3
 8008bdc:	2b0b      	cmp	r3, #11
 8008bde:	f200 823e 	bhi.w	800905e <USBH_Process+0x4aa>
 8008be2:	a201      	add	r2, pc, #4	; (adr r2, 8008be8 <USBH_Process+0x34>)
 8008be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008be8:	08008c19 	.word	0x08008c19
 8008bec:	08008c67 	.word	0x08008c67
 8008bf0:	08008ceb 	.word	0x08008ceb
 8008bf4:	08008fdd 	.word	0x08008fdd
 8008bf8:	0800905f 	.word	0x0800905f
 8008bfc:	08008dab 	.word	0x08008dab
 8008c00:	08008f67 	.word	0x08008f67
 8008c04:	08008dfd 	.word	0x08008dfd
 8008c08:	08008e39 	.word	0x08008e39
 8008c0c:	08008e73 	.word	0x08008e73
 8008c10:	08008ebb 	.word	0x08008ebb
 8008c14:	08008fc5 	.word	0x08008fc5
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	f000 821e 	beq.w	8009062 <USBH_Process+0x4ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008c2c:	20c8      	movs	r0, #200	; 0xc8
 8008c2e:	f004 fe48 	bl	800d8c2 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f004 fd51 	bl	800d6da <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f8c3 2588 	str.w	r2, [r3, #1416]	; 0x588

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f001 fd94 	bl	800a78c <osMessageQueuePut>
#endif
#endif
      }
      break;
 8008c64:	e1fd      	b.n	8009062 <USBH_Process+0x4ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d107      	bne.n	8008c80 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2202      	movs	r2, #2
 8008c7c:	701a      	strb	r2, [r3, #0]
 8008c7e:	e025      	b.n	8008ccc <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 3588 	ldr.w	r3, [r3, #1416]	; 0x588
 8008c86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c8a:	d914      	bls.n	8008cb6 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008c92:	3301      	adds	r3, #1
 8008c94:	b2da      	uxtb	r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008ca2:	2b03      	cmp	r3, #3
 8008ca4:	d903      	bls.n	8008cae <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	220d      	movs	r2, #13
 8008caa:	701a      	strb	r2, [r3, #0]
 8008cac:	e00e      	b.n	8008ccc <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	701a      	strb	r2, [r3, #0]
 8008cb4:	e00a      	b.n	8008ccc <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8d3 3588 	ldr.w	r3, [r3, #1416]	; 0x588
 8008cbc:	f103 020a 	add.w	r2, r3, #10
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8c3 2588 	str.w	r2, [r3, #1416]	; 0x588
          USBH_Delay(10U);
 8008cc6:	200a      	movs	r0, #10
 8008cc8:	f004 fdfb 	bl	800d8c2 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f001 fd52 	bl	800a78c <osMessageQueuePut>
#endif
#endif
      break;
 8008ce8:	e1c2      	b.n	8009070 <USBH_Process+0x4bc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8d3 3594 	ldr.w	r3, [r3, #1428]	; 0x594
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d005      	beq.n	8008d00 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 3594 	ldr.w	r3, [r3, #1428]	; 0x594
 8008cfa:	2104      	movs	r1, #4
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008d00:	2064      	movs	r0, #100	; 0x64
 8008d02:	f004 fdde 	bl	800d8c2 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f004 fcc0 	bl	800d68c <USBH_LL_GetSpeed>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	461a      	mov	r2, r3
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2205      	movs	r2, #5
 8008d1a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008d1c:	2100      	movs	r1, #0
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f001 fb1e 	bl	800a360 <USBH_AllocPipe>
 8008d24:	4603      	mov	r3, r0
 8008d26:	461a      	mov	r2, r3
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008d2c:	2180      	movs	r1, #128	; 0x80
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f001 fb16 	bl	800a360 <USBH_AllocPipe>
 8008d34:	4603      	mov	r3, r0
 8008d36:	461a      	mov	r2, r3
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	7919      	ldrb	r1, [r3, #4]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008d50:	b292      	uxth	r2, r2
 8008d52:	9202      	str	r2, [sp, #8]
 8008d54:	2200      	movs	r2, #0
 8008d56:	9201      	str	r2, [sp, #4]
 8008d58:	9300      	str	r3, [sp, #0]
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	2280      	movs	r2, #128	; 0x80
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f001 facf 	bl	800a302 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	7959      	ldrb	r1, [r3, #5]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008d78:	b292      	uxth	r2, r2
 8008d7a:	9202      	str	r2, [sp, #8]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	9201      	str	r2, [sp, #4]
 8008d80:	9300      	str	r3, [sp, #0]
 8008d82:	4603      	mov	r3, r0
 8008d84:	2200      	movs	r2, #0
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f001 fabb 	bl	800a302 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 8008da0:	2300      	movs	r3, #0
 8008da2:	2200      	movs	r2, #0
 8008da4:	f001 fcf2 	bl	800a78c <osMessageQueuePut>
#endif
#endif
      break;
 8008da8:	e162      	b.n	8009070 <USBH_Process+0x4bc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 f966 	bl	800907c <USBH_HandleEnum>
 8008db0:	4603      	mov	r3, r0
 8008db2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008db4:	7bbb      	ldrb	r3, [r7, #14]
 8008db6:	b2db      	uxtb	r3, r3
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	f040 8154 	bne.w	8009066 <USBH_Process+0x4b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d103      	bne.n	8008dd8 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2208      	movs	r2, #8
 8008dd4:	701a      	strb	r2, [r3, #0]
 8008dd6:	e002      	b.n	8008dde <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2207      	movs	r2, #7
 8008ddc:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2205      	movs	r2, #5
 8008de2:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 8008df2:	2300      	movs	r3, #0
 8008df4:	2200      	movs	r2, #0
 8008df6:	f001 fcc9 	bl	800a78c <osMessageQueuePut>
#endif
#endif
      }
      break;
 8008dfa:	e134      	b.n	8009066 <USBH_Process+0x4b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 3594 	ldr.w	r3, [r3, #1428]	; 0x594
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	f000 8131 	beq.w	800906a <USBH_Process+0x4b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 3594 	ldr.w	r3, [r3, #1428]	; 0x594
 8008e0e:	2101      	movs	r1, #1
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2208      	movs	r2, #8
 8008e18:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2205      	movs	r2, #5
 8008e1e:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 8008e2e:	2300      	movs	r3, #0
 8008e30:	2200      	movs	r2, #0
 8008e32:	f001 fcab 	bl	800a78c <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 8008e36:	e118      	b.n	800906a <USBH_Process+0x4b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	4619      	mov	r1, r3
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 fcfa 	bl	800983c <USBH_SetCfg>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d102      	bne.n	8008e54 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2209      	movs	r2, #9
 8008e52:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 8008e68:	2300      	movs	r3, #0
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f001 fc8e 	bl	800a78c <osMessageQueuePut>
#endif
#endif
      break;
 8008e70:	e0fe      	b.n	8009070 <USBH_Process+0x4bc>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008e78:	f003 0320 	and.w	r3, r3, #32
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d00a      	beq.n	8008e96 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8008e80:	2101      	movs	r1, #1
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 fd24 	bl	80098d0 <USBH_SetFeature>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d106      	bne.n	8008e9c <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	220a      	movs	r2, #10
 8008e92:	701a      	strb	r2, [r3, #0]
 8008e94:	e002      	b.n	8008e9c <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	220a      	movs	r2, #10
 8008e9a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f001 fc6a 	bl	800a78c <osMessageQueuePut>
#endif
#endif
      break;
 8008eb8:	e0da      	b.n	8009070 <USBH_Process+0x4bc>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d041      	beq.n	8008f48 <USBH_Process+0x394>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008ecc:	2300      	movs	r3, #0
 8008ece:	73fb      	strb	r3, [r7, #15]
 8008ed0:	e018      	b.n	8008f04 <USBH_Process+0x350>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008ed2:	7bfa      	ldrb	r2, [r7, #15]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f502 72a7 	add.w	r2, r2, #334	; 0x14e
 8008eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ede:	791a      	ldrb	r2, [r3, #4]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d109      	bne.n	8008efe <USBH_Process+0x34a>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008eea:	7bfa      	ldrb	r2, [r7, #15]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f502 72a7 	add.w	r2, r2, #334	; 0x14e
 8008ef2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
            break;
 8008efc:	e005      	b.n	8008f0a <USBH_Process+0x356>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008efe:	7bfb      	ldrb	r3, [r7, #15]
 8008f00:	3301      	adds	r3, #1
 8008f02:	73fb      	strb	r3, [r7, #15]
 8008f04:	7bfb      	ldrb	r3, [r7, #15]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d0e3      	beq.n	8008ed2 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d016      	beq.n	8008f42 <USBH_Process+0x38e>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	4798      	blx	r3
 8008f20:	4603      	mov	r3, r0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d109      	bne.n	8008f3a <USBH_Process+0x386>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2206      	movs	r2, #6
 8008f2a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 3594 	ldr.w	r3, [r3, #1428]	; 0x594
 8008f32:	2103      	movs	r1, #3
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	4798      	blx	r3
 8008f38:	e006      	b.n	8008f48 <USBH_Process+0x394>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	220d      	movs	r2, #13
 8008f3e:	701a      	strb	r2, [r3, #0]
 8008f40:	e002      	b.n	8008f48 <USBH_Process+0x394>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	220d      	movs	r2, #13
 8008f46:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2205      	movs	r2, #5
 8008f4c:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	2200      	movs	r2, #0
 8008f60:	f001 fc14 	bl	800a78c <osMessageQueuePut>
#endif
#endif
      break;
 8008f64:	e084      	b.n	8009070 <USBH_Process+0x4bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d017      	beq.n	8008fa0 <USBH_Process+0x3ec>
      {
        status = phost->pActiveClass->Requests(phost);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8008f76:	691b      	ldr	r3, [r3, #16]
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	4798      	blx	r3
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008f80:	7bbb      	ldrb	r3, [r7, #14]
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d103      	bne.n	8008f90 <USBH_Process+0x3dc>
        {
          phost->gState = HOST_CLASS;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	220b      	movs	r2, #11
 8008f8c:	701a      	strb	r2, [r3, #0]
 8008f8e:	e00a      	b.n	8008fa6 <USBH_Process+0x3f2>
        }
        else if (status == USBH_FAIL)
 8008f90:	7bbb      	ldrb	r3, [r7, #14]
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	2b02      	cmp	r3, #2
 8008f96:	d106      	bne.n	8008fa6 <USBH_Process+0x3f2>
        {
          phost->gState = HOST_ABORT_STATE;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	220d      	movs	r2, #13
 8008f9c:	701a      	strb	r2, [r3, #0]
 8008f9e:	e002      	b.n	8008fa6 <USBH_Process+0x3f2>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	220d      	movs	r2, #13
 8008fa4:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2205      	movs	r2, #5
 8008faa:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 8008fba:	2300      	movs	r3, #0
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f001 fbe5 	bl	800a78c <osMessageQueuePut>
#endif
#endif
      break;
 8008fc2:	e055      	b.n	8009070 <USBH_Process+0x4bc>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d04f      	beq.n	800906e <USBH_Process+0x4ba>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8008fd4:	695b      	ldr	r3, [r3, #20]
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	4798      	blx	r3
      }
      break;
 8008fda:	e048      	b.n	800906e <USBH_Process+0x4ba>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f7ff fcdb 	bl	80089a0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d009      	beq.n	8009008 <USBH_Process+0x454>
      {
        phost->pActiveClass->DeInit(phost);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8008ffa:	68db      	ldr	r3, [r3, #12]
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
      }

      if (phost->pUser != NULL)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 3594 	ldr.w	r3, [r3, #1428]	; 0x594
 800900e:	2b00      	cmp	r3, #0
 8009010:	d005      	beq.n	800901e <USBH_Process+0x46a>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8d3 3594 	ldr.w	r3, [r3, #1428]	; 0x594
 8009018:	2105      	movs	r1, #5
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009024:	b2db      	uxtb	r3, r3
 8009026:	2b01      	cmp	r3, #1
 8009028:	d107      	bne.n	800903a <USBH_Process+0x486>
      {
        phost->device.is_ReEnumerated = 0U;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f7ff fdad 	bl	8008b92 <USBH_Start>
 8009038:	e002      	b.n	8009040 <USBH_Process+0x48c>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f004 faf0 	bl	800d620 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2201      	movs	r2, #1
 8009044:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 8009054:	2300      	movs	r3, #0
 8009056:	2200      	movs	r2, #0
 8009058:	f001 fb98 	bl	800a78c <osMessageQueuePut>
#endif
#endif
      break;
 800905c:	e008      	b.n	8009070 <USBH_Process+0x4bc>

    case HOST_ABORT_STATE:
    default :
      break;
 800905e:	bf00      	nop
 8009060:	e006      	b.n	8009070 <USBH_Process+0x4bc>
      break;
 8009062:	bf00      	nop
 8009064:	e004      	b.n	8009070 <USBH_Process+0x4bc>
      break;
 8009066:	bf00      	nop
 8009068:	e002      	b.n	8009070 <USBH_Process+0x4bc>
    break;
 800906a:	bf00      	nop
 800906c:	e000      	b.n	8009070 <USBH_Process+0x4bc>
      break;
 800906e:	bf00      	nop
  }
  return USBH_OK;
 8009070:	2300      	movs	r3, #0
}
 8009072:	4618      	mov	r0, r3
 8009074:	3710      	adds	r7, #16
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop

0800907c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b088      	sub	sp, #32
 8009080:	af04      	add	r7, sp, #16
 8009082:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009084:	2301      	movs	r3, #1
 8009086:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009088:	2301      	movs	r3, #1
 800908a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	785b      	ldrb	r3, [r3, #1]
 8009090:	2b07      	cmp	r3, #7
 8009092:	f200 8208 	bhi.w	80094a6 <USBH_HandleEnum+0x42a>
 8009096:	a201      	add	r2, pc, #4	; (adr r2, 800909c <USBH_HandleEnum+0x20>)
 8009098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800909c:	080090bd 	.word	0x080090bd
 80090a0:	0800917b 	.word	0x0800917b
 80090a4:	080091e5 	.word	0x080091e5
 80090a8:	08009273 	.word	0x08009273
 80090ac:	080092dd 	.word	0x080092dd
 80090b0:	0800934d 	.word	0x0800934d
 80090b4:	080093e9 	.word	0x080093e9
 80090b8:	08009467 	.word	0x08009467
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80090bc:	2108      	movs	r1, #8
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 faec 	bl	800969c <USBH_Get_DevDesc>
 80090c4:	4603      	mov	r3, r0
 80090c6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80090c8:	7bbb      	ldrb	r3, [r7, #14]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d130      	bne.n	8009130 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2201      	movs	r2, #1
 80090dc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	7919      	ldrb	r1, [r3, #4]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80090f2:	b292      	uxth	r2, r2
 80090f4:	9202      	str	r2, [sp, #8]
 80090f6:	2200      	movs	r2, #0
 80090f8:	9201      	str	r2, [sp, #4]
 80090fa:	9300      	str	r3, [sp, #0]
 80090fc:	4603      	mov	r3, r0
 80090fe:	2280      	movs	r2, #128	; 0x80
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f001 f8fe 	bl	800a302 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	7959      	ldrb	r1, [r3, #5]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800911a:	b292      	uxth	r2, r2
 800911c:	9202      	str	r2, [sp, #8]
 800911e:	2200      	movs	r2, #0
 8009120:	9201      	str	r2, [sp, #4]
 8009122:	9300      	str	r3, [sp, #0]
 8009124:	4603      	mov	r3, r0
 8009126:	2200      	movs	r2, #0
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f001 f8ea 	bl	800a302 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800912e:	e1bc      	b.n	80094aa <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009130:	7bbb      	ldrb	r3, [r7, #14]
 8009132:	2b03      	cmp	r3, #3
 8009134:	f040 81b9 	bne.w	80094aa <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800913e:	3301      	adds	r3, #1
 8009140:	b2da      	uxtb	r2, r3
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800914e:	2b03      	cmp	r3, #3
 8009150:	d903      	bls.n	800915a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	220d      	movs	r2, #13
 8009156:	701a      	strb	r2, [r3, #0]
      break;
 8009158:	e1a7      	b.n	80094aa <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	795b      	ldrb	r3, [r3, #5]
 800915e:	4619      	mov	r1, r3
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f001 f91f 	bl	800a3a4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	791b      	ldrb	r3, [r3, #4]
 800916a:	4619      	mov	r1, r3
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f001 f919 	bl	800a3a4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2200      	movs	r2, #0
 8009176:	701a      	strb	r2, [r3, #0]
      break;
 8009178:	e197      	b.n	80094aa <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800917a:	2112      	movs	r1, #18
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 fa8d 	bl	800969c <USBH_Get_DevDesc>
 8009182:	4603      	mov	r3, r0
 8009184:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009186:	7bbb      	ldrb	r3, [r7, #14]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d103      	bne.n	8009194 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2202      	movs	r2, #2
 8009190:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009192:	e18c      	b.n	80094ae <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009194:	7bbb      	ldrb	r3, [r7, #14]
 8009196:	2b03      	cmp	r3, #3
 8009198:	f040 8189 	bne.w	80094ae <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80091a2:	3301      	adds	r3, #1
 80091a4:	b2da      	uxtb	r2, r3
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80091b2:	2b03      	cmp	r3, #3
 80091b4:	d903      	bls.n	80091be <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	220d      	movs	r2, #13
 80091ba:	701a      	strb	r2, [r3, #0]
      break;
 80091bc:	e177      	b.n	80094ae <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	795b      	ldrb	r3, [r3, #5]
 80091c2:	4619      	mov	r1, r3
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f001 f8ed 	bl	800a3a4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	791b      	ldrb	r3, [r3, #4]
 80091ce:	4619      	mov	r1, r3
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f001 f8e7 	bl	800a3a4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2200      	movs	r2, #0
 80091e0:	701a      	strb	r2, [r3, #0]
      break;
 80091e2:	e164      	b.n	80094ae <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80091e4:	2101      	movs	r1, #1
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 fb04 	bl	80097f4 <USBH_SetAddress>
 80091ec:	4603      	mov	r3, r0
 80091ee:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80091f0:	7bbb      	ldrb	r3, [r7, #14]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d132      	bne.n	800925c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80091f6:	2002      	movs	r0, #2
 80091f8:	f004 fb63 	bl	800d8c2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2201      	movs	r2, #1
 8009200:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2203      	movs	r2, #3
 8009208:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	7919      	ldrb	r1, [r3, #4]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800921e:	b292      	uxth	r2, r2
 8009220:	9202      	str	r2, [sp, #8]
 8009222:	2200      	movs	r2, #0
 8009224:	9201      	str	r2, [sp, #4]
 8009226:	9300      	str	r3, [sp, #0]
 8009228:	4603      	mov	r3, r0
 800922a:	2280      	movs	r2, #128	; 0x80
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f001 f868 	bl	800a302 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	7959      	ldrb	r1, [r3, #5]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009246:	b292      	uxth	r2, r2
 8009248:	9202      	str	r2, [sp, #8]
 800924a:	2200      	movs	r2, #0
 800924c:	9201      	str	r2, [sp, #4]
 800924e:	9300      	str	r3, [sp, #0]
 8009250:	4603      	mov	r3, r0
 8009252:	2200      	movs	r2, #0
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f001 f854 	bl	800a302 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800925a:	e12a      	b.n	80094b2 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800925c:	7bbb      	ldrb	r3, [r7, #14]
 800925e:	2b03      	cmp	r3, #3
 8009260:	f040 8127 	bne.w	80094b2 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	220d      	movs	r2, #13
 8009268:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	705a      	strb	r2, [r3, #1]
      break;
 8009270:	e11f      	b.n	80094b2 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009272:	2109      	movs	r1, #9
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 fa39 	bl	80096ec <USBH_Get_CfgDesc>
 800927a:	4603      	mov	r3, r0
 800927c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800927e:	7bbb      	ldrb	r3, [r7, #14]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d103      	bne.n	800928c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2204      	movs	r2, #4
 8009288:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800928a:	e114      	b.n	80094b6 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800928c:	7bbb      	ldrb	r3, [r7, #14]
 800928e:	2b03      	cmp	r3, #3
 8009290:	f040 8111 	bne.w	80094b6 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800929a:	3301      	adds	r3, #1
 800929c:	b2da      	uxtb	r2, r3
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80092aa:	2b03      	cmp	r3, #3
 80092ac:	d903      	bls.n	80092b6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	220d      	movs	r2, #13
 80092b2:	701a      	strb	r2, [r3, #0]
      break;
 80092b4:	e0ff      	b.n	80094b6 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	795b      	ldrb	r3, [r3, #5]
 80092ba:	4619      	mov	r1, r3
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f001 f871 	bl	800a3a4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	791b      	ldrb	r3, [r3, #4]
 80092c6:	4619      	mov	r1, r3
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f001 f86b 	bl	800a3a4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2200      	movs	r2, #0
 80092d2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2200      	movs	r2, #0
 80092d8:	701a      	strb	r2, [r3, #0]
      break;
 80092da:	e0ec      	b.n	80094b6 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80092e2:	4619      	mov	r1, r3
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 fa01 	bl	80096ec <USBH_Get_CfgDesc>
 80092ea:	4603      	mov	r3, r0
 80092ec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80092ee:	7bbb      	ldrb	r3, [r7, #14]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d103      	bne.n	80092fc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2205      	movs	r2, #5
 80092f8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80092fa:	e0de      	b.n	80094ba <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80092fc:	7bbb      	ldrb	r3, [r7, #14]
 80092fe:	2b03      	cmp	r3, #3
 8009300:	f040 80db 	bne.w	80094ba <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800930a:	3301      	adds	r3, #1
 800930c:	b2da      	uxtb	r2, r3
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800931a:	2b03      	cmp	r3, #3
 800931c:	d903      	bls.n	8009326 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	220d      	movs	r2, #13
 8009322:	701a      	strb	r2, [r3, #0]
      break;
 8009324:	e0c9      	b.n	80094ba <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	795b      	ldrb	r3, [r3, #5]
 800932a:	4619      	mov	r1, r3
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f001 f839 	bl	800a3a4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	791b      	ldrb	r3, [r3, #4]
 8009336:	4619      	mov	r1, r3
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f001 f833 	bl	800a3a4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2200      	movs	r2, #0
 8009348:	701a      	strb	r2, [r3, #0]
      break;
 800934a:	e0b6      	b.n	80094ba <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009352:	2b00      	cmp	r3, #0
 8009354:	d036      	beq.n	80093c4 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009362:	23ff      	movs	r3, #255	; 0xff
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f000 f9e5 	bl	8009734 <USBH_Get_StringDesc>
 800936a:	4603      	mov	r3, r0
 800936c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800936e:	7bbb      	ldrb	r3, [r7, #14]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d111      	bne.n	8009398 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2206      	movs	r2, #6
 8009378:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2205      	movs	r2, #5
 800937e:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 800938e:	2300      	movs	r3, #0
 8009390:	2200      	movs	r2, #0
 8009392:	f001 f9fb 	bl	800a78c <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009396:	e092      	b.n	80094be <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009398:	7bbb      	ldrb	r3, [r7, #14]
 800939a:	2b03      	cmp	r3, #3
 800939c:	f040 808f 	bne.w	80094be <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2206      	movs	r2, #6
 80093a4:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2205      	movs	r2, #5
 80093aa:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 80093ba:	2300      	movs	r3, #0
 80093bc:	2200      	movs	r2, #0
 80093be:	f001 f9e5 	bl	800a78c <osMessageQueuePut>
      break;
 80093c2:	e07c      	b.n	80094be <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2206      	movs	r2, #6
 80093c8:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2205      	movs	r2, #5
 80093ce:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 80093de:	2300      	movs	r3, #0
 80093e0:	2200      	movs	r2, #0
 80093e2:	f001 f9d3 	bl	800a78c <osMessageQueuePut>
      break;
 80093e6:	e06a      	b.n	80094be <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d027      	beq.n	8009442 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80093fe:	23ff      	movs	r3, #255	; 0xff
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f000 f997 	bl	8009734 <USBH_Get_StringDesc>
 8009406:	4603      	mov	r3, r0
 8009408:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800940a:	7bbb      	ldrb	r3, [r7, #14]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d103      	bne.n	8009418 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2207      	movs	r2, #7
 8009414:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009416:	e054      	b.n	80094c2 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009418:	7bbb      	ldrb	r3, [r7, #14]
 800941a:	2b03      	cmp	r3, #3
 800941c:	d151      	bne.n	80094c2 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2207      	movs	r2, #7
 8009422:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2205      	movs	r2, #5
 8009428:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 8009438:	2300      	movs	r3, #0
 800943a:	2200      	movs	r2, #0
 800943c:	f001 f9a6 	bl	800a78c <osMessageQueuePut>
      break;
 8009440:	e03f      	b.n	80094c2 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2207      	movs	r2, #7
 8009446:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2205      	movs	r2, #5
 800944c:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 800945c:	2300      	movs	r3, #0
 800945e:	2200      	movs	r2, #0
 8009460:	f001 f994 	bl	800a78c <osMessageQueuePut>
      break;
 8009464:	e02d      	b.n	80094c2 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800946c:	2b00      	cmp	r3, #0
 800946e:	d017      	beq.n	80094a0 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800947c:	23ff      	movs	r3, #255	; 0xff
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 f958 	bl	8009734 <USBH_Get_StringDesc>
 8009484:	4603      	mov	r3, r0
 8009486:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009488:	7bbb      	ldrb	r3, [r7, #14]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d102      	bne.n	8009494 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800948e:	2300      	movs	r3, #0
 8009490:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009492:	e018      	b.n	80094c6 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009494:	7bbb      	ldrb	r3, [r7, #14]
 8009496:	2b03      	cmp	r3, #3
 8009498:	d115      	bne.n	80094c6 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800949a:	2300      	movs	r3, #0
 800949c:	73fb      	strb	r3, [r7, #15]
      break;
 800949e:	e012      	b.n	80094c6 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 80094a0:	2300      	movs	r3, #0
 80094a2:	73fb      	strb	r3, [r7, #15]
      break;
 80094a4:	e00f      	b.n	80094c6 <USBH_HandleEnum+0x44a>

    default:
      break;
 80094a6:	bf00      	nop
 80094a8:	e00e      	b.n	80094c8 <USBH_HandleEnum+0x44c>
      break;
 80094aa:	bf00      	nop
 80094ac:	e00c      	b.n	80094c8 <USBH_HandleEnum+0x44c>
      break;
 80094ae:	bf00      	nop
 80094b0:	e00a      	b.n	80094c8 <USBH_HandleEnum+0x44c>
      break;
 80094b2:	bf00      	nop
 80094b4:	e008      	b.n	80094c8 <USBH_HandleEnum+0x44c>
      break;
 80094b6:	bf00      	nop
 80094b8:	e006      	b.n	80094c8 <USBH_HandleEnum+0x44c>
      break;
 80094ba:	bf00      	nop
 80094bc:	e004      	b.n	80094c8 <USBH_HandleEnum+0x44c>
      break;
 80094be:	bf00      	nop
 80094c0:	e002      	b.n	80094c8 <USBH_HandleEnum+0x44c>
      break;
 80094c2:	bf00      	nop
 80094c4:	e000      	b.n	80094c8 <USBH_HandleEnum+0x44c>
      break;
 80094c6:	bf00      	nop
  }
  return Status;
 80094c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3710      	adds	r7, #16
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
 80094d2:	bf00      	nop

080094d4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	683a      	ldr	r2, [r7, #0]
 80094e2:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
}
 80094e6:	bf00      	nop
 80094e8:	370c      	adds	r7, #12
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr

080094f2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80094f2:	b580      	push	{r7, lr}
 80094f4:	b082      	sub	sp, #8
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 8009500:	1c5a      	adds	r2, r3, #1
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
  USBH_HandleSof(phost);
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 f804 	bl	8009516 <USBH_HandleSof>
}
 800950e:	bf00      	nop
 8009510:	3708      	adds	r7, #8
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}

08009516 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009516:	b580      	push	{r7, lr}
 8009518:	b082      	sub	sp, #8
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	b2db      	uxtb	r3, r3
 8009524:	2b0b      	cmp	r3, #11
 8009526:	d10a      	bne.n	800953e <USBH_HandleSof+0x28>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 800952e:	2b00      	cmp	r3, #0
 8009530:	d005      	beq.n	800953e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
 8009538:	699b      	ldr	r3, [r3, #24]
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	4798      	blx	r3
  }
}
 800953e:	bf00      	nop
 8009540:	3708      	adds	r7, #8
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009546:	b580      	push	{r7, lr}
 8009548:	b082      	sub	sp, #8
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2201      	movs	r2, #1
 8009552:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2201      	movs	r2, #1
 800955a:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 800956a:	2300      	movs	r3, #0
 800956c:	2200      	movs	r2, #0
 800956e:	f001 f90d 	bl	800a78c <osMessageQueuePut>
#endif
#endif

  return;
 8009572:	bf00      	nop
}
 8009574:	3708      	adds	r7, #8
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}

0800957a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800957a:	b480      	push	{r7}
 800957c:	b083      	sub	sp, #12
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2200      	movs	r2, #0
 8009586:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800958a:	bf00      	nop
}
 800958c:	370c      	adds	r7, #12
 800958e:	46bd      	mov	sp, r7
 8009590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009594:	4770      	bx	lr

08009596 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009596:	b580      	push	{r7, lr}
 8009598:	b082      	sub	sp, #8
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2201      	movs	r2, #1
 80095a2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2201      	movs	r2, #1
 80095ba:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 80095ca:	2300      	movs	r3, #0
 80095cc:	2200      	movs	r2, #0
 80095ce:	f001 f8dd 	bl	800a78c <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 80095d2:	2300      	movs	r3, #0
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3708      	adds	r7, #8
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2201      	movs	r2, #1
 80095e8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2200      	movs	r2, #0
 80095f0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f004 f82a 	bl	800d656 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	791b      	ldrb	r3, [r3, #4]
 8009606:	4619      	mov	r1, r3
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 fecb 	bl	800a3a4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	795b      	ldrb	r3, [r3, #5]
 8009612:	4619      	mov	r1, r3
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 fec5 	bl	800a3a4 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2201      	movs	r2, #1
 800961e:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 800962e:	2300      	movs	r3, #0
 8009630:	2200      	movs	r2, #0
 8009632:	f001 f8ab 	bl	800a78c <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8009636:	2300      	movs	r3, #0
}
 8009638:	4618      	mov	r0, r3
 800963a:	3708      	adds	r7, #8
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b084      	sub	sp, #16
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8009654:	f04f 33ff 	mov.w	r3, #4294967295
 8009658:	2200      	movs	r2, #0
 800965a:	f001 f8f7 	bl	800a84c <osMessageQueueGet>
 800965e:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d1f0      	bne.n	8009648 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f7ff faa4 	bl	8008bb4 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800966c:	e7ec      	b.n	8009648 <USBH_Process_OS+0x8>

0800966e <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800966e:	b580      	push	{r7, lr}
 8009670:	b082      	sub	sp, #8
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2201      	movs	r2, #1
 800967a:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 800968a:	2300      	movs	r3, #0
 800968c:	2200      	movs	r2, #0
 800968e:	f001 f87d 	bl	800a78c <osMessageQueuePut>
#endif

  return USBH_OK;
 8009692:	2300      	movs	r3, #0
}
 8009694:	4618      	mov	r0, r3
 8009696:	3708      	adds	r7, #8
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b086      	sub	sp, #24
 80096a0:	af02      	add	r7, sp, #8
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	460b      	mov	r3, r1
 80096a6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80096ae:	78fb      	ldrb	r3, [r7, #3]
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	9300      	str	r3, [sp, #0]
 80096b4:	4613      	mov	r3, r2
 80096b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80096ba:	2100      	movs	r1, #0
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 f864 	bl	800978a <USBH_GetDescriptor>
 80096c2:	4603      	mov	r3, r0
 80096c4:	73fb      	strb	r3, [r7, #15]
 80096c6:	7bfb      	ldrb	r3, [r7, #15]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d10a      	bne.n	80096e2 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f203 3026 	addw	r0, r3, #806	; 0x326
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80096d8:	78fa      	ldrb	r2, [r7, #3]
 80096da:	b292      	uxth	r2, r2
 80096dc:	4619      	mov	r1, r3
 80096de:	f000 f91b 	bl	8009918 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80096e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3710      	adds	r7, #16
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}

080096ec <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b086      	sub	sp, #24
 80096f0:	af02      	add	r7, sp, #8
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	460b      	mov	r3, r1
 80096f6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	331c      	adds	r3, #28
 80096fc:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80096fe:	887b      	ldrh	r3, [r7, #2]
 8009700:	9300      	str	r3, [sp, #0]
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009708:	2100      	movs	r1, #0
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 f83d 	bl	800978a <USBH_GetDescriptor>
 8009710:	4603      	mov	r3, r0
 8009712:	72fb      	strb	r3, [r7, #11]
 8009714:	7afb      	ldrb	r3, [r7, #11]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d107      	bne.n	800972a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009720:	887a      	ldrh	r2, [r7, #2]
 8009722:	68f9      	ldr	r1, [r7, #12]
 8009724:	4618      	mov	r0, r3
 8009726:	f000 f967 	bl	80099f8 <USBH_ParseCfgDesc>
  }

  return status;
 800972a:	7afb      	ldrb	r3, [r7, #11]
}
 800972c:	4618      	mov	r0, r3
 800972e:	3710      	adds	r7, #16
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b088      	sub	sp, #32
 8009738:	af02      	add	r7, sp, #8
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	607a      	str	r2, [r7, #4]
 800973e:	461a      	mov	r2, r3
 8009740:	460b      	mov	r3, r1
 8009742:	72fb      	strb	r3, [r7, #11]
 8009744:	4613      	mov	r3, r2
 8009746:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8009748:	7afb      	ldrb	r3, [r7, #11]
 800974a:	b29b      	uxth	r3, r3
 800974c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009750:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009758:	893b      	ldrh	r3, [r7, #8]
 800975a:	9300      	str	r3, [sp, #0]
 800975c:	460b      	mov	r3, r1
 800975e:	2100      	movs	r1, #0
 8009760:	68f8      	ldr	r0, [r7, #12]
 8009762:	f000 f812 	bl	800978a <USBH_GetDescriptor>
 8009766:	4603      	mov	r3, r0
 8009768:	75fb      	strb	r3, [r7, #23]
 800976a:	7dfb      	ldrb	r3, [r7, #23]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d107      	bne.n	8009780 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009776:	893a      	ldrh	r2, [r7, #8]
 8009778:	6879      	ldr	r1, [r7, #4]
 800977a:	4618      	mov	r0, r3
 800977c:	f000 fa3a 	bl	8009bf4 <USBH_ParseStringDesc>
  }

  return status;
 8009780:	7dfb      	ldrb	r3, [r7, #23]
}
 8009782:	4618      	mov	r0, r3
 8009784:	3718      	adds	r7, #24
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800978a:	b580      	push	{r7, lr}
 800978c:	b084      	sub	sp, #16
 800978e:	af00      	add	r7, sp, #0
 8009790:	60f8      	str	r0, [r7, #12]
 8009792:	607b      	str	r3, [r7, #4]
 8009794:	460b      	mov	r3, r1
 8009796:	72fb      	strb	r3, [r7, #11]
 8009798:	4613      	mov	r3, r2
 800979a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	789b      	ldrb	r3, [r3, #2]
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d11c      	bne.n	80097de <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80097a4:	7afb      	ldrb	r3, [r7, #11]
 80097a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80097aa:	b2da      	uxtb	r2, r3
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2206      	movs	r2, #6
 80097b4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	893a      	ldrh	r2, [r7, #8]
 80097ba:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80097bc:	893b      	ldrh	r3, [r7, #8]
 80097be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80097c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80097c6:	d104      	bne.n	80097d2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f240 4209 	movw	r2, #1033	; 0x409
 80097ce:	829a      	strh	r2, [r3, #20]
 80097d0:	e002      	b.n	80097d8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2200      	movs	r2, #0
 80097d6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	8b3a      	ldrh	r2, [r7, #24]
 80097dc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80097de:	8b3b      	ldrh	r3, [r7, #24]
 80097e0:	461a      	mov	r2, r3
 80097e2:	6879      	ldr	r1, [r7, #4]
 80097e4:	68f8      	ldr	r0, [r7, #12]
 80097e6:	f000 fa53 	bl	8009c90 <USBH_CtlReq>
 80097ea:	4603      	mov	r3, r0
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3710      	adds	r7, #16
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b082      	sub	sp, #8
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	460b      	mov	r3, r1
 80097fe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	789b      	ldrb	r3, [r3, #2]
 8009804:	2b01      	cmp	r3, #1
 8009806:	d10f      	bne.n	8009828 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2200      	movs	r2, #0
 800980c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2205      	movs	r2, #5
 8009812:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009814:	78fb      	ldrb	r3, [r7, #3]
 8009816:	b29a      	uxth	r2, r3
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2200      	movs	r2, #0
 8009820:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2200      	movs	r2, #0
 8009826:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009828:	2200      	movs	r2, #0
 800982a:	2100      	movs	r1, #0
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 fa2f 	bl	8009c90 <USBH_CtlReq>
 8009832:	4603      	mov	r3, r0
}
 8009834:	4618      	mov	r0, r3
 8009836:	3708      	adds	r7, #8
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	460b      	mov	r3, r1
 8009846:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	789b      	ldrb	r3, [r3, #2]
 800984c:	2b01      	cmp	r3, #1
 800984e:	d10e      	bne.n	800986e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2200      	movs	r2, #0
 8009854:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2209      	movs	r2, #9
 800985a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	887a      	ldrh	r2, [r7, #2]
 8009860:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2200      	movs	r2, #0
 8009866:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2200      	movs	r2, #0
 800986c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800986e:	2200      	movs	r2, #0
 8009870:	2100      	movs	r1, #0
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 fa0c 	bl	8009c90 <USBH_CtlReq>
 8009878:	4603      	mov	r3, r0
}
 800987a:	4618      	mov	r0, r3
 800987c:	3708      	adds	r7, #8
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <USBH_SetInterface>:
  * @param  altSetting: Interface value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetInterface(USBH_HandleTypeDef *phost, uint8_t ep_num,
                                     uint8_t altSetting)
{
 8009882:	b580      	push	{r7, lr}
 8009884:	b082      	sub	sp, #8
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
 800988a:	460b      	mov	r3, r1
 800988c:	70fb      	strb	r3, [r7, #3]
 800988e:	4613      	mov	r3, r2
 8009890:	70bb      	strb	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	789b      	ldrb	r3, [r3, #2]
 8009896:	2b01      	cmp	r3, #1
 8009898:	d110      	bne.n	80098bc <USBH_SetInterface+0x3a>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2201      	movs	r2, #1
 800989e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_INTERFACE;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	220b      	movs	r2, #11
 80098a4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = altSetting;
 80098a6:	78bb      	ldrb	r3, [r7, #2]
 80098a8:	b29a      	uxth	r2, r3
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80098ae:	78fb      	ldrb	r3, [r7, #3]
 80098b0:	b29a      	uxth	r2, r3
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2200      	movs	r2, #0
 80098ba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80098bc:	2200      	movs	r2, #0
 80098be:	2100      	movs	r1, #0
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 f9e5 	bl	8009c90 <USBH_CtlReq>
 80098c6:	4603      	mov	r3, r0
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3708      	adds	r7, #8
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	460b      	mov	r3, r1
 80098da:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	789b      	ldrb	r3, [r3, #2]
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	d10f      	bne.n	8009904 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2200      	movs	r2, #0
 80098e8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2203      	movs	r2, #3
 80098ee:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80098f0:	78fb      	ldrb	r3, [r7, #3]
 80098f2:	b29a      	uxth	r2, r3
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2200      	movs	r2, #0
 80098fc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2200      	movs	r2, #0
 8009902:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009904:	2200      	movs	r2, #0
 8009906:	2100      	movs	r1, #0
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f000 f9c1 	bl	8009c90 <USBH_CtlReq>
 800990e:	4603      	mov	r3, r0
}
 8009910:	4618      	mov	r0, r3
 8009912:	3708      	adds	r7, #8
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009918:	b480      	push	{r7}
 800991a:	b085      	sub	sp, #20
 800991c:	af00      	add	r7, sp, #0
 800991e:	60f8      	str	r0, [r7, #12]
 8009920:	60b9      	str	r1, [r7, #8]
 8009922:	4613      	mov	r3, r2
 8009924:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	781a      	ldrb	r2, [r3, #0]
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	785a      	ldrb	r2, [r3, #1]
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	3302      	adds	r3, #2
 800993a:	781b      	ldrb	r3, [r3, #0]
 800993c:	b29a      	uxth	r2, r3
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	3303      	adds	r3, #3
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	b29b      	uxth	r3, r3
 8009946:	021b      	lsls	r3, r3, #8
 8009948:	b29b      	uxth	r3, r3
 800994a:	4313      	orrs	r3, r2
 800994c:	b29a      	uxth	r2, r3
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	791a      	ldrb	r2, [r3, #4]
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	795a      	ldrb	r2, [r3, #5]
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	799a      	ldrb	r2, [r3, #6]
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	79da      	ldrb	r2, [r3, #7]
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009972:	88fb      	ldrh	r3, [r7, #6]
 8009974:	2b08      	cmp	r3, #8
 8009976:	d939      	bls.n	80099ec <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	3308      	adds	r3, #8
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	b29a      	uxth	r2, r3
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	3309      	adds	r3, #9
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	b29b      	uxth	r3, r3
 8009988:	021b      	lsls	r3, r3, #8
 800998a:	b29b      	uxth	r3, r3
 800998c:	4313      	orrs	r3, r2
 800998e:	b29a      	uxth	r2, r3
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	330a      	adds	r3, #10
 8009998:	781b      	ldrb	r3, [r3, #0]
 800999a:	b29a      	uxth	r2, r3
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	330b      	adds	r3, #11
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	b29b      	uxth	r3, r3
 80099a4:	021b      	lsls	r3, r3, #8
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	4313      	orrs	r3, r2
 80099aa:	b29a      	uxth	r2, r3
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	330c      	adds	r3, #12
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	b29a      	uxth	r2, r3
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	330d      	adds	r3, #13
 80099bc:	781b      	ldrb	r3, [r3, #0]
 80099be:	b29b      	uxth	r3, r3
 80099c0:	021b      	lsls	r3, r3, #8
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	4313      	orrs	r3, r2
 80099c6:	b29a      	uxth	r2, r3
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	7b9a      	ldrb	r2, [r3, #14]
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	7bda      	ldrb	r2, [r3, #15]
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	7c1a      	ldrb	r2, [r3, #16]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	7c5a      	ldrb	r2, [r3, #17]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	745a      	strb	r2, [r3, #17]
  }
}
 80099ec:	bf00      	nop
 80099ee:	3714      	adds	r7, #20
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr

080099f8 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b08a      	sub	sp, #40	; 0x28
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	60f8      	str	r0, [r7, #12]
 8009a00:	60b9      	str	r1, [r7, #8]
 8009a02:	4613      	mov	r3, r2
 8009a04:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8009a10:	2300      	movs	r3, #0
 8009a12:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	781a      	ldrb	r2, [r3, #0]
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	785a      	ldrb	r2, [r3, #1]
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	3302      	adds	r3, #2
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	b29a      	uxth	r2, r3
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	3303      	adds	r3, #3
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	021b      	lsls	r3, r3, #8
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	b29a      	uxth	r2, r3
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	791a      	ldrb	r2, [r3, #4]
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	795a      	ldrb	r2, [r3, #5]
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	799a      	ldrb	r2, [r3, #6]
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	79da      	ldrb	r2, [r3, #7]
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	7a1a      	ldrb	r2, [r3, #8]
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009a6e:	88fb      	ldrh	r3, [r7, #6]
 8009a70:	2b09      	cmp	r3, #9
 8009a72:	d95f      	bls.n	8009b34 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8009a74:	2309      	movs	r3, #9
 8009a76:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009a7c:	e051      	b.n	8009b22 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009a7e:	f107 0316 	add.w	r3, r7, #22
 8009a82:	4619      	mov	r1, r3
 8009a84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a86:	f000 f8e8 	bl	8009c5a <USBH_GetNextDesc>
 8009a8a:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8009a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8e:	785b      	ldrb	r3, [r3, #1]
 8009a90:	2b04      	cmp	r3, #4
 8009a92:	d146      	bne.n	8009b22 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8009a94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009a98:	2232      	movs	r2, #50	; 0x32
 8009a9a:	fb02 f303 	mul.w	r3, r2, r3
 8009a9e:	3308      	adds	r3, #8
 8009aa0:	68fa      	ldr	r2, [r7, #12]
 8009aa2:	4413      	add	r3, r2
 8009aa4:	3302      	adds	r3, #2
 8009aa6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009aa8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009aaa:	69f8      	ldr	r0, [r7, #28]
 8009aac:	f000 f846 	bl	8009b3c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009aba:	e022      	b.n	8009b02 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009abc:	f107 0316 	add.w	r3, r7, #22
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ac4:	f000 f8c9 	bl	8009c5a <USBH_GetNextDesc>
 8009ac8:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8009aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009acc:	785b      	ldrb	r3, [r3, #1]
 8009ace:	2b05      	cmp	r3, #5
 8009ad0:	d117      	bne.n	8009b02 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009ad2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009ad6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009ada:	3201      	adds	r2, #1
 8009adc:	00d2      	lsls	r2, r2, #3
 8009ade:	2132      	movs	r1, #50	; 0x32
 8009ae0:	fb01 f303 	mul.w	r3, r1, r3
 8009ae4:	4413      	add	r3, r2
 8009ae6:	3308      	adds	r3, #8
 8009ae8:	68fa      	ldr	r2, [r7, #12]
 8009aea:	4413      	add	r3, r2
 8009aec:	3304      	adds	r3, #4
 8009aee:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8009af0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009af2:	69b8      	ldr	r0, [r7, #24]
 8009af4:	f000 f851 	bl	8009b9a <USBH_ParseEPDesc>
            ep_ix++;
 8009af8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009afc:	3301      	adds	r3, #1
 8009afe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009b02:	69fb      	ldr	r3, [r7, #28]
 8009b04:	791b      	ldrb	r3, [r3, #4]
 8009b06:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d204      	bcs.n	8009b18 <USBH_ParseCfgDesc+0x120>
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	885a      	ldrh	r2, [r3, #2]
 8009b12:	8afb      	ldrh	r3, [r7, #22]
 8009b14:	429a      	cmp	r2, r3
 8009b16:	d8d1      	bhi.n	8009abc <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8009b18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009b22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009b26:	2b09      	cmp	r3, #9
 8009b28:	d804      	bhi.n	8009b34 <USBH_ParseCfgDesc+0x13c>
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	885a      	ldrh	r2, [r3, #2]
 8009b2e:	8afb      	ldrh	r3, [r7, #22]
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d8a4      	bhi.n	8009a7e <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8009b34:	bf00      	nop
 8009b36:	3728      	adds	r7, #40	; 0x28
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b083      	sub	sp, #12
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	781a      	ldrb	r2, [r3, #0]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	785a      	ldrb	r2, [r3, #1]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	789a      	ldrb	r2, [r3, #2]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	78da      	ldrb	r2, [r3, #3]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	791a      	ldrb	r2, [r3, #4]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	795a      	ldrb	r2, [r3, #5]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	799a      	ldrb	r2, [r3, #6]
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	79da      	ldrb	r2, [r3, #7]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	7a1a      	ldrb	r2, [r3, #8]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	721a      	strb	r2, [r3, #8]
}
 8009b8e:	bf00      	nop
 8009b90:	370c      	adds	r7, #12
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr

08009b9a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8009b9a:	b480      	push	{r7}
 8009b9c:	b083      	sub	sp, #12
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	6078      	str	r0, [r7, #4]
 8009ba2:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	781a      	ldrb	r2, [r3, #0]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	785a      	ldrb	r2, [r3, #1]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	789a      	ldrb	r2, [r3, #2]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	78da      	ldrb	r2, [r3, #3]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	3304      	adds	r3, #4
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	b29a      	uxth	r2, r3
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	3305      	adds	r3, #5
 8009bd0:	781b      	ldrb	r3, [r3, #0]
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	021b      	lsls	r3, r3, #8
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	b29a      	uxth	r2, r3
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	799a      	ldrb	r2, [r3, #6]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	719a      	strb	r2, [r3, #6]
}
 8009be8:	bf00      	nop
 8009bea:	370c      	adds	r7, #12
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr

08009bf4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b087      	sub	sp, #28
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	60f8      	str	r0, [r7, #12]
 8009bfc:	60b9      	str	r1, [r7, #8]
 8009bfe:	4613      	mov	r3, r2
 8009c00:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	3301      	adds	r3, #1
 8009c06:	781b      	ldrb	r3, [r3, #0]
 8009c08:	2b03      	cmp	r3, #3
 8009c0a:	d120      	bne.n	8009c4e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	1e9a      	subs	r2, r3, #2
 8009c12:	88fb      	ldrh	r3, [r7, #6]
 8009c14:	4293      	cmp	r3, r2
 8009c16:	bf28      	it	cs
 8009c18:	4613      	movcs	r3, r2
 8009c1a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	3302      	adds	r3, #2
 8009c20:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009c22:	2300      	movs	r3, #0
 8009c24:	82fb      	strh	r3, [r7, #22]
 8009c26:	e00b      	b.n	8009c40 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009c28:	8afb      	ldrh	r3, [r7, #22]
 8009c2a:	68fa      	ldr	r2, [r7, #12]
 8009c2c:	4413      	add	r3, r2
 8009c2e:	781a      	ldrb	r2, [r3, #0]
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	3301      	adds	r3, #1
 8009c38:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009c3a:	8afb      	ldrh	r3, [r7, #22]
 8009c3c:	3302      	adds	r3, #2
 8009c3e:	82fb      	strh	r3, [r7, #22]
 8009c40:	8afa      	ldrh	r2, [r7, #22]
 8009c42:	8abb      	ldrh	r3, [r7, #20]
 8009c44:	429a      	cmp	r2, r3
 8009c46:	d3ef      	bcc.n	8009c28 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	701a      	strb	r2, [r3, #0]
  }
}
 8009c4e:	bf00      	nop
 8009c50:	371c      	adds	r7, #28
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr

08009c5a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009c5a:	b480      	push	{r7}
 8009c5c:	b085      	sub	sp, #20
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
 8009c62:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	881a      	ldrh	r2, [r3, #0]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	b29b      	uxth	r3, r3
 8009c6e:	4413      	add	r3, r2
 8009c70:	b29a      	uxth	r2, r3
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	781b      	ldrb	r3, [r3, #0]
 8009c7a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	4413      	add	r3, r2
 8009c80:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009c82:	68fb      	ldr	r3, [r7, #12]
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3714      	adds	r7, #20
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr

08009c90 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b086      	sub	sp, #24
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	60b9      	str	r1, [r7, #8]
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	789b      	ldrb	r3, [r3, #2]
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d002      	beq.n	8009cb0 <USBH_CtlReq+0x20>
 8009caa:	2b02      	cmp	r3, #2
 8009cac:	d01d      	beq.n	8009cea <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8009cae:	e043      	b.n	8009d38 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	68ba      	ldr	r2, [r7, #8]
 8009cb4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	88fa      	ldrh	r2, [r7, #6]
 8009cba:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2202      	movs	r2, #2
 8009cc6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009cc8:	2301      	movs	r3, #1
 8009cca:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2203      	movs	r2, #3
 8009cd0:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f000 fd52 	bl	800a78c <osMessageQueuePut>
      break;
 8009ce8:	e026      	b.n	8009d38 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8009cea:	68f8      	ldr	r0, [r7, #12]
 8009cec:	f000 f82a 	bl	8009d44 <USBH_HandleControl>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009cf4:	7dfb      	ldrb	r3, [r7, #23]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d002      	beq.n	8009d00 <USBH_CtlReq+0x70>
 8009cfa:	7dfb      	ldrb	r3, [r7, #23]
 8009cfc:	2b03      	cmp	r3, #3
 8009cfe:	d106      	bne.n	8009d0e <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2201      	movs	r2, #1
 8009d04:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	761a      	strb	r2, [r3, #24]
 8009d0c:	e005      	b.n	8009d1a <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8009d0e:	7dfb      	ldrb	r3, [r7, #23]
 8009d10:	2b02      	cmp	r3, #2
 8009d12:	d102      	bne.n	8009d1a <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2201      	movs	r2, #1
 8009d18:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2203      	movs	r2, #3
 8009d1e:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 8009d2e:	2300      	movs	r3, #0
 8009d30:	2200      	movs	r2, #0
 8009d32:	f000 fd2b 	bl	800a78c <osMessageQueuePut>
      break;
 8009d36:	bf00      	nop
  }
  return status;
 8009d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3718      	adds	r7, #24
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
	...

08009d44 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b086      	sub	sp, #24
 8009d48:	af02      	add	r7, sp, #8
 8009d4a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009d50:	2300      	movs	r3, #0
 8009d52:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	7e1b      	ldrb	r3, [r3, #24]
 8009d58:	3b01      	subs	r3, #1
 8009d5a:	2b0a      	cmp	r3, #10
 8009d5c:	f200 8229 	bhi.w	800a1b2 <USBH_HandleControl+0x46e>
 8009d60:	a201      	add	r2, pc, #4	; (adr r2, 8009d68 <USBH_HandleControl+0x24>)
 8009d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d66:	bf00      	nop
 8009d68:	08009d95 	.word	0x08009d95
 8009d6c:	08009daf 	.word	0x08009daf
 8009d70:	08009e51 	.word	0x08009e51
 8009d74:	08009e77 	.word	0x08009e77
 8009d78:	08009f03 	.word	0x08009f03
 8009d7c:	08009f2d 	.word	0x08009f2d
 8009d80:	08009fef 	.word	0x08009fef
 8009d84:	0800a011 	.word	0x0800a011
 8009d88:	0800a0a3 	.word	0x0800a0a3
 8009d8c:	0800a0c9 	.word	0x0800a0c9
 8009d90:	0800a15b 	.word	0x0800a15b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f103 0110 	add.w	r1, r3, #16
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	795b      	ldrb	r3, [r3, #5]
 8009d9e:	461a      	mov	r2, r3
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f000 fa17 	bl	800a1d4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2202      	movs	r2, #2
 8009daa:	761a      	strb	r2, [r3, #24]
      break;
 8009dac:	e20c      	b.n	800a1c8 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	795b      	ldrb	r3, [r3, #5]
 8009db2:	4619      	mov	r1, r3
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f003 fd2a 	bl	800d80e <USBH_LL_GetURBState>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009dbe:	7bbb      	ldrb	r3, [r7, #14]
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	d12c      	bne.n	8009e1e <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	7c1b      	ldrb	r3, [r3, #16]
 8009dc8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009dcc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	8adb      	ldrh	r3, [r3, #22]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d00a      	beq.n	8009dec <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009dd6:	7b7b      	ldrb	r3, [r7, #13]
 8009dd8:	2b80      	cmp	r3, #128	; 0x80
 8009dda:	d103      	bne.n	8009de4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2203      	movs	r2, #3
 8009de0:	761a      	strb	r2, [r3, #24]
 8009de2:	e00d      	b.n	8009e00 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2205      	movs	r2, #5
 8009de8:	761a      	strb	r2, [r3, #24]
 8009dea:	e009      	b.n	8009e00 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8009dec:	7b7b      	ldrb	r3, [r7, #13]
 8009dee:	2b80      	cmp	r3, #128	; 0x80
 8009df0:	d103      	bne.n	8009dfa <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2209      	movs	r2, #9
 8009df6:	761a      	strb	r2, [r3, #24]
 8009df8:	e002      	b.n	8009e00 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2207      	movs	r2, #7
 8009dfe:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2203      	movs	r2, #3
 8009e04:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 8009e14:	2300      	movs	r3, #0
 8009e16:	2200      	movs	r2, #0
 8009e18:	f000 fcb8 	bl	800a78c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009e1c:	e1cb      	b.n	800a1b6 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009e1e:	7bbb      	ldrb	r3, [r7, #14]
 8009e20:	2b04      	cmp	r3, #4
 8009e22:	d003      	beq.n	8009e2c <USBH_HandleControl+0xe8>
 8009e24:	7bbb      	ldrb	r3, [r7, #14]
 8009e26:	2b02      	cmp	r3, #2
 8009e28:	f040 81c5 	bne.w	800a1b6 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	220b      	movs	r2, #11
 8009e30:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2203      	movs	r2, #3
 8009e36:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 8009e46:	2300      	movs	r3, #0
 8009e48:	2200      	movs	r2, #0
 8009e4a:	f000 fc9f 	bl	800a78c <osMessageQueuePut>
      break;
 8009e4e:	e1b2      	b.n	800a1b6 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 8009e56:	b29a      	uxth	r2, r3
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6899      	ldr	r1, [r3, #8]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	899a      	ldrh	r2, [r3, #12]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	791b      	ldrb	r3, [r3, #4]
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f000 f9f2 	bl	800a252 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2204      	movs	r2, #4
 8009e72:	761a      	strb	r2, [r3, #24]
      break;
 8009e74:	e1a8      	b.n	800a1c8 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	791b      	ldrb	r3, [r3, #4]
 8009e7a:	4619      	mov	r1, r3
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f003 fcc6 	bl	800d80e <USBH_LL_GetURBState>
 8009e82:	4603      	mov	r3, r0
 8009e84:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009e86:	7bbb      	ldrb	r3, [r7, #14]
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d110      	bne.n	8009eae <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2209      	movs	r2, #9
 8009e90:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2203      	movs	r2, #3
 8009e96:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	f000 fc6f 	bl	800a78c <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009eae:	7bbb      	ldrb	r3, [r7, #14]
 8009eb0:	2b05      	cmp	r3, #5
 8009eb2:	d110      	bne.n	8009ed6 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009eb4:	2303      	movs	r3, #3
 8009eb6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2203      	movs	r2, #3
 8009ebc:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 8009ecc:	2300      	movs	r3, #0
 8009ece:	2200      	movs	r2, #0
 8009ed0:	f000 fc5c 	bl	800a78c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009ed4:	e171      	b.n	800a1ba <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8009ed6:	7bbb      	ldrb	r3, [r7, #14]
 8009ed8:	2b04      	cmp	r3, #4
 8009eda:	f040 816e 	bne.w	800a1ba <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	220b      	movs	r2, #11
 8009ee2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2203      	movs	r2, #3
 8009ee8:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 8009ef8:	2300      	movs	r3, #0
 8009efa:	2200      	movs	r2, #0
 8009efc:	f000 fc46 	bl	800a78c <osMessageQueuePut>
      break;
 8009f00:	e15b      	b.n	800a1ba <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6899      	ldr	r1, [r3, #8]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	899a      	ldrh	r2, [r3, #12]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	795b      	ldrb	r3, [r3, #5]
 8009f0e:	2001      	movs	r0, #1
 8009f10:	9000      	str	r0, [sp, #0]
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f000 f978 	bl	800a208 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 8009f1e:	b29a      	uxth	r2, r3
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2206      	movs	r2, #6
 8009f28:	761a      	strb	r2, [r3, #24]
      break;
 8009f2a:	e14d      	b.n	800a1c8 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	795b      	ldrb	r3, [r3, #5]
 8009f30:	4619      	mov	r1, r3
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f003 fc6b 	bl	800d80e <USBH_LL_GetURBState>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009f3c:	7bbb      	ldrb	r3, [r7, #14]
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	d111      	bne.n	8009f66 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2207      	movs	r2, #7
 8009f46:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2203      	movs	r2, #3
 8009f4c:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	2200      	movs	r2, #0
 8009f60:	f000 fc14 	bl	800a78c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009f64:	e12b      	b.n	800a1be <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8009f66:	7bbb      	ldrb	r3, [r7, #14]
 8009f68:	2b05      	cmp	r3, #5
 8009f6a:	d113      	bne.n	8009f94 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	220c      	movs	r2, #12
 8009f70:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009f72:	2303      	movs	r3, #3
 8009f74:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2203      	movs	r2, #3
 8009f7a:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	f000 fbfd 	bl	800a78c <osMessageQueuePut>
      break;
 8009f92:	e114      	b.n	800a1be <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009f94:	7bbb      	ldrb	r3, [r7, #14]
 8009f96:	2b02      	cmp	r3, #2
 8009f98:	d111      	bne.n	8009fbe <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2205      	movs	r2, #5
 8009f9e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2203      	movs	r2, #3
 8009fa4:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	f000 fbe8 	bl	800a78c <osMessageQueuePut>
      break;
 8009fbc:	e0ff      	b.n	800a1be <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8009fbe:	7bbb      	ldrb	r3, [r7, #14]
 8009fc0:	2b04      	cmp	r3, #4
 8009fc2:	f040 80fc 	bne.w	800a1be <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	220b      	movs	r2, #11
 8009fca:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009fcc:	2302      	movs	r3, #2
 8009fce:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2203      	movs	r2, #3
 8009fd4:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	f000 fbd0 	bl	800a78c <osMessageQueuePut>
      break;
 8009fec:	e0e7      	b.n	800a1be <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	791b      	ldrb	r3, [r3, #4]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	2100      	movs	r1, #0
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 f92b 	bl	800a252 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 800a002:	b29a      	uxth	r2, r3
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2208      	movs	r2, #8
 800a00c:	761a      	strb	r2, [r3, #24]

      break;
 800a00e:	e0db      	b.n	800a1c8 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	791b      	ldrb	r3, [r3, #4]
 800a014:	4619      	mov	r1, r3
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f003 fbf9 	bl	800d80e <USBH_LL_GetURBState>
 800a01c:	4603      	mov	r3, r0
 800a01e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a020:	7bbb      	ldrb	r3, [r7, #14]
 800a022:	2b01      	cmp	r3, #1
 800a024:	d113      	bne.n	800a04e <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	220d      	movs	r2, #13
 800a02a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a02c:	2300      	movs	r3, #0
 800a02e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2203      	movs	r2, #3
 800a034:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 800a044:	2300      	movs	r3, #0
 800a046:	2200      	movs	r2, #0
 800a048:	f000 fba0 	bl	800a78c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a04c:	e0b9      	b.n	800a1c2 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800a04e:	7bbb      	ldrb	r3, [r7, #14]
 800a050:	2b04      	cmp	r3, #4
 800a052:	d111      	bne.n	800a078 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	220b      	movs	r2, #11
 800a058:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2203      	movs	r2, #3
 800a05e:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 800a06e:	2300      	movs	r3, #0
 800a070:	2200      	movs	r2, #0
 800a072:	f000 fb8b 	bl	800a78c <osMessageQueuePut>
      break;
 800a076:	e0a4      	b.n	800a1c2 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800a078:	7bbb      	ldrb	r3, [r7, #14]
 800a07a:	2b05      	cmp	r3, #5
 800a07c:	f040 80a1 	bne.w	800a1c2 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800a080:	2303      	movs	r3, #3
 800a082:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2203      	movs	r2, #3
 800a088:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 800a098:	2300      	movs	r3, #0
 800a09a:	2200      	movs	r2, #0
 800a09c:	f000 fb76 	bl	800a78c <osMessageQueuePut>
      break;
 800a0a0:	e08f      	b.n	800a1c2 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	795b      	ldrb	r3, [r3, #5]
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	9200      	str	r2, [sp, #0]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	2100      	movs	r1, #0
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 f8aa 	bl	800a208 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 800a0ba:	b29a      	uxth	r2, r3
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	220a      	movs	r2, #10
 800a0c4:	761a      	strb	r2, [r3, #24]
      break;
 800a0c6:	e07f      	b.n	800a1c8 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	795b      	ldrb	r3, [r3, #5]
 800a0cc:	4619      	mov	r1, r3
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f003 fb9d 	bl	800d80e <USBH_LL_GetURBState>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a0d8:	7bbb      	ldrb	r3, [r7, #14]
 800a0da:	2b01      	cmp	r3, #1
 800a0dc:	d113      	bne.n	800a106 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	220d      	movs	r2, #13
 800a0e6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2203      	movs	r2, #3
 800a0ec:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	2200      	movs	r2, #0
 800a100:	f000 fb44 	bl	800a78c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a104:	e05f      	b.n	800a1c6 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a106:	7bbb      	ldrb	r3, [r7, #14]
 800a108:	2b02      	cmp	r3, #2
 800a10a:	d111      	bne.n	800a130 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2209      	movs	r2, #9
 800a110:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2203      	movs	r2, #3
 800a116:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 800a126:	2300      	movs	r3, #0
 800a128:	2200      	movs	r2, #0
 800a12a:	f000 fb2f 	bl	800a78c <osMessageQueuePut>
      break;
 800a12e:	e04a      	b.n	800a1c6 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800a130:	7bbb      	ldrb	r3, [r7, #14]
 800a132:	2b04      	cmp	r3, #4
 800a134:	d147      	bne.n	800a1c6 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	220b      	movs	r2, #11
 800a13a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2203      	movs	r2, #3
 800a140:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f503 61b4 	add.w	r1, r3, #1440	; 0x5a0
 800a150:	2300      	movs	r3, #0
 800a152:	2200      	movs	r2, #0
 800a154:	f000 fb1a 	bl	800a78c <osMessageQueuePut>
      break;
 800a158:	e035      	b.n	800a1c6 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	7e5b      	ldrb	r3, [r3, #25]
 800a15e:	3301      	adds	r3, #1
 800a160:	b2da      	uxtb	r2, r3
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	765a      	strb	r2, [r3, #25]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	7e5b      	ldrb	r3, [r3, #25]
 800a16a:	2b02      	cmp	r3, #2
 800a16c:	d806      	bhi.n	800a17c <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2201      	movs	r2, #1
 800a172:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2201      	movs	r2, #1
 800a178:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a17a:	e025      	b.n	800a1c8 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f8d3 3594 	ldr.w	r3, [r3, #1428]	; 0x594
 800a182:	2106      	movs	r1, #6
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2200      	movs	r2, #0
 800a18c:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	795b      	ldrb	r3, [r3, #5]
 800a192:	4619      	mov	r1, r3
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f000 f905 	bl	800a3a4 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	791b      	ldrb	r3, [r3, #4]
 800a19e:	4619      	mov	r1, r3
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f000 f8ff 	bl	800a3a4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a1ac:	2302      	movs	r3, #2
 800a1ae:	73fb      	strb	r3, [r7, #15]
      break;
 800a1b0:	e00a      	b.n	800a1c8 <USBH_HandleControl+0x484>

    default:
      break;
 800a1b2:	bf00      	nop
 800a1b4:	e008      	b.n	800a1c8 <USBH_HandleControl+0x484>
      break;
 800a1b6:	bf00      	nop
 800a1b8:	e006      	b.n	800a1c8 <USBH_HandleControl+0x484>
      break;
 800a1ba:	bf00      	nop
 800a1bc:	e004      	b.n	800a1c8 <USBH_HandleControl+0x484>
      break;
 800a1be:	bf00      	nop
 800a1c0:	e002      	b.n	800a1c8 <USBH_HandleControl+0x484>
      break;
 800a1c2:	bf00      	nop
 800a1c4:	e000      	b.n	800a1c8 <USBH_HandleControl+0x484>
      break;
 800a1c6:	bf00      	nop
  }

  return status;
 800a1c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3710      	adds	r7, #16
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop

0800a1d4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b088      	sub	sp, #32
 800a1d8:	af04      	add	r7, sp, #16
 800a1da:	60f8      	str	r0, [r7, #12]
 800a1dc:	60b9      	str	r1, [r7, #8]
 800a1de:	4613      	mov	r3, r2
 800a1e0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a1e2:	79f9      	ldrb	r1, [r7, #7]
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	9303      	str	r3, [sp, #12]
 800a1e8:	2308      	movs	r3, #8
 800a1ea:	9302      	str	r3, [sp, #8]
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	9301      	str	r3, [sp, #4]
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	9300      	str	r3, [sp, #0]
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	f003 fad7 	bl	800d7ac <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800a1fe:	2300      	movs	r3, #0
}
 800a200:	4618      	mov	r0, r3
 800a202:	3710      	adds	r7, #16
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}

0800a208 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b088      	sub	sp, #32
 800a20c:	af04      	add	r7, sp, #16
 800a20e:	60f8      	str	r0, [r7, #12]
 800a210:	60b9      	str	r1, [r7, #8]
 800a212:	4611      	mov	r1, r2
 800a214:	461a      	mov	r2, r3
 800a216:	460b      	mov	r3, r1
 800a218:	80fb      	strh	r3, [r7, #6]
 800a21a:	4613      	mov	r3, r2
 800a21c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a224:	2b00      	cmp	r3, #0
 800a226:	d001      	beq.n	800a22c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a228:	2300      	movs	r3, #0
 800a22a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a22c:	7979      	ldrb	r1, [r7, #5]
 800a22e:	7e3b      	ldrb	r3, [r7, #24]
 800a230:	9303      	str	r3, [sp, #12]
 800a232:	88fb      	ldrh	r3, [r7, #6]
 800a234:	9302      	str	r3, [sp, #8]
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	9301      	str	r3, [sp, #4]
 800a23a:	2301      	movs	r3, #1
 800a23c:	9300      	str	r3, [sp, #0]
 800a23e:	2300      	movs	r3, #0
 800a240:	2200      	movs	r2, #0
 800a242:	68f8      	ldr	r0, [r7, #12]
 800a244:	f003 fab2 	bl	800d7ac <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a248:	2300      	movs	r3, #0
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3710      	adds	r7, #16
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}

0800a252 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a252:	b580      	push	{r7, lr}
 800a254:	b088      	sub	sp, #32
 800a256:	af04      	add	r7, sp, #16
 800a258:	60f8      	str	r0, [r7, #12]
 800a25a:	60b9      	str	r1, [r7, #8]
 800a25c:	4611      	mov	r1, r2
 800a25e:	461a      	mov	r2, r3
 800a260:	460b      	mov	r3, r1
 800a262:	80fb      	strh	r3, [r7, #6]
 800a264:	4613      	mov	r3, r2
 800a266:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a268:	7979      	ldrb	r1, [r7, #5]
 800a26a:	2300      	movs	r3, #0
 800a26c:	9303      	str	r3, [sp, #12]
 800a26e:	88fb      	ldrh	r3, [r7, #6]
 800a270:	9302      	str	r3, [sp, #8]
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	9301      	str	r3, [sp, #4]
 800a276:	2301      	movs	r3, #1
 800a278:	9300      	str	r3, [sp, #0]
 800a27a:	2300      	movs	r3, #0
 800a27c:	2201      	movs	r2, #1
 800a27e:	68f8      	ldr	r0, [r7, #12]
 800a280:	f003 fa94 	bl	800d7ac <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a284:	2300      	movs	r3, #0

}
 800a286:	4618      	mov	r0, r3
 800a288:	3710      	adds	r7, #16
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}

0800a28e <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 800a28e:	b580      	push	{r7, lr}
 800a290:	b088      	sub	sp, #32
 800a292:	af04      	add	r7, sp, #16
 800a294:	60f8      	str	r0, [r7, #12]
 800a296:	60b9      	str	r1, [r7, #8]
 800a298:	4611      	mov	r1, r2
 800a29a:	461a      	mov	r2, r3
 800a29c:	460b      	mov	r3, r1
 800a29e:	71fb      	strb	r3, [r7, #7]
 800a2a0:	4613      	mov	r3, r2
 800a2a2:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a2a4:	79fb      	ldrb	r3, [r7, #7]
 800a2a6:	b29b      	uxth	r3, r3
 800a2a8:	79b9      	ldrb	r1, [r7, #6]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	9203      	str	r2, [sp, #12]
 800a2ae:	9302      	str	r3, [sp, #8]
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	9301      	str	r3, [sp, #4]
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	9300      	str	r3, [sp, #0]
 800a2b8:	2303      	movs	r3, #3
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	68f8      	ldr	r0, [r7, #12]
 800a2be:	f003 fa75 	bl	800d7ac <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 800a2c2:	2300      	movs	r3, #0
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3710      	adds	r7, #16
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <USBH_IsocSendData>:
  */
USBH_StatusTypeDef USBH_IsocSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint32_t length,
                                     uint8_t pipe_num)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b088      	sub	sp, #32
 800a2d0:	af04      	add	r7, sp, #16
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	607a      	str	r2, [r7, #4]
 800a2d8:	70fb      	strb	r3, [r7, #3]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	b29b      	uxth	r3, r3
 800a2de:	78f9      	ldrb	r1, [r7, #3]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	9203      	str	r2, [sp, #12]
 800a2e4:	9302      	str	r3, [sp, #8]
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	9301      	str	r3, [sp, #4]
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	9300      	str	r3, [sp, #0]
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	68f8      	ldr	r0, [r7, #12]
 800a2f4:	f003 fa5a 	bl	800d7ac <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 800a2f8:	2300      	movs	r3, #0
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3710      	adds	r7, #16
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}

0800a302 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a302:	b580      	push	{r7, lr}
 800a304:	b086      	sub	sp, #24
 800a306:	af04      	add	r7, sp, #16
 800a308:	6078      	str	r0, [r7, #4]
 800a30a:	4608      	mov	r0, r1
 800a30c:	4611      	mov	r1, r2
 800a30e:	461a      	mov	r2, r3
 800a310:	4603      	mov	r3, r0
 800a312:	70fb      	strb	r3, [r7, #3]
 800a314:	460b      	mov	r3, r1
 800a316:	70bb      	strb	r3, [r7, #2]
 800a318:	4613      	mov	r3, r2
 800a31a:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a31c:	7878      	ldrb	r0, [r7, #1]
 800a31e:	78ba      	ldrb	r2, [r7, #2]
 800a320:	78f9      	ldrb	r1, [r7, #3]
 800a322:	8b3b      	ldrh	r3, [r7, #24]
 800a324:	9302      	str	r3, [sp, #8]
 800a326:	7d3b      	ldrb	r3, [r7, #20]
 800a328:	9301      	str	r3, [sp, #4]
 800a32a:	7c3b      	ldrb	r3, [r7, #16]
 800a32c:	9300      	str	r3, [sp, #0]
 800a32e:	4603      	mov	r3, r0
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f003 f9ed 	bl	800d710 <USBH_LL_OpenPipe>

  return USBH_OK;
 800a336:	2300      	movs	r3, #0
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3708      	adds	r7, #8
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	460b      	mov	r3, r1
 800a34a:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800a34c:	78fb      	ldrb	r3, [r7, #3]
 800a34e:	4619      	mov	r1, r3
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f003 fa0c 	bl	800d76e <USBH_LL_ClosePipe>

  return USBH_OK;
 800a356:	2300      	movs	r3, #0
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3708      	adds	r7, #8
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}

0800a360 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b084      	sub	sp, #16
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	460b      	mov	r3, r1
 800a36a:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 f839 	bl	800a3e4 <USBH_GetFreePipe>
 800a372:	4603      	mov	r3, r0
 800a374:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a376:	89fb      	ldrh	r3, [r7, #14]
 800a378:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d00b      	beq.n	800a398 <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800a380:	78fa      	ldrb	r2, [r7, #3]
 800a382:	89fb      	ldrh	r3, [r7, #14]
 800a384:	f003 030f 	and.w	r3, r3, #15
 800a388:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a38c:	6879      	ldr	r1, [r7, #4]
 800a38e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a392:	009b      	lsls	r3, r3, #2
 800a394:	440b      	add	r3, r1
 800a396:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a398:	89fb      	ldrh	r3, [r7, #14]
 800a39a:	b2db      	uxtb	r3, r3
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3710      	adds	r7, #16
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b083      	sub	sp, #12
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	460b      	mov	r3, r1
 800a3ae:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800a3b0:	78fb      	ldrb	r3, [r7, #3]
 800a3b2:	2b0a      	cmp	r3, #10
 800a3b4:	d80f      	bhi.n	800a3d6 <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a3b6:	78fb      	ldrb	r3, [r7, #3]
 800a3b8:	687a      	ldr	r2, [r7, #4]
 800a3ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a3be:	009b      	lsls	r3, r3, #2
 800a3c0:	4413      	add	r3, r2
 800a3c2:	685a      	ldr	r2, [r3, #4]
 800a3c4:	78fb      	ldrb	r3, [r7, #3]
 800a3c6:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a3ca:	6879      	ldr	r1, [r7, #4]
 800a3cc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a3d0:	009b      	lsls	r3, r3, #2
 800a3d2:	440b      	add	r3, r1
 800a3d4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a3d6:	2300      	movs	r3, #0
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	370c      	adds	r7, #12
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr

0800a3e4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b085      	sub	sp, #20
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	73fb      	strb	r3, [r7, #15]
 800a3f4:	e010      	b.n	800a418 <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a3f6:	7bfb      	ldrb	r3, [r7, #15]
 800a3f8:	687a      	ldr	r2, [r7, #4]
 800a3fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a3fe:	009b      	lsls	r3, r3, #2
 800a400:	4413      	add	r3, r2
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d102      	bne.n	800a412 <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 800a40c:	7bfb      	ldrb	r3, [r7, #15]
 800a40e:	b29b      	uxth	r3, r3
 800a410:	e007      	b.n	800a422 <USBH_GetFreePipe+0x3e>
  for (idx = 0U ; idx < 11U ; idx++)
 800a412:	7bfb      	ldrb	r3, [r7, #15]
 800a414:	3301      	adds	r3, #1
 800a416:	73fb      	strb	r3, [r7, #15]
 800a418:	7bfb      	ldrb	r3, [r7, #15]
 800a41a:	2b0a      	cmp	r3, #10
 800a41c:	d9eb      	bls.n	800a3f6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a41e:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a422:	4618      	mov	r0, r3
 800a424:	3714      	adds	r7, #20
 800a426:	46bd      	mov	sp, r7
 800a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42c:	4770      	bx	lr
	...

0800a430 <__NVIC_SetPriority>:
{
 800a430:	b480      	push	{r7}
 800a432:	b083      	sub	sp, #12
 800a434:	af00      	add	r7, sp, #0
 800a436:	4603      	mov	r3, r0
 800a438:	6039      	str	r1, [r7, #0]
 800a43a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a43c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a440:	2b00      	cmp	r3, #0
 800a442:	db0a      	blt.n	800a45a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	b2da      	uxtb	r2, r3
 800a448:	490c      	ldr	r1, [pc, #48]	; (800a47c <__NVIC_SetPriority+0x4c>)
 800a44a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a44e:	0112      	lsls	r2, r2, #4
 800a450:	b2d2      	uxtb	r2, r2
 800a452:	440b      	add	r3, r1
 800a454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a458:	e00a      	b.n	800a470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	b2da      	uxtb	r2, r3
 800a45e:	4908      	ldr	r1, [pc, #32]	; (800a480 <__NVIC_SetPriority+0x50>)
 800a460:	79fb      	ldrb	r3, [r7, #7]
 800a462:	f003 030f 	and.w	r3, r3, #15
 800a466:	3b04      	subs	r3, #4
 800a468:	0112      	lsls	r2, r2, #4
 800a46a:	b2d2      	uxtb	r2, r2
 800a46c:	440b      	add	r3, r1
 800a46e:	761a      	strb	r2, [r3, #24]
}
 800a470:	bf00      	nop
 800a472:	370c      	adds	r7, #12
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr
 800a47c:	e000e100 	.word	0xe000e100
 800a480:	e000ed00 	.word	0xe000ed00

0800a484 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a484:	b580      	push	{r7, lr}
 800a486:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a488:	4b05      	ldr	r3, [pc, #20]	; (800a4a0 <SysTick_Handler+0x1c>)
 800a48a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a48c:	f001 ff12 	bl	800c2b4 <xTaskGetSchedulerState>
 800a490:	4603      	mov	r3, r0
 800a492:	2b01      	cmp	r3, #1
 800a494:	d001      	beq.n	800a49a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a496:	f002 fcf7 	bl	800ce88 <xPortSysTickHandler>
  }
}
 800a49a:	bf00      	nop
 800a49c:	bd80      	pop	{r7, pc}
 800a49e:	bf00      	nop
 800a4a0:	e000e010 	.word	0xe000e010

0800a4a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a4a8:	2100      	movs	r1, #0
 800a4aa:	f06f 0004 	mvn.w	r0, #4
 800a4ae:	f7ff ffbf 	bl	800a430 <__NVIC_SetPriority>
#endif
}
 800a4b2:	bf00      	nop
 800a4b4:	bd80      	pop	{r7, pc}
	...

0800a4b8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a4b8:	b480      	push	{r7}
 800a4ba:	b083      	sub	sp, #12
 800a4bc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a4be:	f3ef 8305 	mrs	r3, IPSR
 800a4c2:	603b      	str	r3, [r7, #0]
  return(result);
 800a4c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d003      	beq.n	800a4d2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a4ca:	f06f 0305 	mvn.w	r3, #5
 800a4ce:	607b      	str	r3, [r7, #4]
 800a4d0:	e00c      	b.n	800a4ec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a4d2:	4b0a      	ldr	r3, [pc, #40]	; (800a4fc <osKernelInitialize+0x44>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d105      	bne.n	800a4e6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a4da:	4b08      	ldr	r3, [pc, #32]	; (800a4fc <osKernelInitialize+0x44>)
 800a4dc:	2201      	movs	r2, #1
 800a4de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	607b      	str	r3, [r7, #4]
 800a4e4:	e002      	b.n	800a4ec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a4e6:	f04f 33ff 	mov.w	r3, #4294967295
 800a4ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a4ec:	687b      	ldr	r3, [r7, #4]
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	370c      	adds	r7, #12
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr
 800a4fa:	bf00      	nop
 800a4fc:	200000b4 	.word	0x200000b4

0800a500 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a506:	f3ef 8305 	mrs	r3, IPSR
 800a50a:	603b      	str	r3, [r7, #0]
  return(result);
 800a50c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d003      	beq.n	800a51a <osKernelStart+0x1a>
    stat = osErrorISR;
 800a512:	f06f 0305 	mvn.w	r3, #5
 800a516:	607b      	str	r3, [r7, #4]
 800a518:	e010      	b.n	800a53c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a51a:	4b0b      	ldr	r3, [pc, #44]	; (800a548 <osKernelStart+0x48>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	2b01      	cmp	r3, #1
 800a520:	d109      	bne.n	800a536 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a522:	f7ff ffbf 	bl	800a4a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a526:	4b08      	ldr	r3, [pc, #32]	; (800a548 <osKernelStart+0x48>)
 800a528:	2202      	movs	r2, #2
 800a52a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a52c:	f001 fa66 	bl	800b9fc <vTaskStartScheduler>
      stat = osOK;
 800a530:	2300      	movs	r3, #0
 800a532:	607b      	str	r3, [r7, #4]
 800a534:	e002      	b.n	800a53c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a536:	f04f 33ff 	mov.w	r3, #4294967295
 800a53a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a53c:	687b      	ldr	r3, [r7, #4]
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3708      	adds	r7, #8
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
 800a546:	bf00      	nop
 800a548:	200000b4 	.word	0x200000b4

0800a54c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b08e      	sub	sp, #56	; 0x38
 800a550:	af04      	add	r7, sp, #16
 800a552:	60f8      	str	r0, [r7, #12]
 800a554:	60b9      	str	r1, [r7, #8]
 800a556:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a558:	2300      	movs	r3, #0
 800a55a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a55c:	f3ef 8305 	mrs	r3, IPSR
 800a560:	617b      	str	r3, [r7, #20]
  return(result);
 800a562:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a564:	2b00      	cmp	r3, #0
 800a566:	d17e      	bne.n	800a666 <osThreadNew+0x11a>
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d07b      	beq.n	800a666 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a56e:	2380      	movs	r3, #128	; 0x80
 800a570:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a572:	2318      	movs	r3, #24
 800a574:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a576:	2300      	movs	r3, #0
 800a578:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a57a:	f04f 33ff 	mov.w	r3, #4294967295
 800a57e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d045      	beq.n	800a612 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d002      	beq.n	800a594 <osThreadNew+0x48>
        name = attr->name;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	699b      	ldr	r3, [r3, #24]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d002      	beq.n	800a5a2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	699b      	ldr	r3, [r3, #24]
 800a5a0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a5a2:	69fb      	ldr	r3, [r7, #28]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d008      	beq.n	800a5ba <osThreadNew+0x6e>
 800a5a8:	69fb      	ldr	r3, [r7, #28]
 800a5aa:	2b38      	cmp	r3, #56	; 0x38
 800a5ac:	d805      	bhi.n	800a5ba <osThreadNew+0x6e>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	f003 0301 	and.w	r3, r3, #1
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d001      	beq.n	800a5be <osThreadNew+0x72>
        return (NULL);
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	e054      	b.n	800a668 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	695b      	ldr	r3, [r3, #20]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d003      	beq.n	800a5ce <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	695b      	ldr	r3, [r3, #20]
 800a5ca:	089b      	lsrs	r3, r3, #2
 800a5cc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	689b      	ldr	r3, [r3, #8]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d00e      	beq.n	800a5f4 <osThreadNew+0xa8>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	68db      	ldr	r3, [r3, #12]
 800a5da:	2bbb      	cmp	r3, #187	; 0xbb
 800a5dc:	d90a      	bls.n	800a5f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d006      	beq.n	800a5f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	695b      	ldr	r3, [r3, #20]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d002      	beq.n	800a5f4 <osThreadNew+0xa8>
        mem = 1;
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	61bb      	str	r3, [r7, #24]
 800a5f2:	e010      	b.n	800a616 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	689b      	ldr	r3, [r3, #8]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d10c      	bne.n	800a616 <osThreadNew+0xca>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	68db      	ldr	r3, [r3, #12]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d108      	bne.n	800a616 <osThreadNew+0xca>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	691b      	ldr	r3, [r3, #16]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d104      	bne.n	800a616 <osThreadNew+0xca>
          mem = 0;
 800a60c:	2300      	movs	r3, #0
 800a60e:	61bb      	str	r3, [r7, #24]
 800a610:	e001      	b.n	800a616 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a612:	2300      	movs	r3, #0
 800a614:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a616:	69bb      	ldr	r3, [r7, #24]
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d110      	bne.n	800a63e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a624:	9202      	str	r2, [sp, #8]
 800a626:	9301      	str	r3, [sp, #4]
 800a628:	69fb      	ldr	r3, [r7, #28]
 800a62a:	9300      	str	r3, [sp, #0]
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	6a3a      	ldr	r2, [r7, #32]
 800a630:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a632:	68f8      	ldr	r0, [r7, #12]
 800a634:	f000 fff6 	bl	800b624 <xTaskCreateStatic>
 800a638:	4603      	mov	r3, r0
 800a63a:	613b      	str	r3, [r7, #16]
 800a63c:	e013      	b.n	800a666 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a63e:	69bb      	ldr	r3, [r7, #24]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d110      	bne.n	800a666 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a644:	6a3b      	ldr	r3, [r7, #32]
 800a646:	b29a      	uxth	r2, r3
 800a648:	f107 0310 	add.w	r3, r7, #16
 800a64c:	9301      	str	r3, [sp, #4]
 800a64e:	69fb      	ldr	r3, [r7, #28]
 800a650:	9300      	str	r3, [sp, #0]
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a656:	68f8      	ldr	r0, [r7, #12]
 800a658:	f001 f841 	bl	800b6de <xTaskCreate>
 800a65c:	4603      	mov	r3, r0
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d001      	beq.n	800a666 <osThreadNew+0x11a>
            hTask = NULL;
 800a662:	2300      	movs	r3, #0
 800a664:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a666:	693b      	ldr	r3, [r7, #16]
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3728      	adds	r7, #40	; 0x28
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a670:	b580      	push	{r7, lr}
 800a672:	b084      	sub	sp, #16
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a678:	f3ef 8305 	mrs	r3, IPSR
 800a67c:	60bb      	str	r3, [r7, #8]
  return(result);
 800a67e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a680:	2b00      	cmp	r3, #0
 800a682:	d003      	beq.n	800a68c <osDelay+0x1c>
    stat = osErrorISR;
 800a684:	f06f 0305 	mvn.w	r3, #5
 800a688:	60fb      	str	r3, [r7, #12]
 800a68a:	e007      	b.n	800a69c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a68c:	2300      	movs	r3, #0
 800a68e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d002      	beq.n	800a69c <osDelay+0x2c>
      vTaskDelay(ticks);
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f001 f97c 	bl	800b994 <vTaskDelay>
    }
  }

  return (stat);
 800a69c:	68fb      	ldr	r3, [r7, #12]
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3710      	adds	r7, #16
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}

0800a6a6 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a6a6:	b580      	push	{r7, lr}
 800a6a8:	b08a      	sub	sp, #40	; 0x28
 800a6aa:	af02      	add	r7, sp, #8
 800a6ac:	60f8      	str	r0, [r7, #12]
 800a6ae:	60b9      	str	r1, [r7, #8]
 800a6b0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6b6:	f3ef 8305 	mrs	r3, IPSR
 800a6ba:	613b      	str	r3, [r7, #16]
  return(result);
 800a6bc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d15f      	bne.n	800a782 <osMessageQueueNew+0xdc>
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d05c      	beq.n	800a782 <osMessageQueueNew+0xdc>
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d059      	beq.n	800a782 <osMessageQueueNew+0xdc>
    mem = -1;
 800a6ce:	f04f 33ff 	mov.w	r3, #4294967295
 800a6d2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d029      	beq.n	800a72e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	689b      	ldr	r3, [r3, #8]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d012      	beq.n	800a708 <osMessageQueueNew+0x62>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	68db      	ldr	r3, [r3, #12]
 800a6e6:	2b4f      	cmp	r3, #79	; 0x4f
 800a6e8:	d90e      	bls.n	800a708 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d00a      	beq.n	800a708 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	695a      	ldr	r2, [r3, #20]
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	68b9      	ldr	r1, [r7, #8]
 800a6fa:	fb01 f303 	mul.w	r3, r1, r3
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d302      	bcc.n	800a708 <osMessageQueueNew+0x62>
        mem = 1;
 800a702:	2301      	movs	r3, #1
 800a704:	61bb      	str	r3, [r7, #24]
 800a706:	e014      	b.n	800a732 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	689b      	ldr	r3, [r3, #8]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d110      	bne.n	800a732 <osMessageQueueNew+0x8c>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	68db      	ldr	r3, [r3, #12]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d10c      	bne.n	800a732 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d108      	bne.n	800a732 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	695b      	ldr	r3, [r3, #20]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d104      	bne.n	800a732 <osMessageQueueNew+0x8c>
          mem = 0;
 800a728:	2300      	movs	r3, #0
 800a72a:	61bb      	str	r3, [r7, #24]
 800a72c:	e001      	b.n	800a732 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a72e:	2300      	movs	r3, #0
 800a730:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a732:	69bb      	ldr	r3, [r7, #24]
 800a734:	2b01      	cmp	r3, #1
 800a736:	d10b      	bne.n	800a750 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	691a      	ldr	r2, [r3, #16]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	689b      	ldr	r3, [r3, #8]
 800a740:	2100      	movs	r1, #0
 800a742:	9100      	str	r1, [sp, #0]
 800a744:	68b9      	ldr	r1, [r7, #8]
 800a746:	68f8      	ldr	r0, [r7, #12]
 800a748:	f000 fa2e 	bl	800aba8 <xQueueGenericCreateStatic>
 800a74c:	61f8      	str	r0, [r7, #28]
 800a74e:	e008      	b.n	800a762 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a750:	69bb      	ldr	r3, [r7, #24]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d105      	bne.n	800a762 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a756:	2200      	movs	r2, #0
 800a758:	68b9      	ldr	r1, [r7, #8]
 800a75a:	68f8      	ldr	r0, [r7, #12]
 800a75c:	f000 fa9c 	bl	800ac98 <xQueueGenericCreate>
 800a760:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a762:	69fb      	ldr	r3, [r7, #28]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d00c      	beq.n	800a782 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d003      	beq.n	800a776 <osMessageQueueNew+0xd0>
        name = attr->name;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	617b      	str	r3, [r7, #20]
 800a774:	e001      	b.n	800a77a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a776:	2300      	movs	r3, #0
 800a778:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a77a:	6979      	ldr	r1, [r7, #20]
 800a77c:	69f8      	ldr	r0, [r7, #28]
 800a77e:	f000 fef3 	bl	800b568 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a782:	69fb      	ldr	r3, [r7, #28]
}
 800a784:	4618      	mov	r0, r3
 800a786:	3720      	adds	r7, #32
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}

0800a78c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b088      	sub	sp, #32
 800a790:	af00      	add	r7, sp, #0
 800a792:	60f8      	str	r0, [r7, #12]
 800a794:	60b9      	str	r1, [r7, #8]
 800a796:	603b      	str	r3, [r7, #0]
 800a798:	4613      	mov	r3, r2
 800a79a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7a4:	f3ef 8305 	mrs	r3, IPSR
 800a7a8:	617b      	str	r3, [r7, #20]
  return(result);
 800a7aa:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d028      	beq.n	800a802 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a7b0:	69bb      	ldr	r3, [r7, #24]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d005      	beq.n	800a7c2 <osMessageQueuePut+0x36>
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d002      	beq.n	800a7c2 <osMessageQueuePut+0x36>
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d003      	beq.n	800a7ca <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800a7c2:	f06f 0303 	mvn.w	r3, #3
 800a7c6:	61fb      	str	r3, [r7, #28]
 800a7c8:	e038      	b.n	800a83c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a7ce:	f107 0210 	add.w	r2, r7, #16
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	68b9      	ldr	r1, [r7, #8]
 800a7d6:	69b8      	ldr	r0, [r7, #24]
 800a7d8:	f000 fbba 	bl	800af50 <xQueueGenericSendFromISR>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	d003      	beq.n	800a7ea <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800a7e2:	f06f 0302 	mvn.w	r3, #2
 800a7e6:	61fb      	str	r3, [r7, #28]
 800a7e8:	e028      	b.n	800a83c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d025      	beq.n	800a83c <osMessageQueuePut+0xb0>
 800a7f0:	4b15      	ldr	r3, [pc, #84]	; (800a848 <osMessageQueuePut+0xbc>)
 800a7f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7f6:	601a      	str	r2, [r3, #0]
 800a7f8:	f3bf 8f4f 	dsb	sy
 800a7fc:	f3bf 8f6f 	isb	sy
 800a800:	e01c      	b.n	800a83c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a802:	69bb      	ldr	r3, [r7, #24]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d002      	beq.n	800a80e <osMessageQueuePut+0x82>
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d103      	bne.n	800a816 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800a80e:	f06f 0303 	mvn.w	r3, #3
 800a812:	61fb      	str	r3, [r7, #28]
 800a814:	e012      	b.n	800a83c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a816:	2300      	movs	r3, #0
 800a818:	683a      	ldr	r2, [r7, #0]
 800a81a:	68b9      	ldr	r1, [r7, #8]
 800a81c:	69b8      	ldr	r0, [r7, #24]
 800a81e:	f000 fa99 	bl	800ad54 <xQueueGenericSend>
 800a822:	4603      	mov	r3, r0
 800a824:	2b01      	cmp	r3, #1
 800a826:	d009      	beq.n	800a83c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d003      	beq.n	800a836 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800a82e:	f06f 0301 	mvn.w	r3, #1
 800a832:	61fb      	str	r3, [r7, #28]
 800a834:	e002      	b.n	800a83c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800a836:	f06f 0302 	mvn.w	r3, #2
 800a83a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a83c:	69fb      	ldr	r3, [r7, #28]
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3720      	adds	r7, #32
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
 800a846:	bf00      	nop
 800a848:	e000ed04 	.word	0xe000ed04

0800a84c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b088      	sub	sp, #32
 800a850:	af00      	add	r7, sp, #0
 800a852:	60f8      	str	r0, [r7, #12]
 800a854:	60b9      	str	r1, [r7, #8]
 800a856:	607a      	str	r2, [r7, #4]
 800a858:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a85e:	2300      	movs	r3, #0
 800a860:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a862:	f3ef 8305 	mrs	r3, IPSR
 800a866:	617b      	str	r3, [r7, #20]
  return(result);
 800a868:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d028      	beq.n	800a8c0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a86e:	69bb      	ldr	r3, [r7, #24]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d005      	beq.n	800a880 <osMessageQueueGet+0x34>
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d002      	beq.n	800a880 <osMessageQueueGet+0x34>
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d003      	beq.n	800a888 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800a880:	f06f 0303 	mvn.w	r3, #3
 800a884:	61fb      	str	r3, [r7, #28]
 800a886:	e037      	b.n	800a8f8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800a888:	2300      	movs	r3, #0
 800a88a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a88c:	f107 0310 	add.w	r3, r7, #16
 800a890:	461a      	mov	r2, r3
 800a892:	68b9      	ldr	r1, [r7, #8]
 800a894:	69b8      	ldr	r0, [r7, #24]
 800a896:	f000 fcd7 	bl	800b248 <xQueueReceiveFromISR>
 800a89a:	4603      	mov	r3, r0
 800a89c:	2b01      	cmp	r3, #1
 800a89e:	d003      	beq.n	800a8a8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800a8a0:	f06f 0302 	mvn.w	r3, #2
 800a8a4:	61fb      	str	r3, [r7, #28]
 800a8a6:	e027      	b.n	800a8f8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d024      	beq.n	800a8f8 <osMessageQueueGet+0xac>
 800a8ae:	4b15      	ldr	r3, [pc, #84]	; (800a904 <osMessageQueueGet+0xb8>)
 800a8b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8b4:	601a      	str	r2, [r3, #0]
 800a8b6:	f3bf 8f4f 	dsb	sy
 800a8ba:	f3bf 8f6f 	isb	sy
 800a8be:	e01b      	b.n	800a8f8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a8c0:	69bb      	ldr	r3, [r7, #24]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d002      	beq.n	800a8cc <osMessageQueueGet+0x80>
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d103      	bne.n	800a8d4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800a8cc:	f06f 0303 	mvn.w	r3, #3
 800a8d0:	61fb      	str	r3, [r7, #28]
 800a8d2:	e011      	b.n	800a8f8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a8d4:	683a      	ldr	r2, [r7, #0]
 800a8d6:	68b9      	ldr	r1, [r7, #8]
 800a8d8:	69b8      	ldr	r0, [r7, #24]
 800a8da:	f000 fbd5 	bl	800b088 <xQueueReceive>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d009      	beq.n	800a8f8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d003      	beq.n	800a8f2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800a8ea:	f06f 0301 	mvn.w	r3, #1
 800a8ee:	61fb      	str	r3, [r7, #28]
 800a8f0:	e002      	b.n	800a8f8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800a8f2:	f06f 0302 	mvn.w	r3, #2
 800a8f6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a8f8:	69fb      	ldr	r3, [r7, #28]
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3720      	adds	r7, #32
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}
 800a902:	bf00      	nop
 800a904:	e000ed04 	.word	0xe000ed04

0800a908 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a908:	b480      	push	{r7}
 800a90a:	b085      	sub	sp, #20
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	60f8      	str	r0, [r7, #12]
 800a910:	60b9      	str	r1, [r7, #8]
 800a912:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	4a07      	ldr	r2, [pc, #28]	; (800a934 <vApplicationGetIdleTaskMemory+0x2c>)
 800a918:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	4a06      	ldr	r2, [pc, #24]	; (800a938 <vApplicationGetIdleTaskMemory+0x30>)
 800a91e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2280      	movs	r2, #128	; 0x80
 800a924:	601a      	str	r2, [r3, #0]
}
 800a926:	bf00      	nop
 800a928:	3714      	adds	r7, #20
 800a92a:	46bd      	mov	sp, r7
 800a92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a930:	4770      	bx	lr
 800a932:	bf00      	nop
 800a934:	200000b8 	.word	0x200000b8
 800a938:	20000174 	.word	0x20000174

0800a93c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a93c:	b480      	push	{r7}
 800a93e:	b085      	sub	sp, #20
 800a940:	af00      	add	r7, sp, #0
 800a942:	60f8      	str	r0, [r7, #12]
 800a944:	60b9      	str	r1, [r7, #8]
 800a946:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	4a07      	ldr	r2, [pc, #28]	; (800a968 <vApplicationGetTimerTaskMemory+0x2c>)
 800a94c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	4a06      	ldr	r2, [pc, #24]	; (800a96c <vApplicationGetTimerTaskMemory+0x30>)
 800a952:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a95a:	601a      	str	r2, [r3, #0]
}
 800a95c:	bf00      	nop
 800a95e:	3714      	adds	r7, #20
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr
 800a968:	20000374 	.word	0x20000374
 800a96c:	20000430 	.word	0x20000430

0800a970 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a970:	b480      	push	{r7}
 800a972:	b083      	sub	sp, #12
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f103 0208 	add.w	r2, r3, #8
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f04f 32ff 	mov.w	r2, #4294967295
 800a988:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f103 0208 	add.w	r2, r3, #8
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f103 0208 	add.w	r2, r3, #8
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a9a4:	bf00      	nop
 800a9a6:	370c      	adds	r7, #12
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr

0800a9b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b083      	sub	sp, #12
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a9be:	bf00      	nop
 800a9c0:	370c      	adds	r7, #12
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr

0800a9ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a9ca:	b480      	push	{r7}
 800a9cc:	b085      	sub	sp, #20
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	6078      	str	r0, [r7, #4]
 800a9d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	68fa      	ldr	r2, [r7, #12]
 800a9de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	689a      	ldr	r2, [r3, #8]
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	689b      	ldr	r3, [r3, #8]
 800a9ec:	683a      	ldr	r2, [r7, #0]
 800a9ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	683a      	ldr	r2, [r7, #0]
 800a9f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	1c5a      	adds	r2, r3, #1
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	601a      	str	r2, [r3, #0]
}
 800aa06:	bf00      	nop
 800aa08:	3714      	adds	r7, #20
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa10:	4770      	bx	lr

0800aa12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa12:	b480      	push	{r7}
 800aa14:	b085      	sub	sp, #20
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	6078      	str	r0, [r7, #4]
 800aa1a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa28:	d103      	bne.n	800aa32 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	691b      	ldr	r3, [r3, #16]
 800aa2e:	60fb      	str	r3, [r7, #12]
 800aa30:	e00c      	b.n	800aa4c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	3308      	adds	r3, #8
 800aa36:	60fb      	str	r3, [r7, #12]
 800aa38:	e002      	b.n	800aa40 <vListInsert+0x2e>
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	60fb      	str	r3, [r7, #12]
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	685b      	ldr	r3, [r3, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	68ba      	ldr	r2, [r7, #8]
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d2f6      	bcs.n	800aa3a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	685a      	ldr	r2, [r3, #4]
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	683a      	ldr	r2, [r7, #0]
 800aa5a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	68fa      	ldr	r2, [r7, #12]
 800aa60:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	683a      	ldr	r2, [r7, #0]
 800aa66:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	687a      	ldr	r2, [r7, #4]
 800aa6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	1c5a      	adds	r2, r3, #1
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	601a      	str	r2, [r3, #0]
}
 800aa78:	bf00      	nop
 800aa7a:	3714      	adds	r7, #20
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa82:	4770      	bx	lr

0800aa84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aa84:	b480      	push	{r7}
 800aa86:	b085      	sub	sp, #20
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	691b      	ldr	r3, [r3, #16]
 800aa90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	685b      	ldr	r3, [r3, #4]
 800aa96:	687a      	ldr	r2, [r7, #4]
 800aa98:	6892      	ldr	r2, [r2, #8]
 800aa9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	689b      	ldr	r3, [r3, #8]
 800aaa0:	687a      	ldr	r2, [r7, #4]
 800aaa2:	6852      	ldr	r2, [r2, #4]
 800aaa4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	687a      	ldr	r2, [r7, #4]
 800aaac:	429a      	cmp	r2, r3
 800aaae:	d103      	bne.n	800aab8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	689a      	ldr	r2, [r3, #8]
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2200      	movs	r2, #0
 800aabc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	1e5a      	subs	r2, r3, #1
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	681b      	ldr	r3, [r3, #0]
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3714      	adds	r7, #20
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr

0800aad8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b084      	sub	sp, #16
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d10a      	bne.n	800ab02 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800aaec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf0:	f383 8811 	msr	BASEPRI, r3
 800aaf4:	f3bf 8f6f 	isb	sy
 800aaf8:	f3bf 8f4f 	dsb	sy
 800aafc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800aafe:	bf00      	nop
 800ab00:	e7fe      	b.n	800ab00 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ab02:	f002 f92f 	bl	800cd64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab0e:	68f9      	ldr	r1, [r7, #12]
 800ab10:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ab12:	fb01 f303 	mul.w	r3, r1, r3
 800ab16:	441a      	add	r2, r3
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681a      	ldr	r2, [r3, #0]
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681a      	ldr	r2, [r3, #0]
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab32:	3b01      	subs	r3, #1
 800ab34:	68f9      	ldr	r1, [r7, #12]
 800ab36:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ab38:	fb01 f303 	mul.w	r3, r1, r3
 800ab3c:	441a      	add	r2, r3
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	22ff      	movs	r2, #255	; 0xff
 800ab46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	22ff      	movs	r2, #255	; 0xff
 800ab4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d114      	bne.n	800ab82 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	691b      	ldr	r3, [r3, #16]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d01a      	beq.n	800ab96 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	3310      	adds	r3, #16
 800ab64:	4618      	mov	r0, r3
 800ab66:	f001 f9e3 	bl	800bf30 <xTaskRemoveFromEventList>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d012      	beq.n	800ab96 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ab70:	4b0c      	ldr	r3, [pc, #48]	; (800aba4 <xQueueGenericReset+0xcc>)
 800ab72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab76:	601a      	str	r2, [r3, #0]
 800ab78:	f3bf 8f4f 	dsb	sy
 800ab7c:	f3bf 8f6f 	isb	sy
 800ab80:	e009      	b.n	800ab96 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	3310      	adds	r3, #16
 800ab86:	4618      	mov	r0, r3
 800ab88:	f7ff fef2 	bl	800a970 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	3324      	adds	r3, #36	; 0x24
 800ab90:	4618      	mov	r0, r3
 800ab92:	f7ff feed 	bl	800a970 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ab96:	f002 f915 	bl	800cdc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ab9a:	2301      	movs	r3, #1
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3710      	adds	r7, #16
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}
 800aba4:	e000ed04 	.word	0xe000ed04

0800aba8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b08e      	sub	sp, #56	; 0x38
 800abac:	af02      	add	r7, sp, #8
 800abae:	60f8      	str	r0, [r7, #12]
 800abb0:	60b9      	str	r1, [r7, #8]
 800abb2:	607a      	str	r2, [r7, #4]
 800abb4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d10a      	bne.n	800abd2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800abbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc0:	f383 8811 	msr	BASEPRI, r3
 800abc4:	f3bf 8f6f 	isb	sy
 800abc8:	f3bf 8f4f 	dsb	sy
 800abcc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800abce:	bf00      	nop
 800abd0:	e7fe      	b.n	800abd0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d10a      	bne.n	800abee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800abd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abdc:	f383 8811 	msr	BASEPRI, r3
 800abe0:	f3bf 8f6f 	isb	sy
 800abe4:	f3bf 8f4f 	dsb	sy
 800abe8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800abea:	bf00      	nop
 800abec:	e7fe      	b.n	800abec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d002      	beq.n	800abfa <xQueueGenericCreateStatic+0x52>
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d001      	beq.n	800abfe <xQueueGenericCreateStatic+0x56>
 800abfa:	2301      	movs	r3, #1
 800abfc:	e000      	b.n	800ac00 <xQueueGenericCreateStatic+0x58>
 800abfe:	2300      	movs	r3, #0
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d10a      	bne.n	800ac1a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ac04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac08:	f383 8811 	msr	BASEPRI, r3
 800ac0c:	f3bf 8f6f 	isb	sy
 800ac10:	f3bf 8f4f 	dsb	sy
 800ac14:	623b      	str	r3, [r7, #32]
}
 800ac16:	bf00      	nop
 800ac18:	e7fe      	b.n	800ac18 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d102      	bne.n	800ac26 <xQueueGenericCreateStatic+0x7e>
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d101      	bne.n	800ac2a <xQueueGenericCreateStatic+0x82>
 800ac26:	2301      	movs	r3, #1
 800ac28:	e000      	b.n	800ac2c <xQueueGenericCreateStatic+0x84>
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d10a      	bne.n	800ac46 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ac30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac34:	f383 8811 	msr	BASEPRI, r3
 800ac38:	f3bf 8f6f 	isb	sy
 800ac3c:	f3bf 8f4f 	dsb	sy
 800ac40:	61fb      	str	r3, [r7, #28]
}
 800ac42:	bf00      	nop
 800ac44:	e7fe      	b.n	800ac44 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ac46:	2350      	movs	r3, #80	; 0x50
 800ac48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	2b50      	cmp	r3, #80	; 0x50
 800ac4e:	d00a      	beq.n	800ac66 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ac50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac54:	f383 8811 	msr	BASEPRI, r3
 800ac58:	f3bf 8f6f 	isb	sy
 800ac5c:	f3bf 8f4f 	dsb	sy
 800ac60:	61bb      	str	r3, [r7, #24]
}
 800ac62:	bf00      	nop
 800ac64:	e7fe      	b.n	800ac64 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ac66:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ac6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d00d      	beq.n	800ac8e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ac72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac74:	2201      	movs	r2, #1
 800ac76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ac7a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ac7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac80:	9300      	str	r3, [sp, #0]
 800ac82:	4613      	mov	r3, r2
 800ac84:	687a      	ldr	r2, [r7, #4]
 800ac86:	68b9      	ldr	r1, [r7, #8]
 800ac88:	68f8      	ldr	r0, [r7, #12]
 800ac8a:	f000 f83f 	bl	800ad0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ac8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3730      	adds	r7, #48	; 0x30
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}

0800ac98 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b08a      	sub	sp, #40	; 0x28
 800ac9c:	af02      	add	r7, sp, #8
 800ac9e:	60f8      	str	r0, [r7, #12]
 800aca0:	60b9      	str	r1, [r7, #8]
 800aca2:	4613      	mov	r3, r2
 800aca4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d10a      	bne.n	800acc2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800acac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb0:	f383 8811 	msr	BASEPRI, r3
 800acb4:	f3bf 8f6f 	isb	sy
 800acb8:	f3bf 8f4f 	dsb	sy
 800acbc:	613b      	str	r3, [r7, #16]
}
 800acbe:	bf00      	nop
 800acc0:	e7fe      	b.n	800acc0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	68ba      	ldr	r2, [r7, #8]
 800acc6:	fb02 f303 	mul.w	r3, r2, r3
 800acca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800accc:	69fb      	ldr	r3, [r7, #28]
 800acce:	3350      	adds	r3, #80	; 0x50
 800acd0:	4618      	mov	r0, r3
 800acd2:	f002 f969 	bl	800cfa8 <pvPortMalloc>
 800acd6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800acd8:	69bb      	ldr	r3, [r7, #24]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d011      	beq.n	800ad02 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800acde:	69bb      	ldr	r3, [r7, #24]
 800ace0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	3350      	adds	r3, #80	; 0x50
 800ace6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ace8:	69bb      	ldr	r3, [r7, #24]
 800acea:	2200      	movs	r2, #0
 800acec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800acf0:	79fa      	ldrb	r2, [r7, #7]
 800acf2:	69bb      	ldr	r3, [r7, #24]
 800acf4:	9300      	str	r3, [sp, #0]
 800acf6:	4613      	mov	r3, r2
 800acf8:	697a      	ldr	r2, [r7, #20]
 800acfa:	68b9      	ldr	r1, [r7, #8]
 800acfc:	68f8      	ldr	r0, [r7, #12]
 800acfe:	f000 f805 	bl	800ad0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ad02:	69bb      	ldr	r3, [r7, #24]
	}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3720      	adds	r7, #32
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}

0800ad0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b084      	sub	sp, #16
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	60f8      	str	r0, [r7, #12]
 800ad14:	60b9      	str	r1, [r7, #8]
 800ad16:	607a      	str	r2, [r7, #4]
 800ad18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d103      	bne.n	800ad28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ad20:	69bb      	ldr	r3, [r7, #24]
 800ad22:	69ba      	ldr	r2, [r7, #24]
 800ad24:	601a      	str	r2, [r3, #0]
 800ad26:	e002      	b.n	800ad2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ad28:	69bb      	ldr	r3, [r7, #24]
 800ad2a:	687a      	ldr	r2, [r7, #4]
 800ad2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ad2e:	69bb      	ldr	r3, [r7, #24]
 800ad30:	68fa      	ldr	r2, [r7, #12]
 800ad32:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ad34:	69bb      	ldr	r3, [r7, #24]
 800ad36:	68ba      	ldr	r2, [r7, #8]
 800ad38:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ad3a:	2101      	movs	r1, #1
 800ad3c:	69b8      	ldr	r0, [r7, #24]
 800ad3e:	f7ff fecb 	bl	800aad8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ad42:	69bb      	ldr	r3, [r7, #24]
 800ad44:	78fa      	ldrb	r2, [r7, #3]
 800ad46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ad4a:	bf00      	nop
 800ad4c:	3710      	adds	r7, #16
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
	...

0800ad54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b08e      	sub	sp, #56	; 0x38
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	60f8      	str	r0, [r7, #12]
 800ad5c:	60b9      	str	r1, [r7, #8]
 800ad5e:	607a      	str	r2, [r7, #4]
 800ad60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ad62:	2300      	movs	r3, #0
 800ad64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ad6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d10a      	bne.n	800ad86 <xQueueGenericSend+0x32>
	__asm volatile
 800ad70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad74:	f383 8811 	msr	BASEPRI, r3
 800ad78:	f3bf 8f6f 	isb	sy
 800ad7c:	f3bf 8f4f 	dsb	sy
 800ad80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ad82:	bf00      	nop
 800ad84:	e7fe      	b.n	800ad84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d103      	bne.n	800ad94 <xQueueGenericSend+0x40>
 800ad8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d101      	bne.n	800ad98 <xQueueGenericSend+0x44>
 800ad94:	2301      	movs	r3, #1
 800ad96:	e000      	b.n	800ad9a <xQueueGenericSend+0x46>
 800ad98:	2300      	movs	r3, #0
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d10a      	bne.n	800adb4 <xQueueGenericSend+0x60>
	__asm volatile
 800ad9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada2:	f383 8811 	msr	BASEPRI, r3
 800ada6:	f3bf 8f6f 	isb	sy
 800adaa:	f3bf 8f4f 	dsb	sy
 800adae:	627b      	str	r3, [r7, #36]	; 0x24
}
 800adb0:	bf00      	nop
 800adb2:	e7fe      	b.n	800adb2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	2b02      	cmp	r3, #2
 800adb8:	d103      	bne.n	800adc2 <xQueueGenericSend+0x6e>
 800adba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adbe:	2b01      	cmp	r3, #1
 800adc0:	d101      	bne.n	800adc6 <xQueueGenericSend+0x72>
 800adc2:	2301      	movs	r3, #1
 800adc4:	e000      	b.n	800adc8 <xQueueGenericSend+0x74>
 800adc6:	2300      	movs	r3, #0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d10a      	bne.n	800ade2 <xQueueGenericSend+0x8e>
	__asm volatile
 800adcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add0:	f383 8811 	msr	BASEPRI, r3
 800add4:	f3bf 8f6f 	isb	sy
 800add8:	f3bf 8f4f 	dsb	sy
 800addc:	623b      	str	r3, [r7, #32]
}
 800adde:	bf00      	nop
 800ade0:	e7fe      	b.n	800ade0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ade2:	f001 fa67 	bl	800c2b4 <xTaskGetSchedulerState>
 800ade6:	4603      	mov	r3, r0
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d102      	bne.n	800adf2 <xQueueGenericSend+0x9e>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d101      	bne.n	800adf6 <xQueueGenericSend+0xa2>
 800adf2:	2301      	movs	r3, #1
 800adf4:	e000      	b.n	800adf8 <xQueueGenericSend+0xa4>
 800adf6:	2300      	movs	r3, #0
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d10a      	bne.n	800ae12 <xQueueGenericSend+0xbe>
	__asm volatile
 800adfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae00:	f383 8811 	msr	BASEPRI, r3
 800ae04:	f3bf 8f6f 	isb	sy
 800ae08:	f3bf 8f4f 	dsb	sy
 800ae0c:	61fb      	str	r3, [r7, #28]
}
 800ae0e:	bf00      	nop
 800ae10:	e7fe      	b.n	800ae10 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae12:	f001 ffa7 	bl	800cd64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ae16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d302      	bcc.n	800ae28 <xQueueGenericSend+0xd4>
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	2b02      	cmp	r3, #2
 800ae26:	d129      	bne.n	800ae7c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ae28:	683a      	ldr	r2, [r7, #0]
 800ae2a:	68b9      	ldr	r1, [r7, #8]
 800ae2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae2e:	f000 fa8b 	bl	800b348 <prvCopyDataToQueue>
 800ae32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d010      	beq.n	800ae5e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae3e:	3324      	adds	r3, #36	; 0x24
 800ae40:	4618      	mov	r0, r3
 800ae42:	f001 f875 	bl	800bf30 <xTaskRemoveFromEventList>
 800ae46:	4603      	mov	r3, r0
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d013      	beq.n	800ae74 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ae4c:	4b3f      	ldr	r3, [pc, #252]	; (800af4c <xQueueGenericSend+0x1f8>)
 800ae4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae52:	601a      	str	r2, [r3, #0]
 800ae54:	f3bf 8f4f 	dsb	sy
 800ae58:	f3bf 8f6f 	isb	sy
 800ae5c:	e00a      	b.n	800ae74 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ae5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d007      	beq.n	800ae74 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ae64:	4b39      	ldr	r3, [pc, #228]	; (800af4c <xQueueGenericSend+0x1f8>)
 800ae66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae6a:	601a      	str	r2, [r3, #0]
 800ae6c:	f3bf 8f4f 	dsb	sy
 800ae70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ae74:	f001 ffa6 	bl	800cdc4 <vPortExitCritical>
				return pdPASS;
 800ae78:	2301      	movs	r3, #1
 800ae7a:	e063      	b.n	800af44 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d103      	bne.n	800ae8a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae82:	f001 ff9f 	bl	800cdc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ae86:	2300      	movs	r3, #0
 800ae88:	e05c      	b.n	800af44 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d106      	bne.n	800ae9e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae90:	f107 0314 	add.w	r3, r7, #20
 800ae94:	4618      	mov	r0, r3
 800ae96:	f001 f8af 	bl	800bff8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae9e:	f001 ff91 	bl	800cdc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aea2:	f000 fe1b 	bl	800badc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aea6:	f001 ff5d 	bl	800cd64 <vPortEnterCritical>
 800aeaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aeb0:	b25b      	sxtb	r3, r3
 800aeb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeb6:	d103      	bne.n	800aec0 <xQueueGenericSend+0x16c>
 800aeb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeba:	2200      	movs	r2, #0
 800aebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aec6:	b25b      	sxtb	r3, r3
 800aec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aecc:	d103      	bne.n	800aed6 <xQueueGenericSend+0x182>
 800aece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed0:	2200      	movs	r2, #0
 800aed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aed6:	f001 ff75 	bl	800cdc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aeda:	1d3a      	adds	r2, r7, #4
 800aedc:	f107 0314 	add.w	r3, r7, #20
 800aee0:	4611      	mov	r1, r2
 800aee2:	4618      	mov	r0, r3
 800aee4:	f001 f89e 	bl	800c024 <xTaskCheckForTimeOut>
 800aee8:	4603      	mov	r3, r0
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d124      	bne.n	800af38 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aeee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aef0:	f000 fb22 	bl	800b538 <prvIsQueueFull>
 800aef4:	4603      	mov	r3, r0
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d018      	beq.n	800af2c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aefa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aefc:	3310      	adds	r3, #16
 800aefe:	687a      	ldr	r2, [r7, #4]
 800af00:	4611      	mov	r1, r2
 800af02:	4618      	mov	r0, r3
 800af04:	f000 ffc4 	bl	800be90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800af08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af0a:	f000 faad 	bl	800b468 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800af0e:	f000 fdf3 	bl	800baf8 <xTaskResumeAll>
 800af12:	4603      	mov	r3, r0
 800af14:	2b00      	cmp	r3, #0
 800af16:	f47f af7c 	bne.w	800ae12 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800af1a:	4b0c      	ldr	r3, [pc, #48]	; (800af4c <xQueueGenericSend+0x1f8>)
 800af1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af20:	601a      	str	r2, [r3, #0]
 800af22:	f3bf 8f4f 	dsb	sy
 800af26:	f3bf 8f6f 	isb	sy
 800af2a:	e772      	b.n	800ae12 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800af2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af2e:	f000 fa9b 	bl	800b468 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af32:	f000 fde1 	bl	800baf8 <xTaskResumeAll>
 800af36:	e76c      	b.n	800ae12 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800af38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af3a:	f000 fa95 	bl	800b468 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af3e:	f000 fddb 	bl	800baf8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800af42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800af44:	4618      	mov	r0, r3
 800af46:	3738      	adds	r7, #56	; 0x38
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}
 800af4c:	e000ed04 	.word	0xe000ed04

0800af50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b090      	sub	sp, #64	; 0x40
 800af54:	af00      	add	r7, sp, #0
 800af56:	60f8      	str	r0, [r7, #12]
 800af58:	60b9      	str	r1, [r7, #8]
 800af5a:	607a      	str	r2, [r7, #4]
 800af5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800af62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af64:	2b00      	cmp	r3, #0
 800af66:	d10a      	bne.n	800af7e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800af68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af6c:	f383 8811 	msr	BASEPRI, r3
 800af70:	f3bf 8f6f 	isb	sy
 800af74:	f3bf 8f4f 	dsb	sy
 800af78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800af7a:	bf00      	nop
 800af7c:	e7fe      	b.n	800af7c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d103      	bne.n	800af8c <xQueueGenericSendFromISR+0x3c>
 800af84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d101      	bne.n	800af90 <xQueueGenericSendFromISR+0x40>
 800af8c:	2301      	movs	r3, #1
 800af8e:	e000      	b.n	800af92 <xQueueGenericSendFromISR+0x42>
 800af90:	2300      	movs	r3, #0
 800af92:	2b00      	cmp	r3, #0
 800af94:	d10a      	bne.n	800afac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800af96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9a:	f383 8811 	msr	BASEPRI, r3
 800af9e:	f3bf 8f6f 	isb	sy
 800afa2:	f3bf 8f4f 	dsb	sy
 800afa6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800afa8:	bf00      	nop
 800afaa:	e7fe      	b.n	800afaa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	2b02      	cmp	r3, #2
 800afb0:	d103      	bne.n	800afba <xQueueGenericSendFromISR+0x6a>
 800afb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afb6:	2b01      	cmp	r3, #1
 800afb8:	d101      	bne.n	800afbe <xQueueGenericSendFromISR+0x6e>
 800afba:	2301      	movs	r3, #1
 800afbc:	e000      	b.n	800afc0 <xQueueGenericSendFromISR+0x70>
 800afbe:	2300      	movs	r3, #0
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d10a      	bne.n	800afda <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800afc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc8:	f383 8811 	msr	BASEPRI, r3
 800afcc:	f3bf 8f6f 	isb	sy
 800afd0:	f3bf 8f4f 	dsb	sy
 800afd4:	623b      	str	r3, [r7, #32]
}
 800afd6:	bf00      	nop
 800afd8:	e7fe      	b.n	800afd8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800afda:	f001 ffa5 	bl	800cf28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800afde:	f3ef 8211 	mrs	r2, BASEPRI
 800afe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe6:	f383 8811 	msr	BASEPRI, r3
 800afea:	f3bf 8f6f 	isb	sy
 800afee:	f3bf 8f4f 	dsb	sy
 800aff2:	61fa      	str	r2, [r7, #28]
 800aff4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800aff6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aff8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800affa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800affc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800affe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b002:	429a      	cmp	r2, r3
 800b004:	d302      	bcc.n	800b00c <xQueueGenericSendFromISR+0xbc>
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	2b02      	cmp	r3, #2
 800b00a:	d12f      	bne.n	800b06c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b00e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b01a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b01c:	683a      	ldr	r2, [r7, #0]
 800b01e:	68b9      	ldr	r1, [r7, #8]
 800b020:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b022:	f000 f991 	bl	800b348 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b026:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b02a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b02e:	d112      	bne.n	800b056 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b034:	2b00      	cmp	r3, #0
 800b036:	d016      	beq.n	800b066 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b03a:	3324      	adds	r3, #36	; 0x24
 800b03c:	4618      	mov	r0, r3
 800b03e:	f000 ff77 	bl	800bf30 <xTaskRemoveFromEventList>
 800b042:	4603      	mov	r3, r0
 800b044:	2b00      	cmp	r3, #0
 800b046:	d00e      	beq.n	800b066 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d00b      	beq.n	800b066 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2201      	movs	r2, #1
 800b052:	601a      	str	r2, [r3, #0]
 800b054:	e007      	b.n	800b066 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b056:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b05a:	3301      	adds	r3, #1
 800b05c:	b2db      	uxtb	r3, r3
 800b05e:	b25a      	sxtb	r2, r3
 800b060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b062:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b066:	2301      	movs	r3, #1
 800b068:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b06a:	e001      	b.n	800b070 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b06c:	2300      	movs	r3, #0
 800b06e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b072:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b07a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b07c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b07e:	4618      	mov	r0, r3
 800b080:	3740      	adds	r7, #64	; 0x40
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
	...

0800b088 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b08c      	sub	sp, #48	; 0x30
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	60f8      	str	r0, [r7, #12]
 800b090:	60b9      	str	r1, [r7, #8]
 800b092:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b094:	2300      	movs	r3, #0
 800b096:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d10a      	bne.n	800b0b8 <xQueueReceive+0x30>
	__asm volatile
 800b0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a6:	f383 8811 	msr	BASEPRI, r3
 800b0aa:	f3bf 8f6f 	isb	sy
 800b0ae:	f3bf 8f4f 	dsb	sy
 800b0b2:	623b      	str	r3, [r7, #32]
}
 800b0b4:	bf00      	nop
 800b0b6:	e7fe      	b.n	800b0b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d103      	bne.n	800b0c6 <xQueueReceive+0x3e>
 800b0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d101      	bne.n	800b0ca <xQueueReceive+0x42>
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	e000      	b.n	800b0cc <xQueueReceive+0x44>
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d10a      	bne.n	800b0e6 <xQueueReceive+0x5e>
	__asm volatile
 800b0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d4:	f383 8811 	msr	BASEPRI, r3
 800b0d8:	f3bf 8f6f 	isb	sy
 800b0dc:	f3bf 8f4f 	dsb	sy
 800b0e0:	61fb      	str	r3, [r7, #28]
}
 800b0e2:	bf00      	nop
 800b0e4:	e7fe      	b.n	800b0e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b0e6:	f001 f8e5 	bl	800c2b4 <xTaskGetSchedulerState>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d102      	bne.n	800b0f6 <xQueueReceive+0x6e>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d101      	bne.n	800b0fa <xQueueReceive+0x72>
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	e000      	b.n	800b0fc <xQueueReceive+0x74>
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d10a      	bne.n	800b116 <xQueueReceive+0x8e>
	__asm volatile
 800b100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b104:	f383 8811 	msr	BASEPRI, r3
 800b108:	f3bf 8f6f 	isb	sy
 800b10c:	f3bf 8f4f 	dsb	sy
 800b110:	61bb      	str	r3, [r7, #24]
}
 800b112:	bf00      	nop
 800b114:	e7fe      	b.n	800b114 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b116:	f001 fe25 	bl	800cd64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b11c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b11e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b122:	2b00      	cmp	r3, #0
 800b124:	d01f      	beq.n	800b166 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b126:	68b9      	ldr	r1, [r7, #8]
 800b128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b12a:	f000 f977 	bl	800b41c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b130:	1e5a      	subs	r2, r3, #1
 800b132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b134:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b138:	691b      	ldr	r3, [r3, #16]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d00f      	beq.n	800b15e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b140:	3310      	adds	r3, #16
 800b142:	4618      	mov	r0, r3
 800b144:	f000 fef4 	bl	800bf30 <xTaskRemoveFromEventList>
 800b148:	4603      	mov	r3, r0
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d007      	beq.n	800b15e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b14e:	4b3d      	ldr	r3, [pc, #244]	; (800b244 <xQueueReceive+0x1bc>)
 800b150:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b154:	601a      	str	r2, [r3, #0]
 800b156:	f3bf 8f4f 	dsb	sy
 800b15a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b15e:	f001 fe31 	bl	800cdc4 <vPortExitCritical>
				return pdPASS;
 800b162:	2301      	movs	r3, #1
 800b164:	e069      	b.n	800b23a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d103      	bne.n	800b174 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b16c:	f001 fe2a 	bl	800cdc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b170:	2300      	movs	r3, #0
 800b172:	e062      	b.n	800b23a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b176:	2b00      	cmp	r3, #0
 800b178:	d106      	bne.n	800b188 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b17a:	f107 0310 	add.w	r3, r7, #16
 800b17e:	4618      	mov	r0, r3
 800b180:	f000 ff3a 	bl	800bff8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b184:	2301      	movs	r3, #1
 800b186:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b188:	f001 fe1c 	bl	800cdc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b18c:	f000 fca6 	bl	800badc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b190:	f001 fde8 	bl	800cd64 <vPortEnterCritical>
 800b194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b196:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b19a:	b25b      	sxtb	r3, r3
 800b19c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1a0:	d103      	bne.n	800b1aa <xQueueReceive+0x122>
 800b1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b1b0:	b25b      	sxtb	r3, r3
 800b1b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1b6:	d103      	bne.n	800b1c0 <xQueueReceive+0x138>
 800b1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b1c0:	f001 fe00 	bl	800cdc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b1c4:	1d3a      	adds	r2, r7, #4
 800b1c6:	f107 0310 	add.w	r3, r7, #16
 800b1ca:	4611      	mov	r1, r2
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f000 ff29 	bl	800c024 <xTaskCheckForTimeOut>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d123      	bne.n	800b220 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b1d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1da:	f000 f997 	bl	800b50c <prvIsQueueEmpty>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d017      	beq.n	800b214 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e6:	3324      	adds	r3, #36	; 0x24
 800b1e8:	687a      	ldr	r2, [r7, #4]
 800b1ea:	4611      	mov	r1, r2
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f000 fe4f 	bl	800be90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b1f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1f4:	f000 f938 	bl	800b468 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b1f8:	f000 fc7e 	bl	800baf8 <xTaskResumeAll>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d189      	bne.n	800b116 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b202:	4b10      	ldr	r3, [pc, #64]	; (800b244 <xQueueReceive+0x1bc>)
 800b204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b208:	601a      	str	r2, [r3, #0]
 800b20a:	f3bf 8f4f 	dsb	sy
 800b20e:	f3bf 8f6f 	isb	sy
 800b212:	e780      	b.n	800b116 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b216:	f000 f927 	bl	800b468 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b21a:	f000 fc6d 	bl	800baf8 <xTaskResumeAll>
 800b21e:	e77a      	b.n	800b116 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b222:	f000 f921 	bl	800b468 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b226:	f000 fc67 	bl	800baf8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b22a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b22c:	f000 f96e 	bl	800b50c <prvIsQueueEmpty>
 800b230:	4603      	mov	r3, r0
 800b232:	2b00      	cmp	r3, #0
 800b234:	f43f af6f 	beq.w	800b116 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b238:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3730      	adds	r7, #48	; 0x30
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}
 800b242:	bf00      	nop
 800b244:	e000ed04 	.word	0xe000ed04

0800b248 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b08e      	sub	sp, #56	; 0x38
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	60f8      	str	r0, [r7, #12]
 800b250:	60b9      	str	r1, [r7, #8]
 800b252:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d10a      	bne.n	800b274 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b262:	f383 8811 	msr	BASEPRI, r3
 800b266:	f3bf 8f6f 	isb	sy
 800b26a:	f3bf 8f4f 	dsb	sy
 800b26e:	623b      	str	r3, [r7, #32]
}
 800b270:	bf00      	nop
 800b272:	e7fe      	b.n	800b272 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d103      	bne.n	800b282 <xQueueReceiveFromISR+0x3a>
 800b27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b27c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d101      	bne.n	800b286 <xQueueReceiveFromISR+0x3e>
 800b282:	2301      	movs	r3, #1
 800b284:	e000      	b.n	800b288 <xQueueReceiveFromISR+0x40>
 800b286:	2300      	movs	r3, #0
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d10a      	bne.n	800b2a2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b28c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b290:	f383 8811 	msr	BASEPRI, r3
 800b294:	f3bf 8f6f 	isb	sy
 800b298:	f3bf 8f4f 	dsb	sy
 800b29c:	61fb      	str	r3, [r7, #28]
}
 800b29e:	bf00      	nop
 800b2a0:	e7fe      	b.n	800b2a0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b2a2:	f001 fe41 	bl	800cf28 <vPortValidateInterruptPriority>
	__asm volatile
 800b2a6:	f3ef 8211 	mrs	r2, BASEPRI
 800b2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ae:	f383 8811 	msr	BASEPRI, r3
 800b2b2:	f3bf 8f6f 	isb	sy
 800b2b6:	f3bf 8f4f 	dsb	sy
 800b2ba:	61ba      	str	r2, [r7, #24]
 800b2bc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b2be:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b2c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2c6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d02f      	beq.n	800b32e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b2d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b2d8:	68b9      	ldr	r1, [r7, #8]
 800b2da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b2dc:	f000 f89e 	bl	800b41c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2e2:	1e5a      	subs	r2, r3, #1
 800b2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b2e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b2ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2f0:	d112      	bne.n	800b318 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f4:	691b      	ldr	r3, [r3, #16]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d016      	beq.n	800b328 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2fc:	3310      	adds	r3, #16
 800b2fe:	4618      	mov	r0, r3
 800b300:	f000 fe16 	bl	800bf30 <xTaskRemoveFromEventList>
 800b304:	4603      	mov	r3, r0
 800b306:	2b00      	cmp	r3, #0
 800b308:	d00e      	beq.n	800b328 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d00b      	beq.n	800b328 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2201      	movs	r2, #1
 800b314:	601a      	str	r2, [r3, #0]
 800b316:	e007      	b.n	800b328 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b318:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b31c:	3301      	adds	r3, #1
 800b31e:	b2db      	uxtb	r3, r3
 800b320:	b25a      	sxtb	r2, r3
 800b322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b328:	2301      	movs	r3, #1
 800b32a:	637b      	str	r3, [r7, #52]	; 0x34
 800b32c:	e001      	b.n	800b332 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b32e:	2300      	movs	r3, #0
 800b330:	637b      	str	r3, [r7, #52]	; 0x34
 800b332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b334:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	f383 8811 	msr	BASEPRI, r3
}
 800b33c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b33e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b340:	4618      	mov	r0, r3
 800b342:	3738      	adds	r7, #56	; 0x38
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b086      	sub	sp, #24
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	60f8      	str	r0, [r7, #12]
 800b350:	60b9      	str	r1, [r7, #8]
 800b352:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b354:	2300      	movs	r3, #0
 800b356:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b35c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b362:	2b00      	cmp	r3, #0
 800b364:	d10d      	bne.n	800b382 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d14d      	bne.n	800b40a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	689b      	ldr	r3, [r3, #8]
 800b372:	4618      	mov	r0, r3
 800b374:	f000 ffbc 	bl	800c2f0 <xTaskPriorityDisinherit>
 800b378:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	2200      	movs	r2, #0
 800b37e:	609a      	str	r2, [r3, #8]
 800b380:	e043      	b.n	800b40a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d119      	bne.n	800b3bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	6858      	ldr	r0, [r3, #4]
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b390:	461a      	mov	r2, r3
 800b392:	68b9      	ldr	r1, [r7, #8]
 800b394:	f002 fb24 	bl	800d9e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	685a      	ldr	r2, [r3, #4]
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3a0:	441a      	add	r2, r3
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	685a      	ldr	r2, [r3, #4]
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	689b      	ldr	r3, [r3, #8]
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	d32b      	bcc.n	800b40a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	681a      	ldr	r2, [r3, #0]
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	605a      	str	r2, [r3, #4]
 800b3ba:	e026      	b.n	800b40a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	68d8      	ldr	r0, [r3, #12]
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3c4:	461a      	mov	r2, r3
 800b3c6:	68b9      	ldr	r1, [r7, #8]
 800b3c8:	f002 fb0a 	bl	800d9e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	68da      	ldr	r2, [r3, #12]
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3d4:	425b      	negs	r3, r3
 800b3d6:	441a      	add	r2, r3
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	68da      	ldr	r2, [r3, #12]
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	429a      	cmp	r2, r3
 800b3e6:	d207      	bcs.n	800b3f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	689a      	ldr	r2, [r3, #8]
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3f0:	425b      	negs	r3, r3
 800b3f2:	441a      	add	r2, r3
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2b02      	cmp	r3, #2
 800b3fc:	d105      	bne.n	800b40a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d002      	beq.n	800b40a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	3b01      	subs	r3, #1
 800b408:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b40a:	693b      	ldr	r3, [r7, #16]
 800b40c:	1c5a      	adds	r2, r3, #1
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b412:	697b      	ldr	r3, [r7, #20]
}
 800b414:	4618      	mov	r0, r3
 800b416:	3718      	adds	r7, #24
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}

0800b41c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b082      	sub	sp, #8
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
 800b424:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d018      	beq.n	800b460 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	68da      	ldr	r2, [r3, #12]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b436:	441a      	add	r2, r3
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	68da      	ldr	r2, [r3, #12]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	689b      	ldr	r3, [r3, #8]
 800b444:	429a      	cmp	r2, r3
 800b446:	d303      	bcc.n	800b450 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681a      	ldr	r2, [r3, #0]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	68d9      	ldr	r1, [r3, #12]
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b458:	461a      	mov	r2, r3
 800b45a:	6838      	ldr	r0, [r7, #0]
 800b45c:	f002 fac0 	bl	800d9e0 <memcpy>
	}
}
 800b460:	bf00      	nop
 800b462:	3708      	adds	r7, #8
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}

0800b468 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b470:	f001 fc78 	bl	800cd64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b47a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b47c:	e011      	b.n	800b4a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b482:	2b00      	cmp	r3, #0
 800b484:	d012      	beq.n	800b4ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	3324      	adds	r3, #36	; 0x24
 800b48a:	4618      	mov	r0, r3
 800b48c:	f000 fd50 	bl	800bf30 <xTaskRemoveFromEventList>
 800b490:	4603      	mov	r3, r0
 800b492:	2b00      	cmp	r3, #0
 800b494:	d001      	beq.n	800b49a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b496:	f000 fe27 	bl	800c0e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b49a:	7bfb      	ldrb	r3, [r7, #15]
 800b49c:	3b01      	subs	r3, #1
 800b49e:	b2db      	uxtb	r3, r3
 800b4a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b4a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	dce9      	bgt.n	800b47e <prvUnlockQueue+0x16>
 800b4aa:	e000      	b.n	800b4ae <prvUnlockQueue+0x46>
					break;
 800b4ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	22ff      	movs	r2, #255	; 0xff
 800b4b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b4b6:	f001 fc85 	bl	800cdc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b4ba:	f001 fc53 	bl	800cd64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b4c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b4c6:	e011      	b.n	800b4ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	691b      	ldr	r3, [r3, #16]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d012      	beq.n	800b4f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	3310      	adds	r3, #16
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f000 fd2b 	bl	800bf30 <xTaskRemoveFromEventList>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d001      	beq.n	800b4e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b4e0:	f000 fe02 	bl	800c0e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b4e4:	7bbb      	ldrb	r3, [r7, #14]
 800b4e6:	3b01      	subs	r3, #1
 800b4e8:	b2db      	uxtb	r3, r3
 800b4ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b4ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	dce9      	bgt.n	800b4c8 <prvUnlockQueue+0x60>
 800b4f4:	e000      	b.n	800b4f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b4f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	22ff      	movs	r2, #255	; 0xff
 800b4fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b500:	f001 fc60 	bl	800cdc4 <vPortExitCritical>
}
 800b504:	bf00      	nop
 800b506:	3710      	adds	r7, #16
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b084      	sub	sp, #16
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b514:	f001 fc26 	bl	800cd64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d102      	bne.n	800b526 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b520:	2301      	movs	r3, #1
 800b522:	60fb      	str	r3, [r7, #12]
 800b524:	e001      	b.n	800b52a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b526:	2300      	movs	r3, #0
 800b528:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b52a:	f001 fc4b 	bl	800cdc4 <vPortExitCritical>

	return xReturn;
 800b52e:	68fb      	ldr	r3, [r7, #12]
}
 800b530:	4618      	mov	r0, r3
 800b532:	3710      	adds	r7, #16
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}

0800b538 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b084      	sub	sp, #16
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b540:	f001 fc10 	bl	800cd64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d102      	bne.n	800b556 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b550:	2301      	movs	r3, #1
 800b552:	60fb      	str	r3, [r7, #12]
 800b554:	e001      	b.n	800b55a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b556:	2300      	movs	r3, #0
 800b558:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b55a:	f001 fc33 	bl	800cdc4 <vPortExitCritical>

	return xReturn;
 800b55e:	68fb      	ldr	r3, [r7, #12]
}
 800b560:	4618      	mov	r0, r3
 800b562:	3710      	adds	r7, #16
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}

0800b568 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b568:	b480      	push	{r7}
 800b56a:	b085      	sub	sp, #20
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b572:	2300      	movs	r3, #0
 800b574:	60fb      	str	r3, [r7, #12]
 800b576:	e014      	b.n	800b5a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b578:	4a0f      	ldr	r2, [pc, #60]	; (800b5b8 <vQueueAddToRegistry+0x50>)
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d10b      	bne.n	800b59c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b584:	490c      	ldr	r1, [pc, #48]	; (800b5b8 <vQueueAddToRegistry+0x50>)
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	683a      	ldr	r2, [r7, #0]
 800b58a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b58e:	4a0a      	ldr	r2, [pc, #40]	; (800b5b8 <vQueueAddToRegistry+0x50>)
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	00db      	lsls	r3, r3, #3
 800b594:	4413      	add	r3, r2
 800b596:	687a      	ldr	r2, [r7, #4]
 800b598:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b59a:	e006      	b.n	800b5aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	3301      	adds	r3, #1
 800b5a0:	60fb      	str	r3, [r7, #12]
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	2b07      	cmp	r3, #7
 800b5a6:	d9e7      	bls.n	800b578 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b5a8:	bf00      	nop
 800b5aa:	bf00      	nop
 800b5ac:	3714      	adds	r7, #20
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b4:	4770      	bx	lr
 800b5b6:	bf00      	nop
 800b5b8:	20004d64 	.word	0x20004d64

0800b5bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b086      	sub	sp, #24
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	60f8      	str	r0, [r7, #12]
 800b5c4:	60b9      	str	r1, [r7, #8]
 800b5c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b5cc:	f001 fbca 	bl	800cd64 <vPortEnterCritical>
 800b5d0:	697b      	ldr	r3, [r7, #20]
 800b5d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b5d6:	b25b      	sxtb	r3, r3
 800b5d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5dc:	d103      	bne.n	800b5e6 <vQueueWaitForMessageRestricted+0x2a>
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b5ec:	b25b      	sxtb	r3, r3
 800b5ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5f2:	d103      	bne.n	800b5fc <vQueueWaitForMessageRestricted+0x40>
 800b5f4:	697b      	ldr	r3, [r7, #20]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b5fc:	f001 fbe2 	bl	800cdc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b604:	2b00      	cmp	r3, #0
 800b606:	d106      	bne.n	800b616 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	3324      	adds	r3, #36	; 0x24
 800b60c:	687a      	ldr	r2, [r7, #4]
 800b60e:	68b9      	ldr	r1, [r7, #8]
 800b610:	4618      	mov	r0, r3
 800b612:	f000 fc61 	bl	800bed8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b616:	6978      	ldr	r0, [r7, #20]
 800b618:	f7ff ff26 	bl	800b468 <prvUnlockQueue>
	}
 800b61c:	bf00      	nop
 800b61e:	3718      	adds	r7, #24
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b624:	b580      	push	{r7, lr}
 800b626:	b08e      	sub	sp, #56	; 0x38
 800b628:	af04      	add	r7, sp, #16
 800b62a:	60f8      	str	r0, [r7, #12]
 800b62c:	60b9      	str	r1, [r7, #8]
 800b62e:	607a      	str	r2, [r7, #4]
 800b630:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b634:	2b00      	cmp	r3, #0
 800b636:	d10a      	bne.n	800b64e <xTaskCreateStatic+0x2a>
	__asm volatile
 800b638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b63c:	f383 8811 	msr	BASEPRI, r3
 800b640:	f3bf 8f6f 	isb	sy
 800b644:	f3bf 8f4f 	dsb	sy
 800b648:	623b      	str	r3, [r7, #32]
}
 800b64a:	bf00      	nop
 800b64c:	e7fe      	b.n	800b64c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b650:	2b00      	cmp	r3, #0
 800b652:	d10a      	bne.n	800b66a <xTaskCreateStatic+0x46>
	__asm volatile
 800b654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b658:	f383 8811 	msr	BASEPRI, r3
 800b65c:	f3bf 8f6f 	isb	sy
 800b660:	f3bf 8f4f 	dsb	sy
 800b664:	61fb      	str	r3, [r7, #28]
}
 800b666:	bf00      	nop
 800b668:	e7fe      	b.n	800b668 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b66a:	23bc      	movs	r3, #188	; 0xbc
 800b66c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	2bbc      	cmp	r3, #188	; 0xbc
 800b672:	d00a      	beq.n	800b68a <xTaskCreateStatic+0x66>
	__asm volatile
 800b674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b678:	f383 8811 	msr	BASEPRI, r3
 800b67c:	f3bf 8f6f 	isb	sy
 800b680:	f3bf 8f4f 	dsb	sy
 800b684:	61bb      	str	r3, [r7, #24]
}
 800b686:	bf00      	nop
 800b688:	e7fe      	b.n	800b688 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b68a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d01e      	beq.n	800b6d0 <xTaskCreateStatic+0xac>
 800b692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b694:	2b00      	cmp	r3, #0
 800b696:	d01b      	beq.n	800b6d0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b69a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b6a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a4:	2202      	movs	r2, #2
 800b6a6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	9303      	str	r3, [sp, #12]
 800b6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b0:	9302      	str	r3, [sp, #8]
 800b6b2:	f107 0314 	add.w	r3, r7, #20
 800b6b6:	9301      	str	r3, [sp, #4]
 800b6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ba:	9300      	str	r3, [sp, #0]
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	687a      	ldr	r2, [r7, #4]
 800b6c0:	68b9      	ldr	r1, [r7, #8]
 800b6c2:	68f8      	ldr	r0, [r7, #12]
 800b6c4:	f000 f850 	bl	800b768 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b6c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b6ca:	f000 f8f3 	bl	800b8b4 <prvAddNewTaskToReadyList>
 800b6ce:	e001      	b.n	800b6d4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b6d4:	697b      	ldr	r3, [r7, #20]
	}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3728      	adds	r7, #40	; 0x28
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}

0800b6de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b6de:	b580      	push	{r7, lr}
 800b6e0:	b08c      	sub	sp, #48	; 0x30
 800b6e2:	af04      	add	r7, sp, #16
 800b6e4:	60f8      	str	r0, [r7, #12]
 800b6e6:	60b9      	str	r1, [r7, #8]
 800b6e8:	603b      	str	r3, [r7, #0]
 800b6ea:	4613      	mov	r3, r2
 800b6ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b6ee:	88fb      	ldrh	r3, [r7, #6]
 800b6f0:	009b      	lsls	r3, r3, #2
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f001 fc58 	bl	800cfa8 <pvPortMalloc>
 800b6f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d00e      	beq.n	800b71e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b700:	20bc      	movs	r0, #188	; 0xbc
 800b702:	f001 fc51 	bl	800cfa8 <pvPortMalloc>
 800b706:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b708:	69fb      	ldr	r3, [r7, #28]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d003      	beq.n	800b716 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b70e:	69fb      	ldr	r3, [r7, #28]
 800b710:	697a      	ldr	r2, [r7, #20]
 800b712:	631a      	str	r2, [r3, #48]	; 0x30
 800b714:	e005      	b.n	800b722 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b716:	6978      	ldr	r0, [r7, #20]
 800b718:	f001 fd12 	bl	800d140 <vPortFree>
 800b71c:	e001      	b.n	800b722 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b71e:	2300      	movs	r3, #0
 800b720:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b722:	69fb      	ldr	r3, [r7, #28]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d017      	beq.n	800b758 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b728:	69fb      	ldr	r3, [r7, #28]
 800b72a:	2200      	movs	r2, #0
 800b72c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b730:	88fa      	ldrh	r2, [r7, #6]
 800b732:	2300      	movs	r3, #0
 800b734:	9303      	str	r3, [sp, #12]
 800b736:	69fb      	ldr	r3, [r7, #28]
 800b738:	9302      	str	r3, [sp, #8]
 800b73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b73c:	9301      	str	r3, [sp, #4]
 800b73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b740:	9300      	str	r3, [sp, #0]
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	68b9      	ldr	r1, [r7, #8]
 800b746:	68f8      	ldr	r0, [r7, #12]
 800b748:	f000 f80e 	bl	800b768 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b74c:	69f8      	ldr	r0, [r7, #28]
 800b74e:	f000 f8b1 	bl	800b8b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b752:	2301      	movs	r3, #1
 800b754:	61bb      	str	r3, [r7, #24]
 800b756:	e002      	b.n	800b75e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b758:	f04f 33ff 	mov.w	r3, #4294967295
 800b75c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b75e:	69bb      	ldr	r3, [r7, #24]
	}
 800b760:	4618      	mov	r0, r3
 800b762:	3720      	adds	r7, #32
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}

0800b768 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b088      	sub	sp, #32
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	60f8      	str	r0, [r7, #12]
 800b770:	60b9      	str	r1, [r7, #8]
 800b772:	607a      	str	r2, [r7, #4]
 800b774:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b778:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	009b      	lsls	r3, r3, #2
 800b77e:	461a      	mov	r2, r3
 800b780:	21a5      	movs	r1, #165	; 0xa5
 800b782:	f002 f93b 	bl	800d9fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b790:	3b01      	subs	r3, #1
 800b792:	009b      	lsls	r3, r3, #2
 800b794:	4413      	add	r3, r2
 800b796:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b798:	69bb      	ldr	r3, [r7, #24]
 800b79a:	f023 0307 	bic.w	r3, r3, #7
 800b79e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b7a0:	69bb      	ldr	r3, [r7, #24]
 800b7a2:	f003 0307 	and.w	r3, r3, #7
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d00a      	beq.n	800b7c0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ae:	f383 8811 	msr	BASEPRI, r3
 800b7b2:	f3bf 8f6f 	isb	sy
 800b7b6:	f3bf 8f4f 	dsb	sy
 800b7ba:	617b      	str	r3, [r7, #20]
}
 800b7bc:	bf00      	nop
 800b7be:	e7fe      	b.n	800b7be <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d01f      	beq.n	800b806 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	61fb      	str	r3, [r7, #28]
 800b7ca:	e012      	b.n	800b7f2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b7cc:	68ba      	ldr	r2, [r7, #8]
 800b7ce:	69fb      	ldr	r3, [r7, #28]
 800b7d0:	4413      	add	r3, r2
 800b7d2:	7819      	ldrb	r1, [r3, #0]
 800b7d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7d6:	69fb      	ldr	r3, [r7, #28]
 800b7d8:	4413      	add	r3, r2
 800b7da:	3334      	adds	r3, #52	; 0x34
 800b7dc:	460a      	mov	r2, r1
 800b7de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b7e0:	68ba      	ldr	r2, [r7, #8]
 800b7e2:	69fb      	ldr	r3, [r7, #28]
 800b7e4:	4413      	add	r3, r2
 800b7e6:	781b      	ldrb	r3, [r3, #0]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d006      	beq.n	800b7fa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b7ec:	69fb      	ldr	r3, [r7, #28]
 800b7ee:	3301      	adds	r3, #1
 800b7f0:	61fb      	str	r3, [r7, #28]
 800b7f2:	69fb      	ldr	r3, [r7, #28]
 800b7f4:	2b0f      	cmp	r3, #15
 800b7f6:	d9e9      	bls.n	800b7cc <prvInitialiseNewTask+0x64>
 800b7f8:	e000      	b.n	800b7fc <prvInitialiseNewTask+0x94>
			{
				break;
 800b7fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7fe:	2200      	movs	r2, #0
 800b800:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b804:	e003      	b.n	800b80e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b808:	2200      	movs	r2, #0
 800b80a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b810:	2b37      	cmp	r3, #55	; 0x37
 800b812:	d901      	bls.n	800b818 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b814:	2337      	movs	r3, #55	; 0x37
 800b816:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b81a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b81c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b820:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b822:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b826:	2200      	movs	r2, #0
 800b828:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b82c:	3304      	adds	r3, #4
 800b82e:	4618      	mov	r0, r3
 800b830:	f7ff f8be 	bl	800a9b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b836:	3318      	adds	r3, #24
 800b838:	4618      	mov	r0, r3
 800b83a:	f7ff f8b9 	bl	800a9b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b842:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b846:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b84c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b852:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b856:	2200      	movs	r2, #0
 800b858:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b85c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b85e:	2200      	movs	r2, #0
 800b860:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b866:	3354      	adds	r3, #84	; 0x54
 800b868:	2260      	movs	r2, #96	; 0x60
 800b86a:	2100      	movs	r1, #0
 800b86c:	4618      	mov	r0, r3
 800b86e:	f002 f8c5 	bl	800d9fc <memset>
 800b872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b874:	4a0c      	ldr	r2, [pc, #48]	; (800b8a8 <prvInitialiseNewTask+0x140>)
 800b876:	659a      	str	r2, [r3, #88]	; 0x58
 800b878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b87a:	4a0c      	ldr	r2, [pc, #48]	; (800b8ac <prvInitialiseNewTask+0x144>)
 800b87c:	65da      	str	r2, [r3, #92]	; 0x5c
 800b87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b880:	4a0b      	ldr	r2, [pc, #44]	; (800b8b0 <prvInitialiseNewTask+0x148>)
 800b882:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b884:	683a      	ldr	r2, [r7, #0]
 800b886:	68f9      	ldr	r1, [r7, #12]
 800b888:	69b8      	ldr	r0, [r7, #24]
 800b88a:	f001 f941 	bl	800cb10 <pxPortInitialiseStack>
 800b88e:	4602      	mov	r2, r0
 800b890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b892:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b896:	2b00      	cmp	r3, #0
 800b898:	d002      	beq.n	800b8a0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b89c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b89e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b8a0:	bf00      	nop
 800b8a2:	3720      	adds	r7, #32
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}
 800b8a8:	0800dd20 	.word	0x0800dd20
 800b8ac:	0800dd40 	.word	0x0800dd40
 800b8b0:	0800dd00 	.word	0x0800dd00

0800b8b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b082      	sub	sp, #8
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b8bc:	f001 fa52 	bl	800cd64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b8c0:	4b2d      	ldr	r3, [pc, #180]	; (800b978 <prvAddNewTaskToReadyList+0xc4>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	3301      	adds	r3, #1
 800b8c6:	4a2c      	ldr	r2, [pc, #176]	; (800b978 <prvAddNewTaskToReadyList+0xc4>)
 800b8c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b8ca:	4b2c      	ldr	r3, [pc, #176]	; (800b97c <prvAddNewTaskToReadyList+0xc8>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d109      	bne.n	800b8e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b8d2:	4a2a      	ldr	r2, [pc, #168]	; (800b97c <prvAddNewTaskToReadyList+0xc8>)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b8d8:	4b27      	ldr	r3, [pc, #156]	; (800b978 <prvAddNewTaskToReadyList+0xc4>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	2b01      	cmp	r3, #1
 800b8de:	d110      	bne.n	800b902 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b8e0:	f000 fc26 	bl	800c130 <prvInitialiseTaskLists>
 800b8e4:	e00d      	b.n	800b902 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b8e6:	4b26      	ldr	r3, [pc, #152]	; (800b980 <prvAddNewTaskToReadyList+0xcc>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d109      	bne.n	800b902 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b8ee:	4b23      	ldr	r3, [pc, #140]	; (800b97c <prvAddNewTaskToReadyList+0xc8>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	d802      	bhi.n	800b902 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b8fc:	4a1f      	ldr	r2, [pc, #124]	; (800b97c <prvAddNewTaskToReadyList+0xc8>)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b902:	4b20      	ldr	r3, [pc, #128]	; (800b984 <prvAddNewTaskToReadyList+0xd0>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	3301      	adds	r3, #1
 800b908:	4a1e      	ldr	r2, [pc, #120]	; (800b984 <prvAddNewTaskToReadyList+0xd0>)
 800b90a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b90c:	4b1d      	ldr	r3, [pc, #116]	; (800b984 <prvAddNewTaskToReadyList+0xd0>)
 800b90e:	681a      	ldr	r2, [r3, #0]
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b918:	4b1b      	ldr	r3, [pc, #108]	; (800b988 <prvAddNewTaskToReadyList+0xd4>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d903      	bls.n	800b928 <prvAddNewTaskToReadyList+0x74>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b924:	4a18      	ldr	r2, [pc, #96]	; (800b988 <prvAddNewTaskToReadyList+0xd4>)
 800b926:	6013      	str	r3, [r2, #0]
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b92c:	4613      	mov	r3, r2
 800b92e:	009b      	lsls	r3, r3, #2
 800b930:	4413      	add	r3, r2
 800b932:	009b      	lsls	r3, r3, #2
 800b934:	4a15      	ldr	r2, [pc, #84]	; (800b98c <prvAddNewTaskToReadyList+0xd8>)
 800b936:	441a      	add	r2, r3
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	3304      	adds	r3, #4
 800b93c:	4619      	mov	r1, r3
 800b93e:	4610      	mov	r0, r2
 800b940:	f7ff f843 	bl	800a9ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b944:	f001 fa3e 	bl	800cdc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b948:	4b0d      	ldr	r3, [pc, #52]	; (800b980 <prvAddNewTaskToReadyList+0xcc>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d00e      	beq.n	800b96e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b950:	4b0a      	ldr	r3, [pc, #40]	; (800b97c <prvAddNewTaskToReadyList+0xc8>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b95a:	429a      	cmp	r2, r3
 800b95c:	d207      	bcs.n	800b96e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b95e:	4b0c      	ldr	r3, [pc, #48]	; (800b990 <prvAddNewTaskToReadyList+0xdc>)
 800b960:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b964:	601a      	str	r2, [r3, #0]
 800b966:	f3bf 8f4f 	dsb	sy
 800b96a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b96e:	bf00      	nop
 800b970:	3708      	adds	r7, #8
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}
 800b976:	bf00      	nop
 800b978:	20000d04 	.word	0x20000d04
 800b97c:	20000830 	.word	0x20000830
 800b980:	20000d10 	.word	0x20000d10
 800b984:	20000d20 	.word	0x20000d20
 800b988:	20000d0c 	.word	0x20000d0c
 800b98c:	20000834 	.word	0x20000834
 800b990:	e000ed04 	.word	0xe000ed04

0800b994 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b994:	b580      	push	{r7, lr}
 800b996:	b084      	sub	sp, #16
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b99c:	2300      	movs	r3, #0
 800b99e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d017      	beq.n	800b9d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b9a6:	4b13      	ldr	r3, [pc, #76]	; (800b9f4 <vTaskDelay+0x60>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d00a      	beq.n	800b9c4 <vTaskDelay+0x30>
	__asm volatile
 800b9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9b2:	f383 8811 	msr	BASEPRI, r3
 800b9b6:	f3bf 8f6f 	isb	sy
 800b9ba:	f3bf 8f4f 	dsb	sy
 800b9be:	60bb      	str	r3, [r7, #8]
}
 800b9c0:	bf00      	nop
 800b9c2:	e7fe      	b.n	800b9c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b9c4:	f000 f88a 	bl	800badc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b9c8:	2100      	movs	r1, #0
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f000 fcfe 	bl	800c3cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b9d0:	f000 f892 	bl	800baf8 <xTaskResumeAll>
 800b9d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d107      	bne.n	800b9ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b9dc:	4b06      	ldr	r3, [pc, #24]	; (800b9f8 <vTaskDelay+0x64>)
 800b9de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9e2:	601a      	str	r2, [r3, #0]
 800b9e4:	f3bf 8f4f 	dsb	sy
 800b9e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b9ec:	bf00      	nop
 800b9ee:	3710      	adds	r7, #16
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}
 800b9f4:	20000d2c 	.word	0x20000d2c
 800b9f8:	e000ed04 	.word	0xe000ed04

0800b9fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b08a      	sub	sp, #40	; 0x28
 800ba00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ba02:	2300      	movs	r3, #0
 800ba04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ba06:	2300      	movs	r3, #0
 800ba08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ba0a:	463a      	mov	r2, r7
 800ba0c:	1d39      	adds	r1, r7, #4
 800ba0e:	f107 0308 	add.w	r3, r7, #8
 800ba12:	4618      	mov	r0, r3
 800ba14:	f7fe ff78 	bl	800a908 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ba18:	6839      	ldr	r1, [r7, #0]
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	68ba      	ldr	r2, [r7, #8]
 800ba1e:	9202      	str	r2, [sp, #8]
 800ba20:	9301      	str	r3, [sp, #4]
 800ba22:	2300      	movs	r3, #0
 800ba24:	9300      	str	r3, [sp, #0]
 800ba26:	2300      	movs	r3, #0
 800ba28:	460a      	mov	r2, r1
 800ba2a:	4924      	ldr	r1, [pc, #144]	; (800babc <vTaskStartScheduler+0xc0>)
 800ba2c:	4824      	ldr	r0, [pc, #144]	; (800bac0 <vTaskStartScheduler+0xc4>)
 800ba2e:	f7ff fdf9 	bl	800b624 <xTaskCreateStatic>
 800ba32:	4603      	mov	r3, r0
 800ba34:	4a23      	ldr	r2, [pc, #140]	; (800bac4 <vTaskStartScheduler+0xc8>)
 800ba36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ba38:	4b22      	ldr	r3, [pc, #136]	; (800bac4 <vTaskStartScheduler+0xc8>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d002      	beq.n	800ba46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ba40:	2301      	movs	r3, #1
 800ba42:	617b      	str	r3, [r7, #20]
 800ba44:	e001      	b.n	800ba4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ba46:	2300      	movs	r3, #0
 800ba48:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	2b01      	cmp	r3, #1
 800ba4e:	d102      	bne.n	800ba56 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ba50:	f000 fd10 	bl	800c474 <xTimerCreateTimerTask>
 800ba54:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	2b01      	cmp	r3, #1
 800ba5a:	d11b      	bne.n	800ba94 <vTaskStartScheduler+0x98>
	__asm volatile
 800ba5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba60:	f383 8811 	msr	BASEPRI, r3
 800ba64:	f3bf 8f6f 	isb	sy
 800ba68:	f3bf 8f4f 	dsb	sy
 800ba6c:	613b      	str	r3, [r7, #16]
}
 800ba6e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ba70:	4b15      	ldr	r3, [pc, #84]	; (800bac8 <vTaskStartScheduler+0xcc>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	3354      	adds	r3, #84	; 0x54
 800ba76:	4a15      	ldr	r2, [pc, #84]	; (800bacc <vTaskStartScheduler+0xd0>)
 800ba78:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ba7a:	4b15      	ldr	r3, [pc, #84]	; (800bad0 <vTaskStartScheduler+0xd4>)
 800ba7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ba80:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ba82:	4b14      	ldr	r3, [pc, #80]	; (800bad4 <vTaskStartScheduler+0xd8>)
 800ba84:	2201      	movs	r2, #1
 800ba86:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ba88:	4b13      	ldr	r3, [pc, #76]	; (800bad8 <vTaskStartScheduler+0xdc>)
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ba8e:	f001 f8c7 	bl	800cc20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ba92:	e00e      	b.n	800bab2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ba94:	697b      	ldr	r3, [r7, #20]
 800ba96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba9a:	d10a      	bne.n	800bab2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800ba9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa0:	f383 8811 	msr	BASEPRI, r3
 800baa4:	f3bf 8f6f 	isb	sy
 800baa8:	f3bf 8f4f 	dsb	sy
 800baac:	60fb      	str	r3, [r7, #12]
}
 800baae:	bf00      	nop
 800bab0:	e7fe      	b.n	800bab0 <vTaskStartScheduler+0xb4>
}
 800bab2:	bf00      	nop
 800bab4:	3718      	adds	r7, #24
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}
 800baba:	bf00      	nop
 800babc:	0800dca4 	.word	0x0800dca4
 800bac0:	0800c101 	.word	0x0800c101
 800bac4:	20000d28 	.word	0x20000d28
 800bac8:	20000830 	.word	0x20000830
 800bacc:	20000030 	.word	0x20000030
 800bad0:	20000d24 	.word	0x20000d24
 800bad4:	20000d10 	.word	0x20000d10
 800bad8:	20000d08 	.word	0x20000d08

0800badc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800badc:	b480      	push	{r7}
 800bade:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bae0:	4b04      	ldr	r3, [pc, #16]	; (800baf4 <vTaskSuspendAll+0x18>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	3301      	adds	r3, #1
 800bae6:	4a03      	ldr	r2, [pc, #12]	; (800baf4 <vTaskSuspendAll+0x18>)
 800bae8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800baea:	bf00      	nop
 800baec:	46bd      	mov	sp, r7
 800baee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf2:	4770      	bx	lr
 800baf4:	20000d2c 	.word	0x20000d2c

0800baf8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b084      	sub	sp, #16
 800bafc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bafe:	2300      	movs	r3, #0
 800bb00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bb02:	2300      	movs	r3, #0
 800bb04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bb06:	4b42      	ldr	r3, [pc, #264]	; (800bc10 <xTaskResumeAll+0x118>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d10a      	bne.n	800bb24 <xTaskResumeAll+0x2c>
	__asm volatile
 800bb0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb12:	f383 8811 	msr	BASEPRI, r3
 800bb16:	f3bf 8f6f 	isb	sy
 800bb1a:	f3bf 8f4f 	dsb	sy
 800bb1e:	603b      	str	r3, [r7, #0]
}
 800bb20:	bf00      	nop
 800bb22:	e7fe      	b.n	800bb22 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bb24:	f001 f91e 	bl	800cd64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bb28:	4b39      	ldr	r3, [pc, #228]	; (800bc10 <xTaskResumeAll+0x118>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	3b01      	subs	r3, #1
 800bb2e:	4a38      	ldr	r2, [pc, #224]	; (800bc10 <xTaskResumeAll+0x118>)
 800bb30:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb32:	4b37      	ldr	r3, [pc, #220]	; (800bc10 <xTaskResumeAll+0x118>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d162      	bne.n	800bc00 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bb3a:	4b36      	ldr	r3, [pc, #216]	; (800bc14 <xTaskResumeAll+0x11c>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d05e      	beq.n	800bc00 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bb42:	e02f      	b.n	800bba4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb44:	4b34      	ldr	r3, [pc, #208]	; (800bc18 <xTaskResumeAll+0x120>)
 800bb46:	68db      	ldr	r3, [r3, #12]
 800bb48:	68db      	ldr	r3, [r3, #12]
 800bb4a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	3318      	adds	r3, #24
 800bb50:	4618      	mov	r0, r3
 800bb52:	f7fe ff97 	bl	800aa84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	3304      	adds	r3, #4
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f7fe ff92 	bl	800aa84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb64:	4b2d      	ldr	r3, [pc, #180]	; (800bc1c <xTaskResumeAll+0x124>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	429a      	cmp	r2, r3
 800bb6a:	d903      	bls.n	800bb74 <xTaskResumeAll+0x7c>
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb70:	4a2a      	ldr	r2, [pc, #168]	; (800bc1c <xTaskResumeAll+0x124>)
 800bb72:	6013      	str	r3, [r2, #0]
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb78:	4613      	mov	r3, r2
 800bb7a:	009b      	lsls	r3, r3, #2
 800bb7c:	4413      	add	r3, r2
 800bb7e:	009b      	lsls	r3, r3, #2
 800bb80:	4a27      	ldr	r2, [pc, #156]	; (800bc20 <xTaskResumeAll+0x128>)
 800bb82:	441a      	add	r2, r3
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	3304      	adds	r3, #4
 800bb88:	4619      	mov	r1, r3
 800bb8a:	4610      	mov	r0, r2
 800bb8c:	f7fe ff1d 	bl	800a9ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb94:	4b23      	ldr	r3, [pc, #140]	; (800bc24 <xTaskResumeAll+0x12c>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d302      	bcc.n	800bba4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800bb9e:	4b22      	ldr	r3, [pc, #136]	; (800bc28 <xTaskResumeAll+0x130>)
 800bba0:	2201      	movs	r2, #1
 800bba2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bba4:	4b1c      	ldr	r3, [pc, #112]	; (800bc18 <xTaskResumeAll+0x120>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d1cb      	bne.n	800bb44 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d001      	beq.n	800bbb6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bbb2:	f000 fb5f 	bl	800c274 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bbb6:	4b1d      	ldr	r3, [pc, #116]	; (800bc2c <xTaskResumeAll+0x134>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d010      	beq.n	800bbe4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bbc2:	f000 f847 	bl	800bc54 <xTaskIncrementTick>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d002      	beq.n	800bbd2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bbcc:	4b16      	ldr	r3, [pc, #88]	; (800bc28 <xTaskResumeAll+0x130>)
 800bbce:	2201      	movs	r2, #1
 800bbd0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	3b01      	subs	r3, #1
 800bbd6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d1f1      	bne.n	800bbc2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bbde:	4b13      	ldr	r3, [pc, #76]	; (800bc2c <xTaskResumeAll+0x134>)
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bbe4:	4b10      	ldr	r3, [pc, #64]	; (800bc28 <xTaskResumeAll+0x130>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d009      	beq.n	800bc00 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bbec:	2301      	movs	r3, #1
 800bbee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bbf0:	4b0f      	ldr	r3, [pc, #60]	; (800bc30 <xTaskResumeAll+0x138>)
 800bbf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbf6:	601a      	str	r2, [r3, #0]
 800bbf8:	f3bf 8f4f 	dsb	sy
 800bbfc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bc00:	f001 f8e0 	bl	800cdc4 <vPortExitCritical>

	return xAlreadyYielded;
 800bc04:	68bb      	ldr	r3, [r7, #8]
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3710      	adds	r7, #16
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}
 800bc0e:	bf00      	nop
 800bc10:	20000d2c 	.word	0x20000d2c
 800bc14:	20000d04 	.word	0x20000d04
 800bc18:	20000cc4 	.word	0x20000cc4
 800bc1c:	20000d0c 	.word	0x20000d0c
 800bc20:	20000834 	.word	0x20000834
 800bc24:	20000830 	.word	0x20000830
 800bc28:	20000d18 	.word	0x20000d18
 800bc2c:	20000d14 	.word	0x20000d14
 800bc30:	e000ed04 	.word	0xe000ed04

0800bc34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bc34:	b480      	push	{r7}
 800bc36:	b083      	sub	sp, #12
 800bc38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bc3a:	4b05      	ldr	r3, [pc, #20]	; (800bc50 <xTaskGetTickCount+0x1c>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bc40:	687b      	ldr	r3, [r7, #4]
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	370c      	adds	r7, #12
 800bc46:	46bd      	mov	sp, r7
 800bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4c:	4770      	bx	lr
 800bc4e:	bf00      	nop
 800bc50:	20000d08 	.word	0x20000d08

0800bc54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b086      	sub	sp, #24
 800bc58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc5e:	4b4f      	ldr	r3, [pc, #316]	; (800bd9c <xTaskIncrementTick+0x148>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	f040 808f 	bne.w	800bd86 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bc68:	4b4d      	ldr	r3, [pc, #308]	; (800bda0 <xTaskIncrementTick+0x14c>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	3301      	adds	r3, #1
 800bc6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bc70:	4a4b      	ldr	r2, [pc, #300]	; (800bda0 <xTaskIncrementTick+0x14c>)
 800bc72:	693b      	ldr	r3, [r7, #16]
 800bc74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bc76:	693b      	ldr	r3, [r7, #16]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d120      	bne.n	800bcbe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bc7c:	4b49      	ldr	r3, [pc, #292]	; (800bda4 <xTaskIncrementTick+0x150>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d00a      	beq.n	800bc9c <xTaskIncrementTick+0x48>
	__asm volatile
 800bc86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc8a:	f383 8811 	msr	BASEPRI, r3
 800bc8e:	f3bf 8f6f 	isb	sy
 800bc92:	f3bf 8f4f 	dsb	sy
 800bc96:	603b      	str	r3, [r7, #0]
}
 800bc98:	bf00      	nop
 800bc9a:	e7fe      	b.n	800bc9a <xTaskIncrementTick+0x46>
 800bc9c:	4b41      	ldr	r3, [pc, #260]	; (800bda4 <xTaskIncrementTick+0x150>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	60fb      	str	r3, [r7, #12]
 800bca2:	4b41      	ldr	r3, [pc, #260]	; (800bda8 <xTaskIncrementTick+0x154>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	4a3f      	ldr	r2, [pc, #252]	; (800bda4 <xTaskIncrementTick+0x150>)
 800bca8:	6013      	str	r3, [r2, #0]
 800bcaa:	4a3f      	ldr	r2, [pc, #252]	; (800bda8 <xTaskIncrementTick+0x154>)
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	6013      	str	r3, [r2, #0]
 800bcb0:	4b3e      	ldr	r3, [pc, #248]	; (800bdac <xTaskIncrementTick+0x158>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	3301      	adds	r3, #1
 800bcb6:	4a3d      	ldr	r2, [pc, #244]	; (800bdac <xTaskIncrementTick+0x158>)
 800bcb8:	6013      	str	r3, [r2, #0]
 800bcba:	f000 fadb 	bl	800c274 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bcbe:	4b3c      	ldr	r3, [pc, #240]	; (800bdb0 <xTaskIncrementTick+0x15c>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	693a      	ldr	r2, [r7, #16]
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	d349      	bcc.n	800bd5c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bcc8:	4b36      	ldr	r3, [pc, #216]	; (800bda4 <xTaskIncrementTick+0x150>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d104      	bne.n	800bcdc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bcd2:	4b37      	ldr	r3, [pc, #220]	; (800bdb0 <xTaskIncrementTick+0x15c>)
 800bcd4:	f04f 32ff 	mov.w	r2, #4294967295
 800bcd8:	601a      	str	r2, [r3, #0]
					break;
 800bcda:	e03f      	b.n	800bd5c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcdc:	4b31      	ldr	r3, [pc, #196]	; (800bda4 <xTaskIncrementTick+0x150>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	68db      	ldr	r3, [r3, #12]
 800bce2:	68db      	ldr	r3, [r3, #12]
 800bce4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	685b      	ldr	r3, [r3, #4]
 800bcea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bcec:	693a      	ldr	r2, [r7, #16]
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	429a      	cmp	r2, r3
 800bcf2:	d203      	bcs.n	800bcfc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bcf4:	4a2e      	ldr	r2, [pc, #184]	; (800bdb0 <xTaskIncrementTick+0x15c>)
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bcfa:	e02f      	b.n	800bd5c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	3304      	adds	r3, #4
 800bd00:	4618      	mov	r0, r3
 800bd02:	f7fe febf 	bl	800aa84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d004      	beq.n	800bd18 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	3318      	adds	r3, #24
 800bd12:	4618      	mov	r0, r3
 800bd14:	f7fe feb6 	bl	800aa84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd1c:	4b25      	ldr	r3, [pc, #148]	; (800bdb4 <xTaskIncrementTick+0x160>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d903      	bls.n	800bd2c <xTaskIncrementTick+0xd8>
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd28:	4a22      	ldr	r2, [pc, #136]	; (800bdb4 <xTaskIncrementTick+0x160>)
 800bd2a:	6013      	str	r3, [r2, #0]
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd30:	4613      	mov	r3, r2
 800bd32:	009b      	lsls	r3, r3, #2
 800bd34:	4413      	add	r3, r2
 800bd36:	009b      	lsls	r3, r3, #2
 800bd38:	4a1f      	ldr	r2, [pc, #124]	; (800bdb8 <xTaskIncrementTick+0x164>)
 800bd3a:	441a      	add	r2, r3
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	3304      	adds	r3, #4
 800bd40:	4619      	mov	r1, r3
 800bd42:	4610      	mov	r0, r2
 800bd44:	f7fe fe41 	bl	800a9ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd4c:	4b1b      	ldr	r3, [pc, #108]	; (800bdbc <xTaskIncrementTick+0x168>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd52:	429a      	cmp	r2, r3
 800bd54:	d3b8      	bcc.n	800bcc8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bd56:	2301      	movs	r3, #1
 800bd58:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd5a:	e7b5      	b.n	800bcc8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bd5c:	4b17      	ldr	r3, [pc, #92]	; (800bdbc <xTaskIncrementTick+0x168>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd62:	4915      	ldr	r1, [pc, #84]	; (800bdb8 <xTaskIncrementTick+0x164>)
 800bd64:	4613      	mov	r3, r2
 800bd66:	009b      	lsls	r3, r3, #2
 800bd68:	4413      	add	r3, r2
 800bd6a:	009b      	lsls	r3, r3, #2
 800bd6c:	440b      	add	r3, r1
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	2b01      	cmp	r3, #1
 800bd72:	d901      	bls.n	800bd78 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bd74:	2301      	movs	r3, #1
 800bd76:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bd78:	4b11      	ldr	r3, [pc, #68]	; (800bdc0 <xTaskIncrementTick+0x16c>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d007      	beq.n	800bd90 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bd80:	2301      	movs	r3, #1
 800bd82:	617b      	str	r3, [r7, #20]
 800bd84:	e004      	b.n	800bd90 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bd86:	4b0f      	ldr	r3, [pc, #60]	; (800bdc4 <xTaskIncrementTick+0x170>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	3301      	adds	r3, #1
 800bd8c:	4a0d      	ldr	r2, [pc, #52]	; (800bdc4 <xTaskIncrementTick+0x170>)
 800bd8e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bd90:	697b      	ldr	r3, [r7, #20]
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3718      	adds	r7, #24
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
 800bd9a:	bf00      	nop
 800bd9c:	20000d2c 	.word	0x20000d2c
 800bda0:	20000d08 	.word	0x20000d08
 800bda4:	20000cbc 	.word	0x20000cbc
 800bda8:	20000cc0 	.word	0x20000cc0
 800bdac:	20000d1c 	.word	0x20000d1c
 800bdb0:	20000d24 	.word	0x20000d24
 800bdb4:	20000d0c 	.word	0x20000d0c
 800bdb8:	20000834 	.word	0x20000834
 800bdbc:	20000830 	.word	0x20000830
 800bdc0:	20000d18 	.word	0x20000d18
 800bdc4:	20000d14 	.word	0x20000d14

0800bdc8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b085      	sub	sp, #20
 800bdcc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bdce:	4b2a      	ldr	r3, [pc, #168]	; (800be78 <vTaskSwitchContext+0xb0>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d003      	beq.n	800bdde <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bdd6:	4b29      	ldr	r3, [pc, #164]	; (800be7c <vTaskSwitchContext+0xb4>)
 800bdd8:	2201      	movs	r2, #1
 800bdda:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bddc:	e046      	b.n	800be6c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800bdde:	4b27      	ldr	r3, [pc, #156]	; (800be7c <vTaskSwitchContext+0xb4>)
 800bde0:	2200      	movs	r2, #0
 800bde2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bde4:	4b26      	ldr	r3, [pc, #152]	; (800be80 <vTaskSwitchContext+0xb8>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	60fb      	str	r3, [r7, #12]
 800bdea:	e010      	b.n	800be0e <vTaskSwitchContext+0x46>
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d10a      	bne.n	800be08 <vTaskSwitchContext+0x40>
	__asm volatile
 800bdf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf6:	f383 8811 	msr	BASEPRI, r3
 800bdfa:	f3bf 8f6f 	isb	sy
 800bdfe:	f3bf 8f4f 	dsb	sy
 800be02:	607b      	str	r3, [r7, #4]
}
 800be04:	bf00      	nop
 800be06:	e7fe      	b.n	800be06 <vTaskSwitchContext+0x3e>
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	3b01      	subs	r3, #1
 800be0c:	60fb      	str	r3, [r7, #12]
 800be0e:	491d      	ldr	r1, [pc, #116]	; (800be84 <vTaskSwitchContext+0xbc>)
 800be10:	68fa      	ldr	r2, [r7, #12]
 800be12:	4613      	mov	r3, r2
 800be14:	009b      	lsls	r3, r3, #2
 800be16:	4413      	add	r3, r2
 800be18:	009b      	lsls	r3, r3, #2
 800be1a:	440b      	add	r3, r1
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d0e4      	beq.n	800bdec <vTaskSwitchContext+0x24>
 800be22:	68fa      	ldr	r2, [r7, #12]
 800be24:	4613      	mov	r3, r2
 800be26:	009b      	lsls	r3, r3, #2
 800be28:	4413      	add	r3, r2
 800be2a:	009b      	lsls	r3, r3, #2
 800be2c:	4a15      	ldr	r2, [pc, #84]	; (800be84 <vTaskSwitchContext+0xbc>)
 800be2e:	4413      	add	r3, r2
 800be30:	60bb      	str	r3, [r7, #8]
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	685b      	ldr	r3, [r3, #4]
 800be36:	685a      	ldr	r2, [r3, #4]
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	605a      	str	r2, [r3, #4]
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	685a      	ldr	r2, [r3, #4]
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	3308      	adds	r3, #8
 800be44:	429a      	cmp	r2, r3
 800be46:	d104      	bne.n	800be52 <vTaskSwitchContext+0x8a>
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	685b      	ldr	r3, [r3, #4]
 800be4c:	685a      	ldr	r2, [r3, #4]
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	605a      	str	r2, [r3, #4]
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	685b      	ldr	r3, [r3, #4]
 800be56:	68db      	ldr	r3, [r3, #12]
 800be58:	4a0b      	ldr	r2, [pc, #44]	; (800be88 <vTaskSwitchContext+0xc0>)
 800be5a:	6013      	str	r3, [r2, #0]
 800be5c:	4a08      	ldr	r2, [pc, #32]	; (800be80 <vTaskSwitchContext+0xb8>)
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800be62:	4b09      	ldr	r3, [pc, #36]	; (800be88 <vTaskSwitchContext+0xc0>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	3354      	adds	r3, #84	; 0x54
 800be68:	4a08      	ldr	r2, [pc, #32]	; (800be8c <vTaskSwitchContext+0xc4>)
 800be6a:	6013      	str	r3, [r2, #0]
}
 800be6c:	bf00      	nop
 800be6e:	3714      	adds	r7, #20
 800be70:	46bd      	mov	sp, r7
 800be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be76:	4770      	bx	lr
 800be78:	20000d2c 	.word	0x20000d2c
 800be7c:	20000d18 	.word	0x20000d18
 800be80:	20000d0c 	.word	0x20000d0c
 800be84:	20000834 	.word	0x20000834
 800be88:	20000830 	.word	0x20000830
 800be8c:	20000030 	.word	0x20000030

0800be90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b084      	sub	sp, #16
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
 800be98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d10a      	bne.n	800beb6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea4:	f383 8811 	msr	BASEPRI, r3
 800bea8:	f3bf 8f6f 	isb	sy
 800beac:	f3bf 8f4f 	dsb	sy
 800beb0:	60fb      	str	r3, [r7, #12]
}
 800beb2:	bf00      	nop
 800beb4:	e7fe      	b.n	800beb4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800beb6:	4b07      	ldr	r3, [pc, #28]	; (800bed4 <vTaskPlaceOnEventList+0x44>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	3318      	adds	r3, #24
 800bebc:	4619      	mov	r1, r3
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f7fe fda7 	bl	800aa12 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bec4:	2101      	movs	r1, #1
 800bec6:	6838      	ldr	r0, [r7, #0]
 800bec8:	f000 fa80 	bl	800c3cc <prvAddCurrentTaskToDelayedList>
}
 800becc:	bf00      	nop
 800bece:	3710      	adds	r7, #16
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}
 800bed4:	20000830 	.word	0x20000830

0800bed8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b086      	sub	sp, #24
 800bedc:	af00      	add	r7, sp, #0
 800bede:	60f8      	str	r0, [r7, #12]
 800bee0:	60b9      	str	r1, [r7, #8]
 800bee2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d10a      	bne.n	800bf00 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800beea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beee:	f383 8811 	msr	BASEPRI, r3
 800bef2:	f3bf 8f6f 	isb	sy
 800bef6:	f3bf 8f4f 	dsb	sy
 800befa:	617b      	str	r3, [r7, #20]
}
 800befc:	bf00      	nop
 800befe:	e7fe      	b.n	800befe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bf00:	4b0a      	ldr	r3, [pc, #40]	; (800bf2c <vTaskPlaceOnEventListRestricted+0x54>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	3318      	adds	r3, #24
 800bf06:	4619      	mov	r1, r3
 800bf08:	68f8      	ldr	r0, [r7, #12]
 800bf0a:	f7fe fd5e 	bl	800a9ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d002      	beq.n	800bf1a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bf14:	f04f 33ff 	mov.w	r3, #4294967295
 800bf18:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bf1a:	6879      	ldr	r1, [r7, #4]
 800bf1c:	68b8      	ldr	r0, [r7, #8]
 800bf1e:	f000 fa55 	bl	800c3cc <prvAddCurrentTaskToDelayedList>
	}
 800bf22:	bf00      	nop
 800bf24:	3718      	adds	r7, #24
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}
 800bf2a:	bf00      	nop
 800bf2c:	20000830 	.word	0x20000830

0800bf30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b086      	sub	sp, #24
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	68db      	ldr	r3, [r3, #12]
 800bf3c:	68db      	ldr	r3, [r3, #12]
 800bf3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bf40:	693b      	ldr	r3, [r7, #16]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d10a      	bne.n	800bf5c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bf46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf4a:	f383 8811 	msr	BASEPRI, r3
 800bf4e:	f3bf 8f6f 	isb	sy
 800bf52:	f3bf 8f4f 	dsb	sy
 800bf56:	60fb      	str	r3, [r7, #12]
}
 800bf58:	bf00      	nop
 800bf5a:	e7fe      	b.n	800bf5a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bf5c:	693b      	ldr	r3, [r7, #16]
 800bf5e:	3318      	adds	r3, #24
 800bf60:	4618      	mov	r0, r3
 800bf62:	f7fe fd8f 	bl	800aa84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf66:	4b1e      	ldr	r3, [pc, #120]	; (800bfe0 <xTaskRemoveFromEventList+0xb0>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d11d      	bne.n	800bfaa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bf6e:	693b      	ldr	r3, [r7, #16]
 800bf70:	3304      	adds	r3, #4
 800bf72:	4618      	mov	r0, r3
 800bf74:	f7fe fd86 	bl	800aa84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bf78:	693b      	ldr	r3, [r7, #16]
 800bf7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf7c:	4b19      	ldr	r3, [pc, #100]	; (800bfe4 <xTaskRemoveFromEventList+0xb4>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	429a      	cmp	r2, r3
 800bf82:	d903      	bls.n	800bf8c <xTaskRemoveFromEventList+0x5c>
 800bf84:	693b      	ldr	r3, [r7, #16]
 800bf86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf88:	4a16      	ldr	r2, [pc, #88]	; (800bfe4 <xTaskRemoveFromEventList+0xb4>)
 800bf8a:	6013      	str	r3, [r2, #0]
 800bf8c:	693b      	ldr	r3, [r7, #16]
 800bf8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf90:	4613      	mov	r3, r2
 800bf92:	009b      	lsls	r3, r3, #2
 800bf94:	4413      	add	r3, r2
 800bf96:	009b      	lsls	r3, r3, #2
 800bf98:	4a13      	ldr	r2, [pc, #76]	; (800bfe8 <xTaskRemoveFromEventList+0xb8>)
 800bf9a:	441a      	add	r2, r3
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	3304      	adds	r3, #4
 800bfa0:	4619      	mov	r1, r3
 800bfa2:	4610      	mov	r0, r2
 800bfa4:	f7fe fd11 	bl	800a9ca <vListInsertEnd>
 800bfa8:	e005      	b.n	800bfb6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	3318      	adds	r3, #24
 800bfae:	4619      	mov	r1, r3
 800bfb0:	480e      	ldr	r0, [pc, #56]	; (800bfec <xTaskRemoveFromEventList+0xbc>)
 800bfb2:	f7fe fd0a 	bl	800a9ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfba:	4b0d      	ldr	r3, [pc, #52]	; (800bff0 <xTaskRemoveFromEventList+0xc0>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d905      	bls.n	800bfd0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bfc8:	4b0a      	ldr	r3, [pc, #40]	; (800bff4 <xTaskRemoveFromEventList+0xc4>)
 800bfca:	2201      	movs	r2, #1
 800bfcc:	601a      	str	r2, [r3, #0]
 800bfce:	e001      	b.n	800bfd4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bfd4:	697b      	ldr	r3, [r7, #20]
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3718      	adds	r7, #24
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}
 800bfde:	bf00      	nop
 800bfe0:	20000d2c 	.word	0x20000d2c
 800bfe4:	20000d0c 	.word	0x20000d0c
 800bfe8:	20000834 	.word	0x20000834
 800bfec:	20000cc4 	.word	0x20000cc4
 800bff0:	20000830 	.word	0x20000830
 800bff4:	20000d18 	.word	0x20000d18

0800bff8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bff8:	b480      	push	{r7}
 800bffa:	b083      	sub	sp, #12
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c000:	4b06      	ldr	r3, [pc, #24]	; (800c01c <vTaskInternalSetTimeOutState+0x24>)
 800c002:	681a      	ldr	r2, [r3, #0]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c008:	4b05      	ldr	r3, [pc, #20]	; (800c020 <vTaskInternalSetTimeOutState+0x28>)
 800c00a:	681a      	ldr	r2, [r3, #0]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	605a      	str	r2, [r3, #4]
}
 800c010:	bf00      	nop
 800c012:	370c      	adds	r7, #12
 800c014:	46bd      	mov	sp, r7
 800c016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01a:	4770      	bx	lr
 800c01c:	20000d1c 	.word	0x20000d1c
 800c020:	20000d08 	.word	0x20000d08

0800c024 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b088      	sub	sp, #32
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d10a      	bne.n	800c04a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c038:	f383 8811 	msr	BASEPRI, r3
 800c03c:	f3bf 8f6f 	isb	sy
 800c040:	f3bf 8f4f 	dsb	sy
 800c044:	613b      	str	r3, [r7, #16]
}
 800c046:	bf00      	nop
 800c048:	e7fe      	b.n	800c048 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d10a      	bne.n	800c066 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c054:	f383 8811 	msr	BASEPRI, r3
 800c058:	f3bf 8f6f 	isb	sy
 800c05c:	f3bf 8f4f 	dsb	sy
 800c060:	60fb      	str	r3, [r7, #12]
}
 800c062:	bf00      	nop
 800c064:	e7fe      	b.n	800c064 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c066:	f000 fe7d 	bl	800cd64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c06a:	4b1d      	ldr	r3, [pc, #116]	; (800c0e0 <xTaskCheckForTimeOut+0xbc>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	685b      	ldr	r3, [r3, #4]
 800c074:	69ba      	ldr	r2, [r7, #24]
 800c076:	1ad3      	subs	r3, r2, r3
 800c078:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c082:	d102      	bne.n	800c08a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c084:	2300      	movs	r3, #0
 800c086:	61fb      	str	r3, [r7, #28]
 800c088:	e023      	b.n	800c0d2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681a      	ldr	r2, [r3, #0]
 800c08e:	4b15      	ldr	r3, [pc, #84]	; (800c0e4 <xTaskCheckForTimeOut+0xc0>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	429a      	cmp	r2, r3
 800c094:	d007      	beq.n	800c0a6 <xTaskCheckForTimeOut+0x82>
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	685b      	ldr	r3, [r3, #4]
 800c09a:	69ba      	ldr	r2, [r7, #24]
 800c09c:	429a      	cmp	r2, r3
 800c09e:	d302      	bcc.n	800c0a6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	61fb      	str	r3, [r7, #28]
 800c0a4:	e015      	b.n	800c0d2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	697a      	ldr	r2, [r7, #20]
 800c0ac:	429a      	cmp	r2, r3
 800c0ae:	d20b      	bcs.n	800c0c8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	681a      	ldr	r2, [r3, #0]
 800c0b4:	697b      	ldr	r3, [r7, #20]
 800c0b6:	1ad2      	subs	r2, r2, r3
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f7ff ff9b 	bl	800bff8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	61fb      	str	r3, [r7, #28]
 800c0c6:	e004      	b.n	800c0d2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c0d2:	f000 fe77 	bl	800cdc4 <vPortExitCritical>

	return xReturn;
 800c0d6:	69fb      	ldr	r3, [r7, #28]
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	3720      	adds	r7, #32
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}
 800c0e0:	20000d08 	.word	0x20000d08
 800c0e4:	20000d1c 	.word	0x20000d1c

0800c0e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c0ec:	4b03      	ldr	r3, [pc, #12]	; (800c0fc <vTaskMissedYield+0x14>)
 800c0ee:	2201      	movs	r2, #1
 800c0f0:	601a      	str	r2, [r3, #0]
}
 800c0f2:	bf00      	nop
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fa:	4770      	bx	lr
 800c0fc:	20000d18 	.word	0x20000d18

0800c100 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b082      	sub	sp, #8
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c108:	f000 f852 	bl	800c1b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c10c:	4b06      	ldr	r3, [pc, #24]	; (800c128 <prvIdleTask+0x28>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	2b01      	cmp	r3, #1
 800c112:	d9f9      	bls.n	800c108 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c114:	4b05      	ldr	r3, [pc, #20]	; (800c12c <prvIdleTask+0x2c>)
 800c116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c11a:	601a      	str	r2, [r3, #0]
 800c11c:	f3bf 8f4f 	dsb	sy
 800c120:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c124:	e7f0      	b.n	800c108 <prvIdleTask+0x8>
 800c126:	bf00      	nop
 800c128:	20000834 	.word	0x20000834
 800c12c:	e000ed04 	.word	0xe000ed04

0800c130 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b082      	sub	sp, #8
 800c134:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c136:	2300      	movs	r3, #0
 800c138:	607b      	str	r3, [r7, #4]
 800c13a:	e00c      	b.n	800c156 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c13c:	687a      	ldr	r2, [r7, #4]
 800c13e:	4613      	mov	r3, r2
 800c140:	009b      	lsls	r3, r3, #2
 800c142:	4413      	add	r3, r2
 800c144:	009b      	lsls	r3, r3, #2
 800c146:	4a12      	ldr	r2, [pc, #72]	; (800c190 <prvInitialiseTaskLists+0x60>)
 800c148:	4413      	add	r3, r2
 800c14a:	4618      	mov	r0, r3
 800c14c:	f7fe fc10 	bl	800a970 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	3301      	adds	r3, #1
 800c154:	607b      	str	r3, [r7, #4]
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2b37      	cmp	r3, #55	; 0x37
 800c15a:	d9ef      	bls.n	800c13c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c15c:	480d      	ldr	r0, [pc, #52]	; (800c194 <prvInitialiseTaskLists+0x64>)
 800c15e:	f7fe fc07 	bl	800a970 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c162:	480d      	ldr	r0, [pc, #52]	; (800c198 <prvInitialiseTaskLists+0x68>)
 800c164:	f7fe fc04 	bl	800a970 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c168:	480c      	ldr	r0, [pc, #48]	; (800c19c <prvInitialiseTaskLists+0x6c>)
 800c16a:	f7fe fc01 	bl	800a970 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c16e:	480c      	ldr	r0, [pc, #48]	; (800c1a0 <prvInitialiseTaskLists+0x70>)
 800c170:	f7fe fbfe 	bl	800a970 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c174:	480b      	ldr	r0, [pc, #44]	; (800c1a4 <prvInitialiseTaskLists+0x74>)
 800c176:	f7fe fbfb 	bl	800a970 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c17a:	4b0b      	ldr	r3, [pc, #44]	; (800c1a8 <prvInitialiseTaskLists+0x78>)
 800c17c:	4a05      	ldr	r2, [pc, #20]	; (800c194 <prvInitialiseTaskLists+0x64>)
 800c17e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c180:	4b0a      	ldr	r3, [pc, #40]	; (800c1ac <prvInitialiseTaskLists+0x7c>)
 800c182:	4a05      	ldr	r2, [pc, #20]	; (800c198 <prvInitialiseTaskLists+0x68>)
 800c184:	601a      	str	r2, [r3, #0]
}
 800c186:	bf00      	nop
 800c188:	3708      	adds	r7, #8
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}
 800c18e:	bf00      	nop
 800c190:	20000834 	.word	0x20000834
 800c194:	20000c94 	.word	0x20000c94
 800c198:	20000ca8 	.word	0x20000ca8
 800c19c:	20000cc4 	.word	0x20000cc4
 800c1a0:	20000cd8 	.word	0x20000cd8
 800c1a4:	20000cf0 	.word	0x20000cf0
 800c1a8:	20000cbc 	.word	0x20000cbc
 800c1ac:	20000cc0 	.word	0x20000cc0

0800c1b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b082      	sub	sp, #8
 800c1b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c1b6:	e019      	b.n	800c1ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c1b8:	f000 fdd4 	bl	800cd64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1bc:	4b10      	ldr	r3, [pc, #64]	; (800c200 <prvCheckTasksWaitingTermination+0x50>)
 800c1be:	68db      	ldr	r3, [r3, #12]
 800c1c0:	68db      	ldr	r3, [r3, #12]
 800c1c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	3304      	adds	r3, #4
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f7fe fc5b 	bl	800aa84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c1ce:	4b0d      	ldr	r3, [pc, #52]	; (800c204 <prvCheckTasksWaitingTermination+0x54>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	3b01      	subs	r3, #1
 800c1d4:	4a0b      	ldr	r2, [pc, #44]	; (800c204 <prvCheckTasksWaitingTermination+0x54>)
 800c1d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c1d8:	4b0b      	ldr	r3, [pc, #44]	; (800c208 <prvCheckTasksWaitingTermination+0x58>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	3b01      	subs	r3, #1
 800c1de:	4a0a      	ldr	r2, [pc, #40]	; (800c208 <prvCheckTasksWaitingTermination+0x58>)
 800c1e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c1e2:	f000 fdef 	bl	800cdc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f000 f810 	bl	800c20c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c1ec:	4b06      	ldr	r3, [pc, #24]	; (800c208 <prvCheckTasksWaitingTermination+0x58>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d1e1      	bne.n	800c1b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c1f4:	bf00      	nop
 800c1f6:	bf00      	nop
 800c1f8:	3708      	adds	r7, #8
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}
 800c1fe:	bf00      	nop
 800c200:	20000cd8 	.word	0x20000cd8
 800c204:	20000d04 	.word	0x20000d04
 800c208:	20000cec 	.word	0x20000cec

0800c20c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b084      	sub	sp, #16
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	3354      	adds	r3, #84	; 0x54
 800c218:	4618      	mov	r0, r3
 800c21a:	f001 fcaf 	bl	800db7c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c224:	2b00      	cmp	r3, #0
 800c226:	d108      	bne.n	800c23a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c22c:	4618      	mov	r0, r3
 800c22e:	f000 ff87 	bl	800d140 <vPortFree>
				vPortFree( pxTCB );
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f000 ff84 	bl	800d140 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c238:	e018      	b.n	800c26c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c240:	2b01      	cmp	r3, #1
 800c242:	d103      	bne.n	800c24c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f000 ff7b 	bl	800d140 <vPortFree>
	}
 800c24a:	e00f      	b.n	800c26c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c252:	2b02      	cmp	r3, #2
 800c254:	d00a      	beq.n	800c26c <prvDeleteTCB+0x60>
	__asm volatile
 800c256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c25a:	f383 8811 	msr	BASEPRI, r3
 800c25e:	f3bf 8f6f 	isb	sy
 800c262:	f3bf 8f4f 	dsb	sy
 800c266:	60fb      	str	r3, [r7, #12]
}
 800c268:	bf00      	nop
 800c26a:	e7fe      	b.n	800c26a <prvDeleteTCB+0x5e>
	}
 800c26c:	bf00      	nop
 800c26e:	3710      	adds	r7, #16
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}

0800c274 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c274:	b480      	push	{r7}
 800c276:	b083      	sub	sp, #12
 800c278:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c27a:	4b0c      	ldr	r3, [pc, #48]	; (800c2ac <prvResetNextTaskUnblockTime+0x38>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d104      	bne.n	800c28e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c284:	4b0a      	ldr	r3, [pc, #40]	; (800c2b0 <prvResetNextTaskUnblockTime+0x3c>)
 800c286:	f04f 32ff 	mov.w	r2, #4294967295
 800c28a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c28c:	e008      	b.n	800c2a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c28e:	4b07      	ldr	r3, [pc, #28]	; (800c2ac <prvResetNextTaskUnblockTime+0x38>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	68db      	ldr	r3, [r3, #12]
 800c294:	68db      	ldr	r3, [r3, #12]
 800c296:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	685b      	ldr	r3, [r3, #4]
 800c29c:	4a04      	ldr	r2, [pc, #16]	; (800c2b0 <prvResetNextTaskUnblockTime+0x3c>)
 800c29e:	6013      	str	r3, [r2, #0]
}
 800c2a0:	bf00      	nop
 800c2a2:	370c      	adds	r7, #12
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2aa:	4770      	bx	lr
 800c2ac:	20000cbc 	.word	0x20000cbc
 800c2b0:	20000d24 	.word	0x20000d24

0800c2b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b083      	sub	sp, #12
 800c2b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c2ba:	4b0b      	ldr	r3, [pc, #44]	; (800c2e8 <xTaskGetSchedulerState+0x34>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d102      	bne.n	800c2c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	607b      	str	r3, [r7, #4]
 800c2c6:	e008      	b.n	800c2da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c2c8:	4b08      	ldr	r3, [pc, #32]	; (800c2ec <xTaskGetSchedulerState+0x38>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d102      	bne.n	800c2d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c2d0:	2302      	movs	r3, #2
 800c2d2:	607b      	str	r3, [r7, #4]
 800c2d4:	e001      	b.n	800c2da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c2da:	687b      	ldr	r3, [r7, #4]
	}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	370c      	adds	r7, #12
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e6:	4770      	bx	lr
 800c2e8:	20000d10 	.word	0x20000d10
 800c2ec:	20000d2c 	.word	0x20000d2c

0800c2f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b086      	sub	sp, #24
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d056      	beq.n	800c3b4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c306:	4b2e      	ldr	r3, [pc, #184]	; (800c3c0 <xTaskPriorityDisinherit+0xd0>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	693a      	ldr	r2, [r7, #16]
 800c30c:	429a      	cmp	r2, r3
 800c30e:	d00a      	beq.n	800c326 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c314:	f383 8811 	msr	BASEPRI, r3
 800c318:	f3bf 8f6f 	isb	sy
 800c31c:	f3bf 8f4f 	dsb	sy
 800c320:	60fb      	str	r3, [r7, #12]
}
 800c322:	bf00      	nop
 800c324:	e7fe      	b.n	800c324 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c326:	693b      	ldr	r3, [r7, #16]
 800c328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d10a      	bne.n	800c344 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c332:	f383 8811 	msr	BASEPRI, r3
 800c336:	f3bf 8f6f 	isb	sy
 800c33a:	f3bf 8f4f 	dsb	sy
 800c33e:	60bb      	str	r3, [r7, #8]
}
 800c340:	bf00      	nop
 800c342:	e7fe      	b.n	800c342 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c344:	693b      	ldr	r3, [r7, #16]
 800c346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c348:	1e5a      	subs	r2, r3, #1
 800c34a:	693b      	ldr	r3, [r7, #16]
 800c34c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c34e:	693b      	ldr	r3, [r7, #16]
 800c350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c352:	693b      	ldr	r3, [r7, #16]
 800c354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c356:	429a      	cmp	r2, r3
 800c358:	d02c      	beq.n	800c3b4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c35a:	693b      	ldr	r3, [r7, #16]
 800c35c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d128      	bne.n	800c3b4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	3304      	adds	r3, #4
 800c366:	4618      	mov	r0, r3
 800c368:	f7fe fb8c 	bl	800aa84 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c36c:	693b      	ldr	r3, [r7, #16]
 800c36e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c374:	693b      	ldr	r3, [r7, #16]
 800c376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c378:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c37c:	693b      	ldr	r3, [r7, #16]
 800c37e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c384:	4b0f      	ldr	r3, [pc, #60]	; (800c3c4 <xTaskPriorityDisinherit+0xd4>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	429a      	cmp	r2, r3
 800c38a:	d903      	bls.n	800c394 <xTaskPriorityDisinherit+0xa4>
 800c38c:	693b      	ldr	r3, [r7, #16]
 800c38e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c390:	4a0c      	ldr	r2, [pc, #48]	; (800c3c4 <xTaskPriorityDisinherit+0xd4>)
 800c392:	6013      	str	r3, [r2, #0]
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c398:	4613      	mov	r3, r2
 800c39a:	009b      	lsls	r3, r3, #2
 800c39c:	4413      	add	r3, r2
 800c39e:	009b      	lsls	r3, r3, #2
 800c3a0:	4a09      	ldr	r2, [pc, #36]	; (800c3c8 <xTaskPriorityDisinherit+0xd8>)
 800c3a2:	441a      	add	r2, r3
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	3304      	adds	r3, #4
 800c3a8:	4619      	mov	r1, r3
 800c3aa:	4610      	mov	r0, r2
 800c3ac:	f7fe fb0d 	bl	800a9ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c3b4:	697b      	ldr	r3, [r7, #20]
	}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3718      	adds	r7, #24
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}
 800c3be:	bf00      	nop
 800c3c0:	20000830 	.word	0x20000830
 800c3c4:	20000d0c 	.word	0x20000d0c
 800c3c8:	20000834 	.word	0x20000834

0800c3cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b084      	sub	sp, #16
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c3d6:	4b21      	ldr	r3, [pc, #132]	; (800c45c <prvAddCurrentTaskToDelayedList+0x90>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c3dc:	4b20      	ldr	r3, [pc, #128]	; (800c460 <prvAddCurrentTaskToDelayedList+0x94>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	3304      	adds	r3, #4
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f7fe fb4e 	bl	800aa84 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3ee:	d10a      	bne.n	800c406 <prvAddCurrentTaskToDelayedList+0x3a>
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d007      	beq.n	800c406 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3f6:	4b1a      	ldr	r3, [pc, #104]	; (800c460 <prvAddCurrentTaskToDelayedList+0x94>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	3304      	adds	r3, #4
 800c3fc:	4619      	mov	r1, r3
 800c3fe:	4819      	ldr	r0, [pc, #100]	; (800c464 <prvAddCurrentTaskToDelayedList+0x98>)
 800c400:	f7fe fae3 	bl	800a9ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c404:	e026      	b.n	800c454 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c406:	68fa      	ldr	r2, [r7, #12]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	4413      	add	r3, r2
 800c40c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c40e:	4b14      	ldr	r3, [pc, #80]	; (800c460 <prvAddCurrentTaskToDelayedList+0x94>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	68ba      	ldr	r2, [r7, #8]
 800c414:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c416:	68ba      	ldr	r2, [r7, #8]
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	429a      	cmp	r2, r3
 800c41c:	d209      	bcs.n	800c432 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c41e:	4b12      	ldr	r3, [pc, #72]	; (800c468 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c420:	681a      	ldr	r2, [r3, #0]
 800c422:	4b0f      	ldr	r3, [pc, #60]	; (800c460 <prvAddCurrentTaskToDelayedList+0x94>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	3304      	adds	r3, #4
 800c428:	4619      	mov	r1, r3
 800c42a:	4610      	mov	r0, r2
 800c42c:	f7fe faf1 	bl	800aa12 <vListInsert>
}
 800c430:	e010      	b.n	800c454 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c432:	4b0e      	ldr	r3, [pc, #56]	; (800c46c <prvAddCurrentTaskToDelayedList+0xa0>)
 800c434:	681a      	ldr	r2, [r3, #0]
 800c436:	4b0a      	ldr	r3, [pc, #40]	; (800c460 <prvAddCurrentTaskToDelayedList+0x94>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	3304      	adds	r3, #4
 800c43c:	4619      	mov	r1, r3
 800c43e:	4610      	mov	r0, r2
 800c440:	f7fe fae7 	bl	800aa12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c444:	4b0a      	ldr	r3, [pc, #40]	; (800c470 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	68ba      	ldr	r2, [r7, #8]
 800c44a:	429a      	cmp	r2, r3
 800c44c:	d202      	bcs.n	800c454 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c44e:	4a08      	ldr	r2, [pc, #32]	; (800c470 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	6013      	str	r3, [r2, #0]
}
 800c454:	bf00      	nop
 800c456:	3710      	adds	r7, #16
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}
 800c45c:	20000d08 	.word	0x20000d08
 800c460:	20000830 	.word	0x20000830
 800c464:	20000cf0 	.word	0x20000cf0
 800c468:	20000cc0 	.word	0x20000cc0
 800c46c:	20000cbc 	.word	0x20000cbc
 800c470:	20000d24 	.word	0x20000d24

0800c474 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b08a      	sub	sp, #40	; 0x28
 800c478:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c47a:	2300      	movs	r3, #0
 800c47c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c47e:	f000 fb07 	bl	800ca90 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c482:	4b1c      	ldr	r3, [pc, #112]	; (800c4f4 <xTimerCreateTimerTask+0x80>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d021      	beq.n	800c4ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c48a:	2300      	movs	r3, #0
 800c48c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c48e:	2300      	movs	r3, #0
 800c490:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c492:	1d3a      	adds	r2, r7, #4
 800c494:	f107 0108 	add.w	r1, r7, #8
 800c498:	f107 030c 	add.w	r3, r7, #12
 800c49c:	4618      	mov	r0, r3
 800c49e:	f7fe fa4d 	bl	800a93c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c4a2:	6879      	ldr	r1, [r7, #4]
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	68fa      	ldr	r2, [r7, #12]
 800c4a8:	9202      	str	r2, [sp, #8]
 800c4aa:	9301      	str	r3, [sp, #4]
 800c4ac:	2302      	movs	r3, #2
 800c4ae:	9300      	str	r3, [sp, #0]
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	460a      	mov	r2, r1
 800c4b4:	4910      	ldr	r1, [pc, #64]	; (800c4f8 <xTimerCreateTimerTask+0x84>)
 800c4b6:	4811      	ldr	r0, [pc, #68]	; (800c4fc <xTimerCreateTimerTask+0x88>)
 800c4b8:	f7ff f8b4 	bl	800b624 <xTaskCreateStatic>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	4a10      	ldr	r2, [pc, #64]	; (800c500 <xTimerCreateTimerTask+0x8c>)
 800c4c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c4c2:	4b0f      	ldr	r3, [pc, #60]	; (800c500 <xTimerCreateTimerTask+0x8c>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d001      	beq.n	800c4ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d10a      	bne.n	800c4ea <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d8:	f383 8811 	msr	BASEPRI, r3
 800c4dc:	f3bf 8f6f 	isb	sy
 800c4e0:	f3bf 8f4f 	dsb	sy
 800c4e4:	613b      	str	r3, [r7, #16]
}
 800c4e6:	bf00      	nop
 800c4e8:	e7fe      	b.n	800c4e8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c4ea:	697b      	ldr	r3, [r7, #20]
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	3718      	adds	r7, #24
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd80      	pop	{r7, pc}
 800c4f4:	20000d60 	.word	0x20000d60
 800c4f8:	0800dcac 	.word	0x0800dcac
 800c4fc:	0800c639 	.word	0x0800c639
 800c500:	20000d64 	.word	0x20000d64

0800c504 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b08a      	sub	sp, #40	; 0x28
 800c508:	af00      	add	r7, sp, #0
 800c50a:	60f8      	str	r0, [r7, #12]
 800c50c:	60b9      	str	r1, [r7, #8]
 800c50e:	607a      	str	r2, [r7, #4]
 800c510:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c512:	2300      	movs	r3, #0
 800c514:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d10a      	bne.n	800c532 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c51c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c520:	f383 8811 	msr	BASEPRI, r3
 800c524:	f3bf 8f6f 	isb	sy
 800c528:	f3bf 8f4f 	dsb	sy
 800c52c:	623b      	str	r3, [r7, #32]
}
 800c52e:	bf00      	nop
 800c530:	e7fe      	b.n	800c530 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c532:	4b1a      	ldr	r3, [pc, #104]	; (800c59c <xTimerGenericCommand+0x98>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d02a      	beq.n	800c590 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	2b05      	cmp	r3, #5
 800c54a:	dc18      	bgt.n	800c57e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c54c:	f7ff feb2 	bl	800c2b4 <xTaskGetSchedulerState>
 800c550:	4603      	mov	r3, r0
 800c552:	2b02      	cmp	r3, #2
 800c554:	d109      	bne.n	800c56a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c556:	4b11      	ldr	r3, [pc, #68]	; (800c59c <xTimerGenericCommand+0x98>)
 800c558:	6818      	ldr	r0, [r3, #0]
 800c55a:	f107 0110 	add.w	r1, r7, #16
 800c55e:	2300      	movs	r3, #0
 800c560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c562:	f7fe fbf7 	bl	800ad54 <xQueueGenericSend>
 800c566:	6278      	str	r0, [r7, #36]	; 0x24
 800c568:	e012      	b.n	800c590 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c56a:	4b0c      	ldr	r3, [pc, #48]	; (800c59c <xTimerGenericCommand+0x98>)
 800c56c:	6818      	ldr	r0, [r3, #0]
 800c56e:	f107 0110 	add.w	r1, r7, #16
 800c572:	2300      	movs	r3, #0
 800c574:	2200      	movs	r2, #0
 800c576:	f7fe fbed 	bl	800ad54 <xQueueGenericSend>
 800c57a:	6278      	str	r0, [r7, #36]	; 0x24
 800c57c:	e008      	b.n	800c590 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c57e:	4b07      	ldr	r3, [pc, #28]	; (800c59c <xTimerGenericCommand+0x98>)
 800c580:	6818      	ldr	r0, [r3, #0]
 800c582:	f107 0110 	add.w	r1, r7, #16
 800c586:	2300      	movs	r3, #0
 800c588:	683a      	ldr	r2, [r7, #0]
 800c58a:	f7fe fce1 	bl	800af50 <xQueueGenericSendFromISR>
 800c58e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c592:	4618      	mov	r0, r3
 800c594:	3728      	adds	r7, #40	; 0x28
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}
 800c59a:	bf00      	nop
 800c59c:	20000d60 	.word	0x20000d60

0800c5a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b088      	sub	sp, #32
 800c5a4:	af02      	add	r7, sp, #8
 800c5a6:	6078      	str	r0, [r7, #4]
 800c5a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5aa:	4b22      	ldr	r3, [pc, #136]	; (800c634 <prvProcessExpiredTimer+0x94>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	68db      	ldr	r3, [r3, #12]
 800c5b0:	68db      	ldr	r3, [r3, #12]
 800c5b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c5b4:	697b      	ldr	r3, [r7, #20]
 800c5b6:	3304      	adds	r3, #4
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f7fe fa63 	bl	800aa84 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c5be:	697b      	ldr	r3, [r7, #20]
 800c5c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5c4:	f003 0304 	and.w	r3, r3, #4
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d022      	beq.n	800c612 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c5cc:	697b      	ldr	r3, [r7, #20]
 800c5ce:	699a      	ldr	r2, [r3, #24]
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	18d1      	adds	r1, r2, r3
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	683a      	ldr	r2, [r7, #0]
 800c5d8:	6978      	ldr	r0, [r7, #20]
 800c5da:	f000 f8d1 	bl	800c780 <prvInsertTimerInActiveList>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d01f      	beq.n	800c624 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	9300      	str	r3, [sp, #0]
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	687a      	ldr	r2, [r7, #4]
 800c5ec:	2100      	movs	r1, #0
 800c5ee:	6978      	ldr	r0, [r7, #20]
 800c5f0:	f7ff ff88 	bl	800c504 <xTimerGenericCommand>
 800c5f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c5f6:	693b      	ldr	r3, [r7, #16]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d113      	bne.n	800c624 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c600:	f383 8811 	msr	BASEPRI, r3
 800c604:	f3bf 8f6f 	isb	sy
 800c608:	f3bf 8f4f 	dsb	sy
 800c60c:	60fb      	str	r3, [r7, #12]
}
 800c60e:	bf00      	nop
 800c610:	e7fe      	b.n	800c610 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c618:	f023 0301 	bic.w	r3, r3, #1
 800c61c:	b2da      	uxtb	r2, r3
 800c61e:	697b      	ldr	r3, [r7, #20]
 800c620:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	6a1b      	ldr	r3, [r3, #32]
 800c628:	6978      	ldr	r0, [r7, #20]
 800c62a:	4798      	blx	r3
}
 800c62c:	bf00      	nop
 800c62e:	3718      	adds	r7, #24
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}
 800c634:	20000d58 	.word	0x20000d58

0800c638 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b084      	sub	sp, #16
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c640:	f107 0308 	add.w	r3, r7, #8
 800c644:	4618      	mov	r0, r3
 800c646:	f000 f857 	bl	800c6f8 <prvGetNextExpireTime>
 800c64a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	4619      	mov	r1, r3
 800c650:	68f8      	ldr	r0, [r7, #12]
 800c652:	f000 f803 	bl	800c65c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c656:	f000 f8d5 	bl	800c804 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c65a:	e7f1      	b.n	800c640 <prvTimerTask+0x8>

0800c65c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b084      	sub	sp, #16
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
 800c664:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c666:	f7ff fa39 	bl	800badc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c66a:	f107 0308 	add.w	r3, r7, #8
 800c66e:	4618      	mov	r0, r3
 800c670:	f000 f866 	bl	800c740 <prvSampleTimeNow>
 800c674:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d130      	bne.n	800c6de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d10a      	bne.n	800c698 <prvProcessTimerOrBlockTask+0x3c>
 800c682:	687a      	ldr	r2, [r7, #4]
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	429a      	cmp	r2, r3
 800c688:	d806      	bhi.n	800c698 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c68a:	f7ff fa35 	bl	800baf8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c68e:	68f9      	ldr	r1, [r7, #12]
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f7ff ff85 	bl	800c5a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c696:	e024      	b.n	800c6e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d008      	beq.n	800c6b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c69e:	4b13      	ldr	r3, [pc, #76]	; (800c6ec <prvProcessTimerOrBlockTask+0x90>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d101      	bne.n	800c6ac <prvProcessTimerOrBlockTask+0x50>
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	e000      	b.n	800c6ae <prvProcessTimerOrBlockTask+0x52>
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c6b0:	4b0f      	ldr	r3, [pc, #60]	; (800c6f0 <prvProcessTimerOrBlockTask+0x94>)
 800c6b2:	6818      	ldr	r0, [r3, #0]
 800c6b4:	687a      	ldr	r2, [r7, #4]
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	1ad3      	subs	r3, r2, r3
 800c6ba:	683a      	ldr	r2, [r7, #0]
 800c6bc:	4619      	mov	r1, r3
 800c6be:	f7fe ff7d 	bl	800b5bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c6c2:	f7ff fa19 	bl	800baf8 <xTaskResumeAll>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d10a      	bne.n	800c6e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c6cc:	4b09      	ldr	r3, [pc, #36]	; (800c6f4 <prvProcessTimerOrBlockTask+0x98>)
 800c6ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6d2:	601a      	str	r2, [r3, #0]
 800c6d4:	f3bf 8f4f 	dsb	sy
 800c6d8:	f3bf 8f6f 	isb	sy
}
 800c6dc:	e001      	b.n	800c6e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c6de:	f7ff fa0b 	bl	800baf8 <xTaskResumeAll>
}
 800c6e2:	bf00      	nop
 800c6e4:	3710      	adds	r7, #16
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}
 800c6ea:	bf00      	nop
 800c6ec:	20000d5c 	.word	0x20000d5c
 800c6f0:	20000d60 	.word	0x20000d60
 800c6f4:	e000ed04 	.word	0xe000ed04

0800c6f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b085      	sub	sp, #20
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c700:	4b0e      	ldr	r3, [pc, #56]	; (800c73c <prvGetNextExpireTime+0x44>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d101      	bne.n	800c70e <prvGetNextExpireTime+0x16>
 800c70a:	2201      	movs	r2, #1
 800c70c:	e000      	b.n	800c710 <prvGetNextExpireTime+0x18>
 800c70e:	2200      	movs	r2, #0
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d105      	bne.n	800c728 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c71c:	4b07      	ldr	r3, [pc, #28]	; (800c73c <prvGetNextExpireTime+0x44>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	68db      	ldr	r3, [r3, #12]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	60fb      	str	r3, [r7, #12]
 800c726:	e001      	b.n	800c72c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c728:	2300      	movs	r3, #0
 800c72a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c72c:	68fb      	ldr	r3, [r7, #12]
}
 800c72e:	4618      	mov	r0, r3
 800c730:	3714      	adds	r7, #20
 800c732:	46bd      	mov	sp, r7
 800c734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c738:	4770      	bx	lr
 800c73a:	bf00      	nop
 800c73c:	20000d58 	.word	0x20000d58

0800c740 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b084      	sub	sp, #16
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c748:	f7ff fa74 	bl	800bc34 <xTaskGetTickCount>
 800c74c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c74e:	4b0b      	ldr	r3, [pc, #44]	; (800c77c <prvSampleTimeNow+0x3c>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	68fa      	ldr	r2, [r7, #12]
 800c754:	429a      	cmp	r2, r3
 800c756:	d205      	bcs.n	800c764 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c758:	f000 f936 	bl	800c9c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2201      	movs	r2, #1
 800c760:	601a      	str	r2, [r3, #0]
 800c762:	e002      	b.n	800c76a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2200      	movs	r2, #0
 800c768:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c76a:	4a04      	ldr	r2, [pc, #16]	; (800c77c <prvSampleTimeNow+0x3c>)
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c770:	68fb      	ldr	r3, [r7, #12]
}
 800c772:	4618      	mov	r0, r3
 800c774:	3710      	adds	r7, #16
 800c776:	46bd      	mov	sp, r7
 800c778:	bd80      	pop	{r7, pc}
 800c77a:	bf00      	nop
 800c77c:	20000d68 	.word	0x20000d68

0800c780 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b086      	sub	sp, #24
 800c784:	af00      	add	r7, sp, #0
 800c786:	60f8      	str	r0, [r7, #12]
 800c788:	60b9      	str	r1, [r7, #8]
 800c78a:	607a      	str	r2, [r7, #4]
 800c78c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c78e:	2300      	movs	r3, #0
 800c790:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	68ba      	ldr	r2, [r7, #8]
 800c796:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	68fa      	ldr	r2, [r7, #12]
 800c79c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c79e:	68ba      	ldr	r2, [r7, #8]
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	d812      	bhi.n	800c7cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7a6:	687a      	ldr	r2, [r7, #4]
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	1ad2      	subs	r2, r2, r3
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	699b      	ldr	r3, [r3, #24]
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	d302      	bcc.n	800c7ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	617b      	str	r3, [r7, #20]
 800c7b8:	e01b      	b.n	800c7f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c7ba:	4b10      	ldr	r3, [pc, #64]	; (800c7fc <prvInsertTimerInActiveList+0x7c>)
 800c7bc:	681a      	ldr	r2, [r3, #0]
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	3304      	adds	r3, #4
 800c7c2:	4619      	mov	r1, r3
 800c7c4:	4610      	mov	r0, r2
 800c7c6:	f7fe f924 	bl	800aa12 <vListInsert>
 800c7ca:	e012      	b.n	800c7f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c7cc:	687a      	ldr	r2, [r7, #4]
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	429a      	cmp	r2, r3
 800c7d2:	d206      	bcs.n	800c7e2 <prvInsertTimerInActiveList+0x62>
 800c7d4:	68ba      	ldr	r2, [r7, #8]
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	d302      	bcc.n	800c7e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c7dc:	2301      	movs	r3, #1
 800c7de:	617b      	str	r3, [r7, #20]
 800c7e0:	e007      	b.n	800c7f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c7e2:	4b07      	ldr	r3, [pc, #28]	; (800c800 <prvInsertTimerInActiveList+0x80>)
 800c7e4:	681a      	ldr	r2, [r3, #0]
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	3304      	adds	r3, #4
 800c7ea:	4619      	mov	r1, r3
 800c7ec:	4610      	mov	r0, r2
 800c7ee:	f7fe f910 	bl	800aa12 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c7f2:	697b      	ldr	r3, [r7, #20]
}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	3718      	adds	r7, #24
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bd80      	pop	{r7, pc}
 800c7fc:	20000d5c 	.word	0x20000d5c
 800c800:	20000d58 	.word	0x20000d58

0800c804 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b08e      	sub	sp, #56	; 0x38
 800c808:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c80a:	e0ca      	b.n	800c9a2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	da18      	bge.n	800c844 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c812:	1d3b      	adds	r3, r7, #4
 800c814:	3304      	adds	r3, #4
 800c816:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d10a      	bne.n	800c834 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c822:	f383 8811 	msr	BASEPRI, r3
 800c826:	f3bf 8f6f 	isb	sy
 800c82a:	f3bf 8f4f 	dsb	sy
 800c82e:	61fb      	str	r3, [r7, #28]
}
 800c830:	bf00      	nop
 800c832:	e7fe      	b.n	800c832 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c83a:	6850      	ldr	r0, [r2, #4]
 800c83c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c83e:	6892      	ldr	r2, [r2, #8]
 800c840:	4611      	mov	r1, r2
 800c842:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2b00      	cmp	r3, #0
 800c848:	f2c0 80aa 	blt.w	800c9a0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c852:	695b      	ldr	r3, [r3, #20]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d004      	beq.n	800c862 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c85a:	3304      	adds	r3, #4
 800c85c:	4618      	mov	r0, r3
 800c85e:	f7fe f911 	bl	800aa84 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c862:	463b      	mov	r3, r7
 800c864:	4618      	mov	r0, r3
 800c866:	f7ff ff6b 	bl	800c740 <prvSampleTimeNow>
 800c86a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2b09      	cmp	r3, #9
 800c870:	f200 8097 	bhi.w	800c9a2 <prvProcessReceivedCommands+0x19e>
 800c874:	a201      	add	r2, pc, #4	; (adr r2, 800c87c <prvProcessReceivedCommands+0x78>)
 800c876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c87a:	bf00      	nop
 800c87c:	0800c8a5 	.word	0x0800c8a5
 800c880:	0800c8a5 	.word	0x0800c8a5
 800c884:	0800c8a5 	.word	0x0800c8a5
 800c888:	0800c919 	.word	0x0800c919
 800c88c:	0800c92d 	.word	0x0800c92d
 800c890:	0800c977 	.word	0x0800c977
 800c894:	0800c8a5 	.word	0x0800c8a5
 800c898:	0800c8a5 	.word	0x0800c8a5
 800c89c:	0800c919 	.word	0x0800c919
 800c8a0:	0800c92d 	.word	0x0800c92d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8aa:	f043 0301 	orr.w	r3, r3, #1
 800c8ae:	b2da      	uxtb	r2, r3
 800c8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c8b6:	68ba      	ldr	r2, [r7, #8]
 800c8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ba:	699b      	ldr	r3, [r3, #24]
 800c8bc:	18d1      	adds	r1, r2, r3
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8c4:	f7ff ff5c 	bl	800c780 <prvInsertTimerInActiveList>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d069      	beq.n	800c9a2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8d0:	6a1b      	ldr	r3, [r3, #32]
 800c8d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8dc:	f003 0304 	and.w	r3, r3, #4
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d05e      	beq.n	800c9a2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c8e4:	68ba      	ldr	r2, [r7, #8]
 800c8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8e8:	699b      	ldr	r3, [r3, #24]
 800c8ea:	441a      	add	r2, r3
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	9300      	str	r3, [sp, #0]
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	2100      	movs	r1, #0
 800c8f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8f6:	f7ff fe05 	bl	800c504 <xTimerGenericCommand>
 800c8fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c8fc:	6a3b      	ldr	r3, [r7, #32]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d14f      	bne.n	800c9a2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c902:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c906:	f383 8811 	msr	BASEPRI, r3
 800c90a:	f3bf 8f6f 	isb	sy
 800c90e:	f3bf 8f4f 	dsb	sy
 800c912:	61bb      	str	r3, [r7, #24]
}
 800c914:	bf00      	nop
 800c916:	e7fe      	b.n	800c916 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c91a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c91e:	f023 0301 	bic.w	r3, r3, #1
 800c922:	b2da      	uxtb	r2, r3
 800c924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c926:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c92a:	e03a      	b.n	800c9a2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c92e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c932:	f043 0301 	orr.w	r3, r3, #1
 800c936:	b2da      	uxtb	r2, r3
 800c938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c93a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c93e:	68ba      	ldr	r2, [r7, #8]
 800c940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c942:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c946:	699b      	ldr	r3, [r3, #24]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d10a      	bne.n	800c962 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c950:	f383 8811 	msr	BASEPRI, r3
 800c954:	f3bf 8f6f 	isb	sy
 800c958:	f3bf 8f4f 	dsb	sy
 800c95c:	617b      	str	r3, [r7, #20]
}
 800c95e:	bf00      	nop
 800c960:	e7fe      	b.n	800c960 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c964:	699a      	ldr	r2, [r3, #24]
 800c966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c968:	18d1      	adds	r1, r2, r3
 800c96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c96c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c96e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c970:	f7ff ff06 	bl	800c780 <prvInsertTimerInActiveList>
					break;
 800c974:	e015      	b.n	800c9a2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c978:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c97c:	f003 0302 	and.w	r3, r3, #2
 800c980:	2b00      	cmp	r3, #0
 800c982:	d103      	bne.n	800c98c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c984:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c986:	f000 fbdb 	bl	800d140 <vPortFree>
 800c98a:	e00a      	b.n	800c9a2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c98e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c992:	f023 0301 	bic.w	r3, r3, #1
 800c996:	b2da      	uxtb	r2, r3
 800c998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c99a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c99e:	e000      	b.n	800c9a2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c9a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c9a2:	4b08      	ldr	r3, [pc, #32]	; (800c9c4 <prvProcessReceivedCommands+0x1c0>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	1d39      	adds	r1, r7, #4
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f7fe fb6c 	bl	800b088 <xQueueReceive>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	f47f af2a 	bne.w	800c80c <prvProcessReceivedCommands+0x8>
	}
}
 800c9b8:	bf00      	nop
 800c9ba:	bf00      	nop
 800c9bc:	3730      	adds	r7, #48	; 0x30
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}
 800c9c2:	bf00      	nop
 800c9c4:	20000d60 	.word	0x20000d60

0800c9c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b088      	sub	sp, #32
 800c9cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c9ce:	e048      	b.n	800ca62 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c9d0:	4b2d      	ldr	r3, [pc, #180]	; (800ca88 <prvSwitchTimerLists+0xc0>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	68db      	ldr	r3, [r3, #12]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9da:	4b2b      	ldr	r3, [pc, #172]	; (800ca88 <prvSwitchTimerLists+0xc0>)
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	68db      	ldr	r3, [r3, #12]
 800c9e0:	68db      	ldr	r3, [r3, #12]
 800c9e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	3304      	adds	r3, #4
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f7fe f84b 	bl	800aa84 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	6a1b      	ldr	r3, [r3, #32]
 800c9f2:	68f8      	ldr	r0, [r7, #12]
 800c9f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9fc:	f003 0304 	and.w	r3, r3, #4
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d02e      	beq.n	800ca62 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	699b      	ldr	r3, [r3, #24]
 800ca08:	693a      	ldr	r2, [r7, #16]
 800ca0a:	4413      	add	r3, r2
 800ca0c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ca0e:	68ba      	ldr	r2, [r7, #8]
 800ca10:	693b      	ldr	r3, [r7, #16]
 800ca12:	429a      	cmp	r2, r3
 800ca14:	d90e      	bls.n	800ca34 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	68ba      	ldr	r2, [r7, #8]
 800ca1a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	68fa      	ldr	r2, [r7, #12]
 800ca20:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ca22:	4b19      	ldr	r3, [pc, #100]	; (800ca88 <prvSwitchTimerLists+0xc0>)
 800ca24:	681a      	ldr	r2, [r3, #0]
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	3304      	adds	r3, #4
 800ca2a:	4619      	mov	r1, r3
 800ca2c:	4610      	mov	r0, r2
 800ca2e:	f7fd fff0 	bl	800aa12 <vListInsert>
 800ca32:	e016      	b.n	800ca62 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ca34:	2300      	movs	r3, #0
 800ca36:	9300      	str	r3, [sp, #0]
 800ca38:	2300      	movs	r3, #0
 800ca3a:	693a      	ldr	r2, [r7, #16]
 800ca3c:	2100      	movs	r1, #0
 800ca3e:	68f8      	ldr	r0, [r7, #12]
 800ca40:	f7ff fd60 	bl	800c504 <xTimerGenericCommand>
 800ca44:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d10a      	bne.n	800ca62 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ca4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca50:	f383 8811 	msr	BASEPRI, r3
 800ca54:	f3bf 8f6f 	isb	sy
 800ca58:	f3bf 8f4f 	dsb	sy
 800ca5c:	603b      	str	r3, [r7, #0]
}
 800ca5e:	bf00      	nop
 800ca60:	e7fe      	b.n	800ca60 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ca62:	4b09      	ldr	r3, [pc, #36]	; (800ca88 <prvSwitchTimerLists+0xc0>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d1b1      	bne.n	800c9d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ca6c:	4b06      	ldr	r3, [pc, #24]	; (800ca88 <prvSwitchTimerLists+0xc0>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ca72:	4b06      	ldr	r3, [pc, #24]	; (800ca8c <prvSwitchTimerLists+0xc4>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	4a04      	ldr	r2, [pc, #16]	; (800ca88 <prvSwitchTimerLists+0xc0>)
 800ca78:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ca7a:	4a04      	ldr	r2, [pc, #16]	; (800ca8c <prvSwitchTimerLists+0xc4>)
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	6013      	str	r3, [r2, #0]
}
 800ca80:	bf00      	nop
 800ca82:	3718      	adds	r7, #24
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}
 800ca88:	20000d58 	.word	0x20000d58
 800ca8c:	20000d5c 	.word	0x20000d5c

0800ca90 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b082      	sub	sp, #8
 800ca94:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ca96:	f000 f965 	bl	800cd64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ca9a:	4b15      	ldr	r3, [pc, #84]	; (800caf0 <prvCheckForValidListAndQueue+0x60>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d120      	bne.n	800cae4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800caa2:	4814      	ldr	r0, [pc, #80]	; (800caf4 <prvCheckForValidListAndQueue+0x64>)
 800caa4:	f7fd ff64 	bl	800a970 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800caa8:	4813      	ldr	r0, [pc, #76]	; (800caf8 <prvCheckForValidListAndQueue+0x68>)
 800caaa:	f7fd ff61 	bl	800a970 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800caae:	4b13      	ldr	r3, [pc, #76]	; (800cafc <prvCheckForValidListAndQueue+0x6c>)
 800cab0:	4a10      	ldr	r2, [pc, #64]	; (800caf4 <prvCheckForValidListAndQueue+0x64>)
 800cab2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cab4:	4b12      	ldr	r3, [pc, #72]	; (800cb00 <prvCheckForValidListAndQueue+0x70>)
 800cab6:	4a10      	ldr	r2, [pc, #64]	; (800caf8 <prvCheckForValidListAndQueue+0x68>)
 800cab8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800caba:	2300      	movs	r3, #0
 800cabc:	9300      	str	r3, [sp, #0]
 800cabe:	4b11      	ldr	r3, [pc, #68]	; (800cb04 <prvCheckForValidListAndQueue+0x74>)
 800cac0:	4a11      	ldr	r2, [pc, #68]	; (800cb08 <prvCheckForValidListAndQueue+0x78>)
 800cac2:	2110      	movs	r1, #16
 800cac4:	200a      	movs	r0, #10
 800cac6:	f7fe f86f 	bl	800aba8 <xQueueGenericCreateStatic>
 800caca:	4603      	mov	r3, r0
 800cacc:	4a08      	ldr	r2, [pc, #32]	; (800caf0 <prvCheckForValidListAndQueue+0x60>)
 800cace:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cad0:	4b07      	ldr	r3, [pc, #28]	; (800caf0 <prvCheckForValidListAndQueue+0x60>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d005      	beq.n	800cae4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cad8:	4b05      	ldr	r3, [pc, #20]	; (800caf0 <prvCheckForValidListAndQueue+0x60>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	490b      	ldr	r1, [pc, #44]	; (800cb0c <prvCheckForValidListAndQueue+0x7c>)
 800cade:	4618      	mov	r0, r3
 800cae0:	f7fe fd42 	bl	800b568 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cae4:	f000 f96e 	bl	800cdc4 <vPortExitCritical>
}
 800cae8:	bf00      	nop
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}
 800caee:	bf00      	nop
 800caf0:	20000d60 	.word	0x20000d60
 800caf4:	20000d30 	.word	0x20000d30
 800caf8:	20000d44 	.word	0x20000d44
 800cafc:	20000d58 	.word	0x20000d58
 800cb00:	20000d5c 	.word	0x20000d5c
 800cb04:	20000e0c 	.word	0x20000e0c
 800cb08:	20000d6c 	.word	0x20000d6c
 800cb0c:	0800dcb4 	.word	0x0800dcb4

0800cb10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cb10:	b480      	push	{r7}
 800cb12:	b085      	sub	sp, #20
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	60f8      	str	r0, [r7, #12]
 800cb18:	60b9      	str	r1, [r7, #8]
 800cb1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	3b04      	subs	r3, #4
 800cb20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cb28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	3b04      	subs	r3, #4
 800cb2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	f023 0201 	bic.w	r2, r3, #1
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	3b04      	subs	r3, #4
 800cb3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cb40:	4a0c      	ldr	r2, [pc, #48]	; (800cb74 <pxPortInitialiseStack+0x64>)
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	3b14      	subs	r3, #20
 800cb4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cb4c:	687a      	ldr	r2, [r7, #4]
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	3b04      	subs	r3, #4
 800cb56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	f06f 0202 	mvn.w	r2, #2
 800cb5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	3b20      	subs	r3, #32
 800cb64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cb66:	68fb      	ldr	r3, [r7, #12]
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3714      	adds	r7, #20
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb72:	4770      	bx	lr
 800cb74:	0800cb79 	.word	0x0800cb79

0800cb78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cb78:	b480      	push	{r7}
 800cb7a:	b085      	sub	sp, #20
 800cb7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cb82:	4b12      	ldr	r3, [pc, #72]	; (800cbcc <prvTaskExitError+0x54>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb8a:	d00a      	beq.n	800cba2 <prvTaskExitError+0x2a>
	__asm volatile
 800cb8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb90:	f383 8811 	msr	BASEPRI, r3
 800cb94:	f3bf 8f6f 	isb	sy
 800cb98:	f3bf 8f4f 	dsb	sy
 800cb9c:	60fb      	str	r3, [r7, #12]
}
 800cb9e:	bf00      	nop
 800cba0:	e7fe      	b.n	800cba0 <prvTaskExitError+0x28>
	__asm volatile
 800cba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba6:	f383 8811 	msr	BASEPRI, r3
 800cbaa:	f3bf 8f6f 	isb	sy
 800cbae:	f3bf 8f4f 	dsb	sy
 800cbb2:	60bb      	str	r3, [r7, #8]
}
 800cbb4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cbb6:	bf00      	nop
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d0fc      	beq.n	800cbb8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cbbe:	bf00      	nop
 800cbc0:	bf00      	nop
 800cbc2:	3714      	adds	r7, #20
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbca:	4770      	bx	lr
 800cbcc:	2000002c 	.word	0x2000002c

0800cbd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cbd0:	4b07      	ldr	r3, [pc, #28]	; (800cbf0 <pxCurrentTCBConst2>)
 800cbd2:	6819      	ldr	r1, [r3, #0]
 800cbd4:	6808      	ldr	r0, [r1, #0]
 800cbd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbda:	f380 8809 	msr	PSP, r0
 800cbde:	f3bf 8f6f 	isb	sy
 800cbe2:	f04f 0000 	mov.w	r0, #0
 800cbe6:	f380 8811 	msr	BASEPRI, r0
 800cbea:	4770      	bx	lr
 800cbec:	f3af 8000 	nop.w

0800cbf0 <pxCurrentTCBConst2>:
 800cbf0:	20000830 	.word	0x20000830
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cbf4:	bf00      	nop
 800cbf6:	bf00      	nop

0800cbf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cbf8:	4808      	ldr	r0, [pc, #32]	; (800cc1c <prvPortStartFirstTask+0x24>)
 800cbfa:	6800      	ldr	r0, [r0, #0]
 800cbfc:	6800      	ldr	r0, [r0, #0]
 800cbfe:	f380 8808 	msr	MSP, r0
 800cc02:	f04f 0000 	mov.w	r0, #0
 800cc06:	f380 8814 	msr	CONTROL, r0
 800cc0a:	b662      	cpsie	i
 800cc0c:	b661      	cpsie	f
 800cc0e:	f3bf 8f4f 	dsb	sy
 800cc12:	f3bf 8f6f 	isb	sy
 800cc16:	df00      	svc	0
 800cc18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cc1a:	bf00      	nop
 800cc1c:	e000ed08 	.word	0xe000ed08

0800cc20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b086      	sub	sp, #24
 800cc24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cc26:	4b46      	ldr	r3, [pc, #280]	; (800cd40 <xPortStartScheduler+0x120>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	4a46      	ldr	r2, [pc, #280]	; (800cd44 <xPortStartScheduler+0x124>)
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	d10a      	bne.n	800cc46 <xPortStartScheduler+0x26>
	__asm volatile
 800cc30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc34:	f383 8811 	msr	BASEPRI, r3
 800cc38:	f3bf 8f6f 	isb	sy
 800cc3c:	f3bf 8f4f 	dsb	sy
 800cc40:	613b      	str	r3, [r7, #16]
}
 800cc42:	bf00      	nop
 800cc44:	e7fe      	b.n	800cc44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cc46:	4b3e      	ldr	r3, [pc, #248]	; (800cd40 <xPortStartScheduler+0x120>)
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	4a3f      	ldr	r2, [pc, #252]	; (800cd48 <xPortStartScheduler+0x128>)
 800cc4c:	4293      	cmp	r3, r2
 800cc4e:	d10a      	bne.n	800cc66 <xPortStartScheduler+0x46>
	__asm volatile
 800cc50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc54:	f383 8811 	msr	BASEPRI, r3
 800cc58:	f3bf 8f6f 	isb	sy
 800cc5c:	f3bf 8f4f 	dsb	sy
 800cc60:	60fb      	str	r3, [r7, #12]
}
 800cc62:	bf00      	nop
 800cc64:	e7fe      	b.n	800cc64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cc66:	4b39      	ldr	r3, [pc, #228]	; (800cd4c <xPortStartScheduler+0x12c>)
 800cc68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cc6a:	697b      	ldr	r3, [r7, #20]
 800cc6c:	781b      	ldrb	r3, [r3, #0]
 800cc6e:	b2db      	uxtb	r3, r3
 800cc70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cc72:	697b      	ldr	r3, [r7, #20]
 800cc74:	22ff      	movs	r2, #255	; 0xff
 800cc76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cc78:	697b      	ldr	r3, [r7, #20]
 800cc7a:	781b      	ldrb	r3, [r3, #0]
 800cc7c:	b2db      	uxtb	r3, r3
 800cc7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cc80:	78fb      	ldrb	r3, [r7, #3]
 800cc82:	b2db      	uxtb	r3, r3
 800cc84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cc88:	b2da      	uxtb	r2, r3
 800cc8a:	4b31      	ldr	r3, [pc, #196]	; (800cd50 <xPortStartScheduler+0x130>)
 800cc8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cc8e:	4b31      	ldr	r3, [pc, #196]	; (800cd54 <xPortStartScheduler+0x134>)
 800cc90:	2207      	movs	r2, #7
 800cc92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cc94:	e009      	b.n	800ccaa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cc96:	4b2f      	ldr	r3, [pc, #188]	; (800cd54 <xPortStartScheduler+0x134>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	3b01      	subs	r3, #1
 800cc9c:	4a2d      	ldr	r2, [pc, #180]	; (800cd54 <xPortStartScheduler+0x134>)
 800cc9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cca0:	78fb      	ldrb	r3, [r7, #3]
 800cca2:	b2db      	uxtb	r3, r3
 800cca4:	005b      	lsls	r3, r3, #1
 800cca6:	b2db      	uxtb	r3, r3
 800cca8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ccaa:	78fb      	ldrb	r3, [r7, #3]
 800ccac:	b2db      	uxtb	r3, r3
 800ccae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccb2:	2b80      	cmp	r3, #128	; 0x80
 800ccb4:	d0ef      	beq.n	800cc96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ccb6:	4b27      	ldr	r3, [pc, #156]	; (800cd54 <xPortStartScheduler+0x134>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f1c3 0307 	rsb	r3, r3, #7
 800ccbe:	2b04      	cmp	r3, #4
 800ccc0:	d00a      	beq.n	800ccd8 <xPortStartScheduler+0xb8>
	__asm volatile
 800ccc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc6:	f383 8811 	msr	BASEPRI, r3
 800ccca:	f3bf 8f6f 	isb	sy
 800ccce:	f3bf 8f4f 	dsb	sy
 800ccd2:	60bb      	str	r3, [r7, #8]
}
 800ccd4:	bf00      	nop
 800ccd6:	e7fe      	b.n	800ccd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ccd8:	4b1e      	ldr	r3, [pc, #120]	; (800cd54 <xPortStartScheduler+0x134>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	021b      	lsls	r3, r3, #8
 800ccde:	4a1d      	ldr	r2, [pc, #116]	; (800cd54 <xPortStartScheduler+0x134>)
 800cce0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cce2:	4b1c      	ldr	r3, [pc, #112]	; (800cd54 <xPortStartScheduler+0x134>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ccea:	4a1a      	ldr	r2, [pc, #104]	; (800cd54 <xPortStartScheduler+0x134>)
 800ccec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	b2da      	uxtb	r2, r3
 800ccf2:	697b      	ldr	r3, [r7, #20]
 800ccf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ccf6:	4b18      	ldr	r3, [pc, #96]	; (800cd58 <xPortStartScheduler+0x138>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	4a17      	ldr	r2, [pc, #92]	; (800cd58 <xPortStartScheduler+0x138>)
 800ccfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cd00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cd02:	4b15      	ldr	r3, [pc, #84]	; (800cd58 <xPortStartScheduler+0x138>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	4a14      	ldr	r2, [pc, #80]	; (800cd58 <xPortStartScheduler+0x138>)
 800cd08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cd0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cd0e:	f000 f8dd 	bl	800cecc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cd12:	4b12      	ldr	r3, [pc, #72]	; (800cd5c <xPortStartScheduler+0x13c>)
 800cd14:	2200      	movs	r2, #0
 800cd16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cd18:	f000 f8fc 	bl	800cf14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cd1c:	4b10      	ldr	r3, [pc, #64]	; (800cd60 <xPortStartScheduler+0x140>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	4a0f      	ldr	r2, [pc, #60]	; (800cd60 <xPortStartScheduler+0x140>)
 800cd22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cd26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cd28:	f7ff ff66 	bl	800cbf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cd2c:	f7ff f84c 	bl	800bdc8 <vTaskSwitchContext>
	prvTaskExitError();
 800cd30:	f7ff ff22 	bl	800cb78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cd34:	2300      	movs	r3, #0
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	3718      	adds	r7, #24
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}
 800cd3e:	bf00      	nop
 800cd40:	e000ed00 	.word	0xe000ed00
 800cd44:	410fc271 	.word	0x410fc271
 800cd48:	410fc270 	.word	0x410fc270
 800cd4c:	e000e400 	.word	0xe000e400
 800cd50:	20000e5c 	.word	0x20000e5c
 800cd54:	20000e60 	.word	0x20000e60
 800cd58:	e000ed20 	.word	0xe000ed20
 800cd5c:	2000002c 	.word	0x2000002c
 800cd60:	e000ef34 	.word	0xe000ef34

0800cd64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cd64:	b480      	push	{r7}
 800cd66:	b083      	sub	sp, #12
 800cd68:	af00      	add	r7, sp, #0
	__asm volatile
 800cd6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd6e:	f383 8811 	msr	BASEPRI, r3
 800cd72:	f3bf 8f6f 	isb	sy
 800cd76:	f3bf 8f4f 	dsb	sy
 800cd7a:	607b      	str	r3, [r7, #4]
}
 800cd7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cd7e:	4b0f      	ldr	r3, [pc, #60]	; (800cdbc <vPortEnterCritical+0x58>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	3301      	adds	r3, #1
 800cd84:	4a0d      	ldr	r2, [pc, #52]	; (800cdbc <vPortEnterCritical+0x58>)
 800cd86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cd88:	4b0c      	ldr	r3, [pc, #48]	; (800cdbc <vPortEnterCritical+0x58>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	2b01      	cmp	r3, #1
 800cd8e:	d10f      	bne.n	800cdb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cd90:	4b0b      	ldr	r3, [pc, #44]	; (800cdc0 <vPortEnterCritical+0x5c>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	b2db      	uxtb	r3, r3
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d00a      	beq.n	800cdb0 <vPortEnterCritical+0x4c>
	__asm volatile
 800cd9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd9e:	f383 8811 	msr	BASEPRI, r3
 800cda2:	f3bf 8f6f 	isb	sy
 800cda6:	f3bf 8f4f 	dsb	sy
 800cdaa:	603b      	str	r3, [r7, #0]
}
 800cdac:	bf00      	nop
 800cdae:	e7fe      	b.n	800cdae <vPortEnterCritical+0x4a>
	}
}
 800cdb0:	bf00      	nop
 800cdb2:	370c      	adds	r7, #12
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdba:	4770      	bx	lr
 800cdbc:	2000002c 	.word	0x2000002c
 800cdc0:	e000ed04 	.word	0xe000ed04

0800cdc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	b083      	sub	sp, #12
 800cdc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cdca:	4b12      	ldr	r3, [pc, #72]	; (800ce14 <vPortExitCritical+0x50>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d10a      	bne.n	800cde8 <vPortExitCritical+0x24>
	__asm volatile
 800cdd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd6:	f383 8811 	msr	BASEPRI, r3
 800cdda:	f3bf 8f6f 	isb	sy
 800cdde:	f3bf 8f4f 	dsb	sy
 800cde2:	607b      	str	r3, [r7, #4]
}
 800cde4:	bf00      	nop
 800cde6:	e7fe      	b.n	800cde6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cde8:	4b0a      	ldr	r3, [pc, #40]	; (800ce14 <vPortExitCritical+0x50>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	3b01      	subs	r3, #1
 800cdee:	4a09      	ldr	r2, [pc, #36]	; (800ce14 <vPortExitCritical+0x50>)
 800cdf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cdf2:	4b08      	ldr	r3, [pc, #32]	; (800ce14 <vPortExitCritical+0x50>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d105      	bne.n	800ce06 <vPortExitCritical+0x42>
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	f383 8811 	msr	BASEPRI, r3
}
 800ce04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ce06:	bf00      	nop
 800ce08:	370c      	adds	r7, #12
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce10:	4770      	bx	lr
 800ce12:	bf00      	nop
 800ce14:	2000002c 	.word	0x2000002c
	...

0800ce20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ce20:	f3ef 8009 	mrs	r0, PSP
 800ce24:	f3bf 8f6f 	isb	sy
 800ce28:	4b15      	ldr	r3, [pc, #84]	; (800ce80 <pxCurrentTCBConst>)
 800ce2a:	681a      	ldr	r2, [r3, #0]
 800ce2c:	f01e 0f10 	tst.w	lr, #16
 800ce30:	bf08      	it	eq
 800ce32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ce36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce3a:	6010      	str	r0, [r2, #0]
 800ce3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ce40:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ce44:	f380 8811 	msr	BASEPRI, r0
 800ce48:	f3bf 8f4f 	dsb	sy
 800ce4c:	f3bf 8f6f 	isb	sy
 800ce50:	f7fe ffba 	bl	800bdc8 <vTaskSwitchContext>
 800ce54:	f04f 0000 	mov.w	r0, #0
 800ce58:	f380 8811 	msr	BASEPRI, r0
 800ce5c:	bc09      	pop	{r0, r3}
 800ce5e:	6819      	ldr	r1, [r3, #0]
 800ce60:	6808      	ldr	r0, [r1, #0]
 800ce62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce66:	f01e 0f10 	tst.w	lr, #16
 800ce6a:	bf08      	it	eq
 800ce6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ce70:	f380 8809 	msr	PSP, r0
 800ce74:	f3bf 8f6f 	isb	sy
 800ce78:	4770      	bx	lr
 800ce7a:	bf00      	nop
 800ce7c:	f3af 8000 	nop.w

0800ce80 <pxCurrentTCBConst>:
 800ce80:	20000830 	.word	0x20000830
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ce84:	bf00      	nop
 800ce86:	bf00      	nop

0800ce88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b082      	sub	sp, #8
 800ce8c:	af00      	add	r7, sp, #0
	__asm volatile
 800ce8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce92:	f383 8811 	msr	BASEPRI, r3
 800ce96:	f3bf 8f6f 	isb	sy
 800ce9a:	f3bf 8f4f 	dsb	sy
 800ce9e:	607b      	str	r3, [r7, #4]
}
 800cea0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cea2:	f7fe fed7 	bl	800bc54 <xTaskIncrementTick>
 800cea6:	4603      	mov	r3, r0
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d003      	beq.n	800ceb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ceac:	4b06      	ldr	r3, [pc, #24]	; (800cec8 <xPortSysTickHandler+0x40>)
 800ceae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ceb2:	601a      	str	r2, [r3, #0]
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	f383 8811 	msr	BASEPRI, r3
}
 800cebe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cec0:	bf00      	nop
 800cec2:	3708      	adds	r7, #8
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}
 800cec8:	e000ed04 	.word	0xe000ed04

0800cecc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cecc:	b480      	push	{r7}
 800cece:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ced0:	4b0b      	ldr	r3, [pc, #44]	; (800cf00 <vPortSetupTimerInterrupt+0x34>)
 800ced2:	2200      	movs	r2, #0
 800ced4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ced6:	4b0b      	ldr	r3, [pc, #44]	; (800cf04 <vPortSetupTimerInterrupt+0x38>)
 800ced8:	2200      	movs	r2, #0
 800ceda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cedc:	4b0a      	ldr	r3, [pc, #40]	; (800cf08 <vPortSetupTimerInterrupt+0x3c>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	4a0a      	ldr	r2, [pc, #40]	; (800cf0c <vPortSetupTimerInterrupt+0x40>)
 800cee2:	fba2 2303 	umull	r2, r3, r2, r3
 800cee6:	099b      	lsrs	r3, r3, #6
 800cee8:	4a09      	ldr	r2, [pc, #36]	; (800cf10 <vPortSetupTimerInterrupt+0x44>)
 800ceea:	3b01      	subs	r3, #1
 800ceec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ceee:	4b04      	ldr	r3, [pc, #16]	; (800cf00 <vPortSetupTimerInterrupt+0x34>)
 800cef0:	2207      	movs	r2, #7
 800cef2:	601a      	str	r2, [r3, #0]
}
 800cef4:	bf00      	nop
 800cef6:	46bd      	mov	sp, r7
 800cef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefc:	4770      	bx	lr
 800cefe:	bf00      	nop
 800cf00:	e000e010 	.word	0xe000e010
 800cf04:	e000e018 	.word	0xe000e018
 800cf08:	20000000 	.word	0x20000000
 800cf0c:	10624dd3 	.word	0x10624dd3
 800cf10:	e000e014 	.word	0xe000e014

0800cf14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cf14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cf24 <vPortEnableVFP+0x10>
 800cf18:	6801      	ldr	r1, [r0, #0]
 800cf1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cf1e:	6001      	str	r1, [r0, #0]
 800cf20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cf22:	bf00      	nop
 800cf24:	e000ed88 	.word	0xe000ed88

0800cf28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cf28:	b480      	push	{r7}
 800cf2a:	b085      	sub	sp, #20
 800cf2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cf2e:	f3ef 8305 	mrs	r3, IPSR
 800cf32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	2b0f      	cmp	r3, #15
 800cf38:	d914      	bls.n	800cf64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cf3a:	4a17      	ldr	r2, [pc, #92]	; (800cf98 <vPortValidateInterruptPriority+0x70>)
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	4413      	add	r3, r2
 800cf40:	781b      	ldrb	r3, [r3, #0]
 800cf42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cf44:	4b15      	ldr	r3, [pc, #84]	; (800cf9c <vPortValidateInterruptPriority+0x74>)
 800cf46:	781b      	ldrb	r3, [r3, #0]
 800cf48:	7afa      	ldrb	r2, [r7, #11]
 800cf4a:	429a      	cmp	r2, r3
 800cf4c:	d20a      	bcs.n	800cf64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cf4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf52:	f383 8811 	msr	BASEPRI, r3
 800cf56:	f3bf 8f6f 	isb	sy
 800cf5a:	f3bf 8f4f 	dsb	sy
 800cf5e:	607b      	str	r3, [r7, #4]
}
 800cf60:	bf00      	nop
 800cf62:	e7fe      	b.n	800cf62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cf64:	4b0e      	ldr	r3, [pc, #56]	; (800cfa0 <vPortValidateInterruptPriority+0x78>)
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cf6c:	4b0d      	ldr	r3, [pc, #52]	; (800cfa4 <vPortValidateInterruptPriority+0x7c>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	429a      	cmp	r2, r3
 800cf72:	d90a      	bls.n	800cf8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cf74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf78:	f383 8811 	msr	BASEPRI, r3
 800cf7c:	f3bf 8f6f 	isb	sy
 800cf80:	f3bf 8f4f 	dsb	sy
 800cf84:	603b      	str	r3, [r7, #0]
}
 800cf86:	bf00      	nop
 800cf88:	e7fe      	b.n	800cf88 <vPortValidateInterruptPriority+0x60>
	}
 800cf8a:	bf00      	nop
 800cf8c:	3714      	adds	r7, #20
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf94:	4770      	bx	lr
 800cf96:	bf00      	nop
 800cf98:	e000e3f0 	.word	0xe000e3f0
 800cf9c:	20000e5c 	.word	0x20000e5c
 800cfa0:	e000ed0c 	.word	0xe000ed0c
 800cfa4:	20000e60 	.word	0x20000e60

0800cfa8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b08a      	sub	sp, #40	; 0x28
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cfb4:	f7fe fd92 	bl	800badc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cfb8:	4b5b      	ldr	r3, [pc, #364]	; (800d128 <pvPortMalloc+0x180>)
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d101      	bne.n	800cfc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cfc0:	f000 f920 	bl	800d204 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cfc4:	4b59      	ldr	r3, [pc, #356]	; (800d12c <pvPortMalloc+0x184>)
 800cfc6:	681a      	ldr	r2, [r3, #0]
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	4013      	ands	r3, r2
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	f040 8093 	bne.w	800d0f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d01d      	beq.n	800d014 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cfd8:	2208      	movs	r2, #8
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	4413      	add	r3, r2
 800cfde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f003 0307 	and.w	r3, r3, #7
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d014      	beq.n	800d014 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	f023 0307 	bic.w	r3, r3, #7
 800cff0:	3308      	adds	r3, #8
 800cff2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f003 0307 	and.w	r3, r3, #7
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d00a      	beq.n	800d014 <pvPortMalloc+0x6c>
	__asm volatile
 800cffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d002:	f383 8811 	msr	BASEPRI, r3
 800d006:	f3bf 8f6f 	isb	sy
 800d00a:	f3bf 8f4f 	dsb	sy
 800d00e:	617b      	str	r3, [r7, #20]
}
 800d010:	bf00      	nop
 800d012:	e7fe      	b.n	800d012 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d06e      	beq.n	800d0f8 <pvPortMalloc+0x150>
 800d01a:	4b45      	ldr	r3, [pc, #276]	; (800d130 <pvPortMalloc+0x188>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	687a      	ldr	r2, [r7, #4]
 800d020:	429a      	cmp	r2, r3
 800d022:	d869      	bhi.n	800d0f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d024:	4b43      	ldr	r3, [pc, #268]	; (800d134 <pvPortMalloc+0x18c>)
 800d026:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d028:	4b42      	ldr	r3, [pc, #264]	; (800d134 <pvPortMalloc+0x18c>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d02e:	e004      	b.n	800d03a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d032:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d03c:	685b      	ldr	r3, [r3, #4]
 800d03e:	687a      	ldr	r2, [r7, #4]
 800d040:	429a      	cmp	r2, r3
 800d042:	d903      	bls.n	800d04c <pvPortMalloc+0xa4>
 800d044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d1f1      	bne.n	800d030 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d04c:	4b36      	ldr	r3, [pc, #216]	; (800d128 <pvPortMalloc+0x180>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d052:	429a      	cmp	r2, r3
 800d054:	d050      	beq.n	800d0f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d056:	6a3b      	ldr	r3, [r7, #32]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	2208      	movs	r2, #8
 800d05c:	4413      	add	r3, r2
 800d05e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d062:	681a      	ldr	r2, [r3, #0]
 800d064:	6a3b      	ldr	r3, [r7, #32]
 800d066:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d06a:	685a      	ldr	r2, [r3, #4]
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	1ad2      	subs	r2, r2, r3
 800d070:	2308      	movs	r3, #8
 800d072:	005b      	lsls	r3, r3, #1
 800d074:	429a      	cmp	r2, r3
 800d076:	d91f      	bls.n	800d0b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	4413      	add	r3, r2
 800d07e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d080:	69bb      	ldr	r3, [r7, #24]
 800d082:	f003 0307 	and.w	r3, r3, #7
 800d086:	2b00      	cmp	r3, #0
 800d088:	d00a      	beq.n	800d0a0 <pvPortMalloc+0xf8>
	__asm volatile
 800d08a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d08e:	f383 8811 	msr	BASEPRI, r3
 800d092:	f3bf 8f6f 	isb	sy
 800d096:	f3bf 8f4f 	dsb	sy
 800d09a:	613b      	str	r3, [r7, #16]
}
 800d09c:	bf00      	nop
 800d09e:	e7fe      	b.n	800d09e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a2:	685a      	ldr	r2, [r3, #4]
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	1ad2      	subs	r2, r2, r3
 800d0a8:	69bb      	ldr	r3, [r7, #24]
 800d0aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ae:	687a      	ldr	r2, [r7, #4]
 800d0b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d0b2:	69b8      	ldr	r0, [r7, #24]
 800d0b4:	f000 f908 	bl	800d2c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d0b8:	4b1d      	ldr	r3, [pc, #116]	; (800d130 <pvPortMalloc+0x188>)
 800d0ba:	681a      	ldr	r2, [r3, #0]
 800d0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0be:	685b      	ldr	r3, [r3, #4]
 800d0c0:	1ad3      	subs	r3, r2, r3
 800d0c2:	4a1b      	ldr	r2, [pc, #108]	; (800d130 <pvPortMalloc+0x188>)
 800d0c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d0c6:	4b1a      	ldr	r3, [pc, #104]	; (800d130 <pvPortMalloc+0x188>)
 800d0c8:	681a      	ldr	r2, [r3, #0]
 800d0ca:	4b1b      	ldr	r3, [pc, #108]	; (800d138 <pvPortMalloc+0x190>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	429a      	cmp	r2, r3
 800d0d0:	d203      	bcs.n	800d0da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d0d2:	4b17      	ldr	r3, [pc, #92]	; (800d130 <pvPortMalloc+0x188>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	4a18      	ldr	r2, [pc, #96]	; (800d138 <pvPortMalloc+0x190>)
 800d0d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0dc:	685a      	ldr	r2, [r3, #4]
 800d0de:	4b13      	ldr	r3, [pc, #76]	; (800d12c <pvPortMalloc+0x184>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	431a      	orrs	r2, r3
 800d0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d0ee:	4b13      	ldr	r3, [pc, #76]	; (800d13c <pvPortMalloc+0x194>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	3301      	adds	r3, #1
 800d0f4:	4a11      	ldr	r2, [pc, #68]	; (800d13c <pvPortMalloc+0x194>)
 800d0f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d0f8:	f7fe fcfe 	bl	800baf8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d0fc:	69fb      	ldr	r3, [r7, #28]
 800d0fe:	f003 0307 	and.w	r3, r3, #7
 800d102:	2b00      	cmp	r3, #0
 800d104:	d00a      	beq.n	800d11c <pvPortMalloc+0x174>
	__asm volatile
 800d106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d10a:	f383 8811 	msr	BASEPRI, r3
 800d10e:	f3bf 8f6f 	isb	sy
 800d112:	f3bf 8f4f 	dsb	sy
 800d116:	60fb      	str	r3, [r7, #12]
}
 800d118:	bf00      	nop
 800d11a:	e7fe      	b.n	800d11a <pvPortMalloc+0x172>
	return pvReturn;
 800d11c:	69fb      	ldr	r3, [r7, #28]
}
 800d11e:	4618      	mov	r0, r3
 800d120:	3728      	adds	r7, #40	; 0x28
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}
 800d126:	bf00      	nop
 800d128:	20004a6c 	.word	0x20004a6c
 800d12c:	20004a80 	.word	0x20004a80
 800d130:	20004a70 	.word	0x20004a70
 800d134:	20004a64 	.word	0x20004a64
 800d138:	20004a74 	.word	0x20004a74
 800d13c:	20004a78 	.word	0x20004a78

0800d140 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b086      	sub	sp, #24
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d04d      	beq.n	800d1ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d152:	2308      	movs	r3, #8
 800d154:	425b      	negs	r3, r3
 800d156:	697a      	ldr	r2, [r7, #20]
 800d158:	4413      	add	r3, r2
 800d15a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d15c:	697b      	ldr	r3, [r7, #20]
 800d15e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	685a      	ldr	r2, [r3, #4]
 800d164:	4b24      	ldr	r3, [pc, #144]	; (800d1f8 <vPortFree+0xb8>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	4013      	ands	r3, r2
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d10a      	bne.n	800d184 <vPortFree+0x44>
	__asm volatile
 800d16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d172:	f383 8811 	msr	BASEPRI, r3
 800d176:	f3bf 8f6f 	isb	sy
 800d17a:	f3bf 8f4f 	dsb	sy
 800d17e:	60fb      	str	r3, [r7, #12]
}
 800d180:	bf00      	nop
 800d182:	e7fe      	b.n	800d182 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d184:	693b      	ldr	r3, [r7, #16]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d00a      	beq.n	800d1a2 <vPortFree+0x62>
	__asm volatile
 800d18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d190:	f383 8811 	msr	BASEPRI, r3
 800d194:	f3bf 8f6f 	isb	sy
 800d198:	f3bf 8f4f 	dsb	sy
 800d19c:	60bb      	str	r3, [r7, #8]
}
 800d19e:	bf00      	nop
 800d1a0:	e7fe      	b.n	800d1a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d1a2:	693b      	ldr	r3, [r7, #16]
 800d1a4:	685a      	ldr	r2, [r3, #4]
 800d1a6:	4b14      	ldr	r3, [pc, #80]	; (800d1f8 <vPortFree+0xb8>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	4013      	ands	r3, r2
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d01e      	beq.n	800d1ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d1b0:	693b      	ldr	r3, [r7, #16]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d11a      	bne.n	800d1ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d1b8:	693b      	ldr	r3, [r7, #16]
 800d1ba:	685a      	ldr	r2, [r3, #4]
 800d1bc:	4b0e      	ldr	r3, [pc, #56]	; (800d1f8 <vPortFree+0xb8>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	43db      	mvns	r3, r3
 800d1c2:	401a      	ands	r2, r3
 800d1c4:	693b      	ldr	r3, [r7, #16]
 800d1c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d1c8:	f7fe fc88 	bl	800badc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d1cc:	693b      	ldr	r3, [r7, #16]
 800d1ce:	685a      	ldr	r2, [r3, #4]
 800d1d0:	4b0a      	ldr	r3, [pc, #40]	; (800d1fc <vPortFree+0xbc>)
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	4413      	add	r3, r2
 800d1d6:	4a09      	ldr	r2, [pc, #36]	; (800d1fc <vPortFree+0xbc>)
 800d1d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d1da:	6938      	ldr	r0, [r7, #16]
 800d1dc:	f000 f874 	bl	800d2c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d1e0:	4b07      	ldr	r3, [pc, #28]	; (800d200 <vPortFree+0xc0>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	3301      	adds	r3, #1
 800d1e6:	4a06      	ldr	r2, [pc, #24]	; (800d200 <vPortFree+0xc0>)
 800d1e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d1ea:	f7fe fc85 	bl	800baf8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d1ee:	bf00      	nop
 800d1f0:	3718      	adds	r7, #24
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}
 800d1f6:	bf00      	nop
 800d1f8:	20004a80 	.word	0x20004a80
 800d1fc:	20004a70 	.word	0x20004a70
 800d200:	20004a7c 	.word	0x20004a7c

0800d204 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d204:	b480      	push	{r7}
 800d206:	b085      	sub	sp, #20
 800d208:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d20a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d20e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d210:	4b27      	ldr	r3, [pc, #156]	; (800d2b0 <prvHeapInit+0xac>)
 800d212:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	f003 0307 	and.w	r3, r3, #7
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d00c      	beq.n	800d238 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	3307      	adds	r3, #7
 800d222:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	f023 0307 	bic.w	r3, r3, #7
 800d22a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d22c:	68ba      	ldr	r2, [r7, #8]
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	1ad3      	subs	r3, r2, r3
 800d232:	4a1f      	ldr	r2, [pc, #124]	; (800d2b0 <prvHeapInit+0xac>)
 800d234:	4413      	add	r3, r2
 800d236:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d23c:	4a1d      	ldr	r2, [pc, #116]	; (800d2b4 <prvHeapInit+0xb0>)
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d242:	4b1c      	ldr	r3, [pc, #112]	; (800d2b4 <prvHeapInit+0xb0>)
 800d244:	2200      	movs	r2, #0
 800d246:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	68ba      	ldr	r2, [r7, #8]
 800d24c:	4413      	add	r3, r2
 800d24e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d250:	2208      	movs	r2, #8
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	1a9b      	subs	r3, r3, r2
 800d256:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	f023 0307 	bic.w	r3, r3, #7
 800d25e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	4a15      	ldr	r2, [pc, #84]	; (800d2b8 <prvHeapInit+0xb4>)
 800d264:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d266:	4b14      	ldr	r3, [pc, #80]	; (800d2b8 <prvHeapInit+0xb4>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	2200      	movs	r2, #0
 800d26c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d26e:	4b12      	ldr	r3, [pc, #72]	; (800d2b8 <prvHeapInit+0xb4>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	2200      	movs	r2, #0
 800d274:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	68fa      	ldr	r2, [r7, #12]
 800d27e:	1ad2      	subs	r2, r2, r3
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d284:	4b0c      	ldr	r3, [pc, #48]	; (800d2b8 <prvHeapInit+0xb4>)
 800d286:	681a      	ldr	r2, [r3, #0]
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	685b      	ldr	r3, [r3, #4]
 800d290:	4a0a      	ldr	r2, [pc, #40]	; (800d2bc <prvHeapInit+0xb8>)
 800d292:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	685b      	ldr	r3, [r3, #4]
 800d298:	4a09      	ldr	r2, [pc, #36]	; (800d2c0 <prvHeapInit+0xbc>)
 800d29a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d29c:	4b09      	ldr	r3, [pc, #36]	; (800d2c4 <prvHeapInit+0xc0>)
 800d29e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d2a2:	601a      	str	r2, [r3, #0]
}
 800d2a4:	bf00      	nop
 800d2a6:	3714      	adds	r7, #20
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ae:	4770      	bx	lr
 800d2b0:	20000e64 	.word	0x20000e64
 800d2b4:	20004a64 	.word	0x20004a64
 800d2b8:	20004a6c 	.word	0x20004a6c
 800d2bc:	20004a74 	.word	0x20004a74
 800d2c0:	20004a70 	.word	0x20004a70
 800d2c4:	20004a80 	.word	0x20004a80

0800d2c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d2c8:	b480      	push	{r7}
 800d2ca:	b085      	sub	sp, #20
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d2d0:	4b28      	ldr	r3, [pc, #160]	; (800d374 <prvInsertBlockIntoFreeList+0xac>)
 800d2d2:	60fb      	str	r3, [r7, #12]
 800d2d4:	e002      	b.n	800d2dc <prvInsertBlockIntoFreeList+0x14>
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	60fb      	str	r3, [r7, #12]
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	687a      	ldr	r2, [r7, #4]
 800d2e2:	429a      	cmp	r2, r3
 800d2e4:	d8f7      	bhi.n	800d2d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	685b      	ldr	r3, [r3, #4]
 800d2ee:	68ba      	ldr	r2, [r7, #8]
 800d2f0:	4413      	add	r3, r2
 800d2f2:	687a      	ldr	r2, [r7, #4]
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d108      	bne.n	800d30a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	685a      	ldr	r2, [r3, #4]
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	685b      	ldr	r3, [r3, #4]
 800d300:	441a      	add	r2, r3
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	685b      	ldr	r3, [r3, #4]
 800d312:	68ba      	ldr	r2, [r7, #8]
 800d314:	441a      	add	r2, r3
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	429a      	cmp	r2, r3
 800d31c:	d118      	bne.n	800d350 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	681a      	ldr	r2, [r3, #0]
 800d322:	4b15      	ldr	r3, [pc, #84]	; (800d378 <prvInsertBlockIntoFreeList+0xb0>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	429a      	cmp	r2, r3
 800d328:	d00d      	beq.n	800d346 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	685a      	ldr	r2, [r3, #4]
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	685b      	ldr	r3, [r3, #4]
 800d334:	441a      	add	r2, r3
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	681a      	ldr	r2, [r3, #0]
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	601a      	str	r2, [r3, #0]
 800d344:	e008      	b.n	800d358 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d346:	4b0c      	ldr	r3, [pc, #48]	; (800d378 <prvInsertBlockIntoFreeList+0xb0>)
 800d348:	681a      	ldr	r2, [r3, #0]
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	601a      	str	r2, [r3, #0]
 800d34e:	e003      	b.n	800d358 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	681a      	ldr	r2, [r3, #0]
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d358:	68fa      	ldr	r2, [r7, #12]
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	429a      	cmp	r2, r3
 800d35e:	d002      	beq.n	800d366 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	687a      	ldr	r2, [r7, #4]
 800d364:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d366:	bf00      	nop
 800d368:	3714      	adds	r7, #20
 800d36a:	46bd      	mov	sp, r7
 800d36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d370:	4770      	bx	lr
 800d372:	bf00      	nop
 800d374:	20004a64 	.word	0x20004a64
 800d378:	20004a6c 	.word	0x20004a6c

0800d37c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800d380:	2201      	movs	r2, #1
 800d382:	490e      	ldr	r1, [pc, #56]	; (800d3bc <MX_USB_HOST_Init+0x40>)
 800d384:	480e      	ldr	r0, [pc, #56]	; (800d3c0 <MX_USB_HOST_Init+0x44>)
 800d386:	f7fb faaf 	bl	80088e8 <USBH_Init>
 800d38a:	4603      	mov	r3, r0
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d001      	beq.n	800d394 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d390:	f7f3 fc12 	bl	8000bb8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_AUDIO_CLASS) != USBH_OK)
 800d394:	490b      	ldr	r1, [pc, #44]	; (800d3c4 <MX_USB_HOST_Init+0x48>)
 800d396:	480a      	ldr	r0, [pc, #40]	; (800d3c0 <MX_USB_HOST_Init+0x44>)
 800d398:	f7fb fb57 	bl	8008a4a <USBH_RegisterClass>
 800d39c:	4603      	mov	r3, r0
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d001      	beq.n	800d3a6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d3a2:	f7f3 fc09 	bl	8000bb8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800d3a6:	4806      	ldr	r0, [pc, #24]	; (800d3c0 <MX_USB_HOST_Init+0x44>)
 800d3a8:	f7fb fbf3 	bl	8008b92 <USBH_Start>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d001      	beq.n	800d3b6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800d3b2:	f7f3 fc01 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d3b6:	bf00      	nop
 800d3b8:	bd80      	pop	{r7, pc}
 800d3ba:	bf00      	nop
 800d3bc:	0800d3c9 	.word	0x0800d3c9
 800d3c0:	20004da4 	.word	0x20004da4
 800d3c4:	2000000c 	.word	0x2000000c

0800d3c8 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800d3c8:	b480      	push	{r7}
 800d3ca:	b083      	sub	sp, #12
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
 800d3d0:	460b      	mov	r3, r1
 800d3d2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800d3d4:	78fb      	ldrb	r3, [r7, #3]
 800d3d6:	3b01      	subs	r3, #1
 800d3d8:	2b04      	cmp	r3, #4
 800d3da:	d819      	bhi.n	800d410 <USBH_UserProcess+0x48>
 800d3dc:	a201      	add	r2, pc, #4	; (adr r2, 800d3e4 <USBH_UserProcess+0x1c>)
 800d3de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3e2:	bf00      	nop
 800d3e4:	0800d411 	.word	0x0800d411
 800d3e8:	0800d401 	.word	0x0800d401
 800d3ec:	0800d411 	.word	0x0800d411
 800d3f0:	0800d409 	.word	0x0800d409
 800d3f4:	0800d3f9 	.word	0x0800d3f9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800d3f8:	4b09      	ldr	r3, [pc, #36]	; (800d420 <USBH_UserProcess+0x58>)
 800d3fa:	2203      	movs	r2, #3
 800d3fc:	701a      	strb	r2, [r3, #0]
  break;
 800d3fe:	e008      	b.n	800d412 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800d400:	4b07      	ldr	r3, [pc, #28]	; (800d420 <USBH_UserProcess+0x58>)
 800d402:	2202      	movs	r2, #2
 800d404:	701a      	strb	r2, [r3, #0]
  break;
 800d406:	e004      	b.n	800d412 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800d408:	4b05      	ldr	r3, [pc, #20]	; (800d420 <USBH_UserProcess+0x58>)
 800d40a:	2201      	movs	r2, #1
 800d40c:	701a      	strb	r2, [r3, #0]
  break;
 800d40e:	e000      	b.n	800d412 <USBH_UserProcess+0x4a>

  default:
  break;
 800d410:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800d412:	bf00      	nop
 800d414:	370c      	adds	r7, #12
 800d416:	46bd      	mov	sp, r7
 800d418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41c:	4770      	bx	lr
 800d41e:	bf00      	nop
 800d420:	20004a84 	.word	0x20004a84

0800d424 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b0a0      	sub	sp, #128	; 0x80
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d42c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800d430:	2200      	movs	r2, #0
 800d432:	601a      	str	r2, [r3, #0]
 800d434:	605a      	str	r2, [r3, #4]
 800d436:	609a      	str	r2, [r3, #8]
 800d438:	60da      	str	r2, [r3, #12]
 800d43a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d43c:	f107 0310 	add.w	r3, r7, #16
 800d440:	225c      	movs	r2, #92	; 0x5c
 800d442:	2100      	movs	r1, #0
 800d444:	4618      	mov	r0, r3
 800d446:	f000 fad9 	bl	800d9fc <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d452:	d149      	bne.n	800d4e8 <HAL_HCD_MspInit+0xc4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800d454:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d458:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800d45a:	2300      	movs	r3, #0
 800d45c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d45e:	f107 0310 	add.w	r3, r7, #16
 800d462:	4618      	mov	r0, r3
 800d464:	f7f6 ff04 	bl	8004270 <HAL_RCCEx_PeriphCLKConfig>
 800d468:	4603      	mov	r3, r0
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d001      	beq.n	800d472 <HAL_HCD_MspInit+0x4e>
    {
      Error_Handler();
 800d46e:	f7f3 fba3 	bl	8000bb8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d472:	2300      	movs	r3, #0
 800d474:	60fb      	str	r3, [r7, #12]
 800d476:	4b1e      	ldr	r3, [pc, #120]	; (800d4f0 <HAL_HCD_MspInit+0xcc>)
 800d478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d47a:	4a1d      	ldr	r2, [pc, #116]	; (800d4f0 <HAL_HCD_MspInit+0xcc>)
 800d47c:	f043 0301 	orr.w	r3, r3, #1
 800d480:	6313      	str	r3, [r2, #48]	; 0x30
 800d482:	4b1b      	ldr	r3, [pc, #108]	; (800d4f0 <HAL_HCD_MspInit+0xcc>)
 800d484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d486:	f003 0301 	and.w	r3, r3, #1
 800d48a:	60fb      	str	r3, [r7, #12]
 800d48c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d48e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d492:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d494:	2302      	movs	r3, #2
 800d496:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d498:	2300      	movs	r3, #0
 800d49a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d49c:	2303      	movs	r3, #3
 800d49e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d4a0:	230a      	movs	r3, #10
 800d4a2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d4a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800d4a8:	4619      	mov	r1, r3
 800d4aa:	4812      	ldr	r0, [pc, #72]	; (800d4f4 <HAL_HCD_MspInit+0xd0>)
 800d4ac:	f7f4 fd46 	bl	8001f3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d4b0:	4b0f      	ldr	r3, [pc, #60]	; (800d4f0 <HAL_HCD_MspInit+0xcc>)
 800d4b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4b4:	4a0e      	ldr	r2, [pc, #56]	; (800d4f0 <HAL_HCD_MspInit+0xcc>)
 800d4b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4ba:	6353      	str	r3, [r2, #52]	; 0x34
 800d4bc:	2300      	movs	r3, #0
 800d4be:	60bb      	str	r3, [r7, #8]
 800d4c0:	4b0b      	ldr	r3, [pc, #44]	; (800d4f0 <HAL_HCD_MspInit+0xcc>)
 800d4c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4c4:	4a0a      	ldr	r2, [pc, #40]	; (800d4f0 <HAL_HCD_MspInit+0xcc>)
 800d4c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d4ca:	6453      	str	r3, [r2, #68]	; 0x44
 800d4cc:	4b08      	ldr	r3, [pc, #32]	; (800d4f0 <HAL_HCD_MspInit+0xcc>)
 800d4ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d4d4:	60bb      	str	r3, [r7, #8]
 800d4d6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800d4d8:	2200      	movs	r2, #0
 800d4da:	2105      	movs	r1, #5
 800d4dc:	2043      	movs	r0, #67	; 0x43
 800d4de:	f7f4 fa19 	bl	8001914 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d4e2:	2043      	movs	r0, #67	; 0x43
 800d4e4:	f7f4 fa32 	bl	800194c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d4e8:	bf00      	nop
 800d4ea:	3780      	adds	r7, #128	; 0x80
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}
 800d4f0:	40023800 	.word	0x40023800
 800d4f4:	40020000 	.word	0x40020000

0800d4f8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b082      	sub	sp, #8
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d506:	4618      	mov	r0, r3
 800d508:	f7fb fff3 	bl	80094f2 <USBH_LL_IncTimer>
}
 800d50c:	bf00      	nop
 800d50e:	3708      	adds	r7, #8
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}

0800d514 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b082      	sub	sp, #8
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d522:	4618      	mov	r0, r3
 800d524:	f7fc f837 	bl	8009596 <USBH_LL_Connect>
}
 800d528:	bf00      	nop
 800d52a:	3708      	adds	r7, #8
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bd80      	pop	{r7, pc}

0800d530 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b082      	sub	sp, #8
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d53e:	4618      	mov	r0, r3
 800d540:	f7fc f84c 	bl	80095dc <USBH_LL_Disconnect>
}
 800d544:	bf00      	nop
 800d546:	3708      	adds	r7, #8
 800d548:	46bd      	mov	sp, r7
 800d54a:	bd80      	pop	{r7, pc}

0800d54c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b082      	sub	sp, #8
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
 800d554:	460b      	mov	r3, r1
 800d556:	70fb      	strb	r3, [r7, #3]
 800d558:	4613      	mov	r3, r2
 800d55a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d562:	4618      	mov	r0, r3
 800d564:	f7fc f883 	bl	800966e <USBH_LL_NotifyURBChange>
#endif
}
 800d568:	bf00      	nop
 800d56a:	3708      	adds	r7, #8
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}

0800d570 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b082      	sub	sp, #8
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d57e:	4618      	mov	r0, r3
 800d580:	f7fb ffe1 	bl	8009546 <USBH_LL_PortEnabled>
}
 800d584:	bf00      	nop
 800d586:	3708      	adds	r7, #8
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}

0800d58c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b082      	sub	sp, #8
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d59a:	4618      	mov	r0, r3
 800d59c:	f7fb ffed 	bl	800957a <USBH_LL_PortDisabled>
}
 800d5a0:	bf00      	nop
 800d5a2:	3708      	adds	r7, #8
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}

0800d5a8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b082      	sub	sp, #8
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f893 358c 	ldrb.w	r3, [r3, #1420]	; 0x58c
 800d5b6:	2b01      	cmp	r3, #1
 800d5b8:	d12a      	bne.n	800d610 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800d5ba:	4a18      	ldr	r2, [pc, #96]	; (800d61c <USBH_LL_Init+0x74>)
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	4a15      	ldr	r2, [pc, #84]	; (800d61c <USBH_LL_Init+0x74>)
 800d5c6:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d5ca:	4b14      	ldr	r3, [pc, #80]	; (800d61c <USBH_LL_Init+0x74>)
 800d5cc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d5d0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800d5d2:	4b12      	ldr	r3, [pc, #72]	; (800d61c <USBH_LL_Init+0x74>)
 800d5d4:	220c      	movs	r2, #12
 800d5d6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800d5d8:	4b10      	ldr	r3, [pc, #64]	; (800d61c <USBH_LL_Init+0x74>)
 800d5da:	2201      	movs	r2, #1
 800d5dc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d5de:	4b0f      	ldr	r3, [pc, #60]	; (800d61c <USBH_LL_Init+0x74>)
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800d5e4:	4b0d      	ldr	r3, [pc, #52]	; (800d61c <USBH_LL_Init+0x74>)
 800d5e6:	2202      	movs	r2, #2
 800d5e8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d5ea:	4b0c      	ldr	r3, [pc, #48]	; (800d61c <USBH_LL_Init+0x74>)
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800d5f0:	480a      	ldr	r0, [pc, #40]	; (800d61c <USBH_LL_Init+0x74>)
 800d5f2:	f7f4 fe50 	bl	8002296 <HAL_HCD_Init>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d001      	beq.n	800d600 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800d5fc:	f7f3 fadc 	bl	8000bb8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800d600:	4806      	ldr	r0, [pc, #24]	; (800d61c <USBH_LL_Init+0x74>)
 800d602:	f7f5 fa20 	bl	8002a46 <HAL_HCD_GetCurrentFrame>
 800d606:	4603      	mov	r3, r0
 800d608:	4619      	mov	r1, r3
 800d60a:	6878      	ldr	r0, [r7, #4]
 800d60c:	f7fb ff62 	bl	80094d4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800d610:	2300      	movs	r3, #0
}
 800d612:	4618      	mov	r0, r3
 800d614:	3708      	adds	r7, #8
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}
 800d61a:	bf00      	nop
 800d61c:	20005348 	.word	0x20005348

0800d620 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b084      	sub	sp, #16
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d628:	2300      	movs	r3, #0
 800d62a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d62c:	2300      	movs	r3, #0
 800d62e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f8d3 3590 	ldr.w	r3, [r3, #1424]	; 0x590
 800d636:	4618      	mov	r0, r3
 800d638:	f7f5 f9a3 	bl	8002982 <HAL_HCD_Start>
 800d63c:	4603      	mov	r3, r0
 800d63e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d640:	7bfb      	ldrb	r3, [r7, #15]
 800d642:	4618      	mov	r0, r3
 800d644:	f000 f948 	bl	800d8d8 <USBH_Get_USB_Status>
 800d648:	4603      	mov	r3, r0
 800d64a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d64c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d64e:	4618      	mov	r0, r3
 800d650:	3710      	adds	r7, #16
 800d652:	46bd      	mov	sp, r7
 800d654:	bd80      	pop	{r7, pc}

0800d656 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d656:	b580      	push	{r7, lr}
 800d658:	b084      	sub	sp, #16
 800d65a:	af00      	add	r7, sp, #0
 800d65c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d65e:	2300      	movs	r3, #0
 800d660:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d662:	2300      	movs	r3, #0
 800d664:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	f8d3 3590 	ldr.w	r3, [r3, #1424]	; 0x590
 800d66c:	4618      	mov	r0, r3
 800d66e:	f7f5 f9ab 	bl	80029c8 <HAL_HCD_Stop>
 800d672:	4603      	mov	r3, r0
 800d674:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d676:	7bfb      	ldrb	r3, [r7, #15]
 800d678:	4618      	mov	r0, r3
 800d67a:	f000 f92d 	bl	800d8d8 <USBH_Get_USB_Status>
 800d67e:	4603      	mov	r3, r0
 800d680:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d682:	7bbb      	ldrb	r3, [r7, #14]
}
 800d684:	4618      	mov	r0, r3
 800d686:	3710      	adds	r7, #16
 800d688:	46bd      	mov	sp, r7
 800d68a:	bd80      	pop	{r7, pc}

0800d68c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b084      	sub	sp, #16
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d694:	2301      	movs	r3, #1
 800d696:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f8d3 3590 	ldr.w	r3, [r3, #1424]	; 0x590
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f7f5 f9df 	bl	8002a62 <HAL_HCD_GetCurrentSpeed>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	2b02      	cmp	r3, #2
 800d6a8:	d00c      	beq.n	800d6c4 <USBH_LL_GetSpeed+0x38>
 800d6aa:	2b02      	cmp	r3, #2
 800d6ac:	d80d      	bhi.n	800d6ca <USBH_LL_GetSpeed+0x3e>
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d002      	beq.n	800d6b8 <USBH_LL_GetSpeed+0x2c>
 800d6b2:	2b01      	cmp	r3, #1
 800d6b4:	d003      	beq.n	800d6be <USBH_LL_GetSpeed+0x32>
 800d6b6:	e008      	b.n	800d6ca <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	73fb      	strb	r3, [r7, #15]
    break;
 800d6bc:	e008      	b.n	800d6d0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d6be:	2301      	movs	r3, #1
 800d6c0:	73fb      	strb	r3, [r7, #15]
    break;
 800d6c2:	e005      	b.n	800d6d0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d6c4:	2302      	movs	r3, #2
 800d6c6:	73fb      	strb	r3, [r7, #15]
    break;
 800d6c8:	e002      	b.n	800d6d0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800d6ca:	2301      	movs	r3, #1
 800d6cc:	73fb      	strb	r3, [r7, #15]
    break;
 800d6ce:	bf00      	nop
  }
  return  speed;
 800d6d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	3710      	adds	r7, #16
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}

0800d6da <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d6da:	b580      	push	{r7, lr}
 800d6dc:	b084      	sub	sp, #16
 800d6de:	af00      	add	r7, sp, #0
 800d6e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f8d3 3590 	ldr.w	r3, [r3, #1424]	; 0x590
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f7f5 f986 	bl	8002a02 <HAL_HCD_ResetPort>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d6fa:	7bfb      	ldrb	r3, [r7, #15]
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	f000 f8eb 	bl	800d8d8 <USBH_Get_USB_Status>
 800d702:	4603      	mov	r3, r0
 800d704:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d706:	7bbb      	ldrb	r3, [r7, #14]
}
 800d708:	4618      	mov	r0, r3
 800d70a:	3710      	adds	r7, #16
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bd80      	pop	{r7, pc}

0800d710 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d710:	b590      	push	{r4, r7, lr}
 800d712:	b089      	sub	sp, #36	; 0x24
 800d714:	af04      	add	r7, sp, #16
 800d716:	6078      	str	r0, [r7, #4]
 800d718:	4608      	mov	r0, r1
 800d71a:	4611      	mov	r1, r2
 800d71c:	461a      	mov	r2, r3
 800d71e:	4603      	mov	r3, r0
 800d720:	70fb      	strb	r3, [r7, #3]
 800d722:	460b      	mov	r3, r1
 800d724:	70bb      	strb	r3, [r7, #2]
 800d726:	4613      	mov	r3, r2
 800d728:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d72a:	2300      	movs	r3, #0
 800d72c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d72e:	2300      	movs	r3, #0
 800d730:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
 800d738:	787c      	ldrb	r4, [r7, #1]
 800d73a:	78ba      	ldrb	r2, [r7, #2]
 800d73c:	78f9      	ldrb	r1, [r7, #3]
 800d73e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d740:	9302      	str	r3, [sp, #8]
 800d742:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d746:	9301      	str	r3, [sp, #4]
 800d748:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d74c:	9300      	str	r3, [sp, #0]
 800d74e:	4623      	mov	r3, r4
 800d750:	f7f4 fe03 	bl	800235a <HAL_HCD_HC_Init>
 800d754:	4603      	mov	r3, r0
 800d756:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d758:	7bfb      	ldrb	r3, [r7, #15]
 800d75a:	4618      	mov	r0, r3
 800d75c:	f000 f8bc 	bl	800d8d8 <USBH_Get_USB_Status>
 800d760:	4603      	mov	r3, r0
 800d762:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d764:	7bbb      	ldrb	r3, [r7, #14]
}
 800d766:	4618      	mov	r0, r3
 800d768:	3714      	adds	r7, #20
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd90      	pop	{r4, r7, pc}

0800d76e <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d76e:	b580      	push	{r7, lr}
 800d770:	b084      	sub	sp, #16
 800d772:	af00      	add	r7, sp, #0
 800d774:	6078      	str	r0, [r7, #4]
 800d776:	460b      	mov	r3, r1
 800d778:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d77a:	2300      	movs	r3, #0
 800d77c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d77e:	2300      	movs	r3, #0
 800d780:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	f8d3 3590 	ldr.w	r3, [r3, #1424]	; 0x590
 800d788:	78fa      	ldrb	r2, [r7, #3]
 800d78a:	4611      	mov	r1, r2
 800d78c:	4618      	mov	r0, r3
 800d78e:	f7f4 fe73 	bl	8002478 <HAL_HCD_HC_Halt>
 800d792:	4603      	mov	r3, r0
 800d794:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d796:	7bfb      	ldrb	r3, [r7, #15]
 800d798:	4618      	mov	r0, r3
 800d79a:	f000 f89d 	bl	800d8d8 <USBH_Get_USB_Status>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	3710      	adds	r7, #16
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}

0800d7ac <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d7ac:	b590      	push	{r4, r7, lr}
 800d7ae:	b089      	sub	sp, #36	; 0x24
 800d7b0:	af04      	add	r7, sp, #16
 800d7b2:	6078      	str	r0, [r7, #4]
 800d7b4:	4608      	mov	r0, r1
 800d7b6:	4611      	mov	r1, r2
 800d7b8:	461a      	mov	r2, r3
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	70fb      	strb	r3, [r7, #3]
 800d7be:	460b      	mov	r3, r1
 800d7c0:	70bb      	strb	r3, [r7, #2]
 800d7c2:	4613      	mov	r3, r2
 800d7c4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
 800d7d4:	787c      	ldrb	r4, [r7, #1]
 800d7d6:	78ba      	ldrb	r2, [r7, #2]
 800d7d8:	78f9      	ldrb	r1, [r7, #3]
 800d7da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d7de:	9303      	str	r3, [sp, #12]
 800d7e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d7e2:	9302      	str	r3, [sp, #8]
 800d7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7e6:	9301      	str	r3, [sp, #4]
 800d7e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d7ec:	9300      	str	r3, [sp, #0]
 800d7ee:	4623      	mov	r3, r4
 800d7f0:	f7f4 fe66 	bl	80024c0 <HAL_HCD_HC_SubmitRequest>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800d7f8:	7bfb      	ldrb	r3, [r7, #15]
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f000 f86c 	bl	800d8d8 <USBH_Get_USB_Status>
 800d800:	4603      	mov	r3, r0
 800d802:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d804:	7bbb      	ldrb	r3, [r7, #14]
}
 800d806:	4618      	mov	r0, r3
 800d808:	3714      	adds	r7, #20
 800d80a:	46bd      	mov	sp, r7
 800d80c:	bd90      	pop	{r4, r7, pc}

0800d80e <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d80e:	b580      	push	{r7, lr}
 800d810:	b082      	sub	sp, #8
 800d812:	af00      	add	r7, sp, #0
 800d814:	6078      	str	r0, [r7, #4]
 800d816:	460b      	mov	r3, r1
 800d818:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f8d3 3590 	ldr.w	r3, [r3, #1424]	; 0x590
 800d820:	78fa      	ldrb	r2, [r7, #3]
 800d822:	4611      	mov	r1, r2
 800d824:	4618      	mov	r0, r3
 800d826:	f7f5 f8fa 	bl	8002a1e <HAL_HCD_HC_GetURBState>
 800d82a:	4603      	mov	r3, r0
}
 800d82c:	4618      	mov	r0, r3
 800d82e:	3708      	adds	r7, #8
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}

0800d834 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b082      	sub	sp, #8
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
 800d83c:	460b      	mov	r3, r1
 800d83e:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f893 358c 	ldrb.w	r3, [r3, #1420]	; 0x58c
 800d846:	2b01      	cmp	r3, #1
 800d848:	d103      	bne.n	800d852 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800d84a:	78fb      	ldrb	r3, [r7, #3]
 800d84c:	4618      	mov	r0, r3
 800d84e:	f000 f86f 	bl	800d930 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800d852:	20c8      	movs	r0, #200	; 0xc8
 800d854:	f7f3 fd10 	bl	8001278 <HAL_Delay>
  return USBH_OK;
 800d858:	2300      	movs	r3, #0
}
 800d85a:	4618      	mov	r0, r3
 800d85c:	3708      	adds	r7, #8
 800d85e:	46bd      	mov	sp, r7
 800d860:	bd80      	pop	{r7, pc}

0800d862 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d862:	b480      	push	{r7}
 800d864:	b085      	sub	sp, #20
 800d866:	af00      	add	r7, sp, #0
 800d868:	6078      	str	r0, [r7, #4]
 800d86a:	460b      	mov	r3, r1
 800d86c:	70fb      	strb	r3, [r7, #3]
 800d86e:	4613      	mov	r3, r2
 800d870:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	f8d3 3590 	ldr.w	r3, [r3, #1424]	; 0x590
 800d878:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d87a:	78fb      	ldrb	r3, [r7, #3]
 800d87c:	68fa      	ldr	r2, [r7, #12]
 800d87e:	212c      	movs	r1, #44	; 0x2c
 800d880:	fb01 f303 	mul.w	r3, r1, r3
 800d884:	4413      	add	r3, r2
 800d886:	333b      	adds	r3, #59	; 0x3b
 800d888:	781b      	ldrb	r3, [r3, #0]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d009      	beq.n	800d8a2 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d88e:	78fb      	ldrb	r3, [r7, #3]
 800d890:	68fa      	ldr	r2, [r7, #12]
 800d892:	212c      	movs	r1, #44	; 0x2c
 800d894:	fb01 f303 	mul.w	r3, r1, r3
 800d898:	4413      	add	r3, r2
 800d89a:	3354      	adds	r3, #84	; 0x54
 800d89c:	78ba      	ldrb	r2, [r7, #2]
 800d89e:	701a      	strb	r2, [r3, #0]
 800d8a0:	e008      	b.n	800d8b4 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d8a2:	78fb      	ldrb	r3, [r7, #3]
 800d8a4:	68fa      	ldr	r2, [r7, #12]
 800d8a6:	212c      	movs	r1, #44	; 0x2c
 800d8a8:	fb01 f303 	mul.w	r3, r1, r3
 800d8ac:	4413      	add	r3, r2
 800d8ae:	3355      	adds	r3, #85	; 0x55
 800d8b0:	78ba      	ldrb	r2, [r7, #2]
 800d8b2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d8b4:	2300      	movs	r3, #0
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	3714      	adds	r7, #20
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c0:	4770      	bx	lr

0800d8c2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d8c2:	b580      	push	{r7, lr}
 800d8c4:	b082      	sub	sp, #8
 800d8c6:	af00      	add	r7, sp, #0
 800d8c8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d8ca:	6878      	ldr	r0, [r7, #4]
 800d8cc:	f7f3 fcd4 	bl	8001278 <HAL_Delay>
}
 800d8d0:	bf00      	nop
 800d8d2:	3708      	adds	r7, #8
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd80      	pop	{r7, pc}

0800d8d8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d8d8:	b480      	push	{r7}
 800d8da:	b085      	sub	sp, #20
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	4603      	mov	r3, r0
 800d8e0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d8e6:	79fb      	ldrb	r3, [r7, #7]
 800d8e8:	2b03      	cmp	r3, #3
 800d8ea:	d817      	bhi.n	800d91c <USBH_Get_USB_Status+0x44>
 800d8ec:	a201      	add	r2, pc, #4	; (adr r2, 800d8f4 <USBH_Get_USB_Status+0x1c>)
 800d8ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8f2:	bf00      	nop
 800d8f4:	0800d905 	.word	0x0800d905
 800d8f8:	0800d90b 	.word	0x0800d90b
 800d8fc:	0800d911 	.word	0x0800d911
 800d900:	0800d917 	.word	0x0800d917
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d904:	2300      	movs	r3, #0
 800d906:	73fb      	strb	r3, [r7, #15]
    break;
 800d908:	e00b      	b.n	800d922 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d90a:	2302      	movs	r3, #2
 800d90c:	73fb      	strb	r3, [r7, #15]
    break;
 800d90e:	e008      	b.n	800d922 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d910:	2301      	movs	r3, #1
 800d912:	73fb      	strb	r3, [r7, #15]
    break;
 800d914:	e005      	b.n	800d922 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d916:	2302      	movs	r3, #2
 800d918:	73fb      	strb	r3, [r7, #15]
    break;
 800d91a:	e002      	b.n	800d922 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d91c:	2302      	movs	r3, #2
 800d91e:	73fb      	strb	r3, [r7, #15]
    break;
 800d920:	bf00      	nop
  }
  return usb_status;
 800d922:	7bfb      	ldrb	r3, [r7, #15]
}
 800d924:	4618      	mov	r0, r3
 800d926:	3714      	adds	r7, #20
 800d928:	46bd      	mov	sp, r7
 800d92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92e:	4770      	bx	lr

0800d930 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b084      	sub	sp, #16
 800d934:	af00      	add	r7, sp, #0
 800d936:	4603      	mov	r3, r0
 800d938:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800d93a:	79fb      	ldrb	r3, [r7, #7]
 800d93c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800d93e:	79fb      	ldrb	r3, [r7, #7]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d102      	bne.n	800d94a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800d944:	2301      	movs	r3, #1
 800d946:	73fb      	strb	r3, [r7, #15]
 800d948:	e001      	b.n	800d94e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800d94a:	2300      	movs	r3, #0
 800d94c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6,(GPIO_PinState)data);
 800d94e:	7bfb      	ldrb	r3, [r7, #15]
 800d950:	461a      	mov	r2, r3
 800d952:	2140      	movs	r1, #64	; 0x40
 800d954:	4803      	ldr	r0, [pc, #12]	; (800d964 <MX_DriverVbusFS+0x34>)
 800d956:	f7f4 fc85 	bl	8002264 <HAL_GPIO_WritePin>
}
 800d95a:	bf00      	nop
 800d95c:	3710      	adds	r7, #16
 800d95e:	46bd      	mov	sp, r7
 800d960:	bd80      	pop	{r7, pc}
 800d962:	bf00      	nop
 800d964:	40020800 	.word	0x40020800

0800d968 <__errno>:
 800d968:	4b01      	ldr	r3, [pc, #4]	; (800d970 <__errno+0x8>)
 800d96a:	6818      	ldr	r0, [r3, #0]
 800d96c:	4770      	bx	lr
 800d96e:	bf00      	nop
 800d970:	20000030 	.word	0x20000030

0800d974 <__libc_init_array>:
 800d974:	b570      	push	{r4, r5, r6, lr}
 800d976:	4d0d      	ldr	r5, [pc, #52]	; (800d9ac <__libc_init_array+0x38>)
 800d978:	4c0d      	ldr	r4, [pc, #52]	; (800d9b0 <__libc_init_array+0x3c>)
 800d97a:	1b64      	subs	r4, r4, r5
 800d97c:	10a4      	asrs	r4, r4, #2
 800d97e:	2600      	movs	r6, #0
 800d980:	42a6      	cmp	r6, r4
 800d982:	d109      	bne.n	800d998 <__libc_init_array+0x24>
 800d984:	4d0b      	ldr	r5, [pc, #44]	; (800d9b4 <__libc_init_array+0x40>)
 800d986:	4c0c      	ldr	r4, [pc, #48]	; (800d9b8 <__libc_init_array+0x44>)
 800d988:	f000 f970 	bl	800dc6c <_init>
 800d98c:	1b64      	subs	r4, r4, r5
 800d98e:	10a4      	asrs	r4, r4, #2
 800d990:	2600      	movs	r6, #0
 800d992:	42a6      	cmp	r6, r4
 800d994:	d105      	bne.n	800d9a2 <__libc_init_array+0x2e>
 800d996:	bd70      	pop	{r4, r5, r6, pc}
 800d998:	f855 3b04 	ldr.w	r3, [r5], #4
 800d99c:	4798      	blx	r3
 800d99e:	3601      	adds	r6, #1
 800d9a0:	e7ee      	b.n	800d980 <__libc_init_array+0xc>
 800d9a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d9a6:	4798      	blx	r3
 800d9a8:	3601      	adds	r6, #1
 800d9aa:	e7f2      	b.n	800d992 <__libc_init_array+0x1e>
 800d9ac:	0800dd68 	.word	0x0800dd68
 800d9b0:	0800dd68 	.word	0x0800dd68
 800d9b4:	0800dd68 	.word	0x0800dd68
 800d9b8:	0800dd6c 	.word	0x0800dd6c

0800d9bc <__retarget_lock_acquire_recursive>:
 800d9bc:	4770      	bx	lr

0800d9be <__retarget_lock_release_recursive>:
 800d9be:	4770      	bx	lr

0800d9c0 <malloc>:
 800d9c0:	4b02      	ldr	r3, [pc, #8]	; (800d9cc <malloc+0xc>)
 800d9c2:	4601      	mov	r1, r0
 800d9c4:	6818      	ldr	r0, [r3, #0]
 800d9c6:	f000 b871 	b.w	800daac <_malloc_r>
 800d9ca:	bf00      	nop
 800d9cc:	20000030 	.word	0x20000030

0800d9d0 <free>:
 800d9d0:	4b02      	ldr	r3, [pc, #8]	; (800d9dc <free+0xc>)
 800d9d2:	4601      	mov	r1, r0
 800d9d4:	6818      	ldr	r0, [r3, #0]
 800d9d6:	f000 b819 	b.w	800da0c <_free_r>
 800d9da:	bf00      	nop
 800d9dc:	20000030 	.word	0x20000030

0800d9e0 <memcpy>:
 800d9e0:	440a      	add	r2, r1
 800d9e2:	4291      	cmp	r1, r2
 800d9e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800d9e8:	d100      	bne.n	800d9ec <memcpy+0xc>
 800d9ea:	4770      	bx	lr
 800d9ec:	b510      	push	{r4, lr}
 800d9ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d9f6:	4291      	cmp	r1, r2
 800d9f8:	d1f9      	bne.n	800d9ee <memcpy+0xe>
 800d9fa:	bd10      	pop	{r4, pc}

0800d9fc <memset>:
 800d9fc:	4402      	add	r2, r0
 800d9fe:	4603      	mov	r3, r0
 800da00:	4293      	cmp	r3, r2
 800da02:	d100      	bne.n	800da06 <memset+0xa>
 800da04:	4770      	bx	lr
 800da06:	f803 1b01 	strb.w	r1, [r3], #1
 800da0a:	e7f9      	b.n	800da00 <memset+0x4>

0800da0c <_free_r>:
 800da0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800da0e:	2900      	cmp	r1, #0
 800da10:	d048      	beq.n	800daa4 <_free_r+0x98>
 800da12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da16:	9001      	str	r0, [sp, #4]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	f1a1 0404 	sub.w	r4, r1, #4
 800da1e:	bfb8      	it	lt
 800da20:	18e4      	addlt	r4, r4, r3
 800da22:	f000 f917 	bl	800dc54 <__malloc_lock>
 800da26:	4a20      	ldr	r2, [pc, #128]	; (800daa8 <_free_r+0x9c>)
 800da28:	9801      	ldr	r0, [sp, #4]
 800da2a:	6813      	ldr	r3, [r2, #0]
 800da2c:	4615      	mov	r5, r2
 800da2e:	b933      	cbnz	r3, 800da3e <_free_r+0x32>
 800da30:	6063      	str	r3, [r4, #4]
 800da32:	6014      	str	r4, [r2, #0]
 800da34:	b003      	add	sp, #12
 800da36:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800da3a:	f000 b911 	b.w	800dc60 <__malloc_unlock>
 800da3e:	42a3      	cmp	r3, r4
 800da40:	d90b      	bls.n	800da5a <_free_r+0x4e>
 800da42:	6821      	ldr	r1, [r4, #0]
 800da44:	1862      	adds	r2, r4, r1
 800da46:	4293      	cmp	r3, r2
 800da48:	bf04      	itt	eq
 800da4a:	681a      	ldreq	r2, [r3, #0]
 800da4c:	685b      	ldreq	r3, [r3, #4]
 800da4e:	6063      	str	r3, [r4, #4]
 800da50:	bf04      	itt	eq
 800da52:	1852      	addeq	r2, r2, r1
 800da54:	6022      	streq	r2, [r4, #0]
 800da56:	602c      	str	r4, [r5, #0]
 800da58:	e7ec      	b.n	800da34 <_free_r+0x28>
 800da5a:	461a      	mov	r2, r3
 800da5c:	685b      	ldr	r3, [r3, #4]
 800da5e:	b10b      	cbz	r3, 800da64 <_free_r+0x58>
 800da60:	42a3      	cmp	r3, r4
 800da62:	d9fa      	bls.n	800da5a <_free_r+0x4e>
 800da64:	6811      	ldr	r1, [r2, #0]
 800da66:	1855      	adds	r5, r2, r1
 800da68:	42a5      	cmp	r5, r4
 800da6a:	d10b      	bne.n	800da84 <_free_r+0x78>
 800da6c:	6824      	ldr	r4, [r4, #0]
 800da6e:	4421      	add	r1, r4
 800da70:	1854      	adds	r4, r2, r1
 800da72:	42a3      	cmp	r3, r4
 800da74:	6011      	str	r1, [r2, #0]
 800da76:	d1dd      	bne.n	800da34 <_free_r+0x28>
 800da78:	681c      	ldr	r4, [r3, #0]
 800da7a:	685b      	ldr	r3, [r3, #4]
 800da7c:	6053      	str	r3, [r2, #4]
 800da7e:	4421      	add	r1, r4
 800da80:	6011      	str	r1, [r2, #0]
 800da82:	e7d7      	b.n	800da34 <_free_r+0x28>
 800da84:	d902      	bls.n	800da8c <_free_r+0x80>
 800da86:	230c      	movs	r3, #12
 800da88:	6003      	str	r3, [r0, #0]
 800da8a:	e7d3      	b.n	800da34 <_free_r+0x28>
 800da8c:	6825      	ldr	r5, [r4, #0]
 800da8e:	1961      	adds	r1, r4, r5
 800da90:	428b      	cmp	r3, r1
 800da92:	bf04      	itt	eq
 800da94:	6819      	ldreq	r1, [r3, #0]
 800da96:	685b      	ldreq	r3, [r3, #4]
 800da98:	6063      	str	r3, [r4, #4]
 800da9a:	bf04      	itt	eq
 800da9c:	1949      	addeq	r1, r1, r5
 800da9e:	6021      	streq	r1, [r4, #0]
 800daa0:	6054      	str	r4, [r2, #4]
 800daa2:	e7c7      	b.n	800da34 <_free_r+0x28>
 800daa4:	b003      	add	sp, #12
 800daa6:	bd30      	pop	{r4, r5, pc}
 800daa8:	20004a88 	.word	0x20004a88

0800daac <_malloc_r>:
 800daac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daae:	1ccd      	adds	r5, r1, #3
 800dab0:	f025 0503 	bic.w	r5, r5, #3
 800dab4:	3508      	adds	r5, #8
 800dab6:	2d0c      	cmp	r5, #12
 800dab8:	bf38      	it	cc
 800daba:	250c      	movcc	r5, #12
 800dabc:	2d00      	cmp	r5, #0
 800dabe:	4606      	mov	r6, r0
 800dac0:	db01      	blt.n	800dac6 <_malloc_r+0x1a>
 800dac2:	42a9      	cmp	r1, r5
 800dac4:	d903      	bls.n	800dace <_malloc_r+0x22>
 800dac6:	230c      	movs	r3, #12
 800dac8:	6033      	str	r3, [r6, #0]
 800daca:	2000      	movs	r0, #0
 800dacc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dace:	f000 f8c1 	bl	800dc54 <__malloc_lock>
 800dad2:	4921      	ldr	r1, [pc, #132]	; (800db58 <_malloc_r+0xac>)
 800dad4:	680a      	ldr	r2, [r1, #0]
 800dad6:	4614      	mov	r4, r2
 800dad8:	b99c      	cbnz	r4, 800db02 <_malloc_r+0x56>
 800dada:	4f20      	ldr	r7, [pc, #128]	; (800db5c <_malloc_r+0xb0>)
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	b923      	cbnz	r3, 800daea <_malloc_r+0x3e>
 800dae0:	4621      	mov	r1, r4
 800dae2:	4630      	mov	r0, r6
 800dae4:	f000 f8a6 	bl	800dc34 <_sbrk_r>
 800dae8:	6038      	str	r0, [r7, #0]
 800daea:	4629      	mov	r1, r5
 800daec:	4630      	mov	r0, r6
 800daee:	f000 f8a1 	bl	800dc34 <_sbrk_r>
 800daf2:	1c43      	adds	r3, r0, #1
 800daf4:	d123      	bne.n	800db3e <_malloc_r+0x92>
 800daf6:	230c      	movs	r3, #12
 800daf8:	6033      	str	r3, [r6, #0]
 800dafa:	4630      	mov	r0, r6
 800dafc:	f000 f8b0 	bl	800dc60 <__malloc_unlock>
 800db00:	e7e3      	b.n	800daca <_malloc_r+0x1e>
 800db02:	6823      	ldr	r3, [r4, #0]
 800db04:	1b5b      	subs	r3, r3, r5
 800db06:	d417      	bmi.n	800db38 <_malloc_r+0x8c>
 800db08:	2b0b      	cmp	r3, #11
 800db0a:	d903      	bls.n	800db14 <_malloc_r+0x68>
 800db0c:	6023      	str	r3, [r4, #0]
 800db0e:	441c      	add	r4, r3
 800db10:	6025      	str	r5, [r4, #0]
 800db12:	e004      	b.n	800db1e <_malloc_r+0x72>
 800db14:	6863      	ldr	r3, [r4, #4]
 800db16:	42a2      	cmp	r2, r4
 800db18:	bf0c      	ite	eq
 800db1a:	600b      	streq	r3, [r1, #0]
 800db1c:	6053      	strne	r3, [r2, #4]
 800db1e:	4630      	mov	r0, r6
 800db20:	f000 f89e 	bl	800dc60 <__malloc_unlock>
 800db24:	f104 000b 	add.w	r0, r4, #11
 800db28:	1d23      	adds	r3, r4, #4
 800db2a:	f020 0007 	bic.w	r0, r0, #7
 800db2e:	1ac2      	subs	r2, r0, r3
 800db30:	d0cc      	beq.n	800dacc <_malloc_r+0x20>
 800db32:	1a1b      	subs	r3, r3, r0
 800db34:	50a3      	str	r3, [r4, r2]
 800db36:	e7c9      	b.n	800dacc <_malloc_r+0x20>
 800db38:	4622      	mov	r2, r4
 800db3a:	6864      	ldr	r4, [r4, #4]
 800db3c:	e7cc      	b.n	800dad8 <_malloc_r+0x2c>
 800db3e:	1cc4      	adds	r4, r0, #3
 800db40:	f024 0403 	bic.w	r4, r4, #3
 800db44:	42a0      	cmp	r0, r4
 800db46:	d0e3      	beq.n	800db10 <_malloc_r+0x64>
 800db48:	1a21      	subs	r1, r4, r0
 800db4a:	4630      	mov	r0, r6
 800db4c:	f000 f872 	bl	800dc34 <_sbrk_r>
 800db50:	3001      	adds	r0, #1
 800db52:	d1dd      	bne.n	800db10 <_malloc_r+0x64>
 800db54:	e7cf      	b.n	800daf6 <_malloc_r+0x4a>
 800db56:	bf00      	nop
 800db58:	20004a88 	.word	0x20004a88
 800db5c:	20004a8c 	.word	0x20004a8c

0800db60 <cleanup_glue>:
 800db60:	b538      	push	{r3, r4, r5, lr}
 800db62:	460c      	mov	r4, r1
 800db64:	6809      	ldr	r1, [r1, #0]
 800db66:	4605      	mov	r5, r0
 800db68:	b109      	cbz	r1, 800db6e <cleanup_glue+0xe>
 800db6a:	f7ff fff9 	bl	800db60 <cleanup_glue>
 800db6e:	4621      	mov	r1, r4
 800db70:	4628      	mov	r0, r5
 800db72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db76:	f7ff bf49 	b.w	800da0c <_free_r>
	...

0800db7c <_reclaim_reent>:
 800db7c:	4b2c      	ldr	r3, [pc, #176]	; (800dc30 <_reclaim_reent+0xb4>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	4283      	cmp	r3, r0
 800db82:	b570      	push	{r4, r5, r6, lr}
 800db84:	4604      	mov	r4, r0
 800db86:	d051      	beq.n	800dc2c <_reclaim_reent+0xb0>
 800db88:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800db8a:	b143      	cbz	r3, 800db9e <_reclaim_reent+0x22>
 800db8c:	68db      	ldr	r3, [r3, #12]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d14a      	bne.n	800dc28 <_reclaim_reent+0xac>
 800db92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db94:	6819      	ldr	r1, [r3, #0]
 800db96:	b111      	cbz	r1, 800db9e <_reclaim_reent+0x22>
 800db98:	4620      	mov	r0, r4
 800db9a:	f7ff ff37 	bl	800da0c <_free_r>
 800db9e:	6961      	ldr	r1, [r4, #20]
 800dba0:	b111      	cbz	r1, 800dba8 <_reclaim_reent+0x2c>
 800dba2:	4620      	mov	r0, r4
 800dba4:	f7ff ff32 	bl	800da0c <_free_r>
 800dba8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800dbaa:	b111      	cbz	r1, 800dbb2 <_reclaim_reent+0x36>
 800dbac:	4620      	mov	r0, r4
 800dbae:	f7ff ff2d 	bl	800da0c <_free_r>
 800dbb2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800dbb4:	b111      	cbz	r1, 800dbbc <_reclaim_reent+0x40>
 800dbb6:	4620      	mov	r0, r4
 800dbb8:	f7ff ff28 	bl	800da0c <_free_r>
 800dbbc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800dbbe:	b111      	cbz	r1, 800dbc6 <_reclaim_reent+0x4a>
 800dbc0:	4620      	mov	r0, r4
 800dbc2:	f7ff ff23 	bl	800da0c <_free_r>
 800dbc6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800dbc8:	b111      	cbz	r1, 800dbd0 <_reclaim_reent+0x54>
 800dbca:	4620      	mov	r0, r4
 800dbcc:	f7ff ff1e 	bl	800da0c <_free_r>
 800dbd0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800dbd2:	b111      	cbz	r1, 800dbda <_reclaim_reent+0x5e>
 800dbd4:	4620      	mov	r0, r4
 800dbd6:	f7ff ff19 	bl	800da0c <_free_r>
 800dbda:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800dbdc:	b111      	cbz	r1, 800dbe4 <_reclaim_reent+0x68>
 800dbde:	4620      	mov	r0, r4
 800dbe0:	f7ff ff14 	bl	800da0c <_free_r>
 800dbe4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dbe6:	b111      	cbz	r1, 800dbee <_reclaim_reent+0x72>
 800dbe8:	4620      	mov	r0, r4
 800dbea:	f7ff ff0f 	bl	800da0c <_free_r>
 800dbee:	69a3      	ldr	r3, [r4, #24]
 800dbf0:	b1e3      	cbz	r3, 800dc2c <_reclaim_reent+0xb0>
 800dbf2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dbf4:	4620      	mov	r0, r4
 800dbf6:	4798      	blx	r3
 800dbf8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800dbfa:	b1b9      	cbz	r1, 800dc2c <_reclaim_reent+0xb0>
 800dbfc:	4620      	mov	r0, r4
 800dbfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dc02:	f7ff bfad 	b.w	800db60 <cleanup_glue>
 800dc06:	5949      	ldr	r1, [r1, r5]
 800dc08:	b941      	cbnz	r1, 800dc1c <_reclaim_reent+0xa0>
 800dc0a:	3504      	adds	r5, #4
 800dc0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc0e:	2d80      	cmp	r5, #128	; 0x80
 800dc10:	68d9      	ldr	r1, [r3, #12]
 800dc12:	d1f8      	bne.n	800dc06 <_reclaim_reent+0x8a>
 800dc14:	4620      	mov	r0, r4
 800dc16:	f7ff fef9 	bl	800da0c <_free_r>
 800dc1a:	e7ba      	b.n	800db92 <_reclaim_reent+0x16>
 800dc1c:	680e      	ldr	r6, [r1, #0]
 800dc1e:	4620      	mov	r0, r4
 800dc20:	f7ff fef4 	bl	800da0c <_free_r>
 800dc24:	4631      	mov	r1, r6
 800dc26:	e7ef      	b.n	800dc08 <_reclaim_reent+0x8c>
 800dc28:	2500      	movs	r5, #0
 800dc2a:	e7ef      	b.n	800dc0c <_reclaim_reent+0x90>
 800dc2c:	bd70      	pop	{r4, r5, r6, pc}
 800dc2e:	bf00      	nop
 800dc30:	20000030 	.word	0x20000030

0800dc34 <_sbrk_r>:
 800dc34:	b538      	push	{r3, r4, r5, lr}
 800dc36:	4d06      	ldr	r5, [pc, #24]	; (800dc50 <_sbrk_r+0x1c>)
 800dc38:	2300      	movs	r3, #0
 800dc3a:	4604      	mov	r4, r0
 800dc3c:	4608      	mov	r0, r1
 800dc3e:	602b      	str	r3, [r5, #0]
 800dc40:	f7f3 fa7a 	bl	8001138 <_sbrk>
 800dc44:	1c43      	adds	r3, r0, #1
 800dc46:	d102      	bne.n	800dc4e <_sbrk_r+0x1a>
 800dc48:	682b      	ldr	r3, [r5, #0]
 800dc4a:	b103      	cbz	r3, 800dc4e <_sbrk_r+0x1a>
 800dc4c:	6023      	str	r3, [r4, #0]
 800dc4e:	bd38      	pop	{r3, r4, r5, pc}
 800dc50:	20005658 	.word	0x20005658

0800dc54 <__malloc_lock>:
 800dc54:	4801      	ldr	r0, [pc, #4]	; (800dc5c <__malloc_lock+0x8>)
 800dc56:	f7ff beb1 	b.w	800d9bc <__retarget_lock_acquire_recursive>
 800dc5a:	bf00      	nop
 800dc5c:	20005650 	.word	0x20005650

0800dc60 <__malloc_unlock>:
 800dc60:	4801      	ldr	r0, [pc, #4]	; (800dc68 <__malloc_unlock+0x8>)
 800dc62:	f7ff beac 	b.w	800d9be <__retarget_lock_release_recursive>
 800dc66:	bf00      	nop
 800dc68:	20005650 	.word	0x20005650

0800dc6c <_init>:
 800dc6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc6e:	bf00      	nop
 800dc70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc72:	bc08      	pop	{r3}
 800dc74:	469e      	mov	lr, r3
 800dc76:	4770      	bx	lr

0800dc78 <_fini>:
 800dc78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc7a:	bf00      	nop
 800dc7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc7e:	bc08      	pop	{r3}
 800dc80:	469e      	mov	lr, r3
 800dc82:	4770      	bx	lr
